<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jason's space]]></title>
  <link href="http://qjpcpu.github.io/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2018-07-02T16:42:50+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[利用call实现合约任意调用]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/07/02/li-yong-callshi-xian-he-yue-ren-yi-diao-yong/"/>
    <updated>2018-07-02T13:50:25+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/07/02/li-yong-callshi-xian-he-yue-ren-yi-diao-yong</id>
    <content type="html"><![CDATA[<p>call()是一个底层的接口，用来向一个合约发送消息，也就是说如果你想实现自己的消息传递，可以使用这个函数。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">需求场景</a>    <ul>
      <li><a href="#section-1">业务需求</a></li>
      <li><a href="#section-2">明确需求</a></li>
    </ul>
  </li>
  <li><a href="#section-3">实现关键点</a>    <ul>
      <li><a href="#section-4">调用任意合约</a></li>
      <li><a href="#section-5">权限控制</a></li>
    </ul>
  </li>
  <li><a href="#section-6">实现参考</a>    <ul>
      <li><a href="#section-7">热钱包工厂</a></li>
      <li><a href="#section-8">热钱包合约</a></li>
    </ul>
  </li>
  <li><a href="#section-9">后记</a></li>
</ul>

<h1 id="section">需求场景</h1>

<p>“合约动态调用”的需求场景是什么呢,答案是”热钱包”。为什么是热钱包呢,我们可以从最终需求出发一步步来推导:</p>

<h2 id="section-1">业务需求</h2>

<p>首先,假设一个业务需求，我们现在要做一个ERC721的热钱包，用户可以托管他全部的数字资产给项目方，项目方代表用户对其资产进行任意操作，这样我们可以向用户屏蔽以太坊的细节，大大提升用户体验，只有当用户想要提现资产的时候，才把资产归还到用户的冷钱包地址中去。</p>

<h2 id="section-2">明确需求</h2>

<p>初看这个需求很简单，我们可以为每个用户生成一个私钥从而建立对应地址。每次需要对资产进行操作的时候，读取这个私钥进行链上交互就行了。</p>

<p>好像很完美，但细想下来，在真正生产环境中实践却会有诸多问题: 首先带来的就是管理问题，众多的私钥不容许有一丝数据的丢失损坏，否则就需要承担用户资产的遗失风险; 其次是泄露的风险，私钥的众多更加大了泄露的风险系数，一旦有任何一个私钥泄露，项目方基本上是属于束手无策的，以太坊上可没有账户封禁这一说。</p>

<p>那么，怎么解决这个问题呢？我这里提供的一个解决方案就是利用合约。</p>

<p>我们为每个用户创建的热钱包并不是一个普通钱包地址，而是一个合约。所有的用户的热钱包都统一受控于项目方的管理账户地址,只有管理账户有权操作合约，如果有任何问题，我们只需要更换管理账户就行，不需要更改其他东西。 但利用合约来做热钱包又带来另一个问题，合约能调用的方法在上链之后就无法更改了或新增了，如果我们要对接的某个721藏品后续支持了某个新方法，那么我们的热钱包岂不是不能完成这个调用了？所以，如果使用合约做热钱包，还必须能够实现这个钱包合约能够动态调用其他合约。</p>

<p>归纳一下，这个721热钱包细化下来的技术需求有这样几点需要满足:</p>

<ol>
  <li>管理收敛，所有热钱包管理最好收敛到一个管理账户下</li>
  <li>管理账户能更改</li>
  <li>如果是合约热钱包,这个钱包必须能适配各类标准非标准藏品合约的调用</li>
</ol>

<p>这里对第3点补充说明一下，可能有的读者会疑惑，既然erc721都是标准化的协议，为什么还需要适配各种非标接口呢？原因之一是我们业务需求里已经说了，要能对用户资产进行任意操作，不仅仅限制于基本721的几个API。此外，ERC721的藏品通常都不会只包含721协议里几个基础接口，各个项目方会根据自己的业务研发出诸如繁殖、战斗等等资产操作，一个好的721钱包最好是能适配这些功能。还有，即便是ERC721协议本身，也可能出现变动，比如日前刚确认的721协议的最终版和以CryptoKitty所代表的beta版，协议本身就差别不小。</p>

<h1 id="section-3">实现关键点</h1>

<h2 id="section-4">调用任意合约</h2>

<p>这是本文要讲述的关键点。</p>

<p>其实要实现这个功能,使用<code>call</code>方法就可以了。call调用失败会返回一个调用成功与否的布尔值，需要检查一下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">contract</span> <span class="nx">DynamicCaller</span><span class="p">{</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">dyn_call</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_constract</span><span class="p">,</span> <span class="nx">bytes</span> <span class="nx">_data</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">payable</span><span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">_constract</span><span class="p">.</span><span class="nx">call</span><span class="p">.</span><span class="nx">value</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">value</span><span class="p">)(</span><span class="nx">_data</span><span class="p">)){</span>
</span><span class="line">            <span class="nx">revert</span><span class="p">();</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果<code>DynamicCaller</code>就是我们的热钱包合约，那么这个<code>dyn_call</code>方法就可以实现任意调用，注意这个动态方法最终调用的合约和对应方法都是由参数传递进来；</p>

<p>在ropsten部署这个合约,合约地址是<code>0x5ec567cf2137da526945f4820d0c0621ddcd02ce</code>。现在我们有一份任意合约<code>AnyContract</code>(这里先不以ERC721合约举例，为了阐明任意调用这个点，使用了一个简单合约示例)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">contract</span> <span class="nx">AnyContract</span><span class="p">{</span>
</span><span class="line">    <span class="nx">mapping</span><span class="p">(</span><span class="nx">address</span> <span class="o">=&gt;</span> <span class="nx">uint256</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">numbers</span><span class="p">;</span>
</span><span class="line">    <span class="nx">mapping</span><span class="p">(</span><span class="nx">address</span> <span class="o">=&gt;</span> <span class="nx">string</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">texts</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">uint256</span> <span class="nx">_a</span><span class="p">,</span><span class="nx">uint256</span> <span class="nx">_b</span><span class="p">)</span> <span class="kr">public</span><span class="p">{</span>
</span><span class="line">        <span class="nx">numbers</span><span class="p">[</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">]</span> <span class="o">=</span><span class="nx">_a</span><span class="o">+</span><span class="nx">_b</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">write</span><span class="p">(</span><span class="nx">string</span> <span class="nx">_text</span><span class="p">)</span> <span class="kr">public</span><span class="p">{</span>
</span><span class="line">        <span class="nx">texts</span><span class="p">[</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_text</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">batchWrite</span><span class="p">(</span><span class="nx">uint256</span> <span class="nx">_a</span><span class="p">,</span><span class="nx">uint256</span> <span class="nx">_b</span><span class="p">,</span><span class="nx">string</span> <span class="nx">_text</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">payable</span><span class="p">{</span>
</span><span class="line">        <span class="nx">numbers</span><span class="p">[</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">]</span> <span class="o">=</span><span class="nx">_a</span><span class="o">+</span><span class="nx">_b</span><span class="p">;</span>
</span><span class="line">        <span class="nx">texts</span><span class="p">[</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_text</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">getBalance</span><span class="p">()</span> <span class="kr">public</span> <span class="nx">view</span> <span class="nx">returns</span><span class="p">(</span><span class="nx">uint256</span><span class="p">){</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">address</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">balance</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在我们怎么进行调用呢？我们可以使用<code>github.com/qjpcpu/ethereum/contracts</code>提供的参数打包方法<code>PackArguments</code>生成<code>dyn_call</code>要的数据，比如我们要从<code>DynamicCaller</code>调用<code>AnyContract</code>的add方法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">anyABI</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">contracts</span><span class="p">.</span><span class="nx">ParseABI</span><span class="p">(</span><span class="s">&quot;[{\&quot;constant\&quot;:true,\&quot;inputs\&quot;:[{\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;address\&quot;}],\&quot;name\&quot;:\&quot;texts\&quot;,\&quot;outputs\&quot;:[{\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;string\&quot;}],\&quot;payable\&quot;:false,\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;},{\&quot;constant\&quot;:true,\&quot;inputs\&quot;:[],\&quot;name\&quot;:\&quot;getBalance\&quot;,\&quot;outputs\&quot;:[{\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;}],\&quot;payable\&quot;:false,\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;},{\&quot;constant\&quot;:false,\&quot;inputs\&quot;:[{\&quot;name\&quot;:\&quot;_a\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;},{\&quot;name\&quot;:\&quot;_b\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;}],\&quot;name\&quot;:\&quot;add\&quot;,\&quot;outputs\&quot;:[],\&quot;payable\&quot;:false,\&quot;stateMutability\&quot;:\&quot;nonpayable\&quot;,\&quot;type\&quot;:\&quot;function\&quot;},{\&quot;constant\&quot;:false,\&quot;inputs\&quot;:[{\&quot;name\&quot;:\&quot;_a\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;},{\&quot;name\&quot;:\&quot;_b\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;},{\&quot;name\&quot;:\&quot;_text\&quot;,\&quot;type\&quot;:\&quot;string\&quot;}],\&quot;name\&quot;:\&quot;batchWrite\&quot;,\&quot;outputs\&quot;:[],\&quot;payable\&quot;:true,\&quot;stateMutability\&quot;:\&quot;payable\&quot;,\&quot;type\&quot;:\&quot;function\&quot;},{\&quot;constant\&quot;:true,\&quot;inputs\&quot;:[{\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;address\&quot;}],\&quot;name\&quot;:\&quot;numbers\&quot;,\&quot;outputs\&quot;:[{\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;}],\&quot;payable\&quot;:false,\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;},{\&quot;constant\&quot;:false,\&quot;inputs\&quot;:[{\&quot;name\&quot;:\&quot;_text\&quot;,\&quot;type\&quot;:\&quot;string\&quot;}],\&quot;name\&quot;:\&quot;write\&quot;,\&quot;outputs\&quot;:[],\&quot;payable\&quot;:false,\&quot;stateMutability\&quot;:\&quot;nonpayable\&quot;,\&quot;type\&quot;:\&quot;function\&quot;}]&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">contracts</span><span class="p">.</span><span class="nx">PackArguments</span><span class="p">(</span><span class="nx">anyABI</span><span class="p">,</span> <span class="s">&quot;add&quot;</span><span class="p">,</span> <span class="nx">big</span><span class="p">.</span><span class="nx">NewInt</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">big</span><span class="p">.</span><span class="nx">NewInt</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class="line"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">err</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">builder</span> <span class="o">:=</span> <span class="nx">contracts</span><span class="p">.</span><span class="nx">NewTxOptsBuilderFromPK</span><span class="p">(</span><span class="nx">pk</span><span class="p">)</span>
</span><span class="line"><span class="nx">dc</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">NewDynamicCaller</span><span class="p">(</span><span class="nx">common</span><span class="p">.</span><span class="nx">HexToAddress</span><span class="p">(</span><span class="nx">DynamicCallerAddres</span><span class="p">),</span> <span class="nx">conn</span><span class="p">)</span>
</span><span class="line"><span class="nx">tx</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">dc</span><span class="p">.</span><span class="nx">DynCall</span><span class="p">(</span><span class="nx">builder</span><span class="p">.</span><span class="nx">Get</span><span class="p">(),</span> <span class="nx">common</span><span class="p">.</span><span class="nx">HexToAddress</span><span class="p">(</span><span class="s">&quot;0x2f44fc640F9708FD969620466F9eddD21859e8E9&quot;</span><span class="p">),</span> <span class="nx">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>完整代码示例参考<a href="https://github.com/qjpcpu/dynamic-caller">dynamic-caller</a></p>

<h2 id="section-5">权限控制</h2>

<p>对于热钱包创建合约,需要能更改管理账户,并且<code>dyn_call</code>这个函数只有管理账户能够调用,这个继承<code>Ownable</code>合约就可能办到了。</p>

<p>对于热钱包合约本身,除了提现操作，所有方法调用必须来自管理合约。</p>

<h1 id="section-6">实现参考</h1>

<h2 id="section-7">热钱包工厂</h2>

<p>热钱包工厂唯一作用就是创建热并记录用户的热钱包，唯一需要注意的就是控制权的管理</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">contract</span> <span class="nx">Ownable</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">address</span> <span class="kr">public</span> <span class="nx">owner</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="nx">constructor</span><span class="p">()</span> <span class="kr">public</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">owner</span> <span class="o">=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">modifier</span> <span class="nx">onlyOwner</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span> <span class="o">==</span> <span class="nx">owner</span><span class="p">);</span>
</span><span class="line">        <span class="nx">_</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">transferOwnership</span><span class="p">(</span><span class="nx">address</span> <span class="nx">newOwner</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">onlyOwner</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="nx">newOwner</span> <span class="o">!=</span> <span class="nx">address</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">owner</span> <span class="o">=</span> <span class="nx">newOwner</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">getOwner</span><span class="p">()</span> <span class="kr">public</span> <span class="nx">view</span> <span class="nx">returns</span><span class="p">(</span><span class="nx">address</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">owner</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">contract</span> <span class="nx">WalletFactory</span> <span class="nx">is</span> <span class="nx">Ownable</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 记录用户热钱包地址</span>
</span><span class="line">    <span class="nx">mapping</span><span class="p">(</span><span class="nx">address</span> <span class="o">=&gt;</span> <span class="nx">address</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">hotwallets</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 仅管理员owner可以创建热钱包</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">createWallet</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_owner</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">onlyOwner</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// 每个用户仅有一个热钱包</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">hotwallets</span><span class="p">[</span><span class="nx">_owner</span><span class="p">]</span> <span class="o">==</span> <span class="nx">address</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class="line">        <span class="nx">HotWallet</span> <span class="nx">w</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HotWallet</span><span class="p">(</span><span class="nx">address</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="nx">_owner</span><span class="p">);</span>
</span><span class="line">        <span class="nx">hotwallets</span><span class="p">[</span><span class="nx">_owner</span><span class="p">]</span> <span class="o">=</span> <span class="nx">address</span><span class="p">(</span><span class="nx">w</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">isWalletFactory</span><span class="p">()</span> <span class="nx">external</span> <span class="nx">pure</span> <span class="nx">returns</span><span class="p">(</span><span class="nx">bool</span><span class="p">){</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其实，在实际应用中,这里还潜藏了一个问题: 比如通常的产品逻辑会在用户注册完成时就生成热钱包备用,但这个以太坊交易被打包最快可能也要15秒左右，如果我们要在用户注册完成就显示用户热钱包地址好像是不可能的。实际上呢？交易打包确认确实要很长时间,但是我们却可以提前获知热钱包的地址:</p>

<p>以太坊中合约地址的生成规则是这样的:根据<code>(msg.sender + nonce)</code>二元组的hash来生成合约地址的,这个生成算法很简单,有兴趣可以查阅源码<code>crypto</code>包。</p>

<p>举个例子,加入<code>WalletFactory</code>这个合约地址是<code>0x5ec567cf2137da526945f4820d0c0621ddcd02ce</code>,那么第一次调用<code>createWallet</code>时nonce肯定是1，则对应生成的<code>HotWallet</code>地址可以这样算出: <code>addr := crypto.CreateAddress(common.HexToAddress("0x5ec567cf2137da526945f4820d0c0621ddcd02ce"), 1) // 热钱包地址是:0xE139cd3E5FcC127A54B0fF8687c703265E282842</code></p>

<h2 id="section-8">热钱包合约</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">contract</span> <span class="nx">HotWallet</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">address</span> <span class="kr">public</span> <span class="nx">owner</span><span class="p">;</span>
</span><span class="line">    <span class="nx">WalletFactory</span> <span class="kr">public</span> <span class="nx">factory</span><span class="p">;</span>
</span><span class="line">    <span class="c1">// 这里的owner是热钱包所属用户</span>
</span><span class="line">    <span class="nx">modifier</span> <span class="nx">onlyOwner</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span> <span class="o">==</span> <span class="nx">owner</span><span class="p">);</span>
</span><span class="line">        <span class="nx">_</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">// 保证动态方法的调用者一定是管理员</span>
</span><span class="line">    <span class="nx">modifier</span> <span class="nx">onlyAdmin</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span> <span class="o">==</span> <span class="nx">factory</span><span class="p">.</span><span class="nx">getOwner</span><span class="p">());</span>
</span><span class="line">        <span class="nx">_</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">constructor</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_admin</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">_owner</span><span class="p">)</span> <span class="kr">public</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">_admin</span> <span class="o">!=</span> <span class="nx">address</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">_owner</span> <span class="o">!=</span> <span class="nx">address</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class="line">        <span class="nx">factory</span> <span class="o">=</span> <span class="nx">WalletFactory</span><span class="p">(</span><span class="nx">_admin</span><span class="p">);</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">factory</span><span class="p">.</span><span class="nx">isWalletFactory</span><span class="p">());</span>
</span><span class="line">        <span class="nx">owner</span> <span class="o">=</span> <span class="nx">_owner</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">isHotWallet</span><span class="p">()</span> <span class="nx">external</span> <span class="nx">pure</span> <span class="nx">returns</span><span class="p">(</span><span class="nx">bool</span><span class="p">){</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// the msg.sender must be factory.owner</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">dyn_call</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_constract</span><span class="p">,</span> <span class="nx">bytes</span> <span class="nx">_data</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">payable</span> <span class="nx">onlyAdmin</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">_constract</span><span class="p">.</span><span class="nx">call</span><span class="p">.</span><span class="nx">value</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">value</span><span class="p">)(</span><span class="nx">_data</span><span class="p">)){</span>
</span><span class="line">            <span class="nx">revert</span><span class="p">();</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 能提现eth</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">withdraw</span><span class="p">()</span> <span class="nx">external</span> <span class="nx">onlyOwner</span><span class="p">{</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">owner</span> <span class="o">!=</span> <span class="nx">address</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class="line">        <span class="nx">owner</span><span class="p">.</span><span class="nx">transfer</span><span class="p">(</span><span class="nx">address</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">balance</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 很多场景下都需要能接受eth转账</span>
</span><span class="line">    <span class="kd">function</span><span class="p">()</span> <span class="kr">public</span> <span class="nx">payable</span><span class="p">{}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// other functions</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="https://github.com/qjpcpu/dynamic-caller/blob/master/wallets.sol">完整合约代码</a></p>

<h1 id="section-9">后记</h1>

<p>要完成个业务特定热钱包,可以在这个基础上修改HotWallet代码即可,比如数字资产的提现等等,但要特别注意: <code>call</code>方法是一个非常底层方法，为了合约安全，该方法不应该接受直接来自用户的数据。</p>

<p>此外,我观察到一些交易所给用户分配的以太热钱包地址也是一份用户独立的合约而不是普通地址,所以我猜想他们可能也是为了业务灵活性和管理性才这样做的，不过是不是使用call来实现，就不得而知了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样实现以太坊交易可靠提交]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/06/14/zen-yang-shi-xian-yi-tai-fang-jiao-yi-ke-kao-ti-jiao/"/>
    <updated>2018-06-14T14:54:01+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/06/14/zen-yang-shi-xian-yi-tai-fang-jiao-yi-ke-kao-ti-jiao</id>
    <content type="html"><![CDATA[<p>在真实环境下的以太坊Dapp开发,是一定涉及到链上链下逻辑的交互的。那么开发者可能会遇到这样一种场景,当用户使用metamask签名交易并提交后,Dapp的中心服务端需要拿到这个交易ID,并跟踪这个交易的执行,甚至会根据这笔交易去触发后端逻辑(当然使用event可以一定程度避开这个问题,但这种回避式的解决方案不在此讨论)，但现实情况往往是令人痛苦的，因为很可能会因为种种原因，我们无法取到metamask的回调，导致开发者因此”丢失”掉这笔交易。</p>

<p>那么，如果我们要直面这个问题，要怎么样实现交易可靠提交呢？</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">提炼问题</a>    <ul>
      <li><a href="#metamask">1. 最显而易见,metamask能够提供可靠回调</a></li>
      <li><a href="#metamask-1">2. metamask将交易签名和发送拆分开来</a></li>
      <li><a href="#section-1">3. 弄脏手自己做</a></li>
    </ul>
  </li>
  <li><a href="#section-2">关键实现</a>    <ul>
      <li><a href="#section-3">1.前端获取裸交易数据</a></li>
      <li><a href="#hash">2.后端计算裸交易hash</a></li>
      <li><a href="#metamask-2">3.前端唤起metamask签名</a></li>
      <li><a href="#section-4">4.后端发送交易</a></li>
    </ul>
  </li>
  <li><a href="#section-5">反思</a>    <ul>
      <li><a href="#section-6">1.安全性</a></li>
      <li><a href="#section-7">2.用户体验</a></li>
      <li><a href="#section-8">3.时效性</a></li>
    </ul>
  </li>
</ul>

<h1 id="section">提炼问题</h1>

<p>首先，我再次描述下问题的发生场景: 在metamask环境下，我们需要拿到用户提交的交易来触发后续中心化逻辑，但是在现实情况下很可能拿不到这个回调交易ID.</p>

<p>看起来，问题的核心并不是交易可靠提交，而是可靠地拿到交易提交的回调。那么解决问题，就有两种思路:</p>

<h5 id="metamask">1. 最显而易见,metamask能够提供可靠回调</h5>

<p>这个解决方案最无痛，然而完全依赖于metamask团队的开发意愿。所幸的是metamask团队在接收开发者的反馈后，有意愿往这方面努力。但开发时间不确定，甚至于我认为，在浏览器环境下，可能无法完美解决。所以短期内，这个方向是无法在生产环境实施的。</p>

<h5 id="metamask-1">2. metamask将交易签名和发送拆分开来</h5>

<p>如果没做过以太坊Dapp开发，可能不清楚metamask提交交易其实是串行执行了两步操作： 一.先对交易裸数据签名，得到签名后的交易,二.将签名后的交易提交到以太坊。</p>

<p>实际上，在metamask完成第一步签名后，这个交易就已经是一笔以太坊合法交易了，任何一个以太坊节点都可以拿着这笔交易进行全网广播，要求矿工打包。试想，如果metamsk将这两个操作拆分开来，那么开发者就可以要求metamask先对裸交易签名，然后客户端将这笔交易发送给服务端，让服务端向以太坊节点提交交易，这样应用开发者就能够使用各种传统手段保证交易提交，并且能够实施后续各种中心化逻辑了。</p>

<p>看似很美好，然而metamask目前不提供这样的接口。虽然web3js已经有这样的接口，但metamask并没有对接。不过前景还是可以期望的,metamask团队表示已经会进行操作拆分，将来可以这样做。详细可以参考<a href="https://github.com/MetaMask/metamask-extension/issues/3475">Issue#3475</a>.</p>

<h5 id="section-1">3. 弄脏手自己做</h5>

<p>既然靠不了别人，就自己来解决。这第3种解决方案，其实和第二种思路是一样的，只是达到这个目的有些纠结。</p>

<p>首先，metamsk支持web3js一个比较原始的签名方法<code>web3.eth.sign</code>,他是对一段数据进行以太坊签名，看起来可以满足我们的需求，不过为了使用这个方法我们还需要做很多工作。</p>

<p>该方法输入是交易的hash，但web3并没有提供从裸交易数据计算hash的方法，所以我选择让前端提交裸交易数据到服务端，服务端计算出hash值返还给前端;</p>

<p>前端拿到这个交易hash后，就可以调用<code>web3.eth.sign</code>唤起metamask签名，然后将签名字段和裸交易数据再次发送给服务端，服务端负责验证签名并且将交易和签名拼装好后发送到以太坊。</p>

<h1 id="section-2">关键实现</h1>

<h2 id="section-3">1.前端获取裸交易数据</h2>

<p>前端直面用户，可以拿到裸交易全部数据</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">    from: "0x...",
</span><span class="line">    to: "0x....",
</span><span class="line">    value: "0x...",
</span><span class="line">    gas: 10000,
</span><span class="line">    gasPrice: 21000,
</span><span class="line">    data: "0x...",
</span><span class="line">    nonce: "0x..."
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="hash">2.后端计算裸交易hash</h2>

<p>后端拿到前端的裸交易json，可以很容易计算出交易hash，下面给出计算的golang代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">tx</span> <span class="o">:=</span> <span class="nx">types</span><span class="p">.</span><span class="nx">NewTransaction</span><span class="p">(</span><span class="o">...</span><span class="p">.)</span>
</span><span class="line"><span class="nx">hash</span> <span class="o">:=</span> <span class="nx">types</span><span class="p">.</span><span class="nx">HomesteadSigner</span><span class="p">{}.</span><span class="nx">Hash</span><span class="p">(</span><span class="nx">tx</span><span class="p">).</span><span class="nx">Hex</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后将计算出的hash返回给前端</p>

<h2 id="metamask-2">3.前端唤起metamask签名</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 第一个参数是返回的交易hash</span>
</span><span class="line"><span class="c1">// 第二个参数是用户地址</span>
</span><span class="line"><span class="nx">web3</span><span class="p">.</span><span class="nx">eth</span><span class="p">.</span><span class="nx">sign</span><span class="p">(</span><span class="s2">&quot;0x...&quot;</span><span class="p">,</span> <span class="s2">&quot;0x...&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里将唤起metamask.</p>

<h2 id="section-4">4.后端发送交易</h2>

<p>前端将裸交易数据和第3步得到的签名发送给后端，后端验证签名并发送到以太坊,关键go代码如下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">sign</span> <span class="o">:=</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Hex2Bytes</span><span class="p">(</span><span class="nx">txSign</span><span class="p">)</span>
</span><span class="line"><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">sign</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">65</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;bad sign&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">if</span> <span class="nx">sign</span><span class="p">[</span><span class="mi">64</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">27</span> <span class="o">&amp;&amp;</span> <span class="nx">sign</span><span class="p">[</span><span class="mi">64</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">28</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;invalid Ethereum signature (V is not 27 or 28)&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">sign</span><span class="p">[</span><span class="mi">64</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">27</span>
</span><span class="line"><span class="nx">signer</span> <span class="o">:=</span> <span class="nx">types</span><span class="p">.</span><span class="nx">HomesteadSigner</span><span class="p">{}</span>
</span><span class="line"><span class="nx">signedTx</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">WithSignature</span><span class="p">(</span><span class="nx">signer</span><span class="p">,</span> <span class="nx">sign</span><span class="p">)</span>
</span><span class="line"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">ethConn</span><span class="p">.</span><span class="nx">SendTransaction</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Background</span><span class="p">(),</span> <span class="nx">signedTx</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-5">反思</h1>

<p>看起来，上面的技术方案好像完美解决了问题，实则不然，这只是当前环境下的较优方案罢了，并且这个方案还是存在诸多问题:</p>

<h2 id="section-6">1.安全性</h2>

<p>这是最大的问题,因为调用<code>web3.eth.sign</code>进行数据签名时，metamask无法展示签名的数据，所以用户根本不了解他到底是在对什么授权签名。这是非常可怕的，这可能被骇客利用，让用户对一笔转出自己账户所有余额的交易进行签名，导致资金盗窃。</p>

<h2 id="section-7">2.用户体验</h2>

<p>还是因为签名的方法，metamask在签名时会展示一段红色警告，导致用户体验下降。</p>

<h2 id="section-8">3.时效性</h2>

<p>因为这个安全原因，metamask团队将来也许会放弃对这个方法的支持，不过我倒是觉得，保留对这个方法的支持，将签名数据做详细展示，让开发者自己做安全性的权衡。</p>

<p>最后聊一点感想吧，目前区块链上簇拥了太多投机者，真正致力于深耕技术的人不多，metamask团队算一个，区块链是个有意思的技术，因为它的技术背后，隐含了人类社会化的意识，它目前的基础组件都还不够完善，需要我们热爱技术的所有人，去投入，去发展。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那些以太坊DApp服务端开发期望已久的轮子]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/05/16/na-xie-yi-tai-fang-dappfu-wu-duan-kai-fa-qi-wang-yi-jiu-de-lun-zi/"/>
    <updated>2018-05-16T17:20:33+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/05/16/na-xie-yi-tai-fang-dappfu-wu-duan-kai-fa-qi-wang-yi-jiu-de-lun-zi</id>
    <content type="html"><![CDATA[<p>以太坊虽说是一个去中心化的东西,但DApp却并非是完全去中心化的应用,其主要原因不外乎是以太坊的处理能力和资源有限,无法承载一个完整应用全部的逻辑。所以，目前市面上所有的DApp应用都是需要中心化服务解释的。那么，本文就是列举一些可能会用到的轮子,帮助快速构建应用。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#nonce">nonce管理</a></li>
  <li><a href="#section">交易重发</a></li>
  <li><a href="#section-1">交易备注</a>    <ul>
      <li><a href="#eth">裸交易(仅发送eth的交易)</a></li>
      <li><a href="#section-2">合约调用交易</a></li>
    </ul>
  </li>
  <li><a href="#section-3">事件扫描器</a></li>
  <li><a href="#section-4">登录</a></li>
  <li><a href="#section-5">其他</a></li>
  <li><a href="#qjpcpuethereumhttpsgithubcomqjpcpuethereum"><a href="https://github.com/qjpcpu/ethereum">代码地址qjpcpu/ethereum</a></a></li>
</ul>

<h1 id="nonce">nonce管理</h1>

<p>重要的放在前面,nonce管理应该是所有以太坊开发者遇到的第一个问题。nonce类似于账户的自增主键,必须连续提交,如果每次都使用<code>pending nonce</code>自动提交交易,就会造成之前交易被丢弃,除非你想要替换原交易，否则这可能不是我们期望的结果。</p>

<p><code>github.com/qjpcpu/ethereum/ethnonce</code>包将nonce存储在redis中,使用类似事务的方式申请、使用nonce。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">TestWrap</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">mgr</span> <span class="o">:=</span> <span class="nx">_testinit</span><span class="p">()</span>
</span><span class="line">	<span class="nx">addr</span> <span class="o">:=</span> <span class="nx">common</span><span class="p">.</span><span class="nx">HexToAddress</span><span class="p">(</span><span class="s">`0xe35f3e2a93322b61e5d8931f806ff38f4a4f4d88`</span><span class="p">)</span>
</span><span class="line">    <span class="nx">mgr</span><span class="p">.</span><span class="nx">SyncNonce</span><span class="p">(</span><span class="nx">addr</span><span class="p">)</span>  <span class="c1">// 注意,该方法仅在程序第一次运行做初始化时需要调用,或者nonce发生不一致时调用</span>
</span><span class="line">	<span class="nx">tx</span><span class="p">,</span><span class="nx">err</span><span class="o">:=</span><span class="nx">mgr</span><span class="p">.</span><span class="nx">GiveNonceForTx</span><span class="p">(</span><span class="nx">addr</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">nonce</span> <span class="kt">uint64</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// 向以太坊提交交易</span>
</span><span class="line">        <span class="c1">// 使用nonce manager注入的nonce进行交易提交</span>
</span><span class="line">		<span class="k">return</span> <span class="nb">new</span><span class="p">(</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">),</span> <span class="kc">nil</span>
</span><span class="line">	<span class="p">})</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span><span class="o">!=</span><span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">t</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">    <span class="nx">t</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="nx">tx</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>P.S. 该包基于redis lua脚本,实现nonce的原子读写,可适用于多协程并行操作。</p>

<h1 id="section">交易重发</h1>

<p>对于要做以太坊交易的可靠提交,我相信交易重发绝对是DApp后端程序员的痛点需求。通常,在以太坊拥堵的时候,常常提交的交易会发生”丢失”,以太坊浏览器上搜索这笔交易会被提示: <code>Sorry, we are unable to locate this Transaction Hash</code>。发生这种情况主要有两个可能: 1.用户给的gas太低,导致交易长时间挂在pending队列不能打包进区块 2. 网络环境恶劣,导致投放的节点丢弃交易(网络环境恶劣只是诱因,其真实的丢包原因是及其复杂的)</p>

<p><code>github.com/qjpcpu/ethereum/contracts</code>提交交易重发的函数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">ResendTransaction</span><span class="p">(</span><span class="nx">conn</span> <span class="o">*</span><span class="nx">ethclient</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">tx</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">,</span> <span class="nx">signerFunc</span> <span class="nx">bind</span><span class="p">.</span><span class="nx">SignerFn</span><span class="p">,</span> <span class="nx">nonce</span> <span class="kt">uint64</span><span class="p">,</span> <span class="nx">gasPrice</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>conn, eth client</li>
  <li>tx, 需要重发的交易</li>
  <li>signerFunc, 交易签名函数</li>
  <li>nonce, 可选参数,为0表示将交易重发为全新的交易,非0表示替换之前未被打包的交易</li>
  <li>gasPrice,可选参数,为nil表示自动选择合适的price</li>
</ul>

<p>返回值为重发的新交易数据结构。</p>

<p>通常的使用场景是:</p>

<ol>
  <li>发送交易,并将返回的交易tx marshal为json存储到数据库</li>
  <li>定时检查交易是否成功打包</li>
  <li>超过超时时间后,调用ResendTransaction重发交易，再进入第1步循环</li>
</ol>

<p>结合第一步<code>ethnonce</code>包管理nonce,可以比较完美实现以太坊可靠交易提交。</p>

<p>简单的代码示例:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">signerFunc</span> <span class="o">:=</span> <span class="nx">contracts</span><span class="p">.</span><span class="nx">SignerFuncOf</span><span class="p">(</span><span class="nx">keyJson</span><span class="p">,</span> <span class="nx">keyPwd</span><span class="p">)</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">oldTx</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span> <span class="p">=</span> <span class="nx">getLastTxFromDB</span><span class="p">()</span>
</span><span class="line"><span class="nx">contracts</span><span class="p">.</span><span class="nx">ResendTransaction</span><span class="p">(</span><span class="nx">conn</span><span class="p">,</span> <span class="nx">oldTx</span><span class="p">,</span> <span class="nx">signerFunc</span><span class="p">,</span> <span class="nx">oldTx</span><span class="p">.</span><span class="nx">Nonce</span><span class="p">(),</span> <span class="kc">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-1">交易备注</h1>

<p>交易备注其实就是在交易<code>data</code>字段附加一些额外的数据,前端时间有人收费在以太坊永久”刻字”其实就是干的这个事情。那么，抛开这个噱头不说,正常开发中怎么会有这个需求呢?</p>

<p>比如,我们要基于以太坊做一个区块链商品抢购,前端在提交了交易后拿到<code>metafox</code>回调后,才能通知到后端是抢购的哪个商品,但是很多时候<code>metafox</code>的回调并不可靠,那其实就可以使用交易备注,等后端收到这个交易的event log后,再去查询交易的备注信息就知道了是哪个商品。</p>

<p>相关辅助方法还是在<code>github.com/qjpcpu/ethereum/contracts</code>包中,目前交易备注有两种场景</p>

<h2 id="eth">裸交易(仅发送eth的交易)</h2>

<p>有两个生成交易数据的辅助方法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// 备注字符串</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">PackString</span><span class="p">(</span><span class="nx">str</span> <span class="kt">string</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span>
</span><span class="line"><span class="c1">// 备注一个数字</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">PackNum</span><span class="p">(</span><span class="nx">num</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">合约调用交易</h2>

<p>也有两个辅助方法,他们均是将备注信息放置在合约方法参数最后:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">PackArgumentsWithNumber</span><span class="p">(</span><span class="nx">_abi</span> <span class="nx">abi</span><span class="p">.</span><span class="nx">ABI</span><span class="p">,</span> <span class="nx">method</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">params</span> <span class="o">...</span><span class="kd">interface</span><span class="p">{})</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">PackArgumentsWithString</span><span class="p">(</span><span class="nx">_abi</span> <span class="nx">abi</span><span class="p">.</span><span class="nx">ABI</span><span class="p">,</span> <span class="nx">method</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">params</span> <span class="o">...</span><span class="kd">interface</span><span class="p">{})</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后调用发送<code>raw</code>交易的方法提交:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">SendRawTransaction</span><span class="p">(</span><span class="nx">conn</span> <span class="o">*</span><span class="nx">ethclient</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">from</span><span class="p">,</span> <span class="nx">to</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Address</span><span class="p">,</span> <span class="nx">value</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">,</span> <span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">signerFunc</span> <span class="nx">bind</span><span class="p">.</span><span class="nx">SignerFn</span><span class="p">,</span> <span class="nx">nonce</span> <span class="kt">uint64</span><span class="p">,</span> <span class="nx">gasPrice</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">,</span> <span class="nx">gasLimit</span> <span class="kt">uint64</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>简单的代码示例(不可直接运行):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">mgr</span> <span class="o">:=</span> <span class="nx">GetNonceManager</span><span class="p">()</span>
</span><span class="line"><span class="nx">_abi</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">contracts</span><span class="p">.</span><span class="nx">ParseABI</span><span class="p">(</span><span class="nx">myABI</span><span class="p">)</span>
</span><span class="line"><span class="nx">signer</span> <span class="o">:=</span> <span class="nx">contracts</span><span class="p">.</span><span class="nx">SignerFuncOf</span><span class="p">(</span><span class="nx">keyjson</span><span class="p">,</span> <span class="nx">keypwd</span><span class="p">)</span>
</span><span class="line"><span class="nx">tx</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mgr</span><span class="p">.</span><span class="nx">GiveNonceForTx</span><span class="p">(</span><span class="nx">from_addr</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">nonce</span> <span class="kt">uint64</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 该合约方法function_name只有一个number参数,后面额外的参数2是备注</span>
</span><span class="line">	<span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">contracts</span><span class="p">.</span><span class="nx">PackArgumentsWithNumber</span><span class="p">(</span><span class="nx">_abi</span><span class="p">,</span> <span class="s">&quot;function_name&quot;</span><span class="p">,</span> <span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">contracts</span><span class="p">.</span><span class="nx">SendRawTransaction</span><span class="p">(</span><span class="nx">conf</span><span class="p">.</span><span class="nx">EthConn</span><span class="p">(),</span> <span class="nx">from_addr</span><span class="p">,</span> <span class="nx">getContractAddress</span><span class="p">(),</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">signer</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-3">事件扫描器</h1>

<p>扫描某个/某些事件并更改中心化服务器数据状态,这个需求很常见,直接上代码.</p>

<p>举个例子,扫描 <code>CryptoKitties</code> 的怀孕事件:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/common&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/ethclient&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/qjpcpu/ethereum/events&quot;</span>
</span><span class="line">	<span class="s">&quot;os&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ethclient</span><span class="p">.</span><span class="nx">Dial</span><span class="p">(</span><span class="s">&quot;https://api.myetherapi.com/eth&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">dataCh</span><span class="p">,</span> <span class="nx">errCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">events</span><span class="p">.</span><span class="nx">Event</span><span class="p">,</span> <span class="mi">1000</span><span class="p">),</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">error</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="nx">b</span> <span class="o">:=</span> <span class="nx">events</span><span class="p">.</span><span class="nx">NewScanBuilder</span><span class="p">()</span>
</span><span class="line">	<span class="nx">rep</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">SetClient</span><span class="p">(</span><span class="nx">conn</span><span class="p">).</span>
</span><span class="line">		<span class="nx">SetContract</span><span class="p">(</span><span class="nx">common</span><span class="p">.</span><span class="nx">HexToAddress</span><span class="p">(</span><span class="s">`0x06012c8cf97BEaD5deAe237070F9587f8E7A266d`</span><span class="p">),</span><span class="nx">abi_text</span><span class="p">,</span><span class="s">&quot;Pregnant&quot;</span><span class="p">).</span>
</span><span class="line">		<span class="nx">SetFrom</span><span class="p">(</span><span class="mi">5547829</span><span class="p">).</span>
</span><span class="line">		<span class="nx">SetGracefullExit</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span>
</span><span class="line">		<span class="nx">BuildAndRun</span><span class="p">(</span><span class="nx">dataCh</span><span class="p">,</span> <span class="nx">errCh</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">done</span> <span class="o">:=</span> <span class="nx">rep</span><span class="p">.</span><span class="nx">WaitChan</span><span class="p">()</span>
</span><span class="line">		<span class="k">for</span> <span class="p">{</span>
</span><span class="line">			<span class="k">select</span> <span class="p">{</span>
</span><span class="line">			<span class="k">case</span> <span class="nx">data</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">dataCh</span><span class="p">:</span>
</span><span class="line">				<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s\n&quot;</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">String</span><span class="p">())</span>
</span><span class="line">			<span class="k">case</span> <span class="nx">err1</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">errCh</span><span class="p">:</span>
</span><span class="line">				<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;error:&quot;</span><span class="p">,</span> <span class="nx">err1</span><span class="p">)</span>
</span><span class="line">			<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">done</span><span class="p">:</span>
</span><span class="line">				<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;EXIT&quot;</span><span class="p">)</span>
</span><span class="line">				<span class="k">return</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">}()</span>
</span><span class="line">
</span><span class="line">	<span class="nx">rep</span><span class="p">.</span><span class="nx">Wait</span><span class="p">()</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-4">登录</h1>

<p>以太坊登录其实就是签名和验签.</p>

<p>代码位于包<code>github.com/qjpcpu/ethereum/key</code></p>

<p>示例:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">key</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">    <span class="nx">crand</span> <span class="s">&quot;crypto/rand&quot;</span>
</span><span class="line">    <span class="s">&quot;github.com/ethereum/go-ethereum/common/hexutil&quot;</span>
</span><span class="line">    <span class="s">&quot;github.com/ethereum/go-ethereum/crypto&quot;</span>
</span><span class="line">    <span class="s">&quot;testing&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">TestSignature</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">pk</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">newKey</span><span class="p">(</span><span class="nx">crand</span><span class="p">.</span><span class="nx">Reader</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">t</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="nx">msg</span> <span class="o">:=</span> <span class="s">&quot;JasonGeek&quot;</span>
</span><span class="line">    <span class="nx">sign</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Sign</span><span class="p">(</span><span class="nx">pk</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">msg</span><span class="p">))</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">t</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="nx">from</span> <span class="o">:=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">PubkeyToAddress</span><span class="p">(</span><span class="nx">pk</span><span class="p">.</span><span class="nx">PublicKey</span><span class="p">).</span><span class="nx">Hex</span><span class="p">()</span>
</span><span class="line">    <span class="nx">signHex</span> <span class="o">:=</span> <span class="nx">hexutil</span><span class="p">.</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">sign</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">VerifySign</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">signHex</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">msg</span><span class="p">));</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">t</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-5">其他</h1>

<p>其他辅助小方法,可能痛点不是那么强烈,我简单列举,有需要的自行参看代码 <a href="https://github.com/qjpcpu/ethereum">qjpcpu/ethereum</a></p>

<ul>
  <li>获取合约From自段 <code>func (tx *TransactionWithExtra) From() common.Address</code></li>
  <li>合约是否执行成功 <code>func (tx *TransactionWithExtra) IsSuccess(conn *ethclient.Client) (bool, error)</code></li>
  <li>某个地址是否是个合约 <code>func IsContract(conn *ethclient.Client, hexAddr string) bool</code></li>
  <li>交易构造builder <code>func NewTxOptsBuilder(keyJson, keyPwd string) *TxOptsBuilder</code></li>
  <li>等待交易完成 <code>func WaitTxDone(conn *ethclient.Client, txhash common.Hash, timeout ...time.Duration) error</code></li>
  <li>根据keystore私钥生成签名方法 <code>func SignerFuncOf(keyJson, keyPasswd string) bind.SignerFn</code></li>
  <li>直接发送ETH <code>func TransferETH(conn *ethclient.Client, from, to common.Address, amount *big.Int, signerFunc bind.SignerFn, nonce uint64, gasPrice *big.Int, notes ...string) (*types.Transaction, error)</code></li>
  <li>私钥导入导出 <code>key</code>包</li>
</ul>

<h1 id="qjpcpuethereumhttpsgithubcomqjpcpuethereum"><a href="https://github.com/qjpcpu/ethereum">代码地址qjpcpu/ethereum</a></h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ethereum-solidity的坑]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/04/02/ethereum-solidityde-keng/"/>
    <updated>2018-04-02T10:54:43+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/04/02/ethereum-solidityde-keng</id>
    <content type="html"><![CDATA[<p>以太坊合约的坑.</p>

<!-- more -->

<h1 id="section">被意外更改的合约变量</h1>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">pragma</span> <span class="nx">solidity</span> <span class="o">^</span><span class="mf">0.4</span><span class="p">.</span><span class="mi">11</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">contract</span> <span class="nx">Test</span><span class="p">{</span>
</span><span class="line">    <span class="nx">address</span> <span class="kr">public</span> <span class="nx">a</span><span class="p">;</span>
</span><span class="line">    <span class="nx">address</span> <span class="kr">public</span> <span class="nx">b</span><span class="p">;</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">Test</span><span class="p">()</span> <span class="kr">public</span><span class="p">{</span>
</span><span class="line">        <span class="nx">a</span><span class="o">=</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">;</span>
</span><span class="line">        <span class="nx">b</span><span class="o">=</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">;</span>
</span><span class="line">        <span class="nx">uint256</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="nx">g</span><span class="o">=</span><span class="p">[</span><span class="nx">uint256</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="nx">uint256</span><span class="p">(</span><span class="mi">0</span><span class="p">)];</span>
</span><span class="line">        <span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">uint256</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果<code>msg.sender</code>是 <code>0xca35b7d915458ef540ade6068dfe2f44e8fa733c</code>,那么想象中的合约变量<code>a,b</code>都应该是这个值,但是结果却是:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// a: address: 0xffffffffffffffffffffffffffffffffffffffff</span>
</span><span class="line"><span class="c1">// b: address: 0xca35b7d915458ef540ade6068dfe2f44e8fa733c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看出<code>a</code>变成了 <code>g[0]</code>的值。 这是因为solidity对于这个未初始化的数组时,把它指向了合约变量地址,所以修改 <code>g[0]</code>就相当于修改了 <code>a</code>,读者可以试试修改 <code>g[1]</code>实际是修改了 <code>b</code>.</p>

<p>解决办法是将数组改成<code>memory</code>,防止他变成<code>storage</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">uint256</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="nx">memory</span> <span class="nx">g</span> <span class="o">=</span> <span class="p">[</span><span class="nx">uint256</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="nx">uint256</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[以太坊合约开发中那些危险的坑]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/03/18/yi-tai-fang-he-yue-kai-fa-zhong-na-xie-wei-xian-de-keng/"/>
    <updated>2018-03-18T16:29:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/03/18/yi-tai-fang-he-yue-kai-fa-zhong-na-xie-wei-xian-de-keng</id>
    <content type="html"><![CDATA[<p>列举合约开发中那些危险的操作.</p>

<!-- more -->

<p><a href="https://github.com/ConsenSys/smart-contract-best-practices/blob/master/README-zh.md">以太坊智能合约 —— 最佳安全开发指南</a></p>

<p><a href="http://me.tryblockchain.org/blockchain-solidity-fallback.html">Solidity的fallback函数</a></p>

<p><a href="http://me.tryblockchain.org/Solidity-call-callcode-delegatecall.html">深入浅出Solidity call相关函数</a></p>

<p><a href="http://me.tryblockchain.org/blockchain-solidity-send-ether-bestpractice.html">Solidity发送ether最佳实践</a></p>

<p><a href="http://solidity.readthedocs.io/en/v0.4.21/contracts.html#fallback-function">Fallback Function</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[以太坊实战-交易爬虫]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/03/13/yi-tai-fang-shi-zhan-jiao-yi-pa-chong/"/>
    <updated>2018-03-13T19:46:40+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/03/13/yi-tai-fang-shi-zhan-jiao-yi-pa-chong</id>
    <content type="html"><![CDATA[<p>本文从一个区块链跑路项目说起,怎么通过大家可见的区块数据进行自己的业务分析,目的主要是讲述中间涉及到的技术,如果你能从中获益,并因此构建自己更加强大的分析工具,我深感荣幸.</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">防止区块链项目跑路</a></li>
  <li><a href="#section-1">服务端控制智能合约</a></li>
  <li><a href="#erc20">ERC20关键参数获取</a>    <ul>
      <li><a href="#section-2">某个地址是否合约</a></li>
      <li><a href="#from">From</a></li>
      <li><a href="#to">To</a>        <ul>
          <li><a href="#section-3">函数签名</a></li>
          <li><a href="#section-4">参数编码</a></li>
          <li><a href="#transfer">transfer</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#put-it-together">Put it together</a></li>
  <li><a href="#section-5">参考文献</a></li>
</ul>

<h1 id="section">防止区块链项目跑路</h1>

<p>首先要说说这个争议颇多的英雄链: 做为首个全球加密数字货币区块链博彩平台的建设者，HeroChain致力打造数字货币一站式博彩娱乐互动平台，是实现在区块链上加密数字货币的娱乐和产品集合服务平台。HeroChain团队目标是落地与合作全球85个博彩合法的国家和地区，或博彩业合法牌照或与当地博彩业紧密合作，未来使得HEC能与线下赌场打通，使得HEC拥有更大的交易场景。团队认为：HEC的应用覆盖和使用领域确实足以支撑这个巨量加密数字货币的流通市值。由于没有税收，使得HeroChain团队每年可以拿出收益的30%，在进行市场回购HEC， 让参与者获利。关键这个博彩业市场不像之前其它项目的预测的预期市场，是庞大而真实的网络娱乐刚需市场。</p>

<p>从这段描述来看，英雄链所针对的应用场景和未来目标都是非常有说服力的。然而目前出现有用户和项目团队因为破发矛盾激化,进而对该项目本身也产生各种质疑。媒体也对其核心人员的资金流向进行了分析:</p>

<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/JFoxiaVESXq0R8KvzDkcyicO28Yyo94Ngzl8JoqNXcPxFBgibetLQ74ENNDiaFY1S3gQokIAddFrxI9snaPooY4dWA/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="balance flow" /></p>

<p>从结果来看，项目募集的资金都最终流向了某一个地址，确实存在发行者卷款跑路的可能(详细分析可以查阅参考文献两篇文章)。</p>

<p>我这里只是以这件事件做一个引子，由于区块链的数据对大众完全透明公开,所有人的资金流向其实都摆在眼前，只是说现在链上基础工具不完善，普通人很难去分析这庞大而精细的交易记录。如果我们做一个交易爬虫，能够轻松分析任意账户的资金流动，那么不论是对普通小白验证项目的可信度还是金融从业者分析深度数据，都是很有价值的。</p>

<p>下面，我就介绍下，如果要产生ERC20某个代币的资金流向图(类似下图)，要注意哪些技术关键点。</p>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/JFoxiaVESXq0R8KvzDkcyicO28Yyo94NgzgqH5wW9TgI5o4zoBZB3owgvXNbykPhEkEep9zHS5rjqm0GD12BfgRg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="hec" /></p>

<h1 id="section-1">服务端控制智能合约</h1>

<p>要和智能合约进行交互,显然需要完成通用编程语言对合约的控制,这里我们以<code>golang</code>代码为例,展示怎么从<code>golang</code>中调用合约函数。<a href="https://github.com/ethereum/go-ethereum">官方go-ethereum</a>已经提供了这样的工具<code>abigen</code>,直接从合约<code>sol</code>代码生成go代码:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><code>abigen</code></td>
      <td>Source code generator to convert Ethereum contract definitions into easy to use, compile-time type-safe Go packages. It operates on plain <a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI">Ethereum contract ABIs</a> with expanded functionality if the contract bytecode is also available. However it also accepts Solidity source files, making development much more streamlined. Please see our <a href="https://github.com/ethereum/go-ethereum/wiki/Native-DApps:-Go-bindings-to-Ethereum-contracts">Native DApps</a> wiki page for details.</td>
    </tr>
  </tbody>
</table>

<p>那我们要分析erc20的代币，所以定义好一份接口合约即可:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">contract</span> <span class="nx">Token</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">name</span><span class="p">()</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">string</span> <span class="nx">name</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// 可选方法，返回代币符号，如EOS</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">symbol</span><span class="p">()</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">string</span> <span class="nx">symbol</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// 可选方法,返回代币小数位数，如8</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">decimals</span><span class="p">()</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint8</span> <span class="nx">decimals</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 货币总发行量</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">totalSupply</span><span class="p">()</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span> <span class="nx">totalSupply</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// 获取某个账户的代币余额</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">balanceOf</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_owner</span><span class="p">)</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span> <span class="nx">balance</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// (本人)向某人转账</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">transfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span> <span class="nx">success</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// (本人)批准只能合约可以向某人转账</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">approve</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_spender</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span> <span class="nx">success</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// 合约代理from向to转账(须先经过from账户approve)</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">transferFrom</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_from</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">_to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span> <span class="nx">success</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// 查询_owner允许合约代理向_spender转账的金额</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">allowance</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_owner</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">_spender</span><span class="p">)</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span> <span class="nx">remaining</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后使用<code>abigen</code>工具生成go代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">abigen --sol ./erc20.sol --pkg erc20 --out token.go
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后在<code>golang</code>中就可以像这样调用合约函数:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;log&quot;</span>
</span><span class="line">
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/common&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/ethclient&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">// Create an IPC based RPC connection to a remote node</span>
</span><span class="line">	<span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ethclient</span><span class="p">.</span><span class="nx">Dial</span><span class="p">(</span><span class="s">&quot;/home/karalabe/.ethereum/testnet/geth.ipc&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">log</span><span class="p">.</span><span class="nx">Fatalf</span><span class="p">(</span><span class="s">&quot;Failed to connect to the Ethereum client: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="c1">// Instantiate the contract and display its name</span>
</span><span class="line">	<span class="nx">token</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">NewToken</span><span class="p">(</span><span class="nx">common</span><span class="p">.</span><span class="nx">HexToAddress</span><span class="p">(</span><span class="s">&quot;0x21e6fc92f93c8a1bb41e2be64b4e1f88a54d3576&quot;</span><span class="p">),</span> <span class="nx">conn</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">log</span><span class="p">.</span><span class="nx">Fatalf</span><span class="p">(</span><span class="s">&quot;Failed to instantiate a Token contract: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">name</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">token</span><span class="p">.</span><span class="nx">Name</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">log</span><span class="p">.</span><span class="nx">Fatalf</span><span class="p">(</span><span class="s">&quot;Failed to retrieve token name: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Token name:&quot;</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="erc20">ERC20关键参数获取</h1>

<p>做交易爬虫,现在最关键的是分析交易参数,比如这是<code>etherscan.io</code>上一个<code>MCAP</code>转账交易:</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/eth-tx.png" alt="tx" /></p>

<h2 id="section-2">某个地址是否合约</h2>

<p>在交易里，如果是合约的调用那么<code>To</code>字段必然是一个合约地址,那么当我们拿到一个交易时，怎么判断这个交易是否一次合约调用呢，或者怎么判断<code>To</code>是合约地址而不是用户钱包地址呢？</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="err">很简单</span><span class="p">,</span><span class="err">地址对应存储位置上有代码则是合约地址</span><span class="p">,</span><span class="err">反之是用户钱包</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>理解了这个原理,那么在go代码里就很容易判断了:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// 某个地址是否合约</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">IsContract</span><span class="p">(</span><span class="nx">conn</span> <span class="o">*</span><span class="nx">ethclient</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">hexAddr</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">code</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">CodeAt</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Background</span><span class="p">(),</span> <span class="nx">common</span><span class="p">.</span><span class="nx">HexToAddress</span><span class="p">(</span><span class="nx">hexAddr</span><span class="p">),</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">code</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>这里附上其他环境判断是否合约的方法</p>
</blockquote>

<p>在合约solidity代码里判断:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">isContract</span><span class="p">(</span><span class="nx">address</span> <span class="nx">addr</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">uint</span> <span class="nx">size</span><span class="p">;</span>
</span><span class="line">  <span class="nx">assembly</span> <span class="p">{</span> <span class="nx">size</span> <span class="o">:=</span> <span class="nx">extcodesize</span><span class="p">(</span><span class="nx">addr</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在<code>geth</code>的console:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">eth.getCode<span class="o">(</span><span class="s2">&quot;0xbfb2e296d9cf3e593e79981235aed29ab9984c0f&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="from">From</h2>

<p><code>From</code>无法直接从交易函数里获取,因为来源地址可以从签名里反解出来,为了拿取到这个字段,用的方法是解析交易的<code>String()</code>输出来获取,虽然办法效率不高,但为了不改动源码这是最简单的。</p>

<p>[update]<code>from</code>获取已经更新,不再使用正则解析,详见代码<a href="https://github.com/qjpcpu/ethereum/blob/f3fa29e5d9ef3762d69dd838a465ee0e8b116e1f/contracts/helper.go#L35">get from field</a></p>

<h2 id="to">To</h2>

<p>收款地址的获取就比较麻烦一些了，它不像eth的直接转账,交易的<code>to</code>字段就是收款地址,合约调用的<code>To</code>是合约地址,真正的收款地址存放在<code>Data</code>字段里,那么我们来看看<code>Data</code>字段怎么编码的。</p>

<h3 id="section-3">函数签名</h3>

<p><code>Data</code>的起始4个字节是函数签名的sha3结果的前缀,举个例子,对于下面的合约</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">contract</span> <span class="nx">Foo</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">bar</span><span class="p">(</span><span class="nx">fixed</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="nx">xy</span><span class="p">)</span> <span class="p">{}</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">baz</span><span class="p">(</span><span class="nx">uint32</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">bool</span> <span class="nx">y</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span> <span class="nx">r</span><span class="p">)</span> <span class="p">{</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">&gt;</span> <span class="mi">32</span> <span class="o">||</span> <span class="nx">y</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">sam</span><span class="p">(</span><span class="nx">bytes</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">bool</span> <span class="nx">z</span><span class="p">,</span> <span class="nx">uint</span><span class="p">[]</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>
如果要调用</code>baz<code>函数,则结果应该是</code>keccak256(“baz(uint32,bool)”)[0:4]<code>转换为16进制是</code>0xcdcd77c0`</p>

<h3 id="section-4">参数编码</h3>

<p>参数编码是依次对函数签名每个参数进行32字节左补齐编码,如<code>baz(69,true)</code>这次调用,参数<code>69</code>和<code>true</code>分别编码结果是:</p>

<ul>
  <li><code>69</code>,编码为<code>0x0000000000000000000000000000000000000000000000000000000000000045</code></li>
  <li><code>true</code>,编码为<code>0x0000000000000000000000000000000000000000000000000000000000000001</code></li>
</ul>

<p>那么整合起来,<code>baz(69,true)</code>调用时交易的<code>Data</code>应该为:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="mh">0xcdcd77c000000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="transfer">transfer</h3>

<p>回到我们的需求,我们要分析的20代币的转账，其实就是分析<code>transfer(address _to,unit256 _value)</code>的合约函数调用,该函数签名编码是<code>0xa9059cbb</code>,比如我们要对<code>0x54d28e24df3a2381d4c072118da0ef0a51a4fcd9</code>转账<code>493480000</code>个MCAP,编码过程为:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nb">Function</span><span class="o">:</span> <span class="nx">transfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nx">MethodID</span><span class="o">:</span> <span class="mh">0xa9059cbb</span>
</span><span class="line"><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span>  <span class="mi">00000000000000000000000054</span><span class="nx">d28e24df3a2381d4c072118da0ef0a51a4fcd9</span>
</span><span class="line"><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span>  <span class="mi">000000000000000000000000000000000000000000000000000000001</span><span class="nx">d69e840</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最终结果<code>Data</code>是</p>

<p><code>0xa9059cbb00000000000000000000000054d28e24df3a2381d4c072118da0ef0a51a4fcd9000000000000000000000000000000000000000000000000000000001d69e840</code></p>

<h1 id="put-it-together">Put it together</h1>

<p>把这上面关键点整合起来,就可以构建一个简单爬虫,这个爬虫执行流程应该是:</p>

<ul>
  <li>遍历区块交易,取到我们关注的某个合约的所有转账交易</li>
  <li>解析交易关键字段,包含交易ID,from,to,金额,时间戳</li>
  <li>入库,提供webAPI给应用层</li>
</ul>

<h1 id="section-5">参考文献</h1>

<ul>
  <li><a href="https://mp.weixin.qq.com/s/2wG9-NyeHwan8pgmlaLSwQ">英雄链深度调查 永不说谎的地址</a></li>
  <li><a href="https://mp.weixin.qq.com/s/KPIDMwujSZI_MhpmMIG5Gg?scene=25#wechat_redirect">谁是英雄链背后的英雄</a></li>
  <li><a href="https://github.com/ethereum/go-ethereum/wiki/Native-DApps:-Go-bindings-to-Ethereum-contracts">Go bindings to Ethereum contracts</a></li>
  <li><a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#argument-encoding">Ethereum Contract ABI</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solidity备忘录]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/03/08/soliditybei-wang-lu/"/>
    <updated>2018-03-08T09:38:45+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/03/08/soliditybei-wang-lu</id>
    <content type="html"><![CDATA[<p>关于以太坊solidity语言一些有趣或者有意义的tips.</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#basic-sytax">basic sytax</a>    <ul>
      <li><a href="#section">字符串比较</a></li>
      <li><a href="#storage-vs-memory">storage vs memory</a></li>
    </ul>
  </li>
  <li><a href="#function">function</a>    <ul>
      <li><a href="#section-1">访问修饰符</a></li>
      <li><a href="#section-2">函数修饰符</a></li>
    </ul>
  </li>
  <li><a href="#msg">msg</a></li>
  <li><a href="#section-3">接口</a></li>
  <li><a href="#ownable">Ownable</a></li>
  <li><a href="#section-4">性能优化</a></li>
  <li><a href="#section-5">间接转账</a>    <ul>
      <li><a href="#section-6">将发到合约的转账再转给另一个地址</a></li>
      <li><a href="#eth">将发到合约的eth再转发给另一个合约调用</a></li>
    </ul>
  </li>
</ul>

<h1 id="basic-sytax">basic sytax</h1>

<h2 id="section">字符串比较</h2>

<p><code>solidity</code>本身无法直接比较字符串,需要转换成整数比较</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">keccak256</span><span class="p">(</span><span class="s2">&quot;aaaab&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="nx">keccak256</span><span class="p">(</span><span class="s2">&quot;bbbbbc&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="storage-vs-memory">storage vs memory</h2>

<ul>
  <li><code>storage</code>,变量将存储到链上,如合约变量默认即storage</li>
  <li><code>memory</code>, 内存临时变量</li>
</ul>

<h1 id="function">function</h1>

<h2 id="section-1">访问修饰符</h2>

<ul>
  <li><code>public</code>, 任何人可以调用,包括其他合约</li>
  <li><code>private</code>, 仅本合约可调用</li>
  <li><code>internal</code>, 本合约和继承本合约的合约可调用</li>
  <li><code>external</code>, 仅能外部调用</li>
</ul>

<h2 id="section-2">函数修饰符</h2>

<ul>
  <li><code>view</code>, 仅查看数据不修改数据,另外注意<code>view</code>修饰符不耗费gas,因为它只做本地查询</li>
  <li><code>pure</code>, 根本不访问(区块链)数据,如仅做内存数学计算</li>
</ul>

<p>函数修饰符还可以带参数:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 存储用户年龄的映射</span>
</span><span class="line"><span class="nx">mapping</span> <span class="p">(</span><span class="nx">uint</span> <span class="o">=&gt;</span> <span class="nx">uint</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">age</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 限定用户年龄的修饰符</span>
</span><span class="line"><span class="nx">modifier</span> <span class="nx">olderThan</span><span class="p">(</span><span class="nx">uint</span> <span class="nx">_age</span><span class="p">,</span> <span class="nx">uint</span> <span class="nx">_userId</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">require</span><span class="p">(</span><span class="nx">age</span><span class="p">[</span><span class="nx">_userId</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nx">_age</span><span class="p">);</span>
</span><span class="line">  <span class="nx">_</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 必须年满16周岁才允许开车 (至少在美国是这样的).</span>
</span><span class="line"><span class="c1">// 我们可以用如下参数调用`olderThan` 修饰符:</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">driveCar</span><span class="p">(</span><span class="nx">uint</span> <span class="nx">_userId</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">olderThan</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="nx">_userId</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// 其余的程序逻辑</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="msg">msg</h1>

<p>msg对象有几个常用属性</p>

<ul>
  <li><code>msg.sender</code>, 合约调用者</li>
  <li><code>msg.value</code>, 合约调用者发送的ETH金额</li>
</ul>

<h1 id="section-3">接口</h1>

<p>接口定义及使用非常简单,不需要额外语言描述.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 声明</span>
</span><span class="line"><span class="nx">contract</span> <span class="nx">NumberInterface</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">getNum</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_myAddress</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">view</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">contract</span> <span class="nx">MyContract</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">address</span> <span class="nx">NumberInterfaceAddress</span> <span class="o">=</span> <span class="mh">0x06012c8cf97BEaD5deAe237070F9587f8E</span><span class="p">....;</span>
</span><span class="line">  <span class="c1">// ^ The address of the FavoriteNumber contract on Ethereum</span>
</span><span class="line">  <span class="nx">NumberInterface</span> <span class="nx">numberContract</span> <span class="o">=</span> <span class="nx">NumberInterface</span><span class="p">(</span><span class="nx">NumberInterfaceAddress</span><span class="p">);</span>
</span><span class="line">  <span class="c1">// Now numberContract is pointing to the other contract</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">someFunction</span><span class="p">()</span> <span class="kr">public</span> <span class="p">{</span>
</span><span class="line">     <span class="c1">// Now we can call getNum from that contract:</span>
</span><span class="line">     <span class="nx">uint</span> <span class="nx">num</span> <span class="o">=</span> <span class="nx">numberContract</span><span class="p">.</span><span class="nx">getNum</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// ...and do something with num here</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接口的使用和实现分离的特点,也是实战中重要特性:解决bugfix,调用外部合同等等灵活场景.</p>

<h1 id="ownable">Ownable</h1>

<p><code>Ownable</code>是进行合约管理的常用手段</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @title Ownable</span>
</span><span class="line"><span class="cm"> * @dev The Ownable contract has an owner address, and provides basic authorization control</span>
</span><span class="line"><span class="cm"> * functions, this simplifies the implementation of &quot;user permissions&quot;.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="nx">contract</span> <span class="nx">Ownable</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">address</span> <span class="kr">public</span> <span class="nx">owner</span><span class="p">;</span>
</span><span class="line">  <span class="nx">event</span> <span class="nx">OwnershipTransferred</span><span class="p">(</span><span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">previousOwner</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">newOwner</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * @dev The Ownable constructor sets the original `owner` of the contract to the sender</span>
</span><span class="line"><span class="cm">   * account.</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">Ownable</span><span class="p">()</span> <span class="kr">public</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">owner</span> <span class="o">=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * @dev Throws if called by any account other than the owner.</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="nx">modifier</span> <span class="nx">onlyOwner</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">require</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span> <span class="o">==</span> <span class="nx">owner</span><span class="p">);</span>
</span><span class="line">    <span class="nx">_</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * @dev Allows the current owner to transfer control of the contract to a newOwner.</span>
</span><span class="line"><span class="cm">   * @param newOwner The address to transfer ownership to.</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">transferOwnership</span><span class="p">(</span><span class="nx">address</span> <span class="nx">newOwner</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">onlyOwner</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">require</span><span class="p">(</span><span class="nx">newOwner</span> <span class="o">!=</span> <span class="nx">address</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class="line">    <span class="nx">OwnershipTransferred</span><span class="p">(</span><span class="nx">owner</span><span class="p">,</span> <span class="nx">newOwner</span><span class="p">);</span>
</span><span class="line">    <span class="nx">owner</span> <span class="o">=</span> <span class="nx">newOwner</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-4">性能优化</h1>

<p>通常情况下我们不会考虑使用 unit 变种，因为无论如何定义 uint的大小，Solidity 为它保留256位的存储空间。例如，使用 uint8 而不是uint（uint256）不会为你节省任何gas。</p>

<p>除非，把 unit 绑定到 struct 里面。</p>

<p>如果一个 struct 中有多个 uint，则尽可能使用较小的 uint, Solidity 会将这些 uint 打包在一起，从而占用较少的存储空间。例如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">struct</span> <span class="nx">NormalStruct</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">uint</span> <span class="nx">a</span><span class="p">;</span>
</span><span class="line">  <span class="nx">uint</span> <span class="nx">b</span><span class="p">;</span>
</span><span class="line">  <span class="nx">uint</span> <span class="nx">c</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">struct</span> <span class="nx">MiniMe</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">uint32</span> <span class="nx">a</span><span class="p">;</span>
</span><span class="line">  <span class="nx">uint32</span> <span class="nx">b</span><span class="p">;</span>
</span><span class="line">  <span class="nx">uint</span> <span class="nx">c</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>// 因为使用了结构打包，<code>mini</code> 比 <code>normal</code> 占用的空间更少</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">NormalStruct</span> <span class="nx">normal</span> <span class="o">=</span> <span class="nx">NormalStruct</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
</span><span class="line"><span class="nx">MiniMe</span> <span class="nx">mini</span> <span class="o">=</span> <span class="nx">MiniMe</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所以，当 uint 定义在一个 struct 中的时候，尽量使用最小的整数子类型以节约空间。 并且把同样类型的变量放一起（即在struct中将把变量按照类型依次放置），这样 Solidity 可以将存储空间最小化。例如，有两个 struct：</p>

<p>uint c; uint32 a; uint32 b; 和 uint32 a; uint c; uint32 b;</p>

<p>前者比后者需要的gas更少，因为前者把uint32放一起了。</p>

<h1 id="section-5">间接转账</h1>

<p>直接转账用<code>who.transfer(value)</code>,这个很常见, 但有时候还是需要间接转账</p>

<h2 id="section-6">将发到合约的转账再转给另一个地址</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">delayTransfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_to</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">payable</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">_to</span><span class="p">.</span><span class="nx">transfer</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个示例就是一个间接转账,这笔转账能够完成的原因其实是,调用这个函数时，用户发过来的eth已经加到合约上了，所以可以再转给第三个地址。</p>

<h2 id="eth">将发到合约的eth再转发给另一个合约调用</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">contract</span> <span class="nx">Sub</span> <span class="p">{</span>
</span><span class="line">   <span class="nx">address</span> <span class="nx">realReceiver</span><span class="p">;</span>
</span><span class="line">   <span class="kd">function</span> <span class="nx">recevice</span><span class="p">()</span> <span class="kr">public</span> <span class="nx">payable</span> <span class="p">{</span>
</span><span class="line">       <span class="nx">realReceiver</span><span class="p">.</span><span class="nx">transfer</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class="line">   <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">contract</span> <span class="nx">Main</span><span class="p">{</span>
</span><span class="line">  <span class="nx">Sub</span> <span class="nx">sub</span><span class="p">;</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">transferToSub</span><span class="p">()</span> <span class="kr">public</span> <span class="nx">payable</span><span class="p">{</span>
</span><span class="line">      <span class="nx">sub</span><span class="p">.</span><span class="nx">recevice</span><span class="p">.</span><span class="nx">value</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">value</span><span class="p">)();</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面示例将用户的eth通过两次转发最终发给了<code>realReceiver</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于以太坊的数字资产]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/03/06/ji-yu-yi-tai-fang-de-shu-zi-zi-chan/"/>
    <updated>2018-03-06T18:24:35+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/03/06/ji-yu-yi-tai-fang-de-shu-zi-zi-chan</id>
    <content type="html"><![CDATA[<p>代币(token)是什么?</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">什么是代币</a>    <ul>
      <li><a href="#section-1">最小可用代币</a></li>
    </ul>
  </li>
  <li><a href="#erc20">ERC20</a>    <ul>
      <li><a href="#section-2">大纲</a></li>
      <li><a href="#section-3">摘要</a></li>
      <li><a href="#section-4">动机</a></li>
      <li><a href="#section-5">标准内容</a>        <ul>
          <li><a href="#section-6">方法定义</a></li>
          <li><a href="#section-7">事件定义</a></li>
          <li><a href="#section-8">范例</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#erc721">ERC721</a>    <ul>
      <li><a href="#section-9">实用性</a></li>
      <li><a href="#nft-ids">NFT IDs</a></li>
      <li><a href="#section-10">向后兼容性</a></li>
    </ul>
  </li>
  <li><a href="#section-11">其他问题</a>    <ul>
      <li><a href="#gas">自动装填gas</a></li>
    </ul>
  </li>
  <li><a href="#section-12">参考文献</a></li>
</ul>

<h1 id="section">什么是代币</h1>

<p>通常区块链上由矿工挖出的币种,我们把它称之为初代币，初代币是该区块链最底层的货币，链上的转账及各类基础交易都是以初代币作为结算依据。比如比特币对于比特币区块链，以太币之于以太坊等等。</p>

<p>而通常我们说的代币,或者token(令牌),又指的是什么呢？代币是基于区块链的智能合约定义出的二代币,如果把比特币/以太币比作tcp层的数据包，那么代币就可以类比为http层的http包，它是一个更加上层的概念。</p>

<p>目前市场上发行的代币大部分都是基于以太坊，这是因为以太坊本身是一个图灵完备的区块链，即它的智能合约语言是图灵完备语言。对比起来比特币链上的脚本是非图灵完备的。正是因为以太坊的图灵完备性，使得基于以太坊的开发者可以根据自己的业务需求设计出各种特性各异的代币,它们可以代表任何可替代的可交易商品: 虚拟货币，忠诚点，金牌，白条，游戏内物品等。</p>

<h2 id="section-1">最小可用代币</h2>

<p>标准令牌合约可能相当复杂。但实际上，一个非常基本的令牌归结为:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">contract</span> <span class="nx">MyToken</span> <span class="p">{</span>
</span><span class="line">    <span class="cm">/* This creates an array with all balances */</span>
</span><span class="line">    <span class="nx">mapping</span> <span class="p">(</span><span class="nx">address</span> <span class="o">=&gt;</span> <span class="nx">uint256</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">balanceOf</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* Initializes contract with initial supply tokens to the creator of the contract */</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">MyToken</span><span class="p">(</span><span class="nx">uint256</span> <span class="nx">initialSupply</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">balanceOf</span><span class="p">[</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">]</span> <span class="o">=</span> <span class="nx">initialSupply</span><span class="p">;</span>              <span class="c1">// Give the creator all initial tokens</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* Send coins */</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">transfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">balanceOf</span><span class="p">[</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nx">_value</span><span class="p">);</span>           <span class="c1">// Check if the sender has enough</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">balanceOf</span><span class="p">[</span><span class="nx">_to</span><span class="p">]</span> <span class="o">+</span> <span class="nx">_value</span> <span class="o">&gt;=</span> <span class="nx">balanceOf</span><span class="p">[</span><span class="nx">_to</span><span class="p">]);</span> <span class="c1">// Check for overflows</span>
</span><span class="line">        <span class="nx">balanceOf</span><span class="p">[</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">]</span> <span class="o">-=</span> <span class="nx">_value</span><span class="p">;</span>                    <span class="c1">// Subtract from the sender</span>
</span><span class="line">        <span class="nx">balanceOf</span><span class="p">[</span><span class="nx">_to</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">_value</span><span class="p">;</span>                           <span class="c1">// Add the same to the recipient</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>阅读这段代码时，请不要拘泥于<code>token</code>的字面意思。这里的<code>MyToken</code>在发行时限定了发行总额(合约构造函数),同时具备了转账功能<code>transfer</code>。那么其实他就是一个简易的货币,具备作为物物交易的中间桥梁来转移价值的能力。</p>

<h1 id="erc20">ERC20</h1>

<p>以以太坊为例，由于大家均在链上以大致相同的方式发行了各自的代币，逐渐发现其实这里面有共同的模式可以被提炼出来:由于所有代币都以标准方式实施一些基本功能，这也意味着您的代币将立即与以太坊钱包和任何其他使用相同标准的客户或合同兼容.于是就出现了<code>ERC20</code>提案。</p>

<h2 id="section-2">大纲</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">EIP</span><span class="o">:</span> <span class="mi">20</span>
</span><span class="line"><span class="nx">Title</span><span class="o">:</span> <span class="nx">ERC</span><span class="o">-</span><span class="mi">20</span> <span class="nx">Token</span> <span class="nx">Standard</span>
</span><span class="line"><span class="nx">Author</span><span class="o">:</span> <span class="nx">Fabian</span> <span class="nx">Vogelsteller</span> <span class="o">&lt;</span><span class="nx">fabian</span><span class="err">@</span><span class="nx">ethereum</span><span class="p">.</span><span class="nx">org</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">Vitalik</span> <span class="nx">Buterin</span> <span class="o">&lt;</span><span class="nx">vitalik</span><span class="p">.</span><span class="nx">buterin</span><span class="err">@</span><span class="nx">ethereum</span><span class="p">.</span><span class="nx">org</span><span class="o">&gt;</span>
</span><span class="line"><span class="nx">Type</span><span class="o">:</span> <span class="nx">Standard</span>
</span><span class="line"><span class="nx">Category</span><span class="o">:</span> <span class="nx">ERC</span>
</span><span class="line"><span class="nx">Status</span><span class="o">:</span> <span class="nx">Accepted</span>
</span><span class="line"><span class="nx">Created</span><span class="o">:</span> <span class="mi">2015</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">19</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">摘要</h2>

<p>以下标准定义了在智能合约中实施代币的标准API。该标准提供了传送代币的基本功能，并允许代币被批准，以便其他链上第三方可以使用它们。</p>

<h2 id="section-4">动机</h2>

<p>标准接口允许其他应用程序重新使用以太坊上的任何令牌：从钱包到分散式交换。</p>

<h2 id="section-5">标准内容</h2>

<h3 id="section-6">方法定义</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 可选方法,返回代币名称,如MyToken</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">name</span><span class="p">()</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">string</span> <span class="nx">name</span><span class="p">)</span>
</span><span class="line"><span class="c1">// 可选方法，返回代币符号，如EOS</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">symbol</span><span class="p">()</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">string</span> <span class="nx">symbol</span><span class="p">)</span>
</span><span class="line"><span class="c1">// 可选方法,返回代币小数位数，如8</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">decimals</span><span class="p">()</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint8</span> <span class="nx">decimals</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 货币总发行量</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">totalSupply</span><span class="p">()</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span> <span class="nx">totalSupply</span><span class="p">)</span>
</span><span class="line"><span class="c1">// 获取某个账户的代币余额</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">balanceOf</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_owner</span><span class="p">)</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span> <span class="nx">balance</span><span class="p">)</span>
</span><span class="line"><span class="c1">// (本人)向某人转账</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">transfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span> <span class="nx">success</span><span class="p">)</span>
</span><span class="line"><span class="c1">// (本人)批准只能合约可以向某人转账</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">approve</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_spender</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span> <span class="nx">success</span><span class="p">)</span>
</span><span class="line"><span class="c1">// 合约代理from向to转账(须先经过from账户approve)</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">transferFrom</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_from</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">_to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span> <span class="nx">success</span><span class="p">)</span>
</span><span class="line"><span class="c1">// 查询_owner允许合约代理向_spender转账的金额</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">allowance</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_owner</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">_spender</span><span class="p">)</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span> <span class="nx">remaining</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-7">事件定义</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 转移代币时必须触发该事件</span>
</span><span class="line"><span class="nx">event</span> <span class="nx">Transfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">_from</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">_to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span>
</span><span class="line"><span class="c1">// 批准代币时必须触发该事件</span>
</span><span class="line"><span class="nx">event</span> <span class="nx">Approval</span><span class="p">(</span><span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">_owner</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">_spender</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-8">范例</h3>

<p><a href="https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol">https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol</a>
<a href="https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol">https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol</a></p>

<h1 id="erc721">ERC721</h1>

<p>至于erc721的产生是为了解决数字资产唯一性问题。本质上说，erc20的两个代币之间是没有任何区别的，所以它适合作为通用的数字货币来流通，单还有一类有区别的场景，比如数字世界里我的一栋房子和你的一栋房子，他们的面积，朝向，颜色等等都会有区别，是无法同质化标识的，所以就有了erc721.</p>

<p>ERC721官方称谓是:Non-fungible Token Standard(NFT),非同质化代币标准。</p>

<p>ERC721的标准内容我这里不再详述，具体标准可以参考github上以太坊提案,实现实例的话，以太猫就是最好的代表。</p>

<h3 id="section-9">实用性</h3>

<p>许多以太坊智能合约的建议用途都依赖于跟踪单个非同质币（NFTs）。现有或计划中的NFTs 有很多，例如 Decentraland 中的 LAND，与CryptoPunks 项目同名的punks（朋克），以及Dmarket 或 EnjinCoin 等系统的游戏内物品。未来的用途包括检测真实世界中的非同质资产，例如房地产（例如 Ubitquity 或 Propy 等公司所设想的）。在这些情况下，项目在账本中不是“集中在一起的”，相反，每单位代币必须有独立的所有权并自动跟踪，这非常重要。无论这些项目的性质如何，如果我们有一个标准化的接口，并且建立跨功能的NFTs管理和销售平台，这将使得生态系统更加强大。</p>

<h3 id="nft-ids">NFT IDs</h3>

<p>该标准的基础是，每一个 NFT 在跟踪它的合约中，用唯一的一个256 位无符号整数进行标识。每个NFT 的 ID 标号在智能合约的生命周期内不允许改变。元组 ( contract address, asset ID ) 是每个特定 NFT 在以太坊生态系统中的全局唯一且完全合格的标识。虽然某些合约可能觉得 ID 从 0 开始编码，并且对于每一个新 NFT 的 ID 简单增 1 进行编码更加简便，但是使用者绝不能假设 ID 编号具有任何特定模式，并且需要将 ID 编码看做 “黑盒”。</p>

<h3 id="section-10">向后兼容性</h3>

<p>本标准尽可能遵循 ERC-20 的语义，但由于同质代币与非同质代币之间的根本差异，并不能完全兼容 ERC-20。</p>

<h1 id="section-11">其他问题</h1>

<h2 id="gas">自动装填gas</h2>

<p>每次，您在Ethereum上进行交易，您需要向该块矿工支付费用，以计算您的智能合约的结果。虽然这可能会在未来发生变化，但目前费用只能在以太网中支付，因此您的代币的所有用户都需要它。账户余额小于费用的账户被卡住，直到业主可以支付必要的费用。但在某些使用案例中，您可能不希望用户考虑以太坊，区块链或如何获得以太网，因此只要检测到平衡危险性低，您的硬币就会自动重新填充用户余额。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">uint</span> <span class="nx">minBalanceForAccounts</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">setMinBalance</span><span class="p">(</span><span class="nx">uint</span> <span class="nx">minimumBalanceInFinney</span><span class="p">)</span> <span class="nx">onlyOwner</span> <span class="p">{</span>
</span><span class="line">     <span class="nx">minBalanceForAccounts</span> <span class="o">=</span> <span class="nx">minimumBalanceInFinney</span> <span class="o">*</span> <span class="mi">1</span> <span class="nx">finney</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="cm">/* Send coins */</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">transfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">.</span><span class="nx">balance</span> <span class="o">&lt;</span> <span class="nx">minBalanceForAccounts</span><span class="p">)</span>
</span><span class="line">        <span class="nx">sell</span><span class="p">((</span><span class="nx">minBalanceForAccounts</span> <span class="o">-</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">.</span><span class="nx">balance</span><span class="p">)</span> <span class="o">/</span> <span class="nx">sellPrice</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-12">参考文献</h1>

<ul>
  <li><a href="http://ethfans.org/posts/eip-721-non-fungible-token-standard">干货ERC721 Non-fungible Token Standard</a></li>
  <li><a href="https://ethereum.org/token">Create your own CRYPTO-CURRENCY with Ethereum</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[以太坊交易]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/03/05/yi-tai-fang-jiao-yi/"/>
    <updated>2018-03-05T14:26:24+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/03/05/yi-tai-fang-jiao-yi</id>
    <content type="html"><![CDATA[<p>交易是区块链和重中之重,不论是简单的转账还是复杂的智能合约的执行,都是依托于交易来完成。但是我回头仔细研究了一把以太坊的交易,并梳理这篇文章的原因,仅仅是因为在面试的时候没有回答上来,羞愧……</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">交易的主要结构</a></li>
  <li><a href="#section-1">交易打包流程</a>    <ul>
      <li><a href="#section-2">拼装交易参数</a></li>
      <li><a href="#section-3">对交易签名</a></li>
      <li><a href="#section-4">是否重复交易</a></li>
      <li><a href="#section-5">验证交易参数</a></li>
      <li><a href="#section-6">丢弃低价交易</a></li>
      <li><a href="#section-7">替换重复交易(更新旧交易)</a></li>
      <li><a href="#section-8">提交交易进入交易队列</a></li>
      <li><a href="#nonce">关于交易nonce</a>        <ul>
          <li><a href="#txpoolvalidatetxnoncenonce">TxPool.validateTx()检查当前交易的<code>nonce</code>大于最新区块中账户<code>nonce</code>值</a></li>
          <li><a href="#pending">检查<code>pending</code>队列中是否有旧交易需要更新</a></li>
          <li><a href="#pendingnonce">尝试将交易加入<code>pending</code>队列时检查是否需要剔除过期的nonce</a></li>
          <li><a href="#noncependingnonce">从队列中获取所有<code>nonce</code>值小于等于账户<code>pending</code>状态的<code>nonce</code>值</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#section-9">关于失败的交易</a></li>
</ul>

<h1 id="section">交易的主要结构</h1>

<p>废话不多说,先看看交易的基础数据结构。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/core/types/transaction.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">txdata</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">AccountNonce</span> <span class="kt">uint64</span>          <span class="s">`json:&quot;nonce&quot;    gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">Price</span>        <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span>        <span class="s">`json:&quot;gasPrice&quot; gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">GasLimit</span>     <span class="kt">uint64</span>          <span class="s">`json:&quot;gas&quot;      gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">Recipient</span>    <span class="o">*</span><span class="nx">common</span><span class="p">.</span><span class="nx">Address</span> <span class="s">`json:&quot;to&quot;       rlp:&quot;nil&quot;`</span> <span class="c1">// nil means contract creation</span>
</span><span class="line">    <span class="nx">Amount</span>       <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span>        <span class="s">`json:&quot;value&quot;    gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">Payload</span>      <span class="p">[]</span><span class="kt">byte</span>          <span class="s">`json:&quot;input&quot;    gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Signature values</span>
</span><span class="line">    <span class="nx">V</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span> <span class="s">`json:&quot;v&quot; gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">R</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span> <span class="s">`json:&quot;r&quot; gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">S</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span> <span class="s">`json:&quot;s&quot; gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// This is only used when marshaling to JSON.</span>
</span><span class="line">    <span class="nx">Hash</span> <span class="o">*</span><span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span> <span class="s">`json:&quot;hash&quot; rlp:&quot;-&quot;`</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li><code>AccountNonce</code>,交易发起者内部唯一标识交易的字段,避免交易双重支付</li>
  <li><code>Price</code>,此交易的gas price</li>
  <li><code>GasLimit</code>,此交易允许的最大gas量</li>
  <li><code>Recipient</code>,交易接收者,如果为<code>nil</code>说明是个合同创建交易</li>
  <li><code>Amount</code>, 交易转移的<code>ETH</code>数量,单位是<code>wei</code></li>
  <li><code>Payload</code>, 交易数据</li>
  <li><code>V,R,S</code>, 交易签名,通过交易签名可以计算出交易发送者地址</li>
</ul>

<h1 id="section-1">交易打包流程</h1>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/transaction-pkg.png" alt="pkg" /></p>

<h2 id="section-2">拼装交易参数</h2>

<p>拼装交易参数主要在<code>github.com/ethereum/go-ethereum/internal/ethapi/api.go setDefaults()</code>实现。</p>

<ul>
  <li><code>Gas</code>如果未设置,设置未默认值<code>90000</code></li>
  <li><code>GasPrice</code>如果未设置，设置为建议值</li>
  <li><code>Nonce</code>如果未设置,自动生成nonce值,该值等于当前账户nonce偏移量加上账户nonces数组长度,由此可见账户交易的nonce值是连续递增量</li>
</ul>

<h2 id="section-3">对交易签名</h2>

<p>首先使用账户的私钥对交易hash信息生成签名,注意该hash计算了包含了<code>nonce</code>值和<code>chainId</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">EIP155Signer</span><span class="p">)</span> <span class="nx">Hash</span><span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">Transaction</span><span class="p">)</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">rlpHash</span><span class="p">([]</span><span class="kd">interface</span><span class="p">{}{</span>
</span><span class="line">		<span class="nx">tx</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">AccountNonce</span><span class="p">,</span>
</span><span class="line">		<span class="nx">tx</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">Price</span><span class="p">,</span>
</span><span class="line">		<span class="nx">tx</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">GasLimit</span><span class="p">,</span>
</span><span class="line">		<span class="nx">tx</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">Recipient</span><span class="p">,</span>
</span><span class="line">		<span class="nx">tx</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">Amount</span><span class="p">,</span>
</span><span class="line">		<span class="nx">tx</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">Payload</span><span class="p">,</span>
</span><span class="line">		<span class="nx">s</span><span class="p">.</span><span class="nx">chainId</span><span class="p">,</span> <span class="nb">uint</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="nb">uint</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class="line">	<span class="p">})</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将签名信息的<code>0-31</code>字节放入<code>R</code>,<code>32-63</code>放入<code>S</code>,<code>64</code>放入<code>V</code>(共65字节).</p>

<p>签名完成后,开始向以太坊提交交易.注意,如果交易的<code>To</code>字段为空,说明是个合同创建交易,则自动生成合约地址,合约地址生成规则其实是<code>hash(from_addr,nonce)</code>函数:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// Creates an ethereum address given the bytes and the nonce</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">CreateAddress</span><span class="p">(</span><span class="nx">b</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Address</span><span class="p">,</span> <span class="nx">nonce</span> <span class="kt">uint64</span><span class="p">)</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Address</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">data</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">rlp</span><span class="p">.</span><span class="nx">EncodeToBytes</span><span class="p">([]</span><span class="kd">interface</span><span class="p">{}{</span><span class="nx">b</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">})</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">common</span><span class="p">.</span><span class="nx">BytesToAddress</span><span class="p">(</span><span class="nx">Keccak256</span><span class="p">(</span><span class="nx">data</span><span class="p">)[</span><span class="mi">12</span><span class="p">:])</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-4">是否重复交易</h2>

<p>通过检查交易池里是否存在该交易hash判断是否是重复交易</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">hash</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">Hash</span><span class="p">()</span>
</span><span class="line"><span class="k">if</span> <span class="nx">pool</span><span class="p">.</span><span class="nx">all</span><span class="p">[</span><span class="nx">hash</span><span class="p">]</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">log</span><span class="p">.</span><span class="nx">Trace</span><span class="p">(</span><span class="s">&quot;Discarding already known transaction&quot;</span><span class="p">,</span> <span class="s">&quot;hash&quot;</span><span class="p">,</span> <span class="nx">hash</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Errorf</span><span class="p">(</span><span class="s">&quot;known transaction: %x&quot;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-5">验证交易参数</h2>

<ul>
  <li>检查交易大小是否小于等于<code>32KB</code>,防止DOS攻击</li>
  <li>检查是否正确签名</li>
  <li>检查gas是否超过区块gas限制</li>
  <li>抛弃非local的且gas price偏低的交易</li>
  <li>检查nonce是否过小</li>
  <li>检查账户余额是否足够,<code>balance &gt;= gas_price * gas_limit + amount</code></li>
</ul>

<h2 id="section-6">丢弃低价交易</h2>

<p>如果交易池已满，需要将交易池中低于当前交易的踢出一个,注意踢出的交易仅限于远端交易，本地节点的交易不受影响</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// Discard finds a number of most underpriced transactions, removes them from the</span>
</span><span class="line"><span class="c1">// priced list and returns them for further removal from the entire pool.</span>
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">txPricedList</span><span class="p">)</span> <span class="nx">Discard</span><span class="p">(</span><span class="nx">count</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">local</span> <span class="o">*</span><span class="nx">accountSet</span><span class="p">)</span> <span class="nx">types</span><span class="p">.</span><span class="nx">Transactions</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">drop</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transactions</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="c1">// Remote underpriced transactions to drop</span>
</span><span class="line">    <span class="nx">save</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transactions</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>    <span class="c1">// Local underpriced transactions to keep</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="nb">len</span><span class="p">(</span><span class="o">*</span><span class="nx">l</span><span class="p">.</span><span class="nx">items</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">count</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// Discard stale transactions if found during cleanup</span>
</span><span class="line">        <span class="nx">tx</span> <span class="o">:=</span> <span class="nx">heap</span><span class="p">.</span><span class="nx">Pop</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">items</span><span class="p">).(</span><span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="p">(</span><span class="o">*</span><span class="nx">l</span><span class="p">.</span><span class="nx">all</span><span class="p">)[</span><span class="nx">tx</span><span class="p">.</span><span class="nx">Hash</span><span class="p">()];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">l</span><span class="p">.</span><span class="nx">stales</span><span class="o">--</span>
</span><span class="line">            <span class="k">continue</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="c1">// Non stale transaction found, discard unless local</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">local</span><span class="p">.</span><span class="nx">containsTx</span><span class="p">(</span><span class="nx">tx</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">save</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">save</span><span class="p">,</span> <span class="nx">tx</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">drop</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">drop</span><span class="p">,</span> <span class="nx">tx</span><span class="p">)</span>
</span><span class="line">            <span class="nx">count</span><span class="o">--</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tx</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">save</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">heap</span><span class="p">.</span><span class="nx">Push</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="nx">tx</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">drop</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-7">替换重复交易(更新旧交易)</h2>

<p>因为交易可以使用<code>account+nonce</code>唯一标识,所以如果发现同一账户下已存在同nonce的交易,则视为是对旧交易的一次更新,此时会使用当前交易替换掉旧交易。该机制常用于用来提升gas值避免旧交易长时间得不到处理。</p>

<h2 id="section-8">提交交易进入交易队列</h2>

<p><code>promoteExecutables()</code>将交易从待处理队列移入<code>pending</code>队列</p>

<ul>
  <li>丢弃过旧的交易,过旧的定义是<code>nonce</code>小于当前账户<code>nonce</code>值的交易</li>
  <li>丢弃低余额(账户余额不足以支持交易gas燃烧)</li>
  <li>丢弃超过账户数量限额的交易</li>
  <li>…</li>
</ul>

<p>在一系列交易控制之后,将交易写入<code>pending</code>队列,此时交易真正可被矿工打包到区块中。</p>

<h2 id="nonce">关于交易nonce</h2>

<p>流程中涉及到<code>nonce</code>的几个地方:</p>

<h4 id="txpoolvalidatetxnoncenonce">TxPool.validateTx()检查当前交易的<code>nonce</code>大于最新区块中账户<code>nonce</code>值</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// Ensure the transaction adheres to nonce ordering</span>
</span><span class="line"><span class="k">if</span> <span class="nx">pool</span><span class="p">.</span><span class="nx">currentState</span><span class="p">.</span><span class="nx">GetNonce</span><span class="p">(</span><span class="nx">from</span><span class="p">)</span> <span class="p">&gt;</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">Nonce</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">ErrNonceTooLow</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="pending">检查<code>pending</code>队列中是否有旧交易需要更新</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="k">if</span> <span class="nx">list</span> <span class="o">:=</span> <span class="nx">pool</span><span class="p">.</span><span class="nx">pending</span><span class="p">[</span><span class="nx">from</span><span class="p">];</span> <span class="nx">list</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">Overlaps</span><span class="p">(</span><span class="nx">tx</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">   <span class="o">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>Overlaps()</code>函数即根据<code>account,nonce</code>参数对进行重复检测</p>

<h4 id="pendingnonce">尝试将交易加入<code>pending</code>队列时检查是否需要剔除过期的nonce</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// 检查并剔除小于最新区块的交易</span>
</span><span class="line"><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tx</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">list</span><span class="p">.</span><span class="nx">Forward</span><span class="p">(</span><span class="nx">pool</span><span class="p">.</span><span class="nx">currentState</span><span class="p">.</span><span class="nx">GetNonce</span><span class="p">(</span><span class="nx">addr</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">   <span class="o">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="noncependingnonce">从队列中获取所有<code>nonce</code>值小于等于账户<code>pending</code>状态的<code>nonce</code>值</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tx</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">list</span><span class="p">.</span><span class="nx">Ready</span><span class="p">(</span><span class="nx">pool</span><span class="p">.</span><span class="nx">pendingState</span><span class="p">.</span><span class="nx">GetNonce</span><span class="p">(</span><span class="nx">addr</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">   <span class="o">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>另外,</p>

<ul>
  <li>本地节点low gas的交易并不会被丢弃</li>
  <li>如果nonce出现”空洞”,则空洞后的交易将无法打包</li>
</ul>

<h1 id="section-9">关于失败的交易</h1>

<p>有时候我们在使用以太坊时交易(转账)时,会遇到一些令人迷惑的失败交易,比如在imToken上转账失败,然而在etherscan.io上无法查到该交易;而有时候又发现失败的转账能够在以太坊浏览器里成功查看到,说明交易是被正确打包上链了,只是交易本身是失败的交易而已，如下图所示,这是一笔因gas过低而失败的交易:</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/fail-tx.png" alt="fail-tx" /></p>

<p>那么我们深入源码来看看是怎么回事.这里我们只跟踪挖矿过程中的失败交易处理,因为普通交易在还没进入到pending队列时的失败的话,是根本不会打包到区块里的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">env</span> <span class="o">*</span><span class="nx">Work</span><span class="p">)</span> <span class="nx">commitTransaction</span><span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">,</span> <span class="nx">bc</span> <span class="o">*</span><span class="nx">core</span><span class="p">.</span><span class="nx">BlockChain</span><span class="p">,</span> <span class="nx">coinbase</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Address</span><span class="p">,</span> <span class="nx">gp</span> <span class="o">*</span><span class="nx">core</span><span class="p">.</span><span class="nx">GasPool</span><span class="p">)</span> <span class="p">(</span><span class="kt">error</span><span class="p">,</span> <span class="p">[]</span><span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Log</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="o">...</span>
</span><span class="line">  <span class="c1">// 如果执行交易报错,则回滚账户状态(即不从用户账户扣钱,完全回滚,交易不会打包)</span>
</span><span class="line">  <span class="nx">receipt</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">core</span><span class="p">.</span><span class="nx">ApplyTransaction</span><span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">config</span><span class="p">,</span> <span class="nx">bc</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">coinbase</span><span class="p">,</span> <span class="nx">gp</span><span class="p">,</span> <span class="nx">env</span><span class="p">.</span><span class="nx">state</span><span class="p">,</span> <span class="nx">env</span><span class="p">.</span><span class="nx">header</span><span class="p">,</span> <span class="nx">tx</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">env</span><span class="p">.</span><span class="nx">header</span><span class="p">.</span><span class="nx">GasUsed</span><span class="p">,</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">Config</span><span class="p">{})</span>
</span><span class="line">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">env</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">RevertToSnapshot</span><span class="p">(</span><span class="nx">snap</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">err</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="nx">env</span><span class="p">.</span><span class="nx">txs</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">txs</span><span class="p">,</span> <span class="nx">tx</span><span class="p">)</span>
</span><span class="line">  <span class="nx">env</span><span class="p">.</span><span class="nx">receipts</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">receipts</span><span class="p">,</span> <span class="nx">receipt</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">receipt</span><span class="p">.</span><span class="nx">Logs</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>commitTransaction()</code>就是在”挖矿”中调用的交易执行函数,其实从该函数就可以看出来:如果执行交易报错,则回滚账户状态,那么交易是不会被打包到区块的.</p>

<p>那么我们继续进入<code>ApplyTransaction()</code>看看什么情况下交易会报错,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">ApplyTransaction</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">params</span><span class="p">.</span><span class="nx">ChainConfig</span><span class="p">,</span> <span class="nx">bc</span> <span class="o">*</span><span class="nx">BlockChain</span><span class="p">,</span> <span class="nx">author</span> <span class="o">*</span><span class="nx">common</span><span class="p">.</span><span class="nx">Address</span><span class="p">,</span> <span class="nx">gp</span> <span class="o">*</span><span class="nx">GasPool</span><span class="p">,</span> <span class="nx">statedb</span> <span class="o">*</span><span class="nx">state</span><span class="p">.</span><span class="nx">StateDB</span><span class="p">,</span> <span class="nx">header</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Header</span><span class="p">,</span> <span class="nx">tx</span> <span class="o">*</span><span class="kd">type</span><span class="err">$</span>
</span><span class="line">  <span class="c1">// 1.参数检查类错误</span>
</span><span class="line">  <span class="nx">msg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">AsMessage</span><span class="p">(</span><span class="nx">types</span><span class="p">.</span><span class="nx">MakeSigner</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">header</span><span class="p">.</span><span class="nx">Number</span><span class="p">))</span>
</span><span class="line">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="o">...</span>
</span><span class="line">  <span class="c1">// 2.执行类,稍后再看</span>
</span><span class="line">  <span class="nx">_</span><span class="p">,</span> <span class="nx">gas</span><span class="p">,</span> <span class="nx">failed</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ApplyMessage</span><span class="p">(</span><span class="nx">vmenv</span><span class="p">,</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">gp</span><span class="p">)</span>
</span><span class="line">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="c1">// 3.存储交易收据,注意失败的交易也会创建收据</span>
</span><span class="line">  <span class="nx">receipt</span> <span class="o">:=</span> <span class="nx">types</span><span class="p">.</span><span class="nx">NewReceipt</span><span class="p">(</span><span class="nx">root</span><span class="p">,</span> <span class="nx">failed</span><span class="p">,</span> <span class="o">*</span><span class="nx">usedGas</span><span class="p">)</span>
</span><span class="line">  <span class="nx">receipt</span><span class="p">.</span><span class="nx">TxHash</span> <span class="p">=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">Hash</span><span class="p">()</span>
</span><span class="line">  <span class="nx">receipt</span><span class="p">.</span><span class="nx">GasUsed</span> <span class="p">=</span> <span class="nx">gas</span>
</span><span class="line">  <span class="o">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>ApplyTransaction()</code>就比较有意思了,由代码可以看出来,如果是参数检查类错误就直接返回错误,到上层后继续返回就相当于回滚了交易。然而该函数的第二步<code>ApplyMessage()</code>实际执行交易返回的后两个值<code>bool,error</code>就是关键所在了:</p>

<p>如果返回<code>error</code>,那么没什么好说的,错误逐层冒泡出去回滚交易;但如果返回<code>bool==false,error==nil</code>,则交易就正确打包了(生成了交易收据打包到区块),但是此时其实交易是执行失败了的,具体我们在进入<code>ApplyMessage()</code>,这个函数最终调用到<code>TransitionDb()</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">unc</span> <span class="p">(</span><span class="nx">st</span> <span class="o">*</span><span class="nx">StateTransition</span><span class="p">)</span> <span class="nx">TransitionDb</span><span class="p">()</span> <span class="p">(</span><span class="nx">ret</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">usedGas</span> <span class="kt">uint64</span><span class="p">,</span> <span class="nx">failed</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="o">...</span>
</span><span class="line">  <span class="c1">// 1. 该函数根据交易数据检查是否超出基本gas限制,会抛出我们常见的vm.ErrOutOfGas(out of gas),注意此处抛出的错误会使得交易完全回滚</span>
</span><span class="line">  <span class="nx">gas</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">IntrinsicGas</span><span class="p">(</span><span class="nx">st</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">contractCreation</span><span class="p">,</span> <span class="nx">homestead</span><span class="p">)</span>
</span><span class="line">  <span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">st</span><span class="p">.</span><span class="nx">useGas</span><span class="p">(</span><span class="nx">gas</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="p">(</span>
</span><span class="line">    <span class="nx">evm</span> <span class="p">=</span> <span class="nx">st</span><span class="p">.</span><span class="nx">evm</span>
</span><span class="line">    <span class="nx">vmerr</span> <span class="kt">error</span>
</span><span class="line">  <span class="p">)</span>
</span><span class="line">  <span class="c1">// 2.这里如果返回错误(vmerr!=nil)则说明交易执行失败</span>
</span><span class="line">  <span class="k">if</span> <span class="nx">contractCreation</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">ret</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">gas</span><span class="p">,</span> <span class="nx">vmerr</span> <span class="p">=</span> <span class="nx">evm</span><span class="p">.</span><span class="nx">Create</span><span class="p">(</span><span class="nx">sender</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">gas</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Increment the nonce for the next transaction</span>
</span><span class="line">    <span class="nx">st</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">SetNonce</span><span class="p">(</span><span class="nx">sender</span><span class="p">.</span><span class="nx">Address</span><span class="p">(),</span> <span class="nx">st</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">GetNonce</span><span class="p">(</span><span class="nx">sender</span><span class="p">.</span><span class="nx">Address</span><span class="p">())</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="nx">ret</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">gas</span><span class="p">,</span> <span class="nx">vmerr</span> <span class="p">=</span> <span class="nx">evm</span><span class="p">.</span><span class="nx">Call</span><span class="p">(</span><span class="nx">sender</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">to</span><span class="p">().</span><span class="nx">Address</span><span class="p">(),</span> <span class="nx">st</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">gas</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">if</span> <span class="nx">vmerr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 余额不足(&quot;insufficient balance for transfer&quot;)错误也会导致交易完全回滚</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">vmerr</span> <span class="o">==</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">ErrInsufficientBalance</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">vmerr</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="c1">// 退回剩余的gas</span>
</span><span class="line">  <span class="nx">st</span><span class="p">.</span><span class="nx">refundGas</span><span class="p">()</span>
</span><span class="line">  <span class="nx">st</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">AddBalance</span><span class="p">(</span><span class="nx">st</span><span class="p">.</span><span class="nx">evm</span><span class="p">.</span><span class="nx">Coinbase</span><span class="p">,</span> <span class="nb">new</span><span class="p">(</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">).</span><span class="nx">Mul</span><span class="p">(</span><span class="nb">new</span><span class="p">(</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">).</span><span class="nx">SetUint64</span><span class="p">(</span><span class="nx">st</span><span class="p">.</span><span class="nx">gasUsed</span><span class="p">()),</span> <span class="nx">st</span><span class="p">.</span><span class="nx">gasPrice</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// 3.vmerr不为空将导致交易失败,但仍能正确打包</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">ret</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">gasUsed</span><span class="p">(),</span> <span class="nx">vmerr</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在这个函数里可以看出来,如果交易在以太坊交易执行前报错,那么交易可以完全回滚,然而一旦交易在以太坊虚拟机内执行过程中出错,交易终止退出,消耗的gas并不会退还,这个失败的交易也会被打包到区块中.此外,以太坊中多给的gas并不会浪费掉,gas的消耗完全是按需的,多余的gas会正确退还给发起者:<code>st.refundGas()</code>.</p>

<p>综上,对于失败的交易我们能总结出以下几点性质:</p>

<ul>
  <li>失败的交易一旦被执行,就一定会被打包到区块链中,并且执行过程中消耗的gas也不会退还,交易的成功与失败可以使用交易的收据状态进行判断</li>
  <li>失败的交易如果没有打包到区块,那么可能的原因就有很多了,根据交易所处的阶段不同大概有这么几种可能: a.交易gas过低或参数错误根本没有进入到pending队列 b.交易进入pending进行处理,然而在检查gas等参数时报错被丢弃</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入ethereum源码-从区块头看共识挖矿]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/02/24/shen-ru-ethereumyuan-ma-cong-qu-kuai-tou-kan-gong-shi-wa-kuang/"/>
    <updated>2018-02-24T16:09:11+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/02/24/shen-ru-ethereumyuan-ma-cong-qu-kuai-tou-kan-gong-shi-wa-kuang</id>
    <content type="html"><![CDATA[<p>区块是区块链的基本组成单位,而区块头又是区块的核心数据,本文希望从区块头延展开来,看看区块链的挖矿机制。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">区块头的基本数据结构</a></li>
  <li><a href="#section-1">结构信息</a></li>
  <li><a href="#section-2">挖矿基础信息</a></li>
  <li><a href="#section-3">状态信息</a></li>
  <li><a href="#section-4">挖矿难度控制</a></li>
  <li><a href="#pow">PoW参数</a>    <ul>
      <li><a href="#dag">DAG</a></li>
      <li><a href="#hashimoto">hashimoto</a></li>
    </ul>
  </li>
  <li><a href="#section-5">其他</a></li>
  <li><a href="#section-6">参考文献</a></li>
</ul>

<h1 id="section">区块头的基本数据结构</h1>

<p>废话不多说,直接看代码:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/core/types/block.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// Header represents a block header in the Ethereum blockchain.</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">Header</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 1.结构信息</span>
</span><span class="line">    <span class="nx">ParentHash</span>  <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span>    <span class="s">`json:&quot;parentHash&quot;       gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">UncleHash</span>   <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span>    <span class="s">`json:&quot;sha3Uncles&quot;       gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">Number</span>      <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span>       <span class="s">`json:&quot;number&quot;           gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 2.挖矿基础信息</span>
</span><span class="line">    <span class="nx">Coinbase</span>    <span class="nx">common</span><span class="p">.</span><span class="nx">Address</span> <span class="s">`json:&quot;miner&quot;            gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">GasLimit</span>    <span class="kt">uint64</span>         <span class="s">`json:&quot;gasLimit&quot;         gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">GasUsed</span>     <span class="kt">uint64</span>         <span class="s">`json:&quot;gasUsed&quot;          gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 3.状态信息</span>
</span><span class="line">    <span class="nx">Time</span>        <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span>       <span class="s">`json:&quot;timestamp&quot;        gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">Root</span>        <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span>    <span class="s">`json:&quot;stateRoot&quot;        gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">TxHash</span>      <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span>    <span class="s">`json:&quot;transactionsRoot&quot; gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">ReceiptHash</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span>    <span class="s">`json:&quot;receiptsRoot&quot;     gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">Bloom</span>       <span class="nx">Bloom</span>          <span class="s">`json:&quot;logsBloom&quot;        gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 4.挖矿难度控制</span>
</span><span class="line">    <span class="nx">Difficulty</span>  <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span>       <span class="s">`json:&quot;difficulty&quot;       gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 5.PoW参数</span>
</span><span class="line">    <span class="nx">MixDigest</span>   <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span>    <span class="s">`json:&quot;mixHash&quot;          gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">Nonce</span>       <span class="nx">BlockNonce</span>     <span class="s">`json:&quot;nonce&quot;            gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 6.其他</span>
</span><span class="line">    <span class="nx">Extra</span>       <span class="p">[]</span><span class="kt">byte</span>         <span class="s">`json:&quot;extraData&quot;        gencodec:&quot;required&quot;`</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>乍一看区块头的字段非常多,别着急,接下来我们逐个分析。按照字段的作用,我们可以将这些字段分成6大类(如代码注释所示),分别控制结构、状态、挖矿等信息,下面我们依次查看.</p>

<blockquote>
  <p>本文引用源码大部分均位于miner/consensus两个包中,代码引用均会给出文件名</p>
</blockquote>

<h1 id="section-1">结构信息</h1>

<p>1.<code>ParentHash</code></p>

<p>简单来说,区块链其实是一个单向链表。那么单向链表中必然存在一个将链表串起来的指针,这个指针在区块链里就是<code>ParentHash</code>.每个新挖出来的区块都包含了父区块的hash值,这样我们就可以从当前区块一直溯源到创世区块,创世区块hash值为<code>0x00</code>.</p>

<p>2.<code>UncleHash</code></p>

<p>类似ParentHash,指向叔区块hash值。</p>

<p>3.<code>Number</code></p>

<p>用于标记当前区块高度,子区块高度一定是父区块+1.</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/blockchain-link.png" alt="blockchain-link" /></p>

<p>构建区块的代码包含在<code>commitNewWork</code>函数中,该函数其实就是挖矿主流程所在位置。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/miner/worker.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">self</span> <span class="o">*</span><span class="nx">worker</span><span class="p">)</span> <span class="nx">commitNewWork</span><span class="p">(){</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="nx">num</span> <span class="o">:=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">Number</span><span class="p">()</span>
</span><span class="line">    <span class="nx">header</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">types</span><span class="p">.</span><span class="nx">Header</span><span class="p">{</span>
</span><span class="line">        <span class="nx">ParentHash</span><span class="p">:</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">Hash</span><span class="p">(),</span>          <span class="c1">// 父区块的hash</span>
</span><span class="line">        <span class="nx">Number</span><span class="p">:</span>     <span class="nx">num</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="nx">num</span><span class="p">,</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Big1</span><span class="p">),</span>  <span class="c1">// 父区块的number+1</span>
</span><span class="line">        <span class="nx">GasLimit</span><span class="p">:</span>   <span class="nx">core</span><span class="p">.</span><span class="nx">CalcGasLimit</span><span class="p">(</span><span class="nx">parent</span><span class="p">),</span>
</span><span class="line">        <span class="nx">Extra</span><span class="p">:</span>      <span class="nx">self</span><span class="p">.</span><span class="nx">extra</span><span class="p">,</span>
</span><span class="line">        <span class="nx">Time</span><span class="p">:</span>       <span class="nx">big</span><span class="p">.</span><span class="nx">NewInt</span><span class="p">(</span><span class="nx">tstamp</span><span class="p">),</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-2">挖矿基础信息</h1>

<p>1.<code>Coinbase</code></p>

<p>区块链中矿工没挖出一个新区块,都会得到两部分奖励收益:挖矿奖励+手续费,那么这个奖励是到哪个账户的,就是这个coinbase帐号,默认通常是矿工本地第一个账户。</p>

<p>2.<code>GasUsed</code></p>

<p>实际使用的gas,每执行一笔交易往该字段上累积gas值,具体代码可查看<code>ethereum/go-ethereum/core/state_processor.go:ApplyTransaction</code>.</p>

<p>3.<code>GasLimit</code></p>

<p>矿工执行交易的上限gas用量,如果执行某个交易时发现gas使用超过这个值则放弃执行后续交易。其数值是基于父区块gas用量来调整,如果<code>parentGasUsed &gt; parentGasLimit * (2/3)</code>,则增大该数值，反之则减小。具体实现可参考下面代码实现。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/core/block_validator.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// CalcGasLimit computes the gas limit of the next block after parent.</span>
</span><span class="line"><span class="c1">// This is miner strategy, not consensus protocol.</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">CalcGasLimit</span><span class="p">(</span><span class="nx">parent</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Block</span><span class="p">)</span> <span class="kt">uint64</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// contrib = (parentGasUsed * 3 / 2) / 1024</span>
</span><span class="line">    <span class="nx">contrib</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">parent</span><span class="p">.</span><span class="nx">GasUsed</span><span class="p">()</span> <span class="o">+</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">GasUsed</span><span class="p">()</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="nx">params</span><span class="p">.</span><span class="nx">GasLimitBoundDivisor</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// decay = parentGasLimit / 1024 -1</span>
</span><span class="line">    <span class="nx">decay</span> <span class="o">:=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">GasLimit</span><span class="p">()</span><span class="o">/</span><span class="nx">params</span><span class="p">.</span><span class="nx">GasLimitBoundDivisor</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">        strategy: gasLimit of block-to-mine is set based on parent&#39;s</span>
</span><span class="line"><span class="cm">        gasUsed value.  if parentGasUsed &gt; parentGasLimit * (2/3) then we</span>
</span><span class="line"><span class="cm">        increase it, otherwise lower it (or leave it unchanged if it&#39;s right</span>
</span><span class="line"><span class="cm">        at that usage) the amount increased/decreased depends on how far away</span>
</span><span class="line"><span class="cm">        from parentGasLimit * (2/3) parentGasUsed is.</span>
</span><span class="line"><span class="cm">    */</span>
</span><span class="line">    <span class="nx">limit</span> <span class="o">:=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">GasLimit</span><span class="p">()</span> <span class="o">-</span> <span class="nx">decay</span> <span class="o">+</span> <span class="nx">contrib</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">limit</span> <span class="p">&lt;</span> <span class="nx">params</span><span class="p">.</span><span class="nx">MinGasLimit</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">limit</span> <span class="p">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">MinGasLimit</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">// however, if we&#39;re now below the target (TargetGasLimit) we increase the</span>
</span><span class="line">    <span class="c1">// limit as much as we can (parentGasLimit / 1024 -1)</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">limit</span> <span class="p">&lt;</span> <span class="nx">params</span><span class="p">.</span><span class="nx">TargetGasLimit</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">limit</span> <span class="p">=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">GasLimit</span><span class="p">()</span> <span class="o">+</span> <span class="nx">decay</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">limit</span> <span class="p">&gt;</span> <span class="nx">params</span><span class="p">.</span><span class="nx">TargetGasLimit</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">limit</span> <span class="p">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">TargetGasLimit</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">limit</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-3">状态信息</h1>

<p>1.<code>Time</code></p>

<p>新区块的出块时间(按代码描述,严格来说其实是开始挖矿的时间)。</p>

<p>2.<code>Root</code>,<code>TxHash</code>,<code>ReceiptHash</code></p>

<p>这三个hash值对验证区块意义重大.</p>

<p><code>Root</code>代表的区块链当前所有账户的状态,<code>TxHash</code>是本区块所有交易摘要,<code>ReceiptHash</code>是本区块所有收据的摘要。</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/merkle.png" alt="merkle" /></p>

<p>这几个值都是MPT树的root hash值,只要树中任意节点数据有更改，那么这个root hash必然会跟着更改,这就为轻钱包实现提供了可能:不需要下载整个区块的数据,仅使用区块头就可以验证区块的合法性。具体说来,它允许轻客户端轻松地进行并核实以下类型的查询答案:</p>

<p>这笔交易被包含在特定的区块中了么？</p>

<ul>
  <li>
    <p>告诉我这个地址在过去30天中，发出X类型事件的所有实例（例如，一个众筹合约完成了它的目标）</p>
  </li>
  <li>
    <p>目前我的账户余额是多少？</p>
  </li>
  <li>
    <p>这个账户是否存在？</p>
  </li>
  <li>
    <p>假装在这个合约中运行这笔交易，它的输出会是什么？</p>
  </li>
</ul>

<p>第一种是由交易树（transaction tree）来处理的；第三和第四种则是由状态树（state tree）负责处理，第二种则由收据树（receipt tree）处理。计算前四个查询任务是相当简单的。服务器简单地找到对象，获取默克尔分支，并通过分支来回复轻客户端。</p>

<p>第五种查询任务同样也是由状态树处理，但它的计算方式会比较复杂。这里，我们需要构建下我们称之为默克尔状态转变的证明（Merkle state transition proof）。从本质上来讲，这样的证明也就是在说“如果你在根S的状态树上运行交易T，其结果状态树将是根为S’，log为L，输出为O” （“输出”作为存在于以太坊的一种概念，因为每一笔交易都是一个函数调用，它在理论上并不是必要的）。</p>

<p>为了推断这个证明，服务器在本地创建了一个假的区块，将状态设为 S，并假装是一个轻客户端，同时请求这笔交易。也就是说，如果请求这笔交易的过程，需要客户端确定一个账户的余额，这个轻客户端会发出一个余额疑问。如果这个轻客户端需要检查存储在一个特定合约的特定项目，该轻客户端会对此发出针对查询。服务器会正确地“回应”它所有的查询，但服务器也会跟踪它所有发回的数据。然后，服务器会把综合数据发送给客户端。客户端会进行相同的步骤，但会使用它的数据库所提供的证明。如果它的结果和服务器要求的是相同的，那客户端就接受证明。</p>

<blockquote>
  <p>MPT树可以参考文章<a href="http://ethfans.org/posts/Merkle-Patricia-Tree">Merkle树</a></p>
</blockquote>

<p>3.<code>Bloom</code></p>

<p>区块头里的布隆过滤器是用于搜索收据而构建的。</p>

<blockquote>
  <p><a href="https://github.com/cpselvis/zhihu-crawler/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0">布隆过滤器</a></p>
</blockquote>

<h1 id="section-4">挖矿难度控制</h1>

<p>1.<code>Difficulty</code></p>

<p>以太坊的挖矿难度是动态调整的,它的难度调整仅和父区块和本区块挖矿时间有关。 而该函数实现里根据启动参数目前有三种难度调整方案:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/consensus/ethash/consensus.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">CalcDifficulty</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">params</span><span class="p">.</span><span class="nx">ChainConfig</span><span class="p">,</span> <span class="nx">time</span> <span class="kt">uint64</span><span class="p">,</span> <span class="nx">parent</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Header</span><span class="p">)</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">next</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">).</span><span class="nx">Add</span><span class="p">(</span><span class="nx">parent</span><span class="p">.</span><span class="nx">Number</span><span class="p">,</span> <span class="nx">big1</span><span class="p">)</span>
</span><span class="line">    <span class="k">switch</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="nx">config</span><span class="p">.</span><span class="nx">IsByzantium</span><span class="p">(</span><span class="nx">next</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">calcDifficultyByzantium</span><span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="nx">parent</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="nx">config</span><span class="p">.</span><span class="nx">IsHomestead</span><span class="p">(</span><span class="nx">next</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">calcDifficultyHomestead</span><span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="nx">parent</span><span class="p">)</span>
</span><span class="line">    <span class="k">default</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">calcDifficultyFrontier</span><span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="nx">parent</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>每种策略代码这里不具体展开,总的来说难度值的计算是这样的:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/consensus/ethash/consensus.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="err">本区块难度</span> <span class="p">=</span> <span class="err">父区块难度</span> <span class="o">+</span> <span class="err">难度调整值</span> <span class="o">+</span> <span class="err">难度炸弹</span>
</span><span class="line"><span class="err">难度调整值</span> <span class="p">=</span> <span class="nx">f</span><span class="p">(</span><span class="err">父区块难度</span><span class="p">,</span><span class="err">父区块产生时间</span><span class="p">,</span><span class="err">本区块产生时间</span><span class="p">)</span>
</span><span class="line"><span class="err">难度炸弹</span> <span class="p">=</span> <span class="mi">2</span><span class="p">^(</span><span class="err">区块号</span><span class="o">/</span><span class="mi">100000</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以太坊的区块难度以单个区块为单位进行调整，可以非常迅速的适应算力的变化，正是这种机制，使以太坊在硬分叉出以太坊经典(ETC)以后没有出现比特币分叉出比特币现金(BCC)后的算力“暴击”问题。同时，以太坊的新区块难度在老区块的基础上有限调整的机制也使区块难度不会出现非常大的跳变</p>

<p>从这个公式可以看出,区块难度短期内仅和难度调整值有关(因为难度炸弹只有每100000个区块才会产生跳变),但是当挖矿到5400000区块后,难度值跳变到非常大,这个时候就不再适合挖矿。 </p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/eth-diff.jpg" alt="eth-diff" /></p>

<h1 id="pow">PoW参数</h1>

<p>接下来的两个参数就和无人不知无人不晓的工作量证明息息相关了,以太坊的工作量证明最终拼的就是谁最先得到这两个参数:<code>MixDigest</code>和<code>Nonce</code>.</p>

<p>目前以太坊线上使用的共识算法是基于PoW的ethash算法,主要实现位于<code>github.com/ethereum/go-ethereum/consensus/ethash</code>包中。</p>

<p>PoW算法的思路都大致是相似的,通过暴力枚举猜测一个nonce值,使得根据这个nonce种子计算出的hash值符合约定的难度,这个难度其实就是要求hash值前缀包含多少个0. </p>

<p>目前以太坊使用的hash是256位,所以将难度折算成前缀0的位数就是:<code>bits0 = (2^256)/difficulty</code>,那么我们的代码不停枚举nonce然后将计算得到的hash值前缀0位数和这个做比较就行了,主逻辑代码如下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">ethash</span> <span class="o">*</span><span class="nx">Ethash</span><span class="p">)</span> <span class="nx">mine</span><span class="p">(</span><span class="nx">block</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Block</span><span class="p">,</span> <span class="nx">id</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">seed</span> <span class="kt">uint64</span><span class="p">,</span> <span class="nx">abort</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{},</span> <span class="nx">found</span> <span class="kd">chan</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Block</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Extract some data from the header</span>
</span><span class="line">    <span class="kd">var</span> <span class="p">(</span>
</span><span class="line">        <span class="nx">header</span>  <span class="p">=</span> <span class="nx">block</span><span class="p">.</span><span class="nx">Header</span><span class="p">()</span>
</span><span class="line">        <span class="nx">hash</span>    <span class="p">=</span> <span class="nx">header</span><span class="p">.</span><span class="nx">HashNoNonce</span><span class="p">().</span><span class="nx">Bytes</span><span class="p">()</span>
</span><span class="line">        <span class="c1">// 将难度转换得出前缀0的位数</span>
</span><span class="line">        <span class="nx">target</span>  <span class="p">=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">).</span><span class="nx">Div</span><span class="p">(</span><span class="nx">maxUint256</span><span class="p">,</span> <span class="nx">header</span><span class="p">.</span><span class="nx">Difficulty</span><span class="p">)</span>
</span><span class="line">        <span class="nx">number</span>  <span class="p">=</span> <span class="nx">header</span><span class="p">.</span><span class="nx">Number</span><span class="p">.</span><span class="nx">Uint64</span><span class="p">()</span>
</span><span class="line">        <span class="nx">dataset</span> <span class="p">=</span> <span class="nx">ethash</span><span class="p">.</span><span class="nx">dataset</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span>
</span><span class="line">    <span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="nx">search</span><span class="p">:</span>
</span><span class="line">    <span class="k">for</span> <span class="p">{</span>
</span><span class="line">        <span class="o">...</span>
</span><span class="line">            <span class="c1">// Compute the PoW value of this nonce</span>
</span><span class="line">            <span class="nx">digest</span><span class="p">,</span> <span class="nx">result</span> <span class="o">:=</span> <span class="nx">hashimotoFull</span><span class="p">(</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">dataset</span><span class="p">,</span> <span class="nx">hash</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="nb">new</span><span class="p">(</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">).</span><span class="nx">SetBytes</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">Cmp</span><span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class="line">                <span class="c1">// Correct nonce found, create a new header with it</span>
</span><span class="line">                <span class="nx">header</span> <span class="p">=</span> <span class="nx">types</span><span class="p">.</span><span class="nx">CopyHeader</span><span class="p">(</span><span class="nx">header</span><span class="p">)</span>
</span><span class="line">                <span class="nx">header</span><span class="p">.</span><span class="nx">Nonce</span> <span class="p">=</span> <span class="nx">types</span><span class="p">.</span><span class="nx">EncodeNonce</span><span class="p">(</span><span class="nx">nonce</span><span class="p">)</span>
</span><span class="line">                <span class="nx">header</span><span class="p">.</span><span class="nx">MixDigest</span> <span class="p">=</span> <span class="nx">common</span><span class="p">.</span><span class="nx">BytesToHash</span><span class="p">(</span><span class="nx">digest</span><span class="p">)</span>
</span><span class="line">                <span class="o">...</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="nx">nonce</span><span class="o">++</span>
</span><span class="line">         <span class="o">...</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>该函数首先计算出区块难度对应的前缀0位数<code>target</code>,然后生成PoW依赖的计算数据集<code>dataset = ethash.dataset(number)</code>,最终开始死循环尝试计算<code>digest, result := hashimotoFull(dataset.dataset, hash, nonce)</code>,得到结果后将这两个随机数据赋值到区块头对应字段去。</p>

<p>当这个区块成功挖出后，别的区块很容易验证这个区块的PoW是否有效,就使用同样方法产生计算数据集<code>dataset</code>,然后调用<code>hashimotoLight(和hashimotoFull基本一致)</code>计算出<code>digest</code>和区块头的<code>MixDigest</code>做比较就可以了。</p>

<p>这里我们跳过了两个重要的步骤:</p>

<p>a.依赖数据集<code>dataset</code>的生成实现
b.<code>hashimotoFull/hashimotoLight</code>的具体实现</p>

<p>依赖数据集的生成就要说到以太坊的DAG</p>

<h2 id="dag">DAG</h2>

<p>ethash将DAG（有向非循环图）用于工作量证明算法，这是为每个epoch(<code>epoch := block / epochLength</code>)生成，例如，每3000个区块（125个小时，大约5.2天）。DAG要花很长时间生成。如果客户端只是按需要生成它，那么在找到新epoch第一个区块之前，每个epoch过渡都要等待很长时间。然而，DAG只取决于区块数量，所以可以预先计算来避免在每个epoch过渡过长的等待时间。Geth和ethminer执行自动的DAG生成，每次维持2个DAG以便epoch过渡流畅。挖矿从控制台操控的时候，自动DAG生成会被打开和关闭。</p>

<h2 id="hashimoto">hashimoto</h2>

<blockquote>
  <p>下面的描述摘自<a href="http://blog.csdn.net/teaspring/article/details/78050274">挖矿和共识算法的奥秘</a></p>
</blockquote>

<p>hashimoto()的逻辑比较复杂，包含了多次、多种哈希运算。下面尝试从其中数据结构变化的角度来简单描述之：</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/consensus.png" alt="hashimoto" /></p>

<p>简单介绍一下上图所代表的代码流程：</p>

<ul>
  <li>首先，hashimoto()函数将入参@hash和@nonce合并成一个40 bytes长的数组，取它的SHA-512哈希值取名seed，长度为64 bytes。</li>
  <li>然后，将seed[]转化成以uint32为元素的数组mix[]，注意一个uint32数等于4 bytes，故而seed[]只能转化成16个uint32数，而mix[]数组长度32，所以此时mix[]数组前后各半是等值的。</li>
  <li>接着，lookup()函数登场。用一个循环，不断调用lookup()从外部数据集中取出uint32元素类型数组，向mix[]数组中混入未知的数据。循环的次数可用参数调节，目前设为64次。每次循环中，变化生成参数index，从而使得每次调用lookup()函数取出的数组都各不相同。这里混入数据的方式是一种类似向量“异或”的操作，来自于FNV算法。</li>
  <li>待混淆数据完成后，得到一个基本上面目全非的mix[]，长度为32的uint32数组。这时，将其折叠(压缩)成一个长度缩小成原长1/4的uint32数组，折叠的操作方法还是来自FNV算法。</li>
  <li>最后，将折叠后的mix[]由长度为8的uint32型数组直接转化成一个长度32的byte数组，这就是返回值@digest；同时将之前的seed[]数组与digest合并再取一次SHA-256哈希值，得到的长度32的byte数组，即返回值@result。</li>
</ul>

<p>最终经过一系列多次、多种的哈希运算，hashimoto()返回两个长度均为32的byte数组 - digest[]和result[]。回忆一下ethash.mine()函数中，对于hashimotoFull()的两个返回值，会直接以big.int整型数形式比较result和target；如果符合要求，则将digest取SHA3-256的哈希值(256 bits)，并存于Header.MixDigest中，待以后Ethash.VerifySeal()可以加以验证。</p>

<h1 id="section-5">其他</h1>

<p>1.<code>Extra</code></p>

<h1 id="section-6">参考文献</h1>

<ul>
  <li><a href="http://blog.csdn.net/teaspring/article/details/78050274">挖矿和共识算法的奥秘</a> </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入ethereum源码-whisper协议解读]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/02/07/shen-ru-ethereumyuan-ma-whisperxie-yi-jie-du/"/>
    <updated>2018-02-07T16:13:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/02/07/shen-ru-ethereumyuan-ma-whisperxie-yi-jie-du</id>
    <content type="html"><![CDATA[<p>whisper协议是以太坊DApps之间的通信协议。</p>

<!-- more -->

<h1 id="section">概述</h1>

<p>whisper是完全基于<code>ID</code>的消息系统,它的设计目的是形成一套p2p节点间的异步广播系统。whisper网络上的消息是加密传送的,完全可以暴露在公网进行传输;此外,为了防范<code>DDos</code>攻击,whisper使用了<code>proof-of-work(PoW)</code>工作量证明提高消息发送门槛。</p>

<h1 id="whisper">whisper基础构件</h1>

<p>whisper协议对上层暴露出一套类似于<code>订阅-发布</code>的API模型,节点可以申请自己感兴趣的<code>topic</code>，那么就只会接收到这些<code>topic</code>的消息,无关主题的消息将被丢弃。在这套体系内，有几个基础构件需要说明下:</p>

<h2 id="envelope">Envelope信封</h2>

<p><code>envelope即信封</code>是whisper网络节点传输数据的基本形式。信封包含了加密的数据体和明文的元数据,元数据主要用于基本的消息校验和消息体的解密。</p>

<p>信封是以RLP编码的格式传输:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[ Version, Expiry, TTL, Topic, AESNonce, Data, EnvNonce ]</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>Version</code>:最多4字节(目前仅使用了1字节)，如果信封的<code>Version</code>比本节点当前值高,将无法解密,仅做转发</li>
  <li><code>Expiry</code>:4字节（unix时间戳秒数）,过期时间</li>
  <li><code>TTL</code>:4字节,剩余存活时间秒数</li>
  <li><code>Topic</code>:4字节,信封主题</li>
  <li><code>AESNonce</code>:12字节随机数据,仅在对称加密时有效</li>
  <li><code>Data</code>:消息体</li>
  <li><code>EnvNonce</code>:8字节任意数据(用于PoW计算)</li>
</ul>

<p>如果节点无法解密信封，那么节点对信封内的消息内容一无所知，单这并不影响节点将消息进行转发扩散。</p>

<h2 id="message">Message消息</h2>

<p>信封内的消息体解密后即得到消息内容。</p>

<h2 id="topic">Topic主题</h2>

<p>每个信封上都有一个主题,注意主题可以仅使用部分前缀</p>

<h2 id="filter">Filter过滤器</h2>

<p><code>filter</code>即<code>订阅-发布</code>模型中的订阅者</p>

<h2 id="pow">PoW工作量证明</h2>

<p><code>PoW</code>的存在是为了反垃圾信息以及降低网络负担。计算PoW所付出的代价可以理解为抵扣节点为传播和存储信息锁花费的资源.</p>

<p>在<code>whisperv5</code>中,<code>PoW</code>定义为:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">PoW = (2^BestBit) / (size * TTL)</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>BestBit</code>是hash计算值的前导0个数</li>
  <li><code>size</code>是消息大小</li>
  <li><code>TTL</code></li>
</ul>

<p>具有高<code>PoW</code>的消息具有优先处理权。</p>

<p>whisper节点发送消息需要经过<code>创建消息whisper.NewSentMessage()</code>—-&gt;<code>封装入信封msg.Wrap(msg)</code>—-&gt;<code>shh.Send()</code>,消息的工作量证明就在第二步装入信封的时候进行计算。</p>

<p><code>Warp</code>函数最终调用<code>Seal</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/whisper/whisperv5/envelope.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">Envelope</span><span class="p">)</span> <span class="nx">Seal</span><span class="p">(</span><span class="nx">options</span> <span class="o">*</span><span class="nx">MessageParams</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">target</span><span class="p">,</span> <span class="nx">bestBit</span> <span class="kt">int</span> <span class="c1">// target是需要达到的目标前置0位数</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">PoW</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// 将消息过期时间调整到工作量计算完成后</span>
</span><span class="line">        <span class="nx">e</span><span class="p">.</span><span class="nx">Expiry</span> <span class="o">+=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">WorkTime</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// 根据公式 PoW = (2^BestBit) / (size * TTL) 从预设的PoW阈值反解出BestBit</span>
</span><span class="line">        <span class="nx">target</span> <span class="p">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">powToFirstBit</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">PoW</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">target</span> <span class="p">&lt;</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">target</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">buf</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>
</span><span class="line">    <span class="c1">// Keccak256是SHA-3的一种,Keccak已可以抵御最小的复杂度为2n的攻击，其中N为散列的大小。它具有广泛的安全边际。至目前为止，第三方密码分析已经显示出Keccak没有严重的弱点</span>
</span><span class="line">    <span class="nx">h</span> <span class="o">:=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">Keccak256</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">rlpWithoutNonce</span><span class="p">())</span>
</span><span class="line">    <span class="nb">copy</span><span class="p">(</span><span class="nx">buf</span><span class="p">[:</span><span class="mi">32</span><span class="p">],</span> <span class="nx">h</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="nx">finish</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">Add</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">WorkTime</span><span class="p">)</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">).</span><span class="nx">UnixNano</span><span class="p">()</span>
</span><span class="line">    <span class="k">for</span> <span class="nx">nonce</span> <span class="o">:=</span> <span class="nb">uint64</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">UnixNano</span><span class="p">()</span> <span class="p">&lt;</span> <span class="nx">finish</span><span class="p">;</span> <span class="p">{</span>
</span><span class="line">        <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">1024</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class="line">            <span class="c1">// 暴力尝试nonce值</span>
</span><span class="line">            <span class="nx">binary</span><span class="p">.</span><span class="nx">BigEndian</span><span class="p">.</span><span class="nx">PutUint64</span><span class="p">(</span><span class="nx">buf</span><span class="p">[</span><span class="mi">56</span><span class="p">:],</span> <span class="nx">nonce</span><span class="p">)</span>
</span><span class="line">            <span class="nx">d</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">).</span><span class="nx">SetBytes</span><span class="p">(</span><span class="nx">crypto</span><span class="p">.</span><span class="nx">Keccak256</span><span class="p">(</span><span class="nx">buf</span><span class="p">))</span>
</span><span class="line">            <span class="nx">firstBit</span> <span class="o">:=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">FirstBitSet</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="nx">firstBit</span> <span class="p">&gt;</span> <span class="nx">bestBit</span> <span class="p">{</span>
</span><span class="line">                <span class="nx">e</span><span class="p">.</span><span class="nx">EnvNonce</span><span class="p">,</span> <span class="nx">bestBit</span> <span class="p">=</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">firstBit</span>
</span><span class="line">                <span class="c1">// 当尝试得到满足条件的EnvNonce,计算完成</span>
</span><span class="line">                <span class="k">if</span> <span class="nx">target</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">bestBit</span> <span class="o">&gt;=</span> <span class="nx">target</span> <span class="p">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="nx">nonce</span><span class="o">++</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">target</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">bestBit</span> <span class="p">&lt;</span> <span class="nx">target</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Errorf</span><span class="p">(</span><span class="s">&quot;failed to reach the PoW target, specified pow time (%d seconds) was insufficient&quot;</span><span class="p">,</span> <span class="nx">options</span><span class="p">.</span><span class="nx">WorkTime</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-1">通信流程</h1>

<p>whisper协议的实现位于包<code>github.com/ethereum/go-ethereum/whisper</code>，该包下面有多个版本实现,目前最新协议包是<code>whisperv6</code>.</p>

<h2 id="whisper-main-loop">whisper main loop</h2>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/whisper-main-loop.png" alt="whisper-main-loop" /></p>

<p>whisper节点启动后产生两个分支:</p>

<ul>
  <li>一个分支负责清理<code>shh.envelopes</code>中的过期消息</li>
  <li>另一个分支(proccessQueue)从两个队列取出新接收到的消息,根据消息对应topic投放(Trigger)到对应接收者(filter),从而交付给上层应用进行处理</li>
</ul>

<p>补充说下whisper里两个队列<code>messageQueue,p2pMsgQueue</code>的不同作用,<code>messageQueue</code>接收普通的广播消息,<code>p2pMsgQueue</code>接收点对点的直接消息,可绕过<code>pow</code>和<code>ttl</code>限制.</p>

<h2 id="whisper-protocol">whisper protocol</h2>

<p>whisper协议的具体实现里,代码流程也非常清晰:</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/whisper-peer-loop.png" alt="whisper-peer-loop" /></p>

<p>每个peer连接成功后,产生两个goroutine,进行消息接收和广播:</p>

<ul>
  <li>接收消息协程不断从连接中读取新消息,并且将消息暂存到<code>shh.envelopes</code>中,如果发现是一条未接收过的新消息,则将消息转发到对应的队列<code>(messageQueue,p2pMsgQueue)</code></li>
  <li>广播协程负责将该peer未接收过的消息(本节点认为该peer未接收过,并非peer一定没接收过,p2p网络其他节点可能已经将消息广播到该节点了)投递到该peer</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入ethereum源码-p2p模块节点发现机制]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/01/30/shen-ru-ethereumyuan-ma-p2pmo-kuai-jie-dian-fa-xian-ji-zhi/"/>
    <updated>2018-01-30T11:40:37+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/01/30/shen-ru-ethereumyuan-ma-p2pmo-kuai-jie-dian-fa-xian-ji-zhi</id>
    <content type="html"><![CDATA[<p>ethereum是基于kademlia协议实现其节点自动发现机制,完整整个网络拓扑关系的构建刷新。
<!-- more --></p>

<ul id="markdown-toc">
  <li><a href="#kademlia">Kademlia协议</a></li>
  <li><a href="#kademlia-like">以太坊Kademlia-like协议</a></li>
  <li><a href="#section">源码跟踪以太坊节点发现机制</a>    <ul>
      <li><a href="#refreshloop">1. <code>refreshLoop()</code></a></li>
      <li><a href="#loopreadloop">2. <code>loop()</code>和<code>readLoop()</code></a></li>
    </ul>
  </li>
  <li><a href="#section-1">内网穿透</a></li>
  <li><a href="#section-2">参考文献</a></li>
</ul>

<h1 id="kademlia">Kademlia协议</h1>

<blockquote>
  <p>以下内容摘自维基百科,全文查看参考文献Kademlia</p>
</blockquote>

<p>Kademlia是一种通过分散式杂凑表实现的协议算法，它是由Petar和David为非集中式P2P计算机网络而设计的。Kademlia规定了网络的结构，也规定了通过节点查询进行信息交换的方式。Kademlia网络节点之间使用UDP进行通讯。参与通讯的所有节点形成一张虚拟网（或者叫做覆盖网）。这些节点通过一组数字（或称为节点ID）来进行身份标识。节点ID不仅可以用来做身份标识，还可以用来进行值定位。</p>

<p>Kademlia路由表由多个列表组成，每个列表对应节点ID的一位（例如：假如节点ID共有128位，则节点的路由表将包含128个列表），包含多个条目，条目中包含定位其他节点所必要的一些数据。列表条目中的这些数据通常是由其他节点的IP地址，端口和节点ID组成。每个列表对应于与节点相距特定范围距离的一些节点，节点的第n个列表中所找到的节点的第n位与该节点的第n位肯定不同，而前n-1位相同，这就意味着很容易使用网络中远离该节点的一半节点来填充第一个列表（第一位不同的节点最多有一半），而用网络中四分之一的节点来填充第二个列表（比第一个列表中的那些节点离该节点更近一位），依次类推。如果ID有128个二进制位，则网络中的每个节点按照不同的异或距离把其他所有的节点分成了128类，ID的每一位对应于其中的一类。随着网络中的节点被某节点发现，它们被逐步加入到该节点的相应的列表中，这个过程中包括向节点列表中存信息和从节点列表中取信息的操作，甚至还包括当时协助其他节点寻找相应键对应值的操作。这个过程中发现的所有节点都将被加入到节点的列表之中，因此节点对整个网络的感知是动态的，这使得网络一直保持着频繁地更新，增强了抵御错误和攻击的能力。</p>

<p>在Kademlia相关的论文中，列表也称为K桶，其中K是一个系统变量，如20，每一个K桶是一个最多包含K个条目的列表，也就是说，网络中所有节点的一个列表（对应于某一位，与该节点相距一个特定的距离）最多包含20个节点。随着对应的bit位变低（即对应的异或距离越来越短），K桶包含的可能节点数迅速下降（这是由于K桶对应的异或距离越近，节点数越少），因此，对应于更低bit位的K桶显然包含网络中所有相关部分的节点。由于网络中节点的实际数量远远小于可能ID号的数量，所以对应那些短距离的某些K桶可能一直是空的（如果异或距离只有1，可能的数量就最大只能为1，这个异或距离为1的节点如果没有发现，则对应于异或距离为1的K桶则是空的）。</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/6/63/Dht_example_SVG.svg" alt="kademlia example" /></p>

<p>让我们看上面的那个简单网络，该网络最大可有2^3，即8个关键字和节点，目前共有7个节点加入，每个节点用一个小圈表示（在树的底部）。我们考虑那个用黑圈标注的节点6，它共有3个K桶，节点0，1和2（二进制表示为000，001和010）是第一个K桶的候选节点，节点3目前（二进制表示为011）还没有加入网络，节点4和节点5（二进制表示分别为100和101）是第二个K桶的候选节点，只有节点7（二进制表示为111）是第3个K桶的候选节点。图中，3个K桶都用灰色圈表示，假如K桶的大小（即K值）是2，那么第一个K桶只能包含3个节点中的2个。众所周知，那些长时间在线连接的节点未来长时间在线的可能性更大，基于这种静态统计分布的规律，Kademlia选择把那些长时间在线的节点存入K桶，这一方法增长了未来某一时刻有效节点的数量，同时也提供了更为稳定的网络。当某个K桶已满，而又发现了相应于该桶的新节点的时候，那么，就首先检查K桶中最早访问的节点，假如该节点仍然存活，那么新节点就被安排到一个附属列表中（作为一个替代缓存）.只有当K桶中的某个节点停止响应的时候，替代cache才被使用。换句话说，新发现的节点只有在老的节点消失后才被使用。</p>

<h1 id="kademlia-like">以太坊Kademlia-like协议</h1>

<p>以太坊的kademlia网(简称kad)和标准kad网有部分差异.</p>

<p>下面对照以太坊源码,阐述下kad网里几个概念:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/p2p/discover/table.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">const</span> <span class="p">(</span>
</span><span class="line">    <span class="nx">alpha</span>      <span class="p">=</span> <span class="mi">3</span>                      <span class="c1">// Kademlia并发参数</span>
</span><span class="line">    <span class="nx">bucketSize</span> <span class="p">=</span> <span class="mi">16</span>                     <span class="c1">// Kademlia K桶大小(可容纳节点数)</span>
</span><span class="line">    <span class="nx">hashBits</span>   <span class="p">=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span><span class="p">{})</span> <span class="o">*</span> <span class="mi">8</span> <span class="c1">// 每个节点ID长度,32*8=256, 32位16进制</span>
</span><span class="line">    <span class="nx">nBuckets</span>   <span class="p">=</span> <span class="nx">hashBits</span> <span class="o">+</span> <span class="mi">1</span>           <span class="c1">// K桶个数</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>α</code>即代码里的<code>alpha</code>,是系统内一个优化参数,控制每次从K桶最多取出节点个数,ethereum取值3</li>
  <li><code>bucketSize</code>,K桶大小,ethereum取16</li>
  <li><code>hashBits</code>,节点长度256位</li>
  <li><code>nBuckets</code>,K桶个数,目前取257</li>
</ul>

<p>以太坊Kad网总共定义了4种消息类型:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/p2p/discover/udp.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">const</span> <span class="p">(</span>
</span><span class="line">    <span class="nx">pingPacket</span> <span class="p">=</span> <span class="kc">iota</span> <span class="o">+</span> <span class="mi">1</span> <span class="c1">// ping操作</span>
</span><span class="line">    <span class="nx">pongPacket</span>            <span class="c1">// pong操作</span>
</span><span class="line">
</span><span class="line">    <span class="nx">findnodePacket</span>        <span class="c1">// find node节点查询</span>
</span><span class="line">    <span class="nx">neighborsPacket</span>       <span class="c1">// neighbors邻居回应</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>ping</code>和<code>pong</code>是一对操作,用于检测节点活性,节点收到<code>ping</code>消息后立即回复<code>pong</code>响应:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// 收到ping消息的响应函数</span>
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">ping</span><span class="p">)</span> <span class="nx">handle</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">udp</span><span class="p">,</span> <span class="nx">from</span> <span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">,</span> <span class="nx">fromID</span> <span class="nx">NodeID</span><span class="p">,</span> <span class="nx">mac</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 向ping消息发送方回复pong</span>
</span><span class="line">    <span class="nx">t</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">pongPacket</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">pong</span><span class="p">{</span>
</span><span class="line">        <span class="nx">To</span><span class="p">:</span>         <span class="nx">makeEndpoint</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">From</span><span class="p">.</span><span class="nx">TCP</span><span class="p">),</span>
</span><span class="line">        <span class="nx">ReplyTok</span><span class="p">:</span>   <span class="nx">mac</span><span class="p">,</span>
</span><span class="line">        <span class="nx">Expiration</span><span class="p">:</span> <span class="nb">uint64</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">Add</span><span class="p">(</span><span class="nx">expiration</span><span class="p">).</span><span class="nx">Unix</span><span class="p">()),</span>
</span><span class="line">    <span class="p">})</span>
</span><span class="line">    <span class="k">if</span> <span class="p">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">handleReply</span><span class="p">(</span><span class="nx">fromID</span><span class="p">,</span> <span class="nx">pingPacket</span><span class="p">,</span> <span class="nx">req</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// 成功完成一次ping-pong,更新K桶节点信息</span>
</span><span class="line">        <span class="k">go</span> <span class="nx">t</span><span class="p">.</span><span class="nx">bond</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="nx">fromID</span><span class="p">,</span> <span class="nx">from</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">From</span><span class="p">.</span><span class="nx">TCP</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>findnode</code>和<code>neighbors</code>是一对操作.</p>

<p><code>findnode</code>用于查找与某节点相距最近的节点,查找到后以<code>neighbors</code>类型消息回复查找发起者</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// 收到findnode消息的响应函数</span>
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">findnode</span><span class="p">)</span> <span class="nx">handle</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">udp</span><span class="p">,</span> <span class="nx">from</span> <span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">,</span> <span class="nx">fromID</span> <span class="nx">NodeID</span><span class="p">,</span> <span class="nx">mac</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="nx">target</span> <span class="o">:=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">Keccak256Hash</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">Target</span><span class="p">[:])</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 从本节点路由表里查找于target节点相距最近的bucketSize的节点</span>
</span><span class="line">    <span class="nx">closest</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">closest</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">bucketSize</span><span class="p">).</span><span class="nx">entries</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">
</span><span class="line">    <span class="nx">p</span> <span class="o">:=</span> <span class="nx">neighbors</span><span class="p">{</span><span class="nx">Expiration</span><span class="p">:</span> <span class="nb">uint64</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">Add</span><span class="p">(</span><span class="nx">expiration</span><span class="p">).</span><span class="nx">Unix</span><span class="p">())}</span>
</span><span class="line">    <span class="c1">// 回复查询发起方</span>
</span><span class="line">    <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">n</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">closest</span> <span class="p">{</span>
</span><span class="line">        <span class="o">...</span>
</span><span class="line">        <span class="nx">t</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">neighborsPacket</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">p</span><span class="p">)</span>
</span><span class="line">        <span class="o">...</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section">源码跟踪以太坊节点发现机制</h1>

<p>了解了以太坊的4种基本操作以及kad网络概念,我们就可以来看看节点发现机制怎么流转起来的:</p>

<p>节点发现的代码位于<code>github.com/ethereum/go-ethereum/p2p/discover</code>包。</p>

<p>首先,在节点启动时启动UDP”端口监听”:<code>server.Start() ==&gt; discover.ListenUDP ==&gt; newUDP()</code></p>

<p><code>newUDP()</code>分叉出去三个流程,三个流程均是无限循环:</p>

<ul>
  <li><code>func (tab *Table) refreshLoop()</code></li>
  <li><code>func (t *udp) loop()</code></li>
  <li><code>func (t *udp) readLoop(unhandled chan ReadPacket)</code></li>
</ul>

<h4 id="refreshloop">1. <code>refreshLoop()</code></h4>

<p>该流程每隔1小时或按需刷新K桶,核心逻辑实现位于<code>doRefresh</code>函数:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/p2p/discover/table.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">tab</span> <span class="o">*</span><span class="nx">Table</span><span class="p">)</span> <span class="nx">doRefresh</span><span class="p">(</span><span class="nx">done</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 和标准Kademlia协议选取最旧的K桶进行刷新不同，以太坊选取一个随机节点ID作为刷新基点</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">target</span> <span class="nx">NodeID</span>
</span><span class="line">    <span class="nx">rand</span><span class="p">.</span><span class="nx">Read</span><span class="p">(</span><span class="nx">target</span><span class="p">[:])</span>
</span><span class="line">    <span class="c1">// lookup函数是最kad网最核心函数,查询离target最近一批节点</span>
</span><span class="line">    <span class="nx">result</span> <span class="o">:=</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 如果没找到,则从本地节点数据库加载预配置的种子节点到对应K桶</span>
</span><span class="line">    <span class="nx">seeds</span> <span class="o">:=</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">querySeeds</span><span class="p">(</span><span class="nx">seedCount</span><span class="p">,</span> <span class="nx">seedMaxAge</span><span class="p">)</span>
</span><span class="line">    <span class="nx">seeds</span> <span class="p">=</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">bondall</span><span class="p">(</span><span class="nb">append</span><span class="p">(</span><span class="nx">seeds</span><span class="p">,</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">nursery</span><span class="o">...</span><span class="p">))</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 最后,以自身作为目标节点,刷新K桶</span>
</span><span class="line">    <span class="nx">tab</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="nx">tab</span><span class="p">.</span><span class="nx">self</span><span class="p">.</span><span class="nx">ID</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>tab.lookup</code>函数虽然关键,然而其逻辑其实是很简单的:</p>

<p>a. 查询离target最近一批节点,距离计算即对kad网络XOR(异或)距离计算的实现</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">tab</span> <span class="o">*</span><span class="nx">Table</span><span class="p">)</span> <span class="nx">closest</span><span class="p">(</span><span class="nx">target</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span><span class="p">,</span> <span class="nx">nresults</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="nx">nodesByDistance</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 遍历本地路由节点表</span>
</span><span class="line">    <span class="nx">close</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">nodesByDistance</span><span class="p">{</span><span class="nx">target</span><span class="p">:</span> <span class="nx">target</span><span class="p">}</span>
</span><span class="line">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">b</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">buckets</span> <span class="p">{</span>
</span><span class="line">        <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">n</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">b</span><span class="p">.</span><span class="nx">entries</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">close</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">nresults</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">close</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="c1">// close.push最终调用distcmp进行异或计算</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">distcmp</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class="line">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">target</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">da</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">^</span> <span class="nx">target</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class="line">        <span class="nx">db</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">^</span> <span class="nx">target</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">da</span> <span class="p">&gt;</span> <span class="nx">db</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">da</span> <span class="p">&lt;</span> <span class="nx">db</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>b. 迭代上一步查到的所有节点,向这些节点发起<code>findnode</code>操作查询离target节点最近的节点列表,将查询得到的节点进行<code>ping-pong</code>测试,将测试通过的节点落库保存</p>

<p>经过这个流程后,节点的K桶就能够比较均匀地将不同网络节点更新到本地K桶中。</p>

<h4 id="loopreadloop">2. <code>loop()</code>和<code>readLoop()</code></h4>

<p>这两个循环流程放在一起说,它们主要是一个工程实现,将异步调用代码通过channel串接成同步。业务上主要是负责处理<code>ping,pong,findnode,neighbors</code>四个消息类型的收发。</p>

<p>唯一值得稍加阐述的可能只有<code>pending</code>结构:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// pending实现了一种延迟处理逻辑</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">// 它主要有两个作用:</span>
</span><span class="line"><span class="c1">// 1. 提供回调机制,当某一个操作发起异步请求时,就使用pending结构封装一个闭包,当收到异步回复后从pending列表取出这个闭包,执行回调,因此在这个回调里可以完成数据包校验等后处理</span>
</span><span class="line"><span class="c1">// 如findnode操作将更新k桶的操作暂存,再获取到异步回复后执行这个闭包完成k桶更新</span>
</span><span class="line"><span class="c1">// 2. 提供多个回复接收功能,一个RPC请求可能会对应多个回复包,比如findnode对应多个neigbours回复包,此时可以提供多个pending进行逐个包校验</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">pending</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 来源节点</span>
</span><span class="line">    <span class="nx">from</span>  <span class="nx">NodeID</span>
</span><span class="line">    <span class="nx">ptype</span> <span class="kt">byte</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 调用超时丢弃pending结构</span>
</span><span class="line">    <span class="nx">deadline</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 回调函数,简单而强大</span>
</span><span class="line">    <span class="nx">callback</span> <span class="kd">func</span><span class="p">(</span><span class="nx">resp</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">(</span><span class="nx">done</span> <span class="kt">bool</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="nx">errc</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">error</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>综述,邻居节点发现流程:</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/eth_kad.jpeg" alt="kademlia" /></p>

<p>节点第一次启动读取公共种子节点信息,已本节点ID作为target更新本地K桶,然后每隔一段时间进行节点更新, 刷新K桶流程如下:</p>

<p>a. 随机生成目标节点Id，记为TargetId，从1开始记录发现次数和刷新时间。</p>

<p>b. 在当前节点的K桶里查找与目标节点最近的16个节点</p>

<p>c. 向b中得到的每个节点发送findnode命令,接收到每个节点传回的neighbours节点</p>

<p>d. 对c返回的每个节点进行ping-pong测试然后更新到本地k桶</p>

<p>e. 上述流程均是基于UDP的发现流程,p2p网络会定时随机取k桶中未连接的节点进行TCP连接,在连接好的TCP通道进行通信(tcp连接协程里会自己做心跳维护这个连接)</p>

<h1 id="section-1">内网穿透</h1>

<p>ethereum是基于p2p通信的,所有的操作都有可能涉及到内网穿透,而目前内网穿透最常用的方法是udp打洞,这也是kad网络使用udp作为基础通信协议的原因。</p>

<p>一个简单的udp打通进行p2p通信的例子讲解可以参考<a href="http://qjpcpu.github.io/blog/2018/01/29/shen-ru-ethereumyuan-ma-p2pmo-kuai-ji-chu-jie-gou/">深入ethereum源码-p2p模块基础结构</a>。</p>

<p>然而以太坊里将这部分逻辑全部隐藏,可以在节点初始化函数里看出一点痕迹:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">srv</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nx">Start</span><span class="p">()</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">addr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">ResolveUDPAddr</span><span class="p">(</span><span class="s">&quot;udp&quot;</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">ListenAddr</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="nx">err</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">ListenUDP</span><span class="p">(</span><span class="s">&quot;udp&quot;</span><span class="p">,</span> <span class="nx">addr</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="nx">err</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="nx">realaddr</span> <span class="p">=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">LocalAddr</span><span class="p">().(</span><span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">NAT</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">!</span><span class="nx">realaddr</span><span class="p">.</span><span class="nx">IP</span><span class="p">.</span><span class="nx">IsLoopback</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">                <span class="c1">// 进行内网网端口映射</span>
</span><span class="line">                <span class="k">go</span> <span class="nx">nat</span><span class="p">.</span><span class="nx">Map</span><span class="p">(</span><span class="nx">srv</span><span class="p">.</span><span class="nx">NAT</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">quit</span><span class="p">,</span> <span class="s">&quot;udp&quot;</span><span class="p">,</span> <span class="nx">realaddr</span><span class="p">.</span><span class="nx">Port</span><span class="p">,</span> <span class="nx">realaddr</span><span class="p">.</span><span class="nx">Port</span><span class="p">,</span> <span class="s">&quot;ethereum discovery&quot;</span><span class="p">)</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="c1">// TODO: react to external IP changes over time.</span>
</span><span class="line">            <span class="k">if</span> <span class="nx">ext</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">NAT</span><span class="p">.</span><span class="nx">ExternalIP</span><span class="p">();</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">                <span class="nx">realaddr</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">{</span><span class="nx">IP</span><span class="p">:</span> <span class="nx">ext</span><span class="p">,</span> <span class="nx">Port</span><span class="p">:</span> <span class="nx">realaddr</span><span class="p">.</span><span class="nx">Port</span><span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>首先，以太坊tcp/udp共用了一个端口,然后使用uPnp协议簇进行内外网端口映射,完成链路打通,从而穿透内网.</p>

<p>具体封装位于<code>nat</code>模块,但具体实现也是使用了三方库<a href="https://github.com/huin/goupnp">goupnp</a>.具体实现是关于uPnP的一个大话题,就不在这里分叉出去了。</p>

<h1 id="section-2">参考文献</h1>

<ul>
  <li><a href="https://zh.wikipedia.org/wiki/Kademlia">Kademlia</a></li>
  <li><a href="http://www.yeolar.com/note/2010/03/21/kademlia/">Kademlia协议原理简介</a></li>
  <li><a href="https://github.com/ethereum/wiki/wiki/Node-discovery-protocol">Node discovery protocol</a></li>
  <li><a href="http://www.8btc.com/etc-p2p">P2P网络及节点发现机制</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入ethereum源码-p2p模块基础结构]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/01/29/shen-ru-ethereumyuan-ma-p2pmo-kuai-ji-chu-jie-gou/"/>
    <updated>2018-01-29T11:19:23+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/01/29/shen-ru-ethereumyuan-ma-p2pmo-kuai-ji-chu-jie-gou</id>
    <content type="html"><![CDATA[<p>(go-ethereum/p2p)包允许您快速方便地将对等网络添加到任何类型的应用程序。p2p包采用模块化结构,包含p2p网络节点通信维护及新节点发现,将网络结构的基础细节封装并向上层屏蔽,并且暴露了简单接口让上层实现子协议,上层应用使用自己的附加子协议扩展p2p非常简单直接.</p>

<p>如果将以太坊的p2p类比做tcp协议,那么p2p暴露出来的子协议就类似http,使得以太坊能够在基础p2p基础上构建出whisper网络。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#peer-to-peer">Peer to peer</a></li>
  <li><a href="#peer">peer接入</a></li>
  <li><a href="#rlp">数据传输格式RLP</a></li>
  <li><a href="#section">总述</a></li>
  <li><a href="#section-1">参考文献</a></li>
</ul>

<h1 id="peer-to-peer">Peer to peer</h1>

<p>在深入了解前,最好先看看基于p2p包怎么实现一个自己子协议,建立对其的直观印象</p>

<blockquote>
  <p>下面示例来基于官方[Peer to peer]wiki文档(官方文档有个小bug, ^_^),详细参考文献</p>
</blockquote>

<p>启动一个p2p节点仅需要对<code>p2p.Server</code>做一些简单配置:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">nodekey</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">GenerateKey</span><span class="p">()</span>
</span><span class="line"><span class="nx">srv</span> <span class="o">:=</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span>
</span><span class="line">    <span class="nx">Config</span><span class="p">:</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span><span class="line">        <span class="nx">MaxPeers</span><span class="p">:</span>   <span class="mi">10</span><span class="p">,</span>
</span><span class="line">        <span class="nx">PrivateKey</span><span class="p">:</span> <span class="nx">nodekey</span><span class="p">,</span>
</span><span class="line">        <span class="nx">Name</span><span class="p">:</span>       <span class="s">&quot;my node name&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="nx">ListenAddr</span><span class="p">:</span> <span class="s">&quot;:30300&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="nx">Protocols</span><span class="p">:</span>  <span class="p">[]</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">{},</span>
</span><span class="line">        <span class="nx">NAT</span><span class="p">:</span>        <span class="nx">nat</span><span class="p">.</span><span class="nx">Any</span><span class="p">(),</span>   <span class="c1">// 支持内网穿透</span>
</span><span class="line">        <span class="nx">Logger</span><span class="p">:</span>     <span class="nx">log</span><span class="p">.</span><span class="nx">New</span><span class="p">(),</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样启动的节点仅包含了以太坊自身的基础协议:</p>

<p>要实现自己的子协议,就需要拓展<code>Protocols:  []p2p.Protocol{}</code>,实现自己的<code>p2p.Protocol</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">MyProtocol</span><span class="p">()</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">{</span>                                                          <span class="c1">// 1.</span>
</span><span class="line">		<span class="nx">Name</span><span class="p">:</span>    <span class="s">&quot;MyProtocol&quot;</span><span class="p">,</span>                                                    <span class="c1">// 2.</span>
</span><span class="line">		<span class="nx">Version</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>                                                               <span class="c1">// 3.</span>
</span><span class="line">		<span class="nx">Length</span><span class="p">:</span>  <span class="mi">1</span><span class="p">,</span>                                                               <span class="c1">// 4.</span>
</span><span class="line">		<span class="nx">Run</span><span class="p">:</span>     <span class="kd">func</span><span class="p">(</span><span class="nx">peer</span> <span class="o">*</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Peer</span><span class="p">,</span> <span class="nx">ws</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">MsgReadWriter</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">},</span> <span class="c1">// 5.</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>一个子协议即一个<code>p2p.Protocol</code></li>
  <li>子协议名,需要唯一标识该子协议</li>
  <li>协议版本号,当一个子协议有多个版本时,采纳最高版本的协议</li>
  <li>该协议拥有的消息类型个数,因为p2p网络是可扩展的，因此其需要具有能够发送随意个数的信息的能力（需要携带type，在下文中我们能够看到说明）,p2p的handler需要知道应该预留多少空间以用来服务你的协议。这是也是共识信息能够通过message ID到达各个peer并实现协商的保障。我们的协议仅仅支持一种类型</li>
  <li>在你的协议主要的handler中，我们现在故意将其留空。这个peer变量是指代连接到当前节点，其携带了一些peer本身的信息。其ws变量是reader和writer允许你同该peer进行通信，如果信息能够发送到当前节点，则反之也能够从本节点发送到对端peer节点</li>
</ol>

<p>现在让我们将前面留空的handler代码实现，以让它能够同别的peer通信:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">const</span> <span class="nx">messageId</span> <span class="p">=</span> <span class="mi">0</span>   <span class="c1">// 1.</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">Message</span> <span class="kt">string</span>   <span class="c1">// 2.</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">msgHandler</span><span class="p">(</span><span class="nx">peer</span> <span class="o">*</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Peer</span><span class="p">,</span> <span class="nx">ws</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">MsgReadWriter</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="k">for</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">msg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ws</span><span class="p">.</span><span class="nx">ReadMsg</span><span class="p">()</span>   <span class="c1">// 3.</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>            <span class="c1">// 4.</span>
</span><span class="line">            <span class="k">return</span> <span class="nx">err</span> <span class="c1">// if reading fails return err which will disconnect the peer.</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">var</span> <span class="nx">myMessage</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="nx">Message</span>
</span><span class="line">        <span class="nx">err</span> <span class="p">=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">myMessage</span><span class="p">)</span> <span class="c1">// 5.</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">            <span class="c1">// handle decode error</span>
</span><span class="line">            <span class="k">continue</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">switch</span> <span class="nx">myMessage</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">{</span>
</span><span class="line">        <span class="k">case</span> <span class="s">&quot;foo&quot;</span><span class="p">:</span>
</span><span class="line">            <span class="nx">err</span> <span class="o">:=</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">SendItems</span><span class="p">(</span><span class="nx">ws</span><span class="p">,</span> <span class="nx">messageId</span><span class="p">,</span> <span class="s">&quot;bar&quot;</span><span class="p">)</span>  <span class="c1">// 6.</span>
</span><span class="line">            <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">                <span class="k">return</span> <span class="nx">err</span> <span class="c1">// return (and disconnect) error if writing fails.</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">         <span class="k">default</span><span class="p">:</span>
</span><span class="line">             <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;recv:&quot;</span><span class="p">,</span> <span class="nx">myMessage</span><span class="p">)</span>
</span><span class="line">         <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>其中有且唯一的已知信息ID；</li>
  <li>将Messages alias 为string类型；</li>
  <li>ReadMsg将一直阻塞等待，直到其收到了一条新的信息，一个错误或者EOF；</li>
  <li>如果在读取流信息的过程当中收到了一个错误，最好的解决实践是将其返回给p2p server进行处理。这种错误通常是对端节点已经断开连接；</li>
  <li>msg包括两个属性和一个decode方法
    <ol>
      <li>Code 包括了信息ID，Code == messageId (i.e.0)</li>
      <li>Payload 是信息的内容</li>
      <li>Decode(<ptr>) 是一个工具方法：取得 msg.Payload并将其解码，并将其内容设置到传入的message指针中，如果失败了则返回一个error</ptr></li>
    </ol>
  </li>
  <li>如果解码出来的信息是foo将发回一个NewMessage并用messageId标记信息类型，信息内容是bar；而bar信息在被对端收到之后将被defaultcase捕获。</li>
</ol>

<p>现在，我们将上述的所有部分整合起来，得到下面的p2p样例代码:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/crypto&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/log&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/p2p&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/p2p/discover&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/p2p/nat&quot;</span>
</span><span class="line">	<span class="s">&quot;net&quot;</span>
</span><span class="line">	<span class="s">&quot;os&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">const</span> <span class="nx">messageId</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">Message</span> <span class="kt">string</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">MyProtocol</span><span class="p">()</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">{</span>
</span><span class="line">		<span class="nx">Name</span><span class="p">:</span>    <span class="s">&quot;MyProtocol&quot;</span><span class="p">,</span>
</span><span class="line">		<span class="nx">Version</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class="line">		<span class="nx">Length</span><span class="p">:</span>  <span class="mi">1</span><span class="p">,</span>
</span><span class="line">		<span class="nx">Run</span><span class="p">:</span>     <span class="nx">msgHandler</span><span class="p">,</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">nodekey</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">GenerateKey</span><span class="p">()</span>
</span><span class="line">	<span class="nx">logger</span> <span class="o">:=</span> <span class="nx">log</span><span class="p">.</span><span class="nx">New</span><span class="p">()</span>
</span><span class="line">	<span class="nx">logger</span><span class="p">.</span><span class="nx">SetHandler</span><span class="p">(</span><span class="nx">log</span><span class="p">.</span><span class="nx">StderrHandler</span><span class="p">)</span>
</span><span class="line">	<span class="nx">srv</span> <span class="o">:=</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span>
</span><span class="line">		<span class="nx">Config</span><span class="p">:</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span><span class="line">			<span class="nx">MaxPeers</span><span class="p">:</span>   <span class="mi">10</span><span class="p">,</span>
</span><span class="line">			<span class="nx">PrivateKey</span><span class="p">:</span> <span class="nx">nodekey</span><span class="p">,</span>
</span><span class="line">			<span class="nx">Name</span><span class="p">:</span>       <span class="s">&quot;my node name&quot;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">ListenAddr</span><span class="p">:</span> <span class="s">&quot;:30300&quot;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">Protocols</span><span class="p">:</span>  <span class="p">[]</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">{</span><span class="nx">MyProtocol</span><span class="p">()},</span>
</span><span class="line">			<span class="nx">NAT</span><span class="p">:</span>        <span class="nx">nat</span><span class="p">.</span><span class="nx">Any</span><span class="p">(),</span>
</span><span class="line">			<span class="nx">Logger</span><span class="p">:</span>     <span class="nx">logger</span><span class="p">,</span>
</span><span class="line">		<span class="p">},</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">Start</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;started..&quot;</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">())</span>
</span><span class="line">	<span class="k">select</span> <span class="p">{}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">msgHandler</span><span class="p">(</span><span class="nx">peer</span> <span class="o">*</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Peer</span><span class="p">,</span> <span class="nx">ws</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">MsgReadWriter</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">	<span class="k">for</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">msg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ws</span><span class="p">.</span><span class="nx">ReadMsg</span><span class="p">()</span>
</span><span class="line">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">			<span class="k">return</span> <span class="nx">err</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">
</span><span class="line">		<span class="kd">var</span> <span class="nx">myMessage</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="nx">Message</span>
</span><span class="line">		<span class="nx">err</span> <span class="p">=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">myMessage</span><span class="p">)</span>
</span><span class="line">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">			<span class="c1">// handle decode error</span>
</span><span class="line">			<span class="k">continue</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;code:&quot;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">Code</span><span class="p">,</span> <span class="s">&quot;receiver at:&quot;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">ReceivedAt</span><span class="p">,</span> <span class="s">&quot;msg:&quot;</span><span class="p">,</span> <span class="nx">myMessage</span><span class="p">)</span>
</span><span class="line">		<span class="k">switch</span> <span class="nx">myMessage</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">{</span>
</span><span class="line">		<span class="k">case</span> <span class="s">&quot;foo&quot;</span><span class="p">:</span>
</span><span class="line">			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">SendItems</span><span class="p">(</span><span class="nx">ws</span><span class="p">,</span> <span class="nx">messageId</span><span class="p">,</span> <span class="s">&quot;bar&quot;</span><span class="p">)</span>
</span><span class="line">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">				<span class="k">return</span> <span class="nx">err</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">		<span class="k">default</span><span class="p">:</span>
</span><span class="line">			<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;recv:&quot;</span><span class="p">,</span> <span class="nx">myMessage</span><span class="p">)</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="peer">peer接入</h1>

<p>从上面的例子,我们可以看出来实现ethereum是非常便利的,那么下一步,我们可以看看一个节点是怎么处理新peer的接入的?梳理出这个接入过程,也就明白了节点间基本的数据流通方式.</p>

<p>首先,每个节点启动入口都在<code>func (srv *Server) Start() (err error)</code>.该函数调用<code>srv.startListening()</code>在传入的ip地址监听tcp连接:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">srv</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nx">startListening</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Launch the TCP listener.</span>
</span><span class="line">    <span class="nx">listener</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">ListenAddr</span><span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="k">go</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">listenLoop</span><span class="p">()</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 主执行逻辑</span>
</span><span class="line">    <span class="k">go</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">dialer</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当接收到一个新的tcp连接,节点开始检查并初始化peer</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">srv</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nx">setupConn</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">conn</span><span class="p">,</span> <span class="nx">flags</span> <span class="nx">connFlag</span><span class="p">,</span> <span class="nx">dialDest</span> <span class="o">*</span><span class="nx">discover</span><span class="p">.</span><span class="nx">Node</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 从这里开始,其实已经开始了ethereum的自有协议,doEncHandshake是RLPX协议的握手方法</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">doEncHandshake</span><span class="p">(</span><span class="nx">srv</span><span class="p">.</span><span class="nx">PrivateKey</span><span class="p">,</span> <span class="nx">dialDest</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">srv</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">Trace</span><span class="p">(</span><span class="s">&quot;Failed RLPx handshake&quot;</span><span class="p">,</span> <span class="s">&quot;addr&quot;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">fd</span><span class="p">.</span><span class="nx">RemoteAddr</span><span class="p">(),</span> <span class="s">&quot;conn&quot;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">flags</span><span class="p">,</span> <span class="s">&quot;err&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">err</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 两次握手消息代码(handshakeMsg = 0x00)和(discMsg = 0x01)</span>
</span><span class="line">    <span class="nx">phs</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">doProtoHandshake</span><span class="p">(</span><span class="nx">srv</span><span class="p">.</span><span class="nx">ourHandshake</span><span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 握手完毕,将新连接对象*p2p.conn压入server.addpeer</span>
</span><span class="line">    <span class="nx">err</span> <span class="p">=</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">checkpoint</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">addpeer</span><span class="p">)</span>
</span><span class="line">    <span class="c1">// If the checks completed successfully, runPeer has now been</span>
</span><span class="line">    <span class="c1">// launched by run.</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面开始看<code>Start()</code>函数里的节点主逻辑,主逻辑位于<code>Start()</code>末尾的<code>srv.run()</code>,该函数逻辑较复杂,我们现在主要看新peer接入的代码:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">srv</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nx">run</span><span class="p">(</span><span class="nx">dialstate</span> <span class="nx">dialer</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="o">...</span>
</span><span class="line">      <span class="k">select</span><span class="p">{</span>
</span><span class="line">          <span class="o">...</span>
</span><span class="line">          <span class="k">case</span> <span class="nx">c</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">srv</span><span class="p">.</span><span class="nx">addpeer</span><span class="p">:</span>  <span class="c1">// 在这里取出之前压入addpeer的连接对象conn</span>
</span><span class="line">          <span class="c1">// 执行到这里表明握手完成,并且通过了节点验证</span>
</span><span class="line">          <span class="nx">err</span> <span class="o">:=</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">protoHandshakeChecks</span><span class="p">(</span><span class="nx">peers</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
</span><span class="line">          <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">              <span class="c1">// 创建节点peer对象,传入所有子协议实现,自己实现的子协议就是在这里传入peer的,传入的所以协议通过matchProtocols函数格式化组织</span>
</span><span class="line">              <span class="nx">p</span> <span class="o">:=</span> <span class="nx">newPeer</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">Protocols</span><span class="p">)</span>
</span><span class="line">              <span class="o">...</span>
</span><span class="line">              <span class="k">go</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">runPeer</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
</span><span class="line">          <span class="p">}</span>
</span><span class="line">          <span class="o">...</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="o">...</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里补充说一下<code>newPeer()</code>对子协议的一个组织方式:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">matchProtocols</span><span class="p">(</span><span class="nx">protocols</span> <span class="p">[]</span><span class="nx">Protocol</span><span class="p">,</span> <span class="nx">caps</span> <span class="p">[]</span><span class="nx">Cap</span><span class="p">,</span> <span class="nx">rw</span> <span class="nx">MsgReadWriter</span><span class="p">)</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">protoRW</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 按协议(name asc,version asc)排序子协议</span>
</span><span class="line">    <span class="nx">sort</span><span class="p">.</span><span class="nx">Sort</span><span class="p">(</span><span class="nx">capsByNameAndVersion</span><span class="p">(</span><span class="nx">caps</span><span class="p">))</span>
</span><span class="line">    <span class="c1">// 自定义协议偏移</span>
</span><span class="line">    <span class="nx">offset</span> <span class="o">:=</span> <span class="nx">baseProtocolLength</span>
</span><span class="line">    <span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">protoRW</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nx">outer</span><span class="p">:</span>
</span><span class="line">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">cap</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">caps</span> <span class="p">{</span>
</span><span class="line">        <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">proto</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">protocols</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="nx">proto</span><span class="p">.</span><span class="nx">Name</span> <span class="o">==</span> <span class="nx">cap</span><span class="p">.</span><span class="nx">Name</span> <span class="o">&amp;&amp;</span> <span class="nx">proto</span><span class="p">.</span><span class="nx">Version</span> <span class="o">==</span> <span class="nx">cap</span><span class="p">.</span><span class="nx">Version</span> <span class="p">{</span>
</span><span class="line">                <span class="c1">// If an old protocol version matched, revert it</span>
</span><span class="line">                <span class="k">if</span> <span class="nx">old</span> <span class="o">:=</span> <span class="nx">result</span><span class="p">[</span><span class="nx">cap</span><span class="p">.</span><span class="nx">Name</span><span class="p">];</span> <span class="nx">old</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">                    <span class="nx">offset</span> <span class="o">-=</span> <span class="nx">old</span><span class="p">.</span><span class="nx">Length</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">                <span class="c1">// Assign the new match</span>
</span><span class="line">                <span class="nx">result</span><span class="p">[</span><span class="nx">cap</span><span class="p">.</span><span class="nx">Name</span><span class="p">]</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">protoRW</span><span class="p">{</span><span class="nx">Protocol</span><span class="p">:</span> <span class="nx">proto</span><span class="p">,</span> <span class="nx">offset</span><span class="p">:</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">in</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">Msg</span><span class="p">),</span> <span class="nx">w</span><span class="p">:</span> <span class="nx">rw</span><span class="p">}</span>
</span><span class="line">                <span class="nx">offset</span> <span class="o">+=</span> <span class="nx">proto</span><span class="p">.</span><span class="nx">Length</span>
</span><span class="line">
</span><span class="line">                <span class="k">continue</span> <span class="nx">outer</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">result</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最终每个子协议以<code>name=&gt;protocol</code>的map格式组织起来,然后每个协议根据自身支持消息类型数量<code>Protocol.Length</code>在整个以太坊消息类型轴上占据了<code>[proto.offset,proto.offset+proto.Length)</code>的左闭右开消息类型段,理解这个结构,才好理解最终根据消息类型<code>Msg.Code</code>去找handler的逻辑(<code>func (p *Peer) getProto(code uint64) (*protoRW, error)</code>)。</p>

<p>下面继续看最终peer处理逻辑<code>srv.runPeer</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Peer</span><span class="p">)</span> <span class="nx">run</span><span class="p">()</span> <span class="p">(</span><span class="nx">remoteRequested</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// peer逻辑里最重要两个循环逻辑</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 收取消息循环,核心逻辑是根据消息的代号proto, err := p.getProto(msg.Code),</span>
</span><span class="line">    <span class="c1">// 取得对应的子协议,然后投放到对应协议的读队列proto.in &lt;- msg</span>
</span><span class="line">    <span class="k">go</span> <span class="nx">p</span><span class="p">.</span><span class="nx">readLoop</span><span class="p">(</span><span class="nx">readErr</span><span class="p">)</span>
</span><span class="line">    <span class="c1">// 不停发送ping心跳包到远端peer</span>
</span><span class="line">    <span class="k">go</span> <span class="nx">p</span><span class="p">.</span><span class="nx">pingLoop</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 在startProtocols里最终调用我们自定义子协议的Run方法proto.Run(p, rw)</span>
</span><span class="line">    <span class="nx">p</span><span class="p">.</span><span class="nx">startProtocols</span><span class="p">(</span><span class="nx">writeStart</span><span class="p">,</span> <span class="nx">writeErr</span><span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="rlp">数据传输格式RLP</h1>

<p>以太坊数据传输都是基于RLP编码,下面文字摘自<a href="http://ethfans.org/posts/415">RLP编码原理</a></p>

<blockquote>
  <p>RLP(Recursive Length Prefix，递归长度前缀)是一种编码算法，用于编码任意的嵌套结构的二进制数据，它是以太坊中数据序列化/反序列化的主要方法，区块、交易等数据结构在持久化时会先经过RLP编码后再存储到数据库中</p>
</blockquote>

<p>定义</p>

<blockquote>
  <p>RLP编码的定义只处理两类数据：一类是字符串（例如字节数组），一类是列表。字符串指的是一串二进制数据，列表是一个嵌套递归的结构，里面可以包含字符串和列表，例如<code>["cat",["puppy","cow"],"horse",[[]],"pig",[""],"sheep"]</code>就是一个复杂的列表。其他类型的数据需要转成以上的两类，转换的规则不是RLP编码定义的，可以根据自己的规则转换，例如struct可以转成列表，int可以转成二进制（属于字符串一类），以太坊中整数都以大端形式存储。</p>
</blockquote>

<p>这部分代码均位于<code>github.com/ethereum/go-ethereum/rlp</code>包中,代码相对独立,我也没深入研究改算法,就不详细说明了。</p>

<h1 id="section">总述</h1>

<p>本文主要梳理了以太坊p2p模块的主流程,描述了核心的peer间数据读写的来龙去脉,从代码里也能够比较容易理解以太坊子协议的概念,理清这个主干流程,以后也就能够从每个细节发散开来,深入细节。</p>

<h1 id="section-1">参考文献</h1>

<ul>
  <li><a href="https://github.com/ethereum/go-ethereum">go-ethereum github地址</a></li>
  <li><a href="https://github.com/ethereum/go-ethereum/wiki/Peer-to-Peer">Peer to Peer</a></li>
  <li><a href="http://blog.csdn.net/teaspring/article/details/78455046">基于p2p的底层通信</a></li>
  <li><a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-RLP">RLP</a></li>
  <li><a href="http://ethfans.org/posts/415">RLP编码原理</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[p2p之UDP打洞]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/01/26/p2pzhi-udpda-dong/"/>
    <updated>2018-01-26T22:03:15+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/01/26/p2pzhi-udpda-dong</id>
    <content type="html"><![CDATA[<p>当今互联网到处存在着一些中间件(MIddleBoxes)，如NAT和防火墙，导致两个(不在同一内网)中的客户端无法直接通信。 这些问题即便是到了IPV6时代也会存在，因为即使不需要NAT，但还有其他中间件如防火墙阻挡了链接的建立。 目前部署的中间件多都是在C/S架构上设计的，其中相对隐匿的客户机主动向周知的服务端(拥有静态IP地址和DNS名称)发起链接请求。 大多数中间件实现了一种非对称的通讯模型，即内网中的主机可以初始化对外的链接，而外网的主机却不能初始化对内网的链接， 除非经过中间件管理员特殊配置。</p>

<p>在中间件为常见的NAPT的情况下（也是本文主要讨论的），内网中的客户端没有单独的公网IP地址， 而是通过NAPT转换，和其他同一内网用户共享一个公网IP。这种内网主机隐藏在中间件后的不可访问性对于一些客户端软件如浏览器来说 并不是一个问题，因为其只需要初始化对外的链接，从某方面来看反而还对隐私保护有好处。然而在P2P应用中， 内网主机（客户端）需要对另外的终端（Peer）直接建立链接，但是发起者和响应者可能在不同的中间件后面， 两者都没有公网IP地址。而外部对NAT公网IP和端口主动的链接或数据都会因内网未请求被丢弃掉。本文讨论的就是如何跨越NAT实现内网主机直接通讯的问题。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">网络模型</a></li>
  <li><a href="#section-1">打洞流程</a></li>
  <li><a href="#section-2">先决条件</a></li>
  <li><a href="#section-3">源码示例</a></li>
  <li><a href="#udptcp">udp打洞转tcp通信</a></li>
  <li><a href="#section-4">参考文献</a></li>
</ul>

<h1 id="section">网络模型</h1>

<p>假设客户端A和客户端B的地址都是内网地址，且在不同的NAT后面。A、B上运行的P2P应用程序和服务器S都使用了UDP端口9982，A和B分别初始化了 与Server的UDP通信，地址映射如图所示:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">                        Server S
</span><span class="line">                    207.148.70.129:9981
</span><span class="line">                           |
</span><span class="line">                           |
</span><span class="line">    +----------------------|----------------------+
</span><span class="line">    |                                             |
</span><span class="line">  NAT A                                         NAT B
</span><span class="line">120.27.209.161:6000                            120.26.10.118:3000
</span><span class="line">    |                                             |
</span><span class="line">    |                                             |
</span><span class="line"> Client A                                      Client B
</span><span class="line">  10.0.0.1:9982                                 192.168.0.1:9982</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在假设客户端A打算与客户端B直接建立一个UDP通信会话。如果A直接给B的公网地址120.26.10.118:3000发送UDP数据，NAT B将很可能会无视进入的 数据（除非是Full Cone NAT），因为源地址和端口与S不匹配，而最初只与S建立过会话。B往A直接发信息也类似。</p>

<p>假设A开始给B的公网地址发送UDP数据的同时，给服务器S发送一个中继请求，要求B开始给A的公网地址发送UDP信息。A往B的输出信息会导致NAT A打开 一个A的内网地址与与B的外网地址之间的新通讯会话，B往A亦然。一旦新的UDP会话在两个方向都打开之后，客户端A和客户端B就能直接通讯， 而无须再通过引导服务器S了。</p>

<p>UDP打洞技术有许多有用的性质。一旦一个的P2P链接建立，链接的双方都能反过来作为“引导服务器”来帮助其他中间件后的客户端进行打洞， 极大减少了服务器的负载。应用程序不需要知道中间件具体是什么（如果有的话），因为以上的过程在没有中间件或者有多个中间件的情况下 也一样能建立通信链路。</p>

<h1 id="section-1">打洞流程</h1>

<p>假设A现在希望建立一条到B的udp会话，那么这个建立基本流程是:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">1. A,B分别建立到Server S的udp会话,那么Server S此时是知道A,B各自的外网ip+端口
</span><span class="line">2. Server S在和B的udp会话里告诉A的地址(外网ip+端口: 120.27.209.161:6000),同理把B的地址(120.26.10.118:3000)告诉A
</span><span class="line">3. B向A地址(120.27.209.161:6000)发送一个"握手"udp包,打通A-&gt;B的udp链路
</span><span class="line">4. 此时A可以向B(120.26.10.118:3000)发送udp包,A-&gt;B的会话建立成功</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-2">先决条件</h1>

<p>能够完成打洞有几个先决条件:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">1. A,B所在的nat网络类型(Full cone, Restricted cone, Port-restricted cone, Symmetric NAT)
</span><span class="line">2. 在一次udp会话期间,nat设备(路由器)会保持内网进程 inner_ip:inner_port &lt;-&gt; share_public_ip:share_port的映射关系,一般根据具体路由器实现,这个映射关系可以维持几分钟到几个小时不等
</span><span class="line">3. 流程中第3步,nat A收到这个握手包后并不会转发给A,因为它发现自己的没有保存过B的地址,认为这是一个来历不明的包而直接丢弃,然而这个包的作用在于在nat B留下了A的记录,使得nat B认为A是可达或者说可通过了,这样当A-&gt;B再发送udp包时就可以真正到达B了。所以这个"握手"包的作用是可以打通A-&gt;B的通路,是必要的</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-3">源码示例</h1>

<p>使用三台设备模拟,外网设备207.148.70.129模拟Server S,执行server.go代码:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>server.go </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;log&quot;</span>
</span><span class="line">	<span class="s">&quot;net&quot;</span>
</span><span class="line">	<span class="s">&quot;time&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">listener</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">ListenUDP</span><span class="p">(</span><span class="s">&quot;udp&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">{</span><span class="nx">IP</span><span class="p">:</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IPv4zero</span><span class="p">,</span> <span class="nx">Port</span><span class="p">:</span> <span class="mi">9981</span><span class="p">})</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="k">return</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;本地地址: &lt;%s&gt; \n&quot;</span><span class="p">,</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">LocalAddr</span><span class="p">().</span><span class="nx">String</span><span class="p">())</span>
</span><span class="line">	<span class="nx">peers</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">	<span class="nx">data</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span><span class="line">	<span class="k">for</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">n</span><span class="p">,</span> <span class="nx">remoteAddr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ReadFromUDP</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class="line">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;error during read: %s&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">		<span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;&lt;%s&gt; %s\n&quot;</span><span class="p">,</span> <span class="nx">remoteAddr</span><span class="p">.</span><span class="nx">String</span><span class="p">(),</span> <span class="nx">data</span><span class="p">[:</span><span class="nx">n</span><span class="p">])</span>
</span><span class="line">		<span class="nx">peers</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">peers</span><span class="p">,</span> <span class="o">*</span><span class="nx">remoteAddr</span><span class="p">)</span>
</span><span class="line">		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">peers</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">			<span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;进行UDP打洞,建立 %s &lt;--&gt; %s 的连接\n&quot;</span><span class="p">,</span> <span class="nx">peers</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">String</span><span class="p">(),</span> <span class="nx">peers</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">String</span><span class="p">())</span>
</span><span class="line">			<span class="nx">listener</span><span class="p">.</span><span class="nx">WriteToUDP</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">peers</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">String</span><span class="p">()),</span> <span class="o">&amp;</span><span class="nx">peers</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class="line">			<span class="nx">listener</span><span class="p">.</span><span class="nx">WriteToUDP</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">peers</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">String</span><span class="p">()),</span> <span class="o">&amp;</span><span class="nx">peers</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">			<span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">8</span><span class="p">)</span>
</span><span class="line">			<span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;中转服务器退出,仍不影响peers间通信&quot;</span><span class="p">)</span>
</span><span class="line">			<span class="k">return</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>另外两台分别位于不同内网后的设备,均运行相同代码peer.go:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>peer.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;log&quot;</span>
</span><span class="line">	<span class="s">&quot;net&quot;</span>
</span><span class="line">	<span class="s">&quot;os&quot;</span>
</span><span class="line">	<span class="s">&quot;strconv&quot;</span>
</span><span class="line">	<span class="s">&quot;strings&quot;</span>
</span><span class="line">	<span class="s">&quot;time&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">tag</span> <span class="kt">string</span>
</span><span class="line">
</span><span class="line"><span class="kd">const</span> <span class="nx">HAND_SHAKE_MSG</span> <span class="p">=</span> <span class="s">&quot;我是打洞消息&quot;</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">// 当前进程标记字符串,便于显示</span>
</span><span class="line">	<span class="nx">tag</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">	<span class="nx">srcAddr</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">{</span><span class="nx">IP</span><span class="p">:</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IPv4zero</span><span class="p">,</span> <span class="nx">Port</span><span class="p">:</span> <span class="mi">9982</span><span class="p">}</span> <span class="c1">// 注意端口必须固定</span>
</span><span class="line">	<span class="nx">dstAddr</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">{</span><span class="nx">IP</span><span class="p">:</span> <span class="nx">net</span><span class="p">.</span><span class="nx">ParseIP</span><span class="p">(</span><span class="s">&quot;207.148.70.129&quot;</span><span class="p">),</span> <span class="nx">Port</span><span class="p">:</span> <span class="mi">9981</span><span class="p">}</span>
</span><span class="line">	<span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">DialUDP</span><span class="p">(</span><span class="s">&quot;udp&quot;</span><span class="p">,</span> <span class="nx">srcAddr</span><span class="p">,</span> <span class="nx">dstAddr</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;hello, I&#39;m new peer:&quot;</span> <span class="o">+</span> <span class="nx">tag</span><span class="p">));</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">log</span><span class="p">.</span><span class="nx">Panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">data</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span><span class="line">	<span class="nx">n</span><span class="p">,</span> <span class="nx">remoteAddr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">ReadFromUDP</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;error during read: %s&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">conn</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class="line">	<span class="nx">anotherPeer</span> <span class="o">:=</span> <span class="nx">parseAddr</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">data</span><span class="p">[:</span><span class="nx">n</span><span class="p">]))</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;local:%s server:%s another:%s\n&quot;</span><span class="p">,</span> <span class="nx">srcAddr</span><span class="p">,</span> <span class="nx">remoteAddr</span><span class="p">,</span> <span class="nx">anotherPeer</span><span class="p">.</span><span class="nx">String</span><span class="p">())</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// 开始打洞</span>
</span><span class="line">	<span class="nx">bidirectionHole</span><span class="p">(</span><span class="nx">srcAddr</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">anotherPeer</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">parseAddr</span><span class="p">(</span><span class="nx">addr</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">t</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">Split</span><span class="p">(</span><span class="nx">addr</span><span class="p">,</span> <span class="s">&quot;:&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="nx">port</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Atoi</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">{</span>
</span><span class="line">		<span class="nx">IP</span><span class="p">:</span>   <span class="nx">net</span><span class="p">.</span><span class="nx">ParseIP</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class="line">		<span class="nx">Port</span><span class="p">:</span> <span class="nx">port</span><span class="p">,</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">bidirectionHole</span><span class="p">(</span><span class="nx">srcAddr</span> <span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">,</span> <span class="nx">anotherAddr</span> <span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">DialUDP</span><span class="p">(</span><span class="s">&quot;udp&quot;</span><span class="p">,</span> <span class="nx">srcAddr</span><span class="p">,</span> <span class="nx">anotherAddr</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">defer</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class="line">	<span class="c1">// 向另一个peer发送一条udp消息(对方peer的nat设备会丢弃该消息,非法来源),用意是在自身的nat设备打开一条可进入的通道,这样对方peer就可以发过来udp消息</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">HAND_SHAKE_MSG</span><span class="p">));</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;send handshake:&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">for</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">10</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class="line">			<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;from [&quot;</span> <span class="o">+</span> <span class="nx">tag</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="p">));</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">				<span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;send msg fail&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">}()</span>
</span><span class="line">	<span class="k">for</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">data</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span><span class="line">		<span class="nx">n</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">ReadFromUDP</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class="line">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;error during read: %s\n&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;收到数据:%s\n&quot;</span><span class="p">,</span> <span class="nx">data</span><span class="p">[:</span><span class="nx">n</span><span class="p">])</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意代码仅模拟打洞基础流程,如果读者测试网络情况较差发生udp丢包,可能看不到预期结果,此时简单重启server,peer即可.</p>

<p>完整代码参考<a href="https://github.com/qjpcpu/p2pbyudp">github</a></p>

<h1 id="udptcp">udp打洞转tcp通信</h1>

<p>通常,由于udp打洞实现简单,p2p的实现采用udp打洞较多,然而当通路建立起来后使用tcp进行节点间通信可以获取更好的通信效果。因为udp打洞完成后形成的nat映射是和tcp/udp无关的,所以此时可以转为使用tcp建立连接,达到最终的p2p的tcp通信.由于代码较简单,这里就不给出示例了。</p>

<h1 id="section-4">参考文献</h1>

<ul>
  <li><a href="https://yq.aliyun.com/articles/227421">UDP用打洞技术穿透NAT的原理与实现</a></li>
  <li><a href="https://zhuanlan.zhihu.com/p/26796476">P2P通信原理与实现</a></li>
  <li><a href="https://github.com/jtriley/pystun">NAT类型检测工具</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅谈元编程]]></title>
    <link href="http://qjpcpu.github.io/blog/2017/08/02/qian-tan-yuan-bian-cheng/"/>
    <updated>2017-08-02T17:54:41+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2017/08/02/qian-tan-yuan-bian-cheng</id>
    <content type="html"><![CDATA[<p>为什么会突然想到写这篇文章呢？其实是因为我曾经向一位朋友推荐学习一下ruby/lisp这类支持元编程的语言,尽管可能永远不会在生产环境中用到,但是可以让人学习用另一种思路思考问题,然后友人就要求我解释我学了之后思考问题的角度有何不同,当时确实把我难住了,因为这个问题的确不好描述。</p>

<p>对于这个问题,我思前想后好几周后,我还是决定从理性和感性两个方面,稍微描述一下,什么是元编程?学习了元编程之后你的思考到底可能在什么地方和别人产生差异?</p>

<p>P.S. 鉴于ruby在元编程领域的强大能力,本文将用ruby来辅助我的描述,即便是没有ruby基础,我也会尽量描述清楚不影响理解;至于为什么不用lisp,那是因为它在这行当走得太彻底了,彻底到我觉得自己现阶段没有能力描述清楚
<!-- more --></p>

<h2 id="section">结论放在前面</h2>
<p>虽然我将要尝试向你描述下元编程,但还是有几条规则要写在前面,如果你觉得无法接受这几条规则,那么提早关闭页面比较明智。</p>

<h5 id="section-1">1. 心态放谦卑,无论何时,先尝试去理解而不是拒绝</h5>
<p>##### 2. 元编程并不是黑魔法, 元编程也是编程
##### 3. 和学习游泳一样,如果不亲身去尝试,永远也无法真正理解
##### 4. 即便你花时间精力取弄懂了一两门元编程语言,但你的工作环境可能永远都用不到,冷静两秒钟,确认自己并不是那么功利主义
##### 5. 再次深呼吸,确认自己还是有兴趣了解下去</p>

<h2 id="section-2">元编程的魔力</h2>
<p>元编程的学院解释是:运行时操作程序构件的能力。这个类似于物理公理定义的说法比较令人费解,其实他的意思是这样的,通常,我们的程序写完进行编译链接后,它的运行规则就固定了,很难在运行时再去做任何修改。比如对于C语言来说,一个方法或者函数要执行的逻辑已经固定下来了,无法在不改动代码的情况下修改这个方法的逻辑;或者对于java这种语言也是一样的,一个类拥有的方法和属性是固定的,虽然java拥有了反射的能力(这可以看做已经具备了初步元编程能力),可以在运行时进行自省,但是也无法进一步拓展自身的逻辑和功能。可以看出,这些编程语言里,”程序逻辑”和”数据”是完全分割开来的,数据可以修改变动,而逻辑是冰冷凝固的,它们之间泾渭分明,区分十分明显。 而所谓元编程,就是抹除这种界限的能力。</p>

<h3 id="section-3">改变宇宙公理</h3>
<p>假设我们所处的世界真的是被AI控制,整个人类文明作为一枚电池被<code>Matrix</code>控制(电影《黑客帝国》),而AI构建的<code>Matrix</code>系统也的确是基于人类的数学公理构建起来的,而我们最基础的数学公理不外乎就是<code>1 + 1 = 2</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">puts</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span>  <span class="c1"># =&gt; 显而易见输出2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>假如AI的上帝<code>建筑师</code>某一天想更改这个系统升级为<code>Matruix2</code>,这次升级仅仅是想看看更改最简单的宇宙公理让<code>1 + 1 = 3</code>,他想看看这会对人类社会造成什么影响;试想如果<code>建筑师</code>不懂得元编程的能力,那么意味着<code>Matrix2</code>是一次彻底的重构:他必须重建所有数学公理,并且基于这些公理重新构建<code>Matrix</code>,这个工作量想想都觉得可怕。</p>

<p>那如果<code>建筑师</code>懂得元编程,他要做的事情就是给<code>Matrix</code>打个系统补丁,补丁文件内容只有简单几行代码:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Patch</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">+</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span><span class="o">.</span><span class="n">succ</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="no">Fixnum</span><span class="o">.</span><span class="n">prepend</span> <span class="no">Patch</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这段代码的含义是对所有整数加法添加了一个补丁,每个加法运算都多加1,所以基于加法的公理均自动采纳这项变更。</p>

<p>当<code>Matrix</code>应用这个补丁后,所有系统中加法都会多加1</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">puts</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">4</span> <span class="c1"># =&gt; 输出为6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这就是元编程,你可以运用他修改程序逻辑,漆黑的运行时在你面前变得明朗起来了。</p>

<h3 id="section-4">调用链</h3>
<p>如果你觉得改变宇宙公理这个场景太过虚幻,并且你碰巧也没看过黑客帝国(oops,真是不幸,在学习各种编程技巧前我建议您真应该去看下这部电影),那么你肯定会质疑:好像我永远遇不到元编程的应用场景。那么好吧,我来举一个真实世界可能真会遇到的场景:</p>

<p>在当前分布式系统大行其道的今天,可能我们需要将系统每个函数调用时间记录下来,即<code>函数A--&gt;函数B--&gt;函数C--&gt;函数n</code>我们想在每个函数入口和出口打点,这样我们就能够将这个调用栈串联起来</p>

<p>假设说我们的原系统是这样的:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="n">to</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;Hello </span><span class="si">#{</span><span class="n">to</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="nb">self</span><span class="o">.</span><span class="n">talk</span> <span class="n">to</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">talk</span><span class="p">(</span><span class="n">to</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;Talk to </span><span class="si">#{</span><span class="n">to</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">MyClass</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hello</span> <span class="s2">&quot;jason&quot;</span>
</span><span class="line"><span class="c1"># 输出为:</span>
</span><span class="line"><span class="c1"># Hello jason</span>
</span><span class="line"><span class="c1"># Talk to jason</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>很简单,我们也可以利用元编程的技术,用打点进出逻辑将所有函数包裹起来即可,也打这么一个补丁:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">MyClass</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class="line">  <span class="nb">self</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">mtd</span><span class="o">|</span>
</span><span class="line">   <span class="n">alias_method</span> <span class="s2">&quot;old_</span><span class="si">#{</span><span class="n">mtd</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span><span class="n">mtd</span>
</span><span class="line">   <span class="n">define_method</span> <span class="n">mtd</span> <span class="k">do</span> <span class="o">|*</span><span class="n">args</span><span class="o">|</span>
</span><span class="line">     <span class="nb">puts</span> <span class="s2">&quot;==========Enter </span><span class="si">#{</span><span class="n">mtd</span><span class="si">}</span><span class="s2">@</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">==========&quot;</span>
</span><span class="line">     <span class="nb">send</span> <span class="s2">&quot;old_</span><span class="si">#{</span><span class="n">mtd</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span><span class="o">*</span><span class="n">args</span>
</span><span class="line">     <span class="nb">puts</span> <span class="s2">&quot;==========Leave </span><span class="si">#{</span><span class="n">mtd</span><span class="si">}</span><span class="s2">@</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">==========&quot;</span>
</span><span class="line">   <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>再次运行原程序,输出则变成:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">==========</span><span class="no">Enter</span> <span class="n">hello</span><span class="err">@</span><span class="mi">2017</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mo">02</span> <span class="mi">23</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mi">25</span> <span class="o">+</span><span class="mi">0800</span><span class="o">==========</span>
</span><span class="line"><span class="no">Hello</span> <span class="n">jason</span>
</span><span class="line"><span class="o">==========</span><span class="no">Enter</span> <span class="n">talk</span><span class="err">@</span><span class="mi">2017</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mo">02</span> <span class="mi">23</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mi">25</span> <span class="o">+</span><span class="mi">0800</span><span class="o">==========</span>
</span><span class="line"><span class="no">Talk</span> <span class="n">to</span> <span class="n">jason</span>
</span><span class="line"><span class="o">==========</span><span class="no">Leave</span> <span class="n">talk</span><span class="err">@</span><span class="mi">2017</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mo">02</span> <span class="mi">23</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mi">25</span> <span class="o">+</span><span class="mi">0800</span><span class="o">==========</span>
</span><span class="line"><span class="o">==========</span><span class="no">Leave</span> <span class="n">hello</span><span class="err">@</span><span class="mi">2017</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mo">02</span> <span class="mi">23</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mi">25</span> <span class="o">+</span><span class="mi">0800</span><span class="o">==========</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>毫无疑问,不借助元编程的能力,也有各种解决这个问题的办法,但是如果你懂得这项技术,那么你会发现问题可以被解决得如此优雅,不用侵入到原代码的任何逻辑,就可以修改代码逻辑。试想下如果你想修改的逻辑是第三方库的代码, 而你甚至没有他们的源码,此时如果没有元编程的能力,是很难做出逻辑调整的。</p>

<h2 id="section-5">元编程改变了什么</h2>
<p>回到感性的部分,为什么向没有接触过元编程的人那么难以解释这个概念呢?其实正是因为这个概念本身就处于受众知识网络之外,所以当试图使用类比推导来描述时很容易使得这个概念越发让人迷惑。</p>

<p>那么了解这个概念之后,它到底改变了我什么思考角度呢?其实是看问题不再那么理所当然,面临一个问题时亦或者是已经拿到解决方案了,还会反向质疑自己,是否存在一种可能性,这种可能性甚至是超越自身知识范畴的,或者是和自己思维习惯相悖离的,而这种可能性很可能就是更优雅的解决方案。</p>

<p>除了思考的角度,对编码工作本身有什么实质性的作用吗?很遗憾,可能并没有。生产环境中的C,java,golang等等开发,很难用到这项技术,甚至于即便你处在某个非常极客的公司,使用了ruby/lisp作为生产语言,泛滥使用元编程也会直接导致项目的不可维护,导致最终项目leader将元编程作为禁术封印起来。但这些都不应该成为阻碍你了解它的理由,拓宽自身的视野,这更重要。</p>

<h2 id="section-6">写在最后</h2>
<p>最后,我还是以元编程界一个禅语论道结束吧:</p>

<p>编程弟子在跟随元编程大师一年后,终于掌握了所有的元编程能力。秋意微凉,师徒二人于树下盘坐,弟子回想所学,愈发迷惑,问道: 师傅, 我还是不明白,到底什么是元编程?</p>

<p>树上飘落最后一片秋叶,老禅师睁开眼,轻声一叹:孩子,这世上哪有什么元编程,就是编程啊。</p>

<p>弟子顿悟,乃成…</p>

<p>P.S. 你真的不觉得人工智能的基础之一就是元编程吗? 机器学习总结规律,元编程再将这些规律内化,自身改变自身逻辑,这不就是AI进化的基础吗。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[http原理]]></title>
    <link href="http://qjpcpu.github.io/blog/2016/03/15/httpyuan-li/"/>
    <updated>2016-03-15T14:10:51+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2016/03/15/httpyuan-li</id>
    <content type="html"><![CDATA[<p>Go语言中处理http请求主要涉及两个对象: <a href="https://golang.org/pkg/net/http/#ServeMux">ServeMux</a>和<a href="https://golang.org/pkg/net/http/#Handler">http.Handler接口</a>。</p>

<p>ServeMux即http请求路由，将http请求分发到注册的对应路由处理方法中。http.Handler及http的路由处理接口，该接口实际上仅包含一个方法<strong>ServeHTTP</strong>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>src/net/http/server.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">Handler</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="o">*</span><span class="nx">Request</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!-- more -->

<h3 id="section">基本原理</h3>

<p>下面我们创建一个简单的HTTP服务，该服务仅返回一个文本页面:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;net/http&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">TextHandler</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">word</span> <span class="kt">string</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">th</span> <span class="o">*</span><span class="nx">TextHandler</span><span class="p">)</span> <span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">w</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;I wanna say: &quot;</span> <span class="o">+</span> <span class="nx">th</span><span class="p">.</span><span class="nx">word</span><span class="p">))</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewServeMux</span><span class="p">()</span>
</span><span class="line">	<span class="nx">th</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">TextHandler</span><span class="p">{</span><span class="nx">word</span><span class="p">:</span> <span class="s">&quot;cool&quot;</span><span class="p">}</span>
</span><span class="line">	<span class="nx">mux</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">th</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Server started...&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">	<span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="nx">mux</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>访问<a href="http://localhost:3000">http://localhost:3000</a>，页面返回<code>I wanna say: cool</code>。</p>

<p><code>http.NewServeMux</code>创建出新的路由容器，<code>http.NewServeMux#Handle</code>方法将路由及其处理函数注册到路由容器，ServeMux内部包含一个map结构，用来存取http URL对应的处理器。</p>

<p>而<code>http.ListenAndServe</code>需要指定服务监听地址和一个Handler对象，及方法签名如下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>src/net/http/server.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">ListenAndServe</span><span class="p">(</span><span class="nx">addr</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handler</span> <span class="nx">Handler</span><span class="p">)</span> <span class="kt">error</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而ServeMux对象其实也定义了一个ServeHTTP的对象方法，所以ServeMux is a Handler，能够传入ListenAndServe方法启动服务。</p>

<p><strong>综上，使用ServeMux组装路由,再将它作为一个Handler交给http启动服务。当服务接收到一个http请求后，就根据路由中配置的规则选择对应的handler进行处理，实际的处理逻辑则由该handler的ServeHTTP方法实现。</strong></p>

<blockquote>
  <p>路由分发的逻辑具体实现可以查看<a href="https://golang.org/src/net/http/server.go">http包源码</a></p>
</blockquote>

<h3 id="section-1">标准用法</h3>

<h4 id="section-2">1.简化代码</h4>

<p>基本原理中的例子足以展示出golang的http处理原理，由于自定义的handler均必须实现http.Handler接口,这样会导致多余声明代码的产生。所以http包提供了一个帮助方法<code>http.HandlerFunc</code>将方法参数和<code>ServeHTTP</code>相同的方法转换为<code>http.Handler</code>。 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;net/http&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">saySomething</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">word</span> <span class="o">:=</span> <span class="s">&quot;cool&quot;</span>
</span><span class="line">	<span class="nx">w</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;I wanna say: &quot;</span> <span class="o">+</span> <span class="nx">word</span><span class="p">))</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewServeMux</span><span class="p">()</span>
</span><span class="line">	<span class="nx">th</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="nx">saySomething</span><span class="p">)</span>
</span><span class="line">	<span class="nx">mux</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">th</span><span class="p">)</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Server started...&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="nx">mux</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>实际上，<code>http.HandlerFunc</code>不是一个方法调用，仅仅是一个类型转换。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>源码src/net/http/server.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">HandlerFunc</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="o">*</span><span class="nx">Request</span><span class="p">)</span>
</span><span class="line"><span class="c1">// ServeHTTP calls f(w, r).</span>
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span> <span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">f</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所以，自定义的请求处理函数(<code>saySomething</code>)仅需要保持参数定义和<code>http.Handler</code>接口相同即可，将该自定义函数做类型转换为<code>HandlerFunc</code>即可。另外，由源码可以看出，函数类型<code>HandlerFunc</code>同时也实现了<code>http.Handler</code>，所以能够注册到<code>ServeMux</code>中。</p>

<h4 id="section-3">2.保持封装</h4>

<p>代码看起来缺失简单了一些，然而这样却破坏了逻辑的封装性：<code>saySomething</code>中包含了硬编码的参数<code>word</code>。这可以使用闭包来解决:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;net/http&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">saySomething</span><span class="p">(</span><span class="nx">word</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 闭包装入变量word</span>
</span><span class="line">	<span class="nx">f</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">w</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;I wanna say: &quot;</span> <span class="o">+</span> <span class="nx">word</span><span class="p">))</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewServeMux</span><span class="p">()</span>
</span><span class="line">	<span class="nx">th</span> <span class="o">:=</span> <span class="nx">saySomething</span><span class="p">(</span><span class="s">&quot;cool&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="nx">mux</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">th</span><span class="p">)</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Server started...&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="nx">mux</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>http服务中出现了很多名称，命名比较相近，这里汇总解释下:</strong></p>

<ul>
  <li><strong>ServeMux</strong>，路由容器，http服务中的路由规则统一在这里定义，启动服务后路由的分发自然也由其处理</li>
  <li><strong>http.Handler</strong>,请求处理器，每个处理http请求的处理器均需要实现该接口<code>ServeHTTP</code></li>
  <li><strong>http.HandlerFunc</strong>,帮助”方法”(实际是一个函数类型声明),将参数和<code>ServeHTTP</code>相同的普通函数转换为一个<code>http.Handler</code></li>
</ul>

<h3 id="http">http中间件</h3>

<p>golang中http处理流程是这样的:</p>

<pre><code>ServeMux ==&gt;  Middleware Handler ==&gt; Application Handler
</code></pre>

<p><strong>中间件</strong>:</p>

<ul>
  <li>中间件也是一个http.Handler，所以必须实现<code>ServeHTTP</code></li>
  <li>构建完整的中间件调用链，保证覆盖上图的中间件调用关系，并作为handler注册到<code>http.ServeMux</code></li>
</ul>

<p>一个中间件示例:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">exampleMiddleware</span><span class="p">(</span><span class="nx">next</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 中间件逻辑在这里实现</span>
</span><span class="line">    <span class="nx">next</span><span class="p">.</span><span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class="line">  <span class="p">})</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>由这个中间件定义可以看出中间件链的构建方式: 函数嵌套。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">http</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">middlewareOne</span><span class="p">(</span><span class="nx">middlewareTwo</span><span class="p">(</span><span class="nx">finalHandler</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看一个实际的例子:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">  <span class="s">&quot;log&quot;</span>
</span><span class="line">  <span class="s">&quot;net/http&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">middlewareOne</span><span class="p">(</span><span class="nx">next</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Executing middlewareOne&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="nx">next</span><span class="p">.</span><span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class="line">    <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Executing middlewareOne again&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">})</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">middlewareTwo</span><span class="p">(</span><span class="nx">next</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Executing middlewareTwo&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span> <span class="o">!=</span> <span class="s">&quot;/&quot;</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="nx">next</span><span class="p">.</span><span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class="line">    <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Executing middlewareTwo again&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">})</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">final</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Executing finalHandler&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="nx">w</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;OK&quot;</span><span class="p">))</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">finalHandler</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="nx">final</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="nx">http</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">middlewareOne</span><span class="p">(</span><span class="nx">middlewareTwo</span><span class="p">(</span><span class="nx">finalHandler</span><span class="p">)))</span>
</span><span class="line">  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>访问<a href="http://localhost:3000">http://localhost:3000</a>可以从日志看出中间件调用顺序:</p>

<pre><code>$ go run main.go
2014/10/13 20:27:36 Executing middlewareOne
2014/10/13 20:27:36 Executing middlewareTwo
2014/10/13 20:27:36 Executing finalHandler
2014/10/13 20:27:36 Executing middlewareTwo again
2014/10/13 20:27:36 Executing middlewareOne again
</code></pre>

<h4 id="section-4">中间件链构造方式</h4>

<p>上面例子的中间件链是比较常见的构造方式，然而多少有些可怕。而<a href="https://github.com/justinas/alice">Alice</a>将中间件链的构造简化了许多:</p>

<pre><code>Middleware1(Middleware2(Middleware3(App)))
</code></pre>

<p>转化为</p>

<pre><code>alice.New(Middleware1, Middleware2, Middleware3).Then(AppHandler)
// or 
alice.New(Middleware1, Middleware2, Middleware3).ThenFunc(AppFunc)
</code></pre>

<h3 id="section-5">参考文献</h3>

<p>文中主要内容来自参考文献第一、二条</p>

<ul>
  <li><a href="http://www.alexedwards.net/blog/a-recap-of-request-handling">A Recap of Request Handling in Go</a></li>
  <li><a href="http://www.alexedwards.net/blog/making-and-using-middleware">Making and Using HTTP Middleware</a></li>
  <li><a href="https://golang.org/src/net/http/server.go">net/http</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[task tracer -- 实时任务追踪系统]]></title>
    <link href="http://qjpcpu.github.io/blog/2016/02/18/task-tracer/"/>
    <updated>2016-02-18T14:43:27+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2016/02/18/task-tracer</id>
    <content type="html"><![CDATA[<h2 id="section">产生背景</h2>

<p><strong>Task Tracer(以下简称tt)</strong>的产生原因其实是为了解决一个用户体验的缺憾。由于在生产环境中，我们一直使用salt-stack作为任务的发布和执行机构，然而salt使用的Pub/Sub这种模式下有一个遗留缺陷: 就是任务一旦发出，直到它执行结束退出，任务的发起者无法知道任务当前的执行状态,唯一能做的仅仅能够判断该任务是否在running,而不能实时获取其进程输出；其次，当该salt任务执行完成后，需要独立获取其任务标准输出和进程退出状态(exit code)，无法一次性获取其输出和退出状态。salt社区也意识到这个问题，在逐步开发VT模块以求解决，不过这个特性截止到目前仍在实验阶段。</p>

<p>所以，为了消除salt任务执行阶段的黑洞焦虑，我决定开发tt。 虽然tt是为了解决salt的一个问题，但在开发时，我决定将其和salt分离开来，使得tt其实是能够解决这样一类问题: <strong>如果需要实时获取命令执行输出，就可以将命令包裹到tt中执行,从而利用tt Server实时获取其执行输出及结果</strong></p>

<!-- more -->

<p><img src="https://raw.githubusercontent.com/qjpcpu/task-tracer-server/master/snapshots/tt-preview.png" alt="tt preview" /></p>

<h2 id="section-1">工作原理</h2>

<p>tt其实是一个shell命令包裹器，它将要执行的命令以子进程的方式执行起来，实时地将该子进程的输出发送到tt Server，这样用户(api client)就能够从tt Server实时读取到该进程的输出；使用到的技术其实也很简单，就是nodejs+socket.io。
<img src="https://raw.githubusercontent.com/qjpcpu/task-tracer-server/master/snapshots/data-flow.png" alt="tt" /></p>

<p>从这张原理图可以看到，tt的数据流是单向的，也就是说这里的任务发起需要第三方来做，比如salt-stack甚至手动的shell登录后发起。当任务发起后，tt client会吐出一个输出结果查看的url，使用你的浏览器访问该url就可以实时查看任务的输出，另外，相同任务名下执行的所有tt client都会将输出发布出来，均可以查看。</p>

<p>另外，tt是一个实时输出查看跟踪系统，所以不会持久化任务的输出。</p>

<h2 id="try-our-live-demo">Try our live demo</h2>

<h3 id="section-2">1. 配置客户端</h3>

<p>根据你的系统类型(osx/linux)下载客户端可执行文件tt</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># for osx
</span><span class="line">wget https://raw.githubusercontent.com/qjpcpu/task-tracer-client/master/dist/tt.darwin -O tt
</span><span class="line"># for linux
</span><span class="line">wget https://raw.githubusercontent.com/qjpcpu/task-tracer-client/master/dist/tt.linux -O tt</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>客户端会读取配置文件<code>$HOME/.tt.conf</code>，将其内容配置为:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">id = natasha
</span><span class="line">token = eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiY2xpZW50X3Rva2VuIiwibnMiOiJ0ZXN0IiwiaWF0IjoxNDU1NzgwNDU0LCJleHAiOjE0ODczMzgwNTR9.hk96PzocFTSGogl1evyWa4UGjDpQ4nAWppIMCl6lnlo
</span><span class="line">url = http://tt.single-bit.org</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同样的方法再配置一台客户端，注意其配置文件中id和另一台不同（可以根据需要配置任意多台客户端,注意其配置文件中id需要各不相同）。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">id = tanya
</span><span class="line">token = eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiY2xpZW50X3Rva2VuIiwibnMiOiJ0ZXN0IiwiaWF0IjoxNDU1NzgwNDU0LCJleHAiOjE0ODczMzgwNTR9.hk96PzocFTSGogl1evyWa4UGjDpQ4nAWppIMCl6lnlo
</span><span class="line">url = http://tt.single-bit.org</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-3">2. 访问任务追踪页面</h3>

<p>打开浏览器访问<a href="http://tt.single-bit.org/?accessToken=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYnJvd3Nlcl90b2tlbiIsIm5zIjoidGVzdCIsImlhdCI6MTQ1NTc4MDQ1NCwiZXhwIjoxNDg3MzM4MDU0fQ.AuhXIVNxk5LYoamU2ziSBqvn0tEqyrszAvsCom3OmgI">tt Server live demo</a></p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/task-tracer-server/master/snapshots/live-demo-index.png" alt="live demo index page" /></p>

<p>填入我们需要追踪的任务名称，如: <strong>demo</strong>并确定，进入到任务监听状态。</p>

<h3 id="section-4">3. 执行任务</h3>

<p>在配置好的两台客户端上同时执行命令:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tt -n demo 'echo "from `head -1 ~/.tt.conf`";sleep 2;echo "sleep for a while";sleep 5;echo done'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在浏览器上可以看到实时输出: 在<code>tanya</code>和<code>natasha</code>分别输出各自的id，然后等待一会儿后进程执行结束.</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/task-tracer-server/master/snapshots/live-demo-output.png" alt="live demo output page" /></p>

<p>你也可以在执行过程中在某个客户端上执行<code>kill</code>命令或<code>Ctrl+C</code>终止进程，并查看浏览器实时反馈的结果。</p>

<h2 id="as-a-sevice----tt-server">As a sevice – 搭建自己的tt Server</h2>

<p>如果tt仅仅是作为一个web页面查看机器上的进程输出，那其实也没多大存在意义，关键是对于一个devops来说，它需要能够比较容易地嵌入你的系统工具里。</p>

<h3 id="section-5">1. 系统接口</h3>

<p>ttServer对外提供了若干<a href="http://socket.io/">socket.io</a>事件接口，基于你的需求，可以非常容易地接入到你自己的系统中，这样一来，怎样在UI上展示就完全取决于自己的实现。至于socket.io也有很多语言已经实现了该规范，所以使用起来应该也很简单。</p>

<p>详细接口定义及实现方式请查看<a href="https://github.com/qjpcpu/task-tracer-server">tt Server github文档</a></p>

<h3 id="section-6">2. 客户端安装配置</h3>

<p>tt的客户端安装配置非常简单，仅仅包含一个可执行文件tt和一份简单的ini格式的配置文件,令人愉悦的是该客户端没有环境依赖，不需要安装node等执行环境。</p>

<p>如果下载的二进制文件无法执行，请从源码编译。</p>

<p>具体的客户端安装配置可以查看<a href="https://github.com/qjpcpu/task-tracer-client">tt Client github文档</a></p>

<h2 id="logio">相关系统: log.io</h2>

<p><a href="http://logio.org/">log.io</a>是一个实时日志监控系统，其系统架构和实现方式都和tt非常相似。不过其应用场景是实时的日志采集监控，另外，logio的客户端有node环境依赖，个人觉得有点部署不完美。</p>

<p><img src="http://logio.org/screenshot3.png" alt="log.io" /></p>

<h2 id="github">附录: github地址</h2>

<p><a href="https://github.com/qjpcpu/task-tracer-server">tt Server</a></p>

<p><a href="https://github.com/qjpcpu/task-tracer-client">tt Client</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gulp js的构建工具]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/09/16/gulp-nodejs-cool-makefile/"/>
    <updated>2015-09-16T21:56:17+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/09/16/gulp-nodejs-cool-makefile</id>
    <content type="html"><![CDATA[<h3 id="section">0. 简介</h3>
<p>gulp是javascript世界的构建工具，它并不是js世界第一个构建工具，但由于它小而快的特点，一出现就快速赶超它的前辈grunt，在npm的下载榜上一直高居前列。</p>

<!-- more -->
<p><img src="https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png" alt="gulp logo" /></p>

<h3 id="gulp">1. gulp的特性</h3>
<p><strong><code>小</code></strong></p>

<p>gulp的第一个特点应该是小，不仅仅是源码小，更重要的是gulp编写的出的构建代码非常短小明了。这是因为gulp基本上完全是基于流式的构建处理，可以理解为由源码文件流经过一系列的中间加工处理直接将结果灌入到输出文件，没有了中间的临时文件读写，自然就减少了处理代码，出来的构建workflow同样也就十分清理简捷。</p>

<p>gulp构建流程的小固然有使用了流式处理的原因，但更重要的一种设计思路的不同。这里我想聊一下工程上的设计理念，通常我们设计程序的时候，遵守<code>配置优于代码</code>的原则。就是说，一些程序依赖的外置参数，尽量不要硬编码进代码文件里，而是将这些参数放在配置文件中。遵循这条原则可以极大增加工程的可维护性，比如java语言的某些著名框架就严格践行了这条原则，所以工程中就可能出现描述工程信息的各种xml配置文件。然后很多时候宣扬这条规律的书籍都没有将他的缺点，虽然缺点和优点相比有点微不足道，那就是一旦大量抽离程序的配置参数，将导致配置的碎片化，反面教材仍然是java框架里的xml配置泛滥。</p>

<p>所以后来的编程框架如rails开始强调<code>约定优于配置</code>的概念，就是如果大家经验约定这样做(放置配置的方式，命名的方式，搜索的方式等），那么程序工程里就不必显式声明这些规则，即不必要用一大堆配置文件去描述我们大家都约定遵守的东西。这样出来的结果工程上非常干净同时也满足了约定内高维护性。</p>

<p>那么在这里为什么要说这个呢，因为grunt其实可以说是一个基于<code>配置优于代码</code>的构建工具，而且很多其他编程语言的构建工具都是基于这个理念的。这类构建工具在执行大工程的构建时，配置的碎片化非常严重，为了描述构建需要在构建代码里编写大量的元信息片段，甚至于需要分立诸多构建小文件来描述子构建单元，那么维护构建流程本身也变成一件令人头疼的事情。</p>

<p>而gulp可以说某种程度上的回归，将更多的东西又返回到了原始的地方——-代码。gulp的构建文件里配置信息非常少，一个构建task包含的所有信息都在这个task里，你不需要跳到其他文件里查阅这个task的配置信息。是的，程序员喜欢代码，把构建所有的东西都在task这块代码里完成，这样的构建流程自然就很清晰了。所以，gulp非常适合中小型程序的构建，我私自揣度这也是gulp快速流行起来的原因。</p>

<p><strong><code>快</code></strong></p>

<p>gulp的快主要是因为它的核心是<code>流</code>,从源文件的读取到构建结束，整个加工过程都在内存流里完成，上一道工序和下一道加工工序间完全是流与流之间的管道连接，类似shell管道命令的流式操作，免去了大量中间文件的读写，少了文件io，自然快了很多。不过我并没有专门对这个做过benchmark，直观的感受是我重构某个包含数百个coffee文件的构建流程时，从grunt迁移为gulp后整个构建流程节省了大概一半的时间。</p>

<p><strong><code>简单</code></strong></p>

<p>在阅读了gulp的一些资料后，我本来打算花一个下午的时间来学习的，结果10分钟左右就读完了gulp的文档，因为它实在太简单了，总共只有<strong>4个</strong>API.</p>

<h3 id="gulp-1">2. gulp入门</h3>

<p>对于gulp的基础，我不打算在这里讲，因为它的<a href="https://github.com/gulpjs/gulp/tree/master/docs">官方文档</a>非常简单易读，如果想读中文，这里也有<a href="https://github.com/lisposter/gulp-docs-zh-cn">gulp中文文档</a>。花个10分钟读一下，你就可以向身边的小伙伴炫耀： Hi，让我给你展示下一种很cool的构建工具。</p>

<h3 id="gulp-2">3. gulp流</h3>

<p><code>流</code>是gulp重中之重的概念，理解了流才可以玩转gulp。可以看下<a href="https://github.com/substack/stream-handbook">nodejs流</a>深入理解下nodejs流的概念。这里仅简单介绍下gulp中广泛使用的<code>pipe()</code>函数。</p>

<p><code>src.pipe(dest)</code>函数是nodejs的流的一个函数，它的作用非常简单，就是将流进行管道连接，将src可读流和dest可写流连接起来，使得数据从src流入dest。</p>

<p>同时<code>src.pipe(dest)</code>的返回对象也是<code>dest</code>，所以在nodejs很容易看到这种链式编程风格。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这段代码等价于</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
</span><span class="line"><span class="nx">b</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
</span><span class="line"><span class="nx">c</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个操作和shell编程的管道非常相似: <code>a | b | c | d</code></p>

<h3 id="gulp-3">4. gulp任务的编写准则</h3>

<p>gulp的核心是流，构建单元是一个个<code>task</code>，那么编写这些task的时候需要注意什么呢？</p>

<p>gulp的task做到了最大限度的并发，那么这些task间的同步就成了问题，怎么样判断一个task完成了以便于可以安全执行另一个依赖task呢,为了正确调度任务，gulp的task设计有三个原则:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="mi">1</span><span class="p">.</span> <span class="err">在任务定义的</span><span class="kd">function</span><span class="err">中返回一个数据流，当该数据流的</span><span class="nx">end</span><span class="err">事件触发时，任务结束</span>
</span><span class="line"><span class="mi">2</span><span class="p">.</span> <span class="err">在任务定义的</span><span class="kd">function</span><span class="err">中返回一个</span><span class="nx">promise</span><span class="err">对象，当该</span><span class="nx">promise</span><span class="err">对象</span><span class="nx">resolve</span><span class="err">时，任务结束</span>
</span><span class="line"><span class="mi">3</span><span class="p">.</span> <span class="err">在任务定义的</span><span class="kd">function</span><span class="err">中传入</span><span class="nx">callback</span><span class="err">变量，当</span><span class="nx">callback</span><span class="p">()</span><span class="err">执行时，任务结束</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当发现task没有按预期执行时，就需要仔细检查是否每个task都遵循了这3条规则。</p>

<p>此外，当需要写出一些高阶的gulp玩法时，不理解并执行这几条规则，就很难办到。另外，可以思考个额外的问题，为什么gulp的task需要有这三条规则? 根据这3条规则，是否都可以猜测出gulp的实现机制呢?</p>

<p>在这里我顺便申明我对学习新东西的一个观点，就是<code>seize the key</code>，学习一种新东西就要理解她的核心。有的人秉持一种观念是说，语言只是工具，学习了一种其他都差不多，当有切换需求要学习新语言or新工具，就草草将以前的经验套上去，完成任务后还以为学会了新语言。所以有时候会看到一些四不像的代码，比如长得像shell的ruby代码，长得像java的python代码，一脸C长相的golang…</p>

<p>那么，怎样一学习新东西就能抓住其核心呢，很简单，多想想<code>why</code>。实际操作起来就几点经验：</p>

<ul>
  <li>如果有作者对这个语言/工具的创作初衷的相关文章，一定要看！</li>
  <li>看这个新东西是为了解决什么问题</li>
  <li>这个语言解决的是什么问题，更重要的是解决的思路或方式是什么！</li>
  <li>如果涉及新的概念或思路，一定要看足够多的文档直到理解这个概念</li>
  <li>如果学习的是新语言，必须<strong>理解</strong>这个语言的<strong>key feature</strong>，了解语言的生态圈，语言的编码规范、构建工具、测试工具、包管理工具，该语言里著名的库/框架，这些框架的设计理念，如果有余力可以看下这些库/框架的源码，告诉自己用这种语言写出的代码也应该是这个水平</li>
</ul>

<p>比如对于gulp:</p>

<ul>
  <li><strong>创作初衷</strong>: 看文档FAQ,作者twitter</li>
  <li><strong>需要解决的问题</strong>: grunt复杂庞大的插件配置</li>
  <li><strong>解决思路</strong>: nodejs流式处理=&gt;什么是nodejs流=&gt;解决什么问题，带来什么问题</li>
</ul>

<p>方方面面的东西了解了之后，你就能真正把控你的新玩意儿，有时候你甚至能预测这个语言或工具的未来动向。</p>

<h3 id="gulp-4">5. 常用gulp插件</h3>

<p>关于gulp的插件，需要的时候去github上找一下基本都能找到，这里提几个可能是通用构建流程里很可能用到的。</p>

<h4 id="run-sequencehttpswwwnpmjscompackagerun-sequence"><a href="https://www.npmjs.com/package/run-sequence">run-sequence</a></h4>

<p>鉴于流程控制对javascript这种纯异步编程的重要性，gulp的异步任务控制需求同样强烈，run-sequence就是为了解决这个问题。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">runSequence</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;run-sequence&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">clean</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-clean&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// This will run in this order: </span>
</span><span class="line"><span class="c1">// * build-clean </span>
</span><span class="line"><span class="c1">// * build-scripts and build-styles in parallel </span>
</span><span class="line"><span class="c1">// * build-html </span>
</span><span class="line"><span class="c1">// * Finally call the callback function </span>
</span><span class="line"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">runSequence</span><span class="p">(</span><span class="s1">&#39;build-clean&#39;</span><span class="p">,</span>
</span><span class="line">              <span class="p">[</span><span class="s1">&#39;build-scripts&#39;</span><span class="p">,</span> <span class="s1">&#39;build-styles&#39;</span><span class="p">],</span>
</span><span class="line">              <span class="s1">&#39;build-html&#39;</span><span class="p">,</span>
</span><span class="line">              <span class="nx">callback</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="c1">// configure build-clean, build-scripts, build-styles, build-html as you </span>
</span><span class="line"><span class="c1">// wish, but make sure they either return a stream or handle the callback </span>
</span><span class="line"><span class="c1">// Example: </span>
</span><span class="line">
</span><span class="line"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build-clean&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">BUILD_DIRECTORY</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">clean</span><span class="p">());</span>
</span><span class="line"><span class="c1">//  ^^^^^^ </span>
</span><span class="line"><span class="c1">//   This is the key here, to make sure tasks run asynchronously! </span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build-scripts&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">SCRIPTS_SRC</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(...)...</span>
</span><span class="line"><span class="c1">//  ^^^^^^ </span>
</span><span class="line"><span class="c1">//   This is the key here, to make sure tasks run asynchronously! </span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="delhttpswwwnpmjscompackagedel"><a href="https://www.npmjs.com/package/del">del</a></h4>

<p>删除文件，这是个再频繁不过的需求了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">del</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;del&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">del</span><span class="p">([</span><span class="s1">&#39;tmp/*.js&#39;</span><span class="p">,</span> <span class="s1">&#39;!tmp/unicorn.js&#39;</span><span class="p">]).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">paths</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Deleted files/folders:\n&#39;</span><span class="p">,</span> <span class="nx">paths</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">));</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>主要，del函数返回的是一个promise对象。</p>

<h4 id="merge-streamhttpswwwnpmjscompackagemerge-stream"><a href="https://www.npmjs.com/package/merge-stream">merge-stream</a></h4>

<p>当一个task里有多条流时，怎么办? merge-stream就是为了解决流的合并问题的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">merge</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;merge-stream&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">bootstrap</span> <span class="o">=</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;bootstrap/js/*.js&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;public/bootstrap&#39;</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">jquery</span> <span class="o">=</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;jquery.cookie/jquery.cookie.js&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;public/jquery&#39;</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">bootstrap</span><span class="p">,</span> <span class="nx">jquery</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当<code>bootstrap</code>和<code>jquery</code>这两条流都完成时，合并后的流才算完成。</p>

<h4 id="section-1">用户代码</h4>

<p>还有一种情况，如果task的流处理完成时，我希望执行一些用户代码，比如仅仅打印一些信息，这要怎么做呢? 使用task依赖固然可以完成，但是仅仅因为这个需求就增加一个<code>空</code>task是不是有点杀鸡用牛刀了，如果真正理解了nodejs流和gulp的task规则，其实也很好办:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;cli&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;coffee&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;*.coffee&#39;</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">coffee</span><span class="p">()).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;js/&#39;</span><span class="p">)).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">doSomething</span><span class="p">();</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">cb</span><span class="p">();</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line">  <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意task的返回值及task回调cb。</p>

<h3 id="section-2">6. 结束</h3>

<p>gulp是一个很cool的构建工具，学习她，在合适的时候使用她。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分享你的Angular指令]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/05/27/fen-xiang-ni-de-angularzhi-ling/"/>
    <updated>2015-05-27T17:47:56+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/05/27/fen-xiang-ni-de-angularzhi-ling</id>
    <content type="html"><![CDATA[<h3 id="angular-directive-on-bower">Angular directive on bower</h3>
<p>用Angular做web开发不但听起来是非常炫酷的事情，而且从我实际的开发体验来看，它确实是极大减轻了开发者的痛苦。我可以把精力都花在组织业务逻辑，创建更为流畅和漂亮的UI上，而完全不用去反复沦陷在事件绑定数据更新这些无趣的事情上。此外，angular框架本身依照设计模式上定义出了一套MVC漂亮的实现,了解其controller,server,directive后，写出大型web app已经不是难事了。</p>

<p>Angular中最漂亮的两个组件是service和directive，简单说来，service是逻辑代码的抽象和封装，它将应用中重复使用的逻辑代码抽象为公共服务，便于打造瘦controller；而directive则是对UI组件的抽象，其对directive的封装和接口设计简直刷新了我对前端的认识。</p>

<p>这里我就不准备详细介绍怎么写指令了，google的文档和我之前的博客都可供参考，这里说一下，如果你写出来非常cool的指令，怎么分享给大家呢？答案是bower。</p>

<!--more-->

<h3 id="bower">Bower</h3>
<p><a href="http://bower.io/">Bower</a>是一个js的客户端管理工具，可以称之为客户端的npm，其作者是twitter的几个家伙(<a href="https://github.com/fat">@fat</a>,<a href="https://github.com/maccman">@maccman</a>)。根据你配置的<code>bower.json</code>文件，Bower可以自动查找、下载和安装js库，极大节约开发时间。</p>

<h4 id="section">简单介绍</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装使用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">npm install -g bower
</span><span class="line"><span class="c"># registered package</span>
</span><span class="line">bower install jquery
</span><span class="line"><span class="c"># GitHub shorthand</span>
</span><span class="line">bower install desandro/masonry
</span><span class="line"><span class="c"># Git endpoint</span>
</span><span class="line">bower install git://github.com/user/package.git
</span><span class="line"><span class="c"># URL</span>
</span><span class="line">bower install http://example.com/script.js
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>### 创建一个基于bower的angular指令angular-dropzone
<a href="http://www.dropzonejs.com/">Dropzone</a>是一个漂亮的文件上传组件，下面就演示怎么把它集成为一个angular指令并分享到github。</p>

<h4 id="section-1">1.创建指令工程</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mkdir angular-dropzone <span class="o">&amp;&amp;</span> <span class="nb">cd</span> <span class="nv">$_</span>
</span><span class="line">touch angular-dropzone.js <span class="c">#  写入指令实现</span>
</span><span class="line">bower init <span class="c"># 初始化bower工程</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>回答完一系列问题后，生成的<code>bower.json</code>文件应该类似：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">{</span>
</span><span class="line">  name: <span class="s1">&#39;angular-dropzone&#39;</span>,
</span><span class="line">  main: <span class="s1">&#39;angular-dropzone.js&#39;</span>,
</span><span class="line">  version: <span class="s1">&#39;0.0.0&#39;</span>,
</span><span class="line">  authors: <span class="o">[</span>
</span><span class="line">    <span class="s1">&#39;qujianping &lt;qjpcpu@gmail.com&gt;&#39;</span>
</span><span class="line">  <span class="o">]</span>,
</span><span class="line">  description: <span class="s1">&#39;dropzone for angular&#39;</span>,
</span><span class="line">  keywords: <span class="o">[</span>
</span><span class="line">    <span class="s1">&#39;angular&#39;</span>,
</span><span class="line">    <span class="s1">&#39;dropzone&#39;</span>
</span><span class="line">  <span class="o">]</span>,
</span><span class="line">  license: <span class="s1">&#39;MIT&#39;</span>,
</span><span class="line">  ignore: <span class="o">[</span>
</span><span class="line">    <span class="s1">&#39;**/.*&#39;</span>,
</span><span class="line">    <span class="s1">&#39;node_modules&#39;</span>,
</span><span class="line">    <span class="s1">&#39;bower_components&#39;</span>,
</span><span class="line">    <span class="s1">&#39;test&#39;</span>,
</span><span class="line">    <span class="s1">&#39;tests&#39;</span>
</span><span class="line">  <span class="o">]</span>,
</span><span class="line">  dependencies: <span class="o">{</span>
</span><span class="line">    angular: <span class="s1">&#39;~1.3.0&#39;</span>,
</span><span class="line">    dropzone: <span class="s1">&#39;~4.0.1&#39;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-2">2.编辑指令代码</h4>
<p>现在开始编写指令的实现。指令代码最好遵守一定命名规范，如：以github名称作为命名空间。
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span>angular-dropzone.js</span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;qjpcpu.angular-dropzone&#39;</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class="line">  <span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;qjpDropzone&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// implementation goes here</span>
</span><span class="line">  <span class="p">});</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
具体代码实现可以参考<a href="https://github.com/qjpcpu/angular-dropzone">angular-dropzone</a></p>

<h4 id="section-3">3.发布指令</h4>
<p>编写完成后，就可以推送到github。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git init .
</span><span class="line">git add bower.json angular-dropzone.js
</span><span class="line">git commit -m <span class="s1">&#39;v0.0.0&#39;</span>
</span><span class="line">git tag v0.0.0
</span><span class="line">git remote add origin git@github.com:qjpcpu/angular-dropzone.git
</span><span class="line">git push -u origin master
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意，bower使用git的tag确定版本号。</p>

<h4 id="section-4">4.在你的应用中使用该指令</h4>
<p>现在可以拉取使用你的angular指令了：
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="bash"><span class="line">bower install qjpcpu/angular-dropzone
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>在<code>index.html</code>文件添加加载的文件:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;bower_components/dropzone/dist/dropzone.css&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/dropzone/dist/dropzone.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-dropzone/angular-dropzone.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>需要添加模块依赖:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span>app.coffee</span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="coffeescript"><span class="line"><span class="nv">app = </span><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&quot;my-app&quot;</span><span class="p">,</span> <span class="p">[</span>
</span><span class="line">  <span class="s">&#39;qjpcpu.angular-dropzone&#39;</span>
</span><span class="line"><span class="p">])</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
这样在html片段里就可以使用指令了,关于该指令具体参数参考<a href="https://github.com/qjpcpu/angular-dropzone">angular-dropzone</a>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>p.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;div</span> <span class="na">qjp-dropzone</span> <span class="na">class=</span><span class="s">&quot;droppable-area&quot;</span> <span class="na">url=</span><span class="s">&quot;&#39;/url/to-upload&#39;&quot;</span><span class="nt">&gt;</span>
</span><span class="line">	Drop file here
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于后台任务]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/05/27/guan-yu-hou-tai-ren-wu/"/>
    <updated>2015-05-27T17:16:34+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/05/27/guan-yu-hou-tai-ren-wu</id>
    <content type="html"><![CDATA[<h3 id="sidekiq">关于sidekiq</h3>
<p>在做ruby开发时，通常会遇到耗时操作的处理，sidekiq由于其使用简单，性能强劲，所以常被用来作为Ruby应用的后台任务的执行引擎。不过sidekiq有个令人头疼的问题，就是任务提交到后台异步执行后，对于其状态的监测和管理就成为很大的问题。</p>

<!--more-->

<p>sidekiq的wiki上也贴出了很多相关执行管理工具，sidekiq-promise是个人最喜欢的一个，其异步回调的风格和js的风格非常像，使用起来非常友好。</p>

<h3 id="sidekiq-promise">sidekiq-promise</h3>
<p>这里的例子直接来源于其github的readme:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>demo.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ProcessWorker</span>
</span><span class="line">  <span class="kp">include</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Promise</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">perform</span> <span class="n">file_to_process</span>
</span><span class="line">    <span class="no">UnzipWorker</span><span class="o">.</span><span class="n">as_promise</span><span class="p">(</span><span class="n">file_to_process</span><span class="p">)</span><span class="o">.</span><span class="n">then</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
</span><span class="line">      <span class="no">MrDarcy</span><span class="o">.</span><span class="n">all_promises</span> <span class="k">do</span>
</span><span class="line">        <span class="n">dir</span><span class="o">.</span><span class="n">entries</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class="line">          <span class="no">ImageThumbnailWorker</span><span class="o">.</span><span class="n">as_promise</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span><span class="o">.</span><span class="n">then</span> <span class="k">do</span>
</span><span class="line">      <span class="no">UserNotificationMailer</span><span class="o">.</span><span class="n">all_images_processed</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>简述: UnzipWorker会解压文件，然后将解压得到的每个文件分发给ImageThumbnailWorker去创建压缩图，等待所有压缩完成后再发送通知邮件，非常简洁漂亮。</p>

<ul>
  <li>将worker里的<code>include Sidekiq::Worker</code>替换成<code>include Sidekiq::Promise</code>即可。</li>
  <li>
    <p>如果要获取worker的输出，则调用<code>ProcessWorker.as_promise(arguments)</code>即可，在then block中获取执行结果，这个结果即<code>perform</code>方法的返回值。</p>
  </li>
  <li><code>sidekiq-promise</code>使用了<code>MrDarcy</code>，所以提供了一个很有意思的方法</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">MrDarcy</span><span class="o">.</span><span class="n">all_promises</span> <span class="k">do</span>
</span><span class="line">  <span class="o">[</span><span class="n">promise1</span><span class="p">,</span><span class="n">promise2</span><span class="o">]</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>MrDarcy.all_promises</code>的块会等待其中列表的每一个promise完成。</p>
]]></content>
  </entry>
  
</feed>
