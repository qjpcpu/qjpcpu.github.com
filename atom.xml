<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jason's space]]></title>
  <link href="http://qjpcpu.github.io/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2022-09-27T01:35:02+00:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[怎样写一个解释器]]></title>
    <link href="http://qjpcpu.github.io/blog/2022/09/09/how-to-write-your-interpreter/"/>
    <updated>2022-09-09T11:57:00+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2022/09/09/how-to-write-your-interpreter</id>
    <content type="html"><![CDATA[<p>写一个解释器，通常是设计和实现一个编程语言的第一步；亦或者我们想要一种自定义程度较高的 DSL ，通常也不得不自行去实现解释器。而如何实现一个解释器，网络上的资料其实也并不算多，所以我这里简单做个分享。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">写在前面</a></li>
  <li><a href="#lisp-">Lisp 语法</a></li>
  <li><a href="#lisgo-">lis.go 计算器</a></li>
  <li><a href="#section-1">解释器工作流程</a></li>
  <li><a href="#get-started">Get started</a>    <ul>
      <li><a href="#section-2">类型定义</a></li>
      <li><a href="#parsing-parse-tokenize-and-readfromtokens">Parsing: parse, tokenize and read_from_tokens</a></li>
      <li><a href="#section-3">基础环境</a></li>
      <li><a href="#evaluation-eval">Evaluation: eval</a></li>
      <li><a href="#interaction-a-repl">Interaction: A REPL</a></li>
      <li><a href="#section-4">自定义函数</a></li>
    </ul>
  </li>
  <li><a href="#section-5">完整代码</a></li>
  <li><a href="#section-6">应用到生产环境?</a></li>
</ul>

<h1 id="section">写在前面</h1>

<p>写一个解释器，通常是设计和实现一个编程语言的第一步；亦或者如果我们想要一种自定义程度较高的 DSL，通常也不得不自行去实现解释器。而如何实现一个解释器，网络上的资料其实也并不算多，所以我这里简单做个分享。</p>

<p>要完整实现一个编译器/解释器，需要语法设计到编译前后端的完整实现，这涉及到巨大的工作量。但通常我们只需要能够实现 DSL，使得 DSL 能够依托于我们主语言环境运行即可，不需要考虑编译后端的问题。所以本文的解释器仅涉及到编译前端流程，后端执行细节交给宿主语言运行时。</p>

<p>此外，如果一开始就选择非常复杂的语言如 Python、Ruby或Haskell, 会让我们掉入词法/语法解析的深坑，但对学习书写解释器没什么帮助，所以我们选择了语法规则简单的 lisp 来实现一个解释器。</p>

<p>另外，主语言使用 Golang, 除了语言本身比较简单，也为了读者对照实验没有环境部署的焦虑。</p>

<blockquote>
  <p>If you don’t know how compilers work, then you don’t know how computers work.</p>

  <p>http://norvig.com/lispy.html 
Steve Yegge.</p>
</blockquote>

<h1 id="lisp-">Lisp 语法</h1>

<p>考虑到很多国内的同学可能没有接触过 lisp，这里首先简单介绍下其语法。</p>

<ul>
  <li>golang</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="k">if</span> <span class="nx">x</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">*</span> <span class="nx">i</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">})</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>lisp</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">x</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">fn </span><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">array_get</span> <span class="nv">arr</span> <span class="nv">i</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="mi">3</span> <span class="nv">i</span><span class="p">))</span>
</span><span class="line">      <span class="p">(</span><span class="nb">list </span><span class="s">&quot;a&quot;</span> <span class="s">&quot;b&quot;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如上例所示，尽管golang 相较于其他语言，其语法已经非常简单，但是它仍然有数十个关键字，若干中置操作符, 隐式操作优先级、逗号、各种括号等等，其语法规范仍然是比较多的；而相对来说，lisp 的语法规范就简单很多： </p>

<ul>
  <li>lisp 代码仅包含表达式，不包含语句，即，每一句lisp 必定都会返回值；</li>
  <li>数字、字符串、符号均称为「原子」，原子不可分解；</li>
  <li>除了原子外所有东西都是「列表」，列表以 <code>(</code>开头<code>)</code>结尾；列表的第一个元素要么是一个关键字，要么是一个函数调用；</li>
</ul>

<p>lisp 的这种设计导致代码可读性略有下降，但是却带来易解析、表意性强、代码和数据统一等诸多优点，因此长期是国外 CS 教学的首选语言。</p>

<h1 id="lisgo-">lis.go 计算器</h1>

<p>我们本次的目标是基于 lisp 语法在 golang 是实现一个计算器。该计算器支持以下一些表达式:</p>

<table>
  <thead>
    <tr>
      <th>Expression</th>
      <th>Syntax</th>
      <th>Semantics and Example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>符号</td>
      <td>symbol</td>
      <td>一个符号通常引用了一个值，如 (define r 10) 表示符号 r 引用了值 10</td>
    </tr>
    <tr>
      <td>字面量</td>
      <td>number</td>
      <td>比如数字 12</td>
    </tr>
    <tr>
      <td>条件分支</td>
      <td>(if test conseq alt)</td>
      <td>如果 test 为 true，则返回 conseq，否则返回 alt</td>
    </tr>
    <tr>
      <td>变量绑定</td>
      <td>(define symbol expr)</td>
      <td>定义一个符号 symbol,且将其值绑定为 expr</td>
    </tr>
    <tr>
      <td>函数定义及调用</td>
      <td>(proc arg …)</td>
      <td>如果 proc 是关键字，如 if，则执行分支逻辑，否则寻找对应函数进行调用</td>
    </tr>
  </tbody>
</table>

<h1 id="section-1">解释器工作流程</h1>

<p>解释器执行通常包含两步：</p>

<ul>
  <li>Parsing</li>
</ul>

<p>解析代码生成抽象语法树,这一步通常叫 <code>parse</code>。</p>

<ul>
  <li>Execution</li>
</ul>

<p>对 AST 求值，返回我们想要的结果,这一步通常叫 <code>eval</code>。</p>

<p>下图是解释器工作的简单示例:</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/parsing-and-execution.png" alt="parsing-execution" /></p>

<p>如下代码是是<code>parse</code>和<code>eval</code>工作的代码示例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="o">&gt;&gt;</span> <span class="nx">program</span> <span class="o">:=</span> <span class="s">&quot;(begin (define r 10) (* pi (* r r)))&quot;</span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">program</span><span class="p">)</span>
</span><span class="line"><span class="p">[</span><span class="err">&#39;</span><span class="nx">begin</span><span class="err">&#39;</span><span class="p">,</span> <span class="p">[</span><span class="err">&#39;</span><span class="nx">define</span><span class="err">&#39;</span><span class="p">,</span> <span class="sc">&#39;r&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="sc">&#39;*&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">pi</span><span class="err">&#39;</span><span class="p">,</span> <span class="p">[</span><span class="sc">&#39;*&#39;</span><span class="p">,</span> <span class="sc">&#39;r&#39;</span><span class="p">,</span> <span class="sc">&#39;r&#39;</span><span class="p">]]]</span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="nx">eval</span><span class="p">(</span><span class="nx">parse</span><span class="p">(</span><span class="nx">program</span><span class="p">))</span>
</span><span class="line"><span class="mf">314.1592653589793</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="get-started">Get started</h1>

<h2 id="section-2">类型定义</h2>

<p>首先，我们定义好 lis.go 需要的基本类型:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// 所有的表达式都需要实现 Expression 接口,该接口仅仅是一个标记接口</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">Expression</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">Sexpr</span><span class="p">()</span> <span class="kt">string</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 符号类型</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">Symbol</span> <span class="kt">string</span>
</span><span class="line"><span class="c1">// 列表类型,其实是一个单向链表,每个节点存储当前表达式和下一个节点指针</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">List</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">Val</span>  <span class="nx">Expression</span>
</span><span class="line">	<span class="nx">Rest</span> <span class="o">*</span><span class="nx">List</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="c1">// 函数类型</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">Function</span> <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">Env</span><span class="p">,</span> <span class="p">[]</span><span class="nx">Expression</span><span class="p">)</span> <span class="nx">Expression</span>
</span><span class="line"><span class="c1">// 布尔类型</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">Bool</span> <span class="kt">bool</span>
</span><span class="line"><span class="c1">// 整数</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">Integer</span> <span class="kt">int64</span>
</span><span class="line"><span class="c1">// 浮点数</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">Float</span> <span class="kt">float64</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 环境,包含父环境的引用及当前环境的符号表</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">Env</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">parent</span> <span class="o">*</span><span class="nx">Env</span>
</span><span class="line">	<span class="nx">scope</span>  <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">Expression</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们定义了基本接口<code>Expression</code>，所有lis.go的类型都需要实现该接口，包括了：</p>

<ul>
  <li>Symbol 符号</li>
  <li>Integer 整数</li>
  <li>Float 浮点数</li>
  <li>Bool 布尔值</li>
  <li>List 列表</li>
  <li>Function 函数</li>
</ul>

<p>此外，我们还定义了环境 <code>Env</code>。或者叫作用域，程序运行时的符号查找都需要依赖于所处的环境，比如同一个符号 <code>a</code>，在不同的环境中，很可能引用了不同的值。</p>

<p>每个符号的解释，都需要优先查找当前环境，如果找不到则向上到父环境查找，直至根环境。</p>

<h2 id="parsing-parse-tokenize-and-readfromtokens">Parsing: parse, tokenize and read_from_tokens</h2>

<p>解析的过程通常分为两步：</p>

<ul>
  <li>词法解析，逐个字符读取代码文件，将字符串流解析为「词」的流，也叫 tokenize</li>
  <li>语法解析，对 token 流进行语义分析，生成 AST</li>
</ul>

<p>词法分析有很多现成的工具，这里我们使用最简单的一种: golang的 <code>strings.Split</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">tokenize</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">TokenStream</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">s</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">ReplaceAll</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="s">&quot;(&quot;</span><span class="p">,</span> <span class="s">&quot; ( &quot;</span><span class="p">)</span>
</span><span class="line">	<span class="nx">s</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">ReplaceAll</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="s">&quot;)&quot;</span><span class="p">,</span> <span class="s">&quot; ) &quot;</span><span class="p">)</span>
</span><span class="line">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">TokenStream</span><span class="p">{</span><span class="nx">tokens</span><span class="p">:</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">Split</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="s">&quot; &quot;</span><span class="p">)}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>parse</code> 函数接受代码字符串作为输入,调用<code>tokenize</code> 得到 token 流, 然后调用 <code>read_from_tokens</code> 将词流组织成抽象语法树。</p>

<p><code>read_from_tokens</code> 遇到 <code>(</code> 则开始一个列表的解析,直至遇到列表结束符<code>)</code>; 如果其他 case 则作为原子解析。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// Read an expression from a sequence of tokens.</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">read_from_tokens</span><span class="p">(</span><span class="nx">tokens</span> <span class="o">*</span><span class="nx">TokenStream</span><span class="p">)</span> <span class="nx">Expression</span> <span class="p">{</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">tokens</span><span class="p">.</span><span class="nx">Empty</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="nb">panic</span><span class="p">(</span><span class="s">&quot;unexpected EOF while reading&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">token</span> <span class="o">:=</span> <span class="nx">tokens</span><span class="p">.</span><span class="nx">Pop</span><span class="p">()</span>
</span><span class="line">	<span class="k">if</span> <span class="s">&quot;(&quot;</span> <span class="o">==</span> <span class="nx">token</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">List</span><span class="p">{}</span>
</span><span class="line">		<span class="k">for</span> <span class="nx">tokens</span><span class="p">.</span><span class="nx">Peek</span><span class="p">()</span> <span class="o">!=</span> <span class="s">&quot;)&quot;</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">l</span><span class="p">.</span><span class="nx">Append</span><span class="p">(</span><span class="nx">read_from_tokens</span><span class="p">(</span><span class="nx">tokens</span><span class="p">))</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">		<span class="nx">tokens</span><span class="p">.</span><span class="nx">Pop</span><span class="p">()</span> <span class="c1">// drop &#39;)&#39;</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">l</span>
</span><span class="line">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="s">&quot;)&quot;</span> <span class="o">==</span> <span class="nx">token</span> <span class="p">{</span>
</span><span class="line">		<span class="nb">panic</span><span class="p">(</span><span class="s">&quot;unexpected )&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">atom</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Numbers become numbers; Booleans become booleans; any other token is a symbol.</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">atom</span><span class="p">(</span><span class="nx">token</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">Expression</span> <span class="p">{</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">ParseInt</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">64</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="p">!</span><span class="nx">strings</span><span class="p">.</span><span class="nx">Contains</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="s">&quot;.&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">Integer</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">fval</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">ParseFloat</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="mi">64</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">Float</span><span class="p">(</span><span class="nx">fval</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">token</span> <span class="o">==</span> <span class="s">`true`</span> <span class="o">||</span> <span class="nx">token</span> <span class="o">==</span> <span class="s">`false`</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">Bool</span><span class="p">(</span><span class="nx">token</span> <span class="o">==</span> <span class="s">`true`</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">Symbol</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OK, 我们的 <code>parse</code> 函数已经可以运行了:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="o">&gt;&gt;</span><span class="p">&gt;</span> <span class="nx">program</span> <span class="p">=</span> <span class="s">&quot;(define r 10) (* pi (* r r))&quot;</span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;&gt;</span><span class="p">&gt;</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">program</span><span class="p">)</span>
</span><span class="line"><span class="p">[</span><span class="err">&#39;</span><span class="nx">define</span><span class="err">&#39;</span><span class="p">,</span> <span class="sc">&#39;r&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="sc">&#39;*&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">pi</span><span class="err">&#39;</span><span class="p">,</span> <span class="p">[</span><span class="sc">&#39;*&#39;</span><span class="p">,</span> <span class="sc">&#39;r&#39;</span><span class="p">,</span> <span class="sc">&#39;r&#39;</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">基础环境</h2>

<p>在进入下一步之前，我们需要为代码准备好执行环境。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">baseEnv</span><span class="p">()</span> <span class="o">*</span><span class="nx">Env</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">env</span> <span class="o">:=</span> <span class="nx">NewEnv</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
</span><span class="line">	<span class="nx">env</span><span class="p">.</span><span class="nx">scope</span><span class="p">[</span><span class="s">&quot;+&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">Function</span><span class="p">(</span><span class="nx">plus</span><span class="p">)</span>
</span><span class="line">	<span class="nx">env</span><span class="p">.</span><span class="nx">scope</span><span class="p">[</span><span class="s">&quot;-&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">Function</span><span class="p">(</span><span class="nx">minus</span><span class="p">)</span>
</span><span class="line">	<span class="nx">env</span><span class="p">.</span><span class="nx">scope</span><span class="p">[</span><span class="s">&quot;*&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">Function</span><span class="p">(</span><span class="nx">multiple</span><span class="p">)</span>
</span><span class="line">	<span class="nx">env</span><span class="p">.</span><span class="nx">scope</span><span class="p">[</span><span class="s">&quot;/&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">Function</span><span class="p">(</span><span class="nx">divide</span><span class="p">)</span>
</span><span class="line">	<span class="nx">env</span><span class="p">.</span><span class="nx">scope</span><span class="p">[</span><span class="s">&quot;&gt;&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">Function</span><span class="p">(</span><span class="nx">gt</span><span class="p">)</span>
</span><span class="line">	<span class="nx">env</span><span class="p">.</span><span class="nx">scope</span><span class="p">[</span><span class="s">&quot;&lt;&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">Function</span><span class="p">(</span><span class="nx">lt</span><span class="p">)</span>
</span><span class="line">	<span class="nx">env</span><span class="p">.</span><span class="nx">scope</span><span class="p">[</span><span class="s">&quot;==&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">Function</span><span class="p">(</span><span class="nx">eq</span><span class="p">)</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">env</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如前文所述，环境是符号解释的核心组件。在我们的基础环境里，已经定义好了加减乘除等几个基本操作函数，当然，你也可以提前定义好一些全局变量，任何 lis.go 支持的表达式都可以根据需求预置到环境中。</p>

<p>函数的实现也非常简单，以加法为例，其实就是调用了 golang 自己的加法操作符进行计算而已。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">plus</span><span class="p">(</span><span class="nx">env</span> <span class="o">*</span><span class="nx">Env</span><span class="p">,</span> <span class="nx">exprs</span> <span class="p">[]</span><span class="nx">Expression</span><span class="p">)</span> <span class="nx">Expression</span> <span class="p">{</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">isFloat</span><span class="p">(</span><span class="nx">exprs</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">||</span> <span class="nx">isFloat</span><span class="p">(</span><span class="nx">exprs</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">Float</span><span class="p">(</span><span class="nx">toFloat</span><span class="p">(</span><span class="nx">exprs</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="nx">toFloat</span><span class="p">(</span><span class="nx">exprs</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">Integer</span><span class="p">(</span><span class="nx">toInt</span><span class="p">(</span><span class="nx">exprs</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="nx">toInt</span><span class="p">(</span><span class="nx">exprs</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="evaluation-eval">Evaluation: eval</h2>

<p>我们将根据之前的需求，实现该表中的能力:</p>

<table>
  <thead>
    <tr>
      <th>Expression</th>
      <th>Syntax</th>
      <th>Semantics and Example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>符号</td>
      <td>symbol</td>
      <td>一个符号通常引用了一个值，如 (define r 10) 表示符号 r 引用了值 10</td>
    </tr>
    <tr>
      <td>字面量</td>
      <td>number</td>
      <td>比如数字 12</td>
    </tr>
    <tr>
      <td>条件分支</td>
      <td>(if test conseq alt)</td>
      <td>如果 test 为 true，则返回 conseq，否则返回 alt</td>
    </tr>
    <tr>
      <td>变量绑定</td>
      <td>(define symbol expr)</td>
      <td>定义一个符号 symbol,且将其值绑定为 expr</td>
    </tr>
    <tr>
      <td>函数定义及调用</td>
      <td>(proc arg …)</td>
      <td>如果 proc 是关键字，如 if，则执行分支逻辑，否则寻找对应函数进行调用</td>
    </tr>
  </tbody>
</table>

<p>下面的代码即 <code>eval</code> 的实现:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">eval</span><span class="p">(</span><span class="nx">x</span> <span class="nx">Expression</span><span class="p">,</span> <span class="nx">env</span> <span class="o">*</span><span class="nx">Env</span><span class="p">)</span> <span class="nx">Expression</span> <span class="p">{</span>
</span><span class="line">	<span class="k">switch</span> <span class="nx">val</span> <span class="o">:=</span> <span class="nx">x</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">case</span> <span class="nx">Symbol</span><span class="p">:</span>
</span><span class="line">		<span class="c1">// variable reference</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">env</span><span class="p">.</span><span class="nx">Find</span><span class="p">(</span><span class="nx">val</span><span class="p">)[</span><span class="nx">val</span><span class="p">.</span><span class="nx">Sexpr</span><span class="p">()]</span>
</span><span class="line">	<span class="k">case</span> <span class="o">*</span><span class="nx">List</span><span class="p">:</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">evalList</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span>
</span><span class="line">	<span class="k">default</span><span class="p">:</span>
</span><span class="line">		<span class="c1">// constant literal</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">x</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果是符号，则从环境中查找其引用的值，如果是列表则调用<code>evalList</code>对列表求值，如果是其他字面量，则直接返回字面量本身。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">evalList</span><span class="p">(</span><span class="nx">x</span> <span class="o">*</span><span class="nx">List</span><span class="p">,</span> <span class="nx">env</span> <span class="o">*</span><span class="nx">Env</span><span class="p">)</span> <span class="nx">Expression</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">name</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">Val</span><span class="p">.(</span><span class="nx">Symbol</span><span class="p">))</span>
</span><span class="line">	<span class="k">switch</span> <span class="nx">name</span> <span class="p">{</span>
</span><span class="line">	<span class="k">case</span> <span class="s">&quot;if&quot;</span><span class="p">:</span>
</span><span class="line">		<span class="c1">// (if test conseq alt)</span>
</span><span class="line">		<span class="nx">test</span><span class="p">,</span> <span class="nx">conseq</span><span class="p">,</span> <span class="nx">alt</span> <span class="o">:=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Val</span><span class="p">,</span> <span class="nx">x</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Val</span><span class="p">,</span> <span class="nx">x</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Val</span>
</span><span class="line">		<span class="k">if</span> <span class="nx">res</span> <span class="o">:=</span> <span class="nx">eval</span><span class="p">(</span><span class="nx">test</span><span class="p">,</span> <span class="nx">env</span><span class="p">);</span> <span class="nx">res</span><span class="p">.(</span><span class="nx">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="k">return</span> <span class="nx">eval</span><span class="p">(</span><span class="nx">conseq</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span>
</span><span class="line">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">			<span class="k">return</span> <span class="nx">eval</span><span class="p">(</span><span class="nx">alt</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="k">case</span> <span class="s">&quot;define&quot;</span><span class="p">:</span>
</span><span class="line">		<span class="c1">// (define var exp)</span>
</span><span class="line">		<span class="nx">vvar</span><span class="p">,</span> <span class="nx">expr</span> <span class="o">:=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Val</span><span class="p">,</span> <span class="nx">x</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Val</span>
</span><span class="line">		<span class="nx">env</span><span class="p">.</span><span class="nx">scope</span><span class="p">[</span><span class="nx">vvar</span><span class="p">.</span><span class="nx">Sexpr</span><span class="p">()]</span> <span class="p">=</span> <span class="nx">eval</span><span class="p">(</span><span class="nx">expr</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">env</span><span class="p">.</span><span class="nx">scope</span><span class="p">[</span><span class="nx">vvar</span><span class="p">.</span><span class="nx">Sexpr</span><span class="p">()]</span>
</span><span class="line">	<span class="k">case</span> <span class="s">&quot;set!&quot;</span><span class="p">:</span>
</span><span class="line">		<span class="c1">// (set! var exp)</span>
</span><span class="line">		<span class="nx">vvar</span><span class="p">,</span> <span class="nx">expr</span> <span class="o">:=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Val</span><span class="p">,</span> <span class="nx">x</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Val</span>
</span><span class="line">		<span class="nx">env</span><span class="p">.</span><span class="nx">Find</span><span class="p">(</span><span class="nx">vvar</span><span class="p">.(</span><span class="nx">Symbol</span><span class="p">))[</span><span class="nx">vvar</span><span class="p">.</span><span class="nx">Sexpr</span><span class="p">()]</span> <span class="p">=</span> <span class="nx">expr</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">expr</span>
</span><span class="line">	<span class="k">default</span><span class="p">:</span>
</span><span class="line">		<span class="c1">// (function arg...)</span>
</span><span class="line">		<span class="nx">proc</span> <span class="o">:=</span> <span class="nx">eval</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">Val</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">args</span> <span class="p">[]</span><span class="nx">Expression</span>
</span><span class="line">		<span class="k">for</span> <span class="nx">ptr</span> <span class="o">:=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">Rest</span><span class="p">;</span> <span class="nx">ptr</span><span class="p">.</span><span class="nx">Val</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">;</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">args</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="nx">eval</span><span class="p">(</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">Val</span><span class="p">,</span> <span class="nx">env</span><span class="p">))</span>
</span><span class="line">			<span class="nx">ptr</span> <span class="p">=</span> <span class="nx">ptr</span><span class="p">.</span><span class="nx">Rest</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">proc</span><span class="p">.(</span><span class="nx">Function</span><span class="p">)(</span><span class="nx">NewEnv</span><span class="p">(</span><span class="nx">env</span><span class="p">),</span> <span class="nx">args</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>evalList</code> 如果发现第一个符号是 <code>if</code> 等关键字，则执行对应逻辑，如果是函数调用，则调用对应的函数即可。</p>

<h2 id="interaction-a-repl">Interaction: A REPL</h2>

<p>为了使用我们的计算器，我们实现了一个简单的 REPL.</p>

<blockquote>
  <p>REPL: Read Eval Print Loop</p>
</blockquote>

<p>逐行读入代码字符串，然后计算结果并打印到标准输出。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">repl</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">line</span> <span class="o">:=</span> <span class="nx">liner</span><span class="p">.</span><span class="nx">NewLiner</span><span class="p">()</span>
</span><span class="line">	<span class="k">defer</span> <span class="nx">line</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">	<span class="nx">line</span><span class="p">.</span><span class="nx">SetCtrlCAborts</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">	<span class="nx">env</span> <span class="o">:=</span> <span class="nx">baseEnv</span><span class="p">()</span>
</span><span class="line">	<span class="k">for</span> <span class="p">{</span>
</span><span class="line">		<span class="k">if</span> <span class="nx">sentence</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">line</span><span class="p">.</span><span class="nx">Prompt</span><span class="p">(</span><span class="s">&quot;lis.go&gt; &quot;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">val</span> <span class="o">:=</span> <span class="nx">eval</span><span class="p">(</span><span class="nx">parse</span><span class="p">(</span><span class="nx">sentence</span><span class="p">),</span> <span class="nx">env</span><span class="p">)</span>
</span><span class="line">			<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">val</span><span class="p">.</span><span class="nx">Sexpr</span><span class="p">())</span>
</span><span class="line">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">			<span class="k">return</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-4">自定义函数</h2>

<p>到目前为止，我们的计算器已经能使用内置函数进行基本的四则运算；但是，其能力也就仅此而已，如果现在需要一个计算一个数的平方的函数，就只能在每个计算的地方写上：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="nv">a</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所以，我们需要自定义函数的能力。</p>

<p>我们希望使用关键字 <code>define-func</code> 来定义函数，比如平方函数可以这样定义。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">define-func</span> <span class="nv">**</span> <span class="p">(</span><span class="nf">a</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="nv">a</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>定义自定义函数类型:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">UserFunction</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">       <span class="nx">Name</span> <span class="kt">string</span>
</span><span class="line">       <span class="nx">Args</span> <span class="p">[]</span><span class="kt">string</span>
</span><span class="line">       <span class="nx">Body</span> <span class="p">[]</span><span class="nx">Expression</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">UserFunction</span><span class="p">)</span> <span class="nx">Sexpr</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&quot;user-function:&quot;</span> <span class="o">+</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Name</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在 <code>evalList</code> 中添加对函数定义的解释：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">evalList</span><span class="p">(</span><span class="nx">x</span> <span class="o">*</span><span class="nx">List</span><span class="p">,</span> <span class="nx">env</span> <span class="o">*</span><span class="nx">Env</span><span class="p">)</span> <span class="nx">Expression</span> <span class="p">{</span>
</span><span class="line"><span class="o">......</span><span class="p">.</span>
</span><span class="line">       <span class="k">case</span> <span class="s">&quot;define-func&quot;</span><span class="p">:</span>
</span><span class="line">               <span class="kd">var</span> <span class="nx">userf</span> <span class="nx">UserFunction</span>
</span><span class="line">               <span class="c1">// (define-func name (arg1 arg2) body)</span>
</span><span class="line">			   <span class="c1">// 解析参数列表</span>
</span><span class="line">               <span class="kd">var</span> <span class="nx">args</span> <span class="p">[]</span><span class="kt">string</span>
</span><span class="line">               <span class="nx">argsExpr</span> <span class="o">:=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Val</span><span class="p">.(</span><span class="o">*</span><span class="nx">List</span><span class="p">)</span>
</span><span class="line">               <span class="k">for</span> <span class="nx">argsExpr</span><span class="p">.</span><span class="nx">Val</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">                       <span class="nx">args</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">argsExpr</span><span class="p">.</span><span class="nx">Val</span><span class="p">.(</span><span class="nx">Symbol</span><span class="p">)))</span>
</span><span class="line">                       <span class="nx">argsExpr</span> <span class="p">=</span> <span class="nx">argsExpr</span><span class="p">.</span><span class="nx">Rest</span>
</span><span class="line">               <span class="p">}</span>
</span><span class="line">			   <span class="c1">// 解析函数名</span>
</span><span class="line">               <span class="nx">name</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Val</span><span class="p">.(</span><span class="nx">Symbol</span><span class="p">))</span>
</span><span class="line">               <span class="nx">userf</span><span class="p">.</span><span class="nx">Name</span> <span class="p">=</span> <span class="nx">name</span>
</span><span class="line">               <span class="nx">userf</span><span class="p">.</span><span class="nx">Args</span> <span class="p">=</span> <span class="nx">args</span>
</span><span class="line">			   <span class="c1">// 解析函数体</span>
</span><span class="line">               <span class="nx">expr</span> <span class="o">:=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Rest</span><span class="p">.</span><span class="nx">Rest</span>
</span><span class="line">               <span class="k">for</span> <span class="nx">expr</span><span class="p">.</span><span class="nx">Val</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">                       <span class="nx">userf</span><span class="p">.</span><span class="nx">Body</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">userf</span><span class="p">.</span><span class="nx">Body</span><span class="p">,</span> <span class="nx">expr</span><span class="p">.</span><span class="nx">Val</span><span class="p">)</span>
</span><span class="line">                       <span class="nx">expr</span> <span class="p">=</span> <span class="nx">expr</span><span class="p">.</span><span class="nx">Rest</span>
</span><span class="line">               <span class="p">}</span>
</span><span class="line">			   <span class="c1">// 安装函数</span>
</span><span class="line">               <span class="nx">env</span><span class="p">.</span><span class="nx">scope</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="p">=</span> <span class="nx">userf</span>
</span><span class="line">               <span class="k">return</span> <span class="nx">userf</span>
</span><span class="line"><span class="o">......</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>实现对自定义函数的调用:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">callUserFunction</span><span class="p">(</span><span class="nx">env</span> <span class="o">*</span><span class="nx">Env</span><span class="p">,</span> <span class="nx">f</span> <span class="nx">UserFunction</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="nx">Expression</span><span class="p">)</span> <span class="nx">Expression</span> <span class="p">{</span>
</span><span class="line">       <span class="nx">env</span> <span class="p">=</span> <span class="nx">NewEnv</span><span class="p">(</span><span class="nx">env</span><span class="p">)</span>
</span><span class="line">       <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">arg</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Args</span> <span class="p">{</span>
</span><span class="line">               <span class="nx">env</span><span class="p">.</span><span class="nx">scope</span><span class="p">[</span><span class="nx">arg</span><span class="p">]</span> <span class="p">=</span> <span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class="line">       <span class="p">}</span>
</span><span class="line">       <span class="kd">var</span> <span class="nx">ret</span> <span class="nx">Expression</span>
</span><span class="line">       <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">expr</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Body</span> <span class="p">{</span>
</span><span class="line">               <span class="nx">ret</span> <span class="p">=</span> <span class="nx">eval</span><span class="p">(</span><span class="nx">expr</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span>
</span><span class="line">       <span class="p">}</span>
</span><span class="line">       <span class="k">return</span> <span class="nx">ret</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>callUserFunction</code>主要完成两件事:</p>

<ul>
  <li>创建新的执行环境，并将参数绑定到当前环境；</li>
  <li>在当前环境对函数体表达式求值；</li>
</ul>

<p>重新编译启动 REPL，可以定义并试用新的求平方函数了:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">define</span> <span class="nv">a</span> <span class="mi">100</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">define-func</span> <span class="nv">**</span> <span class="p">(</span><span class="nf">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="nv">a</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="nf">**</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">;; 返回 4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里特意定义同名的全局变量 <code>a</code> 和函数入参局部变量 <code>a</code>，由于平方函数在独立的环境中绑定求值，所以二者互不影响。</p>

<h1 id="section-5">完整代码</h1>

<p>完整的代码可以参考: <a href="https://github.com/qjpcpu/lis.go">lis.go</a></p>

<h1 id="section-6">应用到生产环境?</h1>

<p><code>lis.go</code> 只是帮助学习实现解释器的简单玩具，要作为生成环境的嵌入式语言，还缺乏很多关键性质:</p>

<ul>
  <li>Tail Call Optimization, 对于不支持循环的函数式语言，没有 TCO 支撑的递归很可能栈溢出;</li>
  <li>VM, 目前 <code>lis.go</code> 其实是依赖 go 语言默认的调用栈来实现函数调用，没有自己设计虚拟机，性能有待提高；同时，无法通过编译提前感知指令流，就难以控制程序运行时状态，更无法做指令优化；</li>
  <li>调用环境没有隔离完全，下层函数可以”看到”上层环境;</li>
  <li>常用语法  feature 如闭包、宏等能力缺失，无法提供足够生产力；</li>
  <li>文档，注释 etc.</li>
</ul>

<p>如果想要应用于生产环境，可以使用 <a href="https://github.com/qjpcpu/glisp">glisp</a>，其完整文档参考 <a href="https://github.com/qjpcpu/glisp/wiki">glisp-wiki</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ethereum挖矿流程]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/11/15/ethereumwa-kuang-liu-cheng/"/>
    <updated>2018-11-15T09:50:36+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/11/15/ethereumwa-kuang-liu-cheng</id>
    <content type="html"><![CDATA[<p>本文主要梳理eth挖矿的代码流程结构。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#newworkloop">协程1. newWorkLoop</a></li>
  <li><a href="#mainloop">协程2. mainLoop</a></li>
  <li><a href="#taskloop">协程3. taskLoop</a></li>
  <li><a href="#resultloop">协程4. resultLoop</a></li>
  <li><a href="#update">协程5. update</a></li>
</ul>

<p><img src="https://upload-images.jianshu.io/upload_images/14928134-15681166031820cd.gif?imageMogr2/auto-orient/strip" alt="miners" /></p>

<p><img src="https://upload-images.jianshu.io/upload_images/14928134-43aa117385c9baea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="global.png" /></p>

<p>geth的挖矿逻辑都由<code>miner.Miner</code>结构管理，在程序启动时，miner主要启动了5个核心协程并行处理挖矿逻辑，其中挖矿worker负责维护4个最关键协程。</p>

<h2 id="newworkloop">协程1. newWorkLoop</h2>

<p><img src="https://upload-images.jianshu.io/upload_images/14928134-9d834bbc88ede0cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="work ch.png" /></p>

<p>该协程负责周期性地提交新的挖矿任务。当程序启动或者区块同步完成，或者新区块挖掘完毕，<code>miner.start()</code>方法会被调用，则<code>startCh</code>通道激活，此时协程清理过期的挖矿任务，构建新的挖矿任务并投递到新任务通道<code>newWorkCh</code>，等待挖矿执行。</p>

<h2 id="mainloop">协程2. mainLoop</h2>

<p>挖矿的主要逻辑都位于该协程。</p>

<p>该协程监听<code>newWorkCh</code>通道，接收到新挖矿请求后，开始挖矿。挖矿的逻辑位于<code>commitNewWork</code>函数内，如下图所示，首先准备区块头，调用共识引擎<code>engine.Prepare</code>准备共识信息，目前的共识使用了PoW共识算法，主要是为区块头计算出本次需要满足的区块PoW难度并写入到区块头；然后再讲收集到达叔区块引入，注意，以太坊最多只能引用2个叔区块，此外，优先引用本地叔区块再引入远端叔区块；然后开始执行收集到pending队列里的交易，也是本地优先远端执行；最后，进行交易后处理，这里也是调用共识引擎<code>engine.Finalize</code>实现，主要功能是计算矿工奖励；最后把封装好的区块投递到<code>taskCh</code>通道等待挖矿计算验证。</p>

<p><img src="https://upload-images.jianshu.io/upload_images/14928134-a1898acd67116a44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="commitNewWork.png" /></p>

<p>同时还监听<code>chainSideCh</code>通道，再检测到叔区块后，如果当前正在挖矿就提交新的叔区块并重新挖矿。</p>

<p>在监听<code>txsCh</code>通道时，收到新交易后，如果当前正在挖矿，则执行新交易并重新挖矿，否则直接触发一次新挖矿。</p>

<p>该协程主要都是收集不同信息(交易，叔区块)并封装区块，投递到任务通道准备共识计算。</p>

<p><img src="https://upload-images.jianshu.io/upload_images/14928134-85f3a82dfefc6ffe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="task ch.png" /></p>

<p>另外，这里有个问题，如果前面一个共识计算正在进行中，此时收到新交易或新uncle则立刻进行新的区块，而这两次计算都是针对同一区块(高度)，这样岂不是必然有一次计算浪费？</p>

<h2 id="taskloop">协程3. taskLoop</h2>

<p>这一步是挖矿的核心，然而从流程上却是最简单的，就是从<code>taskCh</code>获取封装好的区块，进行共识计算，并将成功的结果投递到<code>resultCh</code>。</p>

<p><img src="https://upload-images.jianshu.io/upload_images/14928134-0413b576462ff621.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result ch.png" /></p>

<h2 id="resultloop">协程4. resultLoop</h2>

<p><img src="https://upload-images.jianshu.io/upload_images/14928134-ec254a1543e30cf9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="区块挖出来之后.png" /></p>

<p>该协程将达成共识的区块(即成功挖出的区块)写入DB,并且向周边p2p节点广播<code>NewMinedBlockEvent</code>，然后触发链变更事件(<code>ChainEvent</code>+<code>ChainHeadEvent</code>或<code>ChainSideEvent</code>)，最后将区块插入待确认区块集合。</p>

<ol>
  <li>为什么<code>resultLoop</code>变更链事件触发有两种情况(<code>ChainEvent</code>+<code>ChainHeadEvent</code>)或(<code>ChainSideEvent</code>) ?</li>
</ol>

<p>这是因为写入DB时，会进行链分叉判断，如果当前写入的链难度低，说明需要进行链重组，则次数会导致触发<code>ChainSideEvent</code>事件。</p>

<p>另外，注意如果发生链重组，则会从删除旧链的交易:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// reorgs takes two blocks, an old chain and a new chain and will reconstruct the blocks and inserts them</span>
</span><span class="line"><span class="c1">// to be part of the new canonical chain and accumulates potential missing transactions and post an</span>
</span><span class="line"><span class="c1">// event about them</span>
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">bc</span> <span class="o">*</span><span class="nx">BlockChain</span><span class="p">)</span> <span class="nx">reorg</span><span class="p">(</span><span class="nx">oldBlock</span><span class="p">,</span> <span class="nx">newBlock</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Block</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// .......</span>
</span><span class="line">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tx</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">diff</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">rawdb</span><span class="p">.</span><span class="nx">DeleteTxLookupEntry</span><span class="p">(</span><span class="nx">batch</span><span class="p">,</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">Hash</span><span class="p">())</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">    <span class="c1">// ......</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>那么删除的交易再什么时候被重新打包的呢？答案是，<code>txpool</code>监听了<code>ChainHeadEvent</code>事件，当接收到新区块时，会进行分叉判断，再此时会将之前<code>删除的交易</code>重新放入交易池等待打包</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// reset retrieves the current state of the blockchain and ensures the content</span>
</span><span class="line"><span class="c1">// of the transaction pool is valid with regard to the chain state.</span>
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">pool</span> <span class="o">*</span><span class="nx">TxPool</span><span class="p">)</span> <span class="nx">reset</span><span class="p">(</span><span class="nx">oldHead</span><span class="p">,</span> <span class="nx">newHead</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Header</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">// If we&#39;re reorging an old state, reinject all dropped transactions</span>
</span><span class="line">	<span class="kd">var</span> <span class="nx">reinject</span> <span class="nx">types</span><span class="p">.</span><span class="nx">Transactions</span>
</span><span class="line">    <span class="c1">// ....</span>
</span><span class="line">	<span class="c1">// Inject any transactions discarded due to reorgs</span>
</span><span class="line">	<span class="nx">log</span><span class="p">.</span><span class="nx">Debug</span><span class="p">(</span><span class="s">&quot;Reinjecting stale transactions&quot;</span><span class="p">,</span> <span class="s">&quot;count&quot;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">reinject</span><span class="p">))</span>
</span><span class="line">	<span class="nx">senderCacher</span><span class="p">.</span><span class="nb">recover</span><span class="p">(</span><span class="nx">pool</span><span class="p">.</span><span class="nx">signer</span><span class="p">,</span> <span class="nx">reinject</span><span class="p">)</span>
</span><span class="line">	<span class="nx">pool</span><span class="p">.</span><span class="nx">addTxsLocked</span><span class="p">(</span><span class="nx">reinject</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class="line">    <span class="c1">// ...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>区块什么时候从<code>unconfirmed</code>集合移除?</li>
</ol>

<p>答案是插入即确认，这个队列时环形的，并且矿工在创建<code>unconfirmed</code>队列会指定长度，这个长度即确认高度，当超过这个高度的区块被插入，自然就有最早的区块被移除，达到天然确认的目的。</p>

<h2 id="update">协程5. update</h2>

<p>该协程主要保证区块同步和挖矿互斥进行，即同步区块时暂停挖矿，同步完毕启动挖矿。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在这里,读懂区块链]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/09/18/qu-kuai-lian-you-qian-ru-shen/"/>
    <updated>2018-09-18T07:08:00+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/09/18/qu-kuai-lian-you-qian-ru-shen</id>
    <content type="html"><![CDATA[<p>读懂区块链——仅需这一篇。(草稿，内容整理中…)</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">入门篇</a>    <ul>
      <li><a href="#section-2">什么是区块链?</a>        <ul>
          <li><a href="#section-3">场景</a></li>
          <li><a href="#section-4">先找到问题</a></li>
          <li><a href="#section-5">分析问题</a>            <ul>
              <li><a href="#section-6">1. 去除中心化机构</a></li>
              <li><a href="#section-7">2. 账户凭证问题</a></li>
              <li><a href="#section-8">3. 记账权</a></li>
            </ul>
          </li>
          <li><a href="#section-9">求解问题</a></li>
          <li><a href="#section-10">什么是区块链</a>            <ul>
              <li><a href="#section-11">比特币</a>                <ul>
                  <li><a href="#section-12">1. 交易</a></li>
                  <li><a href="#section-13">2. 工作量证明</a></li>
                </ul>
              </li>
              <li><a href="#section-14">智能合约</a></li>
            </ul>
          </li>
          <li><a href="#xxx">保证xxx不可篡改</a></li>
        </ul>
      </li>
      <li><a href="#section-15">区块链能做什么?</a>        <ul>
          <li><a href="#section-16">1. 需要去中心化</a></li>
          <li><a href="#section-17">2. 处于不受信环境下</a></li>
          <li><a href="#section-18">3. 性能要求不高</a></li>
        </ul>
      </li>
      <li><a href="#section-19">区块链不能做什么?</a></li>
      <li><a href="#section-20">区块链生态</a>        <ul>
          <li><a href="#section-21">矿工节点</a></li>
          <li><a href="#section-22">智能合约</a></li>
          <li><a href="#sdk">SDK</a></li>
          <li><a href="#dapp">DApp</a></li>
          <li><a href="#section-23">钱包</a></li>
          <li><a href="#section-24">交易所</a></li>
          <li><a href="#section-25">用户</a></li>
        </ul>
      </li>
      <li><a href="#section-26">几条著名公链</a>        <ul>
          <li><a href="#btc">BTC</a></li>
          <li><a href="#ethereum">Ethereum</a></li>
          <li><a href="#eos">EOS</a></li>
          <li><a href="#ont">ONT</a></li>
          <li><a href="#bch">BCH</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#section-27">进阶篇</a>    <ul>
      <li><a href="#utxobalance">UTXO/Balance两种模型</a></li>
      <li><a href="#section-28">分叉</a>        <ul>
          <li><a href="#section-29">软分叉</a></li>
          <li><a href="#section-30">硬分叉</a></li>
        </ul>
      </li>
      <li><a href="#section-31">共识机制</a>        <ul>
          <li><a href="#pow">POW</a></li>
          <li><a href="#pos">POS</a></li>
          <li><a href="#dpos">DPOS</a></li>
          <li><a href="#pbft">PBFT</a></li>
        </ul>
      </li>
      <li><a href="#section-32">51%与双花</a></li>
      <li><a href="#zcash">零知识证明与zcash</a></li>
      <li><a href="#section-33">环形签名与门罗币</a></li>
      <li><a href="#p2p">P2P</a></li>
      <li><a href="#section-34">联盟链</a>        <ul>
          <li><a href="#quorum">quorum</a></li>
          <li><a href="#hyperledger-fabric">Hyperledger Fabric</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#section-35">参考文献</a></li>
</ul>

<h1 id="section">前言</h1>

<p>撰写这篇文章的原因，一是想向对不了解区块链的同学介绍下这项技术，二也是借机进行一次知识梳理,所以，有理解错误的地方，也希望读者不吝指正。</p>

<p><strong>对于读者群</strong>:</p>

<p>因为有的读者是非技术类的，所以我将内容拆分成入门和进阶两部分,在入门篇里我尽量不涉及计算机技术术语，其细节我会放到进阶篇；同时，我也不希望进阶篇变成学术论文，所以进阶篇里会从逻辑层面解释原理，不会涉及数学公式,我并不希望读者睡着了。</p>

<p>所以,不想了解技术细节的同学，读完入门篇就够了;而对于有进一步探索欲望的同学，进阶篇也有足够指向作用了。</p>

<p><strong>链种</strong>:</p>

<p>目前区块链分为公链、联盟链、私链，本文主要介绍公链，并稍微提及联盟链，不会涉及私链。</p>

<p>废话不多说, let’s start now.</p>

<h1 id="section-1">入门篇</h1>

<h2 id="section-2">什么是区块链?</h2>

<p>我想每个人第一次听到区块链这三个字的时候，第一反应都是本能地问出:区块链是什么? <strong>What</strong>永远是人类认识事物的第一步,那么怎么回答这个问题呢。其实无论是回答什么”去中心化的信任机制”还是”分布式账本”，我相信听众脸上懵比的问号只会更大。所以我们尝试还原区块链产生的场景，了解这项技术产生的背景，从而回答它是什么。</p>

<h3 id="section-3">场景</h3>

<p>Clark是居住在大都会一个普通小伙子，他在星球日报勤勤恳恳地工作，把他辛苦挣来的钱都存入大都会银行，这家银行由大银行家Luthor筹建，是大都会最大最安全的银行,大都会居住的人们都喜欢把他们的资金存入这家银行，他们都信任这家银行，祖祖辈辈都离不开这家银行,Luthor确实也将银行经营得很好。</p>

<p>然而，不久后大都会发生了外星人入侵事件，所幸的是大都会人们还是挺过了这场灾难。不过大都会遭受了巨大的经济损失，经济发生萧条。这其中蒙受损失的，自然也包括大都会银行，Luthor为了维护自身的利益，不顾一切开始大量增发货币。这下Clark发现自己本就不多的存款变得一文不值，更为雪上加霜的是，灾后他去查自己的银行账户的时候，发现自己账户余额为零,而Luthor给Clark的解释是，入侵事件毁坏了银行部分数据，因而luthor无法恢复clark的财产，甚至也拒绝支付赔偿。</p>

<p>Clark听到这一切，无助地瘫倒在地，口中喃喃:这可是我攒来娶Louis的老本啊…</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/clark-luthor.jpg" alt="clarkVSluthor" /></p>

<h3 id="section-4">先找到问题</h3>

<p>那么，Clark遇到的问题所在在哪儿呢？Clark找到好友Bruce,助他度过了当前难关，但是还是不知道怎么在同样情况下避免财务危机。这个时候，Bruce一针见血地指出了问题所在:</p>

<p><strong>中心化信任危机</strong></p>

<p>Luthor所代表的大都会银行，广义来讲就是中心化的权威机构。所有中心机构的用户，都是基于信任将资金托管给该机构，但是信任是不可靠的，一旦发生信任危机，中心化机构可以打破信任，对于银行来说可以不受限制地增发货币甚至直接侵吞私有财产。你可能会说有法律保护，但是这个时候其实是国家在为这个机构背书，国家机器充当了这个隐形的中心化信任载体。尽管国家违约成本比较高，但只要翻翻历史书，就会发现这样的案例也不在少数。</p>

<h3 id="section-5">分析问题</h3>

<p>既然找到问题所在，那么应该怎么设计新的解决方案呢？</p>

<h4 id="section-6">1. 去除中心化机构</h4>

<p>如果问题出在中心化机构，那么很自然的就需要在我们的解决方案里移除对中心化机构的信任依赖。</p>

<p>那么我们就每个人都持有一个账本，并且每个账本初始数据都一模一样;比如是这样的一个账本:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Bruce inital 1
</span><span class="line">Clark inital 10000
</span><span class="line">...</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一旦发生转账，比如Bruce要给Clark转账200，那么所有人都在账本上写上一句<code>Bruce transfer 200 to Clark</code>。 那么账本就变成了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Bruce inital 1
</span><span class="line">Clark inital 10000
</span><span class="line">...
</span><span class="line">Bruce transfer 200 to Clark</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此时，如果我们想知道Clark的账户余额，只需要把和Clark相关的记账账目汇总即可得到<code>Balance(Clark) = 1 + 200 = 201</code>,这个结果不容任何人抵赖，因为你问大街上任意一个人，只要他打开他的账本，按同样的方法计算都可以得出Clark账户余额是201这个结果。</p>

<h4 id="section-7">2. 账户凭证问题</h4>

<p>去除中心化之后，似乎我们的问题解决了。因为就算再次发生入侵，只要不是所有人的账本都损坏了，那么我们就可以找账本完好的人把之前的账目抄下来恢复自己的账本，从而恢复所有人的资产记录。</p>

<p>但是实际上没有那么简单，如果有人冒充Bruce要求转账给Clark,那么Bruce就在不知情的情况下被盗取了财产。所以，我们借鉴了现实生活中签名的办法，要求Bruce在转账的时候必须附加自己的签名，然后将这笔转账和签名一起广播出去。这样大家记账的时候就能验证，的确是Bruce本人要求的转账。</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/bruce-sign.png" alt="bruce-sign" /></p>

<h4 id="section-8">3. 记账权</h4>

<p>在我们新的解决方案里，我们需要交易发起人广播给其他所有记账人，实际上，这个广播不可能一瞬间将交易发给所有人。这个广播系统可以这样理解，假设我们都使用蓝牙协议作为通信基础，这个系统里每个人都使用蓝牙和身边十来个人保持连接，同理这些人和各自身边的人保持连接，这样所有人构成一个互联的网状结构。</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/bluetooth-p2p.png" alt="blockchain" /></p>

<p>因为交易信息传播有时间延迟，所以，同一时刻，系统里每个人收到的记账请求是不一样的。那么，我们一开始设计的所有人一起记账就行不通了，因为这样写到账本里的账目就不同了。为了大家写入同样的数据，必须能一起协调出统一的账目，然后写入。因为现在是一个大民主的社群，必须有一种投票机制选出一个记账人，这个记账人负责整理这段时间内收到的记账请求，并把这些账目一起写入账本;我们称之为争夺记账权。</p>

<p>那么，怎么设计这个记账权争夺机制呢？</p>

<ul>
  <li>首先必须要公平，不能因为某个记账人的社会地位高就能够拥有记账权；因为这样就会再次导致记账中心化，从而使得我们这个去中心化的解决方案失效</li>
  <li>机制必须透明，机制的透明是对公平性的验证，我们的解决方案里必须能够让所有人能够验证这个公平性是否属实</li>
  <li>筛选性，既然是记账权的争夺，这个机制必然具有强烈的优胜劣汰性质，否则达不到筛选出冠军的目的</li>
  <li>冠军身份易于验证，就如同一场长跑，争夺冠军是非常艰难的，但是一旦夺得胜利，我们能一眼分辨出谁是冠军——谁戴着奖牌谁是冠军</li>
</ul>

<p>明确了这个设计需求，我们留到求解问题时再进行解答。</p>

<p>但是基于我们这个设计，又带来了新的问题，如果记一次帐这么费劲，那肯定最后没人愿意记账了。中国有句老话说得好: 无利不起早，现实生活中大部分人的行为都是趋利的。所以，我们这个解决方案里，还差最后一环——经济激励。</p>

<p>如果我们这个解决方案里，大家约定，一旦某个天选之子夺得了记账权并成功记账，那么就给予他额外现金奖励，这个奖励足够补偿他这次辛苦记账的付出,这样，整个流程似乎就理顺了。</p>

<h3 id="section-9">求解问题</h3>

<p>在开始执行求解前，我们先复盘一下我们的思路，看看是否有思路不通畅的地方，防止出现逻辑漏洞。</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/thoughts-flow.jpeg" alt="blockchain" /></p>

<p>这是一条由问题驱动的推导型思路，主要是为了解决我们发现的中心化问题，在提出新的解决方案并解决新的衍生问题，主体上看来没有大的疏漏。</p>

<p>还有一开始我们遇到的两个问题，我们看看新的解决方案是否能解决:</p>

<p>第一，货币的增发问题</p>

<p>大都会银行作为中心化的机构，可以随意增发货币原因在于,它是货币的发行方，其他人无法拒绝或者阻止其增发行为。但是如果在新的解决方案里，我们将货币增发(其实就是这个争夺记账的经济奖励)的规则写入印刷到每个人账本的扉页，如果有个不诚实的记账者，在记账时私自增大自己的经济奖励，那么当他将自己写下的这页账目传播给别人时，其他人发现这个激励金额不符合扉页的激励规则，就会拒绝写入自己的账本，这样这个不诚实者因为其账目作弊，他的账本也成为废账，也就无法获得这部分”非法收入”了。</p>

<p>第二, 资产无法被篡改</p>

<p>首先，每个人的账户是无法被销毁的，因为要销毁账目记录，就意味着要修改所有人手里的账本，这几乎是不可能的。再者，只有自己签名的交易申请才会被记录入账本，其他人无法伪造自己的签名，从而也就无法篡改账本上别人的账目记录，换句话说，只有自己可以修改自己的账户余额，其他人试图更改别人的账户余额是一定会被拒绝入账的。</p>

<p>下面我们开始来求解遗留的记账争夺问题。</p>

<p>因为大都会市民极其不擅长数学，所以，我们使用求余来作为这场争夺的题目。比如每次记账，要求大家求解<code>x % 7 = 3</code>满足这个等式的<code>x</code>,因为大家数学很差，所以大家不得不一个一个数去尝试，当某个幸运儿最先发现<code>10 % 7 = 3</code>时，他就获取了记账权，而其他人将<code>x=10</code>带进算式很容易验算出这是符合条件的一个求解，所以大家也就表示认同，同时也认可了他的记账。于是所有人复制他记下的账目，并开始收集新的交易流水，准备下一次记账。</p>

<p>最后，我们将我们这个解决方案称之为”区块链”，这个解决方案里的很多做法其实就是真实区块链技术的简化版:</p>

<ul>
  <li>区块链; 我们的记账笔记薄就是一条区块链，这里面从前往后记录了所有人的所有账目流水，后面的账目对前面的账目有依赖关系</li>
  <li>区块; 账本的每一页，可以称之为一个区块，页码可以认为是区块前后的索引关系</li>
  <li>交易; 账本每一页的每一条都是一笔交易，这个交易可以是一笔简单转账，也可以是一次协定</li>
  <li>数字签名; 还记得我们要求每笔交易发送时必须附加自己的签名吗？在数字世界里，我们必须附加自己的<a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E4%BD%8D%E7%B0%BD%E7%AB%A0">数字签名</a>,这个签名甚至比真实世界的签名更可靠，它基于密码学，不可伪造且能唯一证明你的授权</li>
  <li>挖矿; 我们的争夺记账权的过程，和矿工付出辛劳挖矿非常相似，所以也称之为挖矿了。不过真实的区块链挖矿使用的不是求余这么简单的运算，而是反解hash前缀0的暴力运算</li>
  <li>矿工; 从事争夺记账权的节点(人)</li>
  <li>虚拟货币; 不管是矿工挖矿得到的额外经济奖励，还是账本上记录的基本代数资产，都是这条区块链上的虚拟货币；比如比特币区块链上的虚拟货币就是BTC, 以太坊上的货币就是ETH</li>
  <li>共识机制; 争夺记账权的机制就是共识机制，因为争夺机制的差异，目前有PoW,PoS等;目前久经考验的共识机制是PoW,我们大都会区块链的共识，也使得矿工付出大量脑力劳动，所以也可以称之为一种PoW</li>
</ul>

<h3 id="section-10">什么是区块链</h3>

<p>回到最初的问题，什么是区块链: </p>

<p><strong>区块链是在对等且不受信环境下, 达成共识保证群体协作的一种社群机制</strong></p>

<p>那么现在是时候看看真实世界的区块链是怎么样的了，自然，这得说说比特币了。下面小节主要取自中本聪的比特币白皮书。</p>

<h4 id="section-11">比特币</h4>

<p>这里是中文版全文<a href="https://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system">比特币白皮书：一种点对点的电子现金系统</a></p>

<h5 id="section-12">1. 交易</h5>

<p>比特币里是这样组织交易的: 每一位所有者通过对前一次交易和下一位拥有者的公钥签署一个哈希数字签名，并将这个签名附加在交易的末尾，交易里包含的数字货币就发送给了下一位所有者。而收款人通过对签名进行检验，就能够验证该交易的合法性。</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/btc-tx.png" alt="blockchain" /></p>

<p>白皮书里面这个说法比较拗口。其实是这个意思，交易一定有多笔输入和至少一笔输出，上一笔交易的输出可以作为下一笔交易的输入，交易与交易直接就通过输入输出串联起来。而这个输入输出的本质，其实就是比特币资金的流动。</p>

<p>比如，现在A要给B转账4个比特币，那他要怎么构造这笔交易呢？A在自己钱包里找到一张”面值”为3的比特币和一张”面值”为1的比特币(这里的3和1的比特币其实就是A之前交易的两个输出)，于是A构造一笔交易，交易有两个输入:3、1这个两笔比特币，输出为4比特币，并且这个输出最终能够被B接受并花费。为了保证交易正确串联执行，所以A对B的公钥+交易本身数据做一次数字签名，并将签名附加在交易上，那么B就能对交易进行验证，达到获取这笔交易输出的母的，从而B也就获取了这4个比特币。</p>

<p>比特币里的这种交易设计还能巧妙地解决双花问题: 数字货币的交易说到底也就是一段二进制数据，如果把同样的数据连续发送两份，是不是就能够进行重复支付(double spend),达到”一分钱当两份钱”花了呢。在比特币系统里，因为交易的输入只能使用一次，当第一次交易被区块受理后，第二笔同样交易来到时，矿工发现这笔交易引用的输入已经被花费掉了，就会认为这是一笔非法交易而拒绝掉，所以是不会出现双花问题的。</p>

<h5 id="section-13">2. 工作量证明</h5>

<p>比特币的共识使用了工作量证明(Proof of Work)来实现。</p>

<p>PoW的核心思想是使用反解哈希来达成共识。哈希函数输入一个任意长度的数据，输出一个长度固定且绝不雷同的值，可将其视为输入的数字指纹。对于特定输入，哈希的结果每次都一样，任何人都可以用相同的哈希函数，计算和验证哈希结果。一个加密哈希函数的主要特征就是不同的输入几乎不可能出现相同的数字指纹。因此，有意的选择一个输入去生成一个想要的哈希值值是几乎不可能的，更别提用随机的方式生成想要的哈希值了。</p>

<p>比特币使用SHA256算法，无论输入的大小是多少，SHA256函数的输出的长度总是256bit。</p>

<p>比如计算”I am Satoshi Nakamoto”的sha256哈希值，得到”5d7c7ba21cbbcd75d14800b100252d5b428e5b1213d27c385bc141ca6b47989e”,改变原句中的任何一个字母、标点、或增加字母都会产生不同的哈希值,比如我们在原句”I am Satoshi Nakamoto”结尾加一个任意数字，得出的结果是完全没有规律的，不可能根据hash值反推出原句结尾加的是什么数字。</p>

<p>为了使这个哈希算法变得富有挑战，我们来设定一个具有任意性的目标：找到一个语句，使之哈希值的十六进制表示以0开头。幸运的是，这很容易尝试出语句 “I am Satoshi Nakamoto13”的哈希值是”0ebc56d59a34f5082aaef3d66b37a661696c2b618e62432727216ba9531041a5”，刚好满足条件。我们得到它用了13次。用概率的角度来看，如果哈希函数的输出是平均分布的，我们可以期望每16次得到一个以0开头的哈希值（十六进制个位数字为0到 F）。从数字的角度来看，我们要找的是小于 0x1000000000000000000000000000000000000000000000000000000000000000的哈希值。</p>

<p>我们称这个为Target目标阈值，我们的目的是找到一个小于这个目标的哈希值。如果我们减小这个目标值，那找到一个小于它的哈希值会越来越难。</p>

<p>简单打个比方，想象人们不断扔一对骰子以得到小于一个特定点数的游戏。第一局，目标是12。只要你不扔出两个6， 你就会赢。然后下一局目标为11。玩家只能扔10或更小的点数才能赢，不过也很简单。假如几局之后目标降低为了5。</p>

<p>现在有一半机率以上扔出来的骰子加起来点数会超过5，因此无效。随着目标越来越小，要想赢的话，扔骰子的次数会 指数级的上升。最终当目标为2时（最小可能点数），只有一个人平均扔36次或2%扔的次数中，他才能赢。从一个知道骰子游戏目标为2的观察者的角度来看，如果有人要成功中奖，假设他平均尝试了36次。</p>

<p>换句话说，可以估计从实现目标难度取得成功所需的工作量。 当算法是基于诸如SHA256的确定性函数时，输入本身就成为证据，必须要一定的工作量才能产生低于目标的结果。 因此，称之为工作量证明。</p>

<h4 id="section-14">智能合约</h4>

<p>讲到区块链就不得不提智能合约,比特币系统里是没有智能合约的，智能合约是由以太坊带到大众视野里的概念，而反过来以太坊也因为这一创举成为区块链上的无冕之王(有冕的自然是比特币)。不过要提一点，以太坊只是将这个概念带进了现实，但是提出这一概念的并不是以太坊团队，而是1990s年代由尼克萨博提出，只是由于当时缺乏可信的执行环境无法得到应用。</p>

<p>那么智能合约是什么呢？智能合约本质是一段代码，在区块链这个公有环境上运行。</p>

<p>举个例子，如果Bruce和Clark打赌，如果明天下雨就给Clark转账100，那么Bruce可以在大都会区块链上提交这样一笔交易:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Bruce transfer 100 to Clark if it rains tomorrow</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这笔交易就是一份智能合约，他发布到区块链上，这份合约就会冻结Bruce账户里100元到合约里,任何人不得篡改，并且这份合约也相当于受到所有人的监督执行。当第二天真的下雨时，Clark就可以收到Bruce输给他的100元，反之如果是个大晴天，那么Clark什么也得不到,bruce也可以解冻并收回这100元。</p>

<p>这个例子能够很直白描述智能合约的功能，但是实际上，区块链作为数字世界的产物，无法和现实世界产生可信关联，所以这种赌约基本上是无法在区块链上实现的。但是如果合约执行条件本身就来自数字世界，那就完全可信了，比如Bruce和Clark对赌的输赢都是由随机数决定。这也是为什么目前博彩类游戏在区块链上高歌猛进的原因。既满足了游戏策略的公平透明,又使得玩家的资金能可靠进出，同时由于数字签名的存在还具有一定的匿名性。</p>

<h3 id="xxx">保证xxx不可篡改</h3>

<p>网上铺天盖地宣传区块链都包含了类似这样的卖点: <strong>数据不可篡改</strong>。其实这是一个非常模糊的概念，区块链真的保证数据不可篡改吗？其实并不是，区块链真正保证的是逻辑不可篡改，而不是数据本身不可篡改。以风靡世界的以太坊迷恋猫为例，迷恋猫的数据如果不可篡改的话，那么怎么保证猫的繁殖和买卖，这些业务行为其实就说明了数据是被改动了的；但是由于区块链(以太坊)保证迷恋猫的游戏逻辑是严格按照智能合约执行，数据一定按照合约制定的逻辑执行，所以大家才放心投入eth去玩这个游戏，而不用担心猫这种资产被盗。</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/cryptokitties.jpg" alt="blockchain" /></p>

<p>因此，如果你关心资产是否完全可控，就需要关注项目方提供给你的智能合约是否是留有后门的，否则如果遇到无良开发者卷款潜逃就欲哭无泪了；反观区块链排行榜<a href="https://dappradar.com/">dappradar</a>上，有许多Dapp都是闭源的，到底用户进去会不会被坑，只有听天由命了;甚至于某些公链能允许开发者修改合约逻辑，虽然初衷是为了能够修复区块链合约bug，但是恶意开发者却可以利用这个规则先通过审查再加装后门，总体来说，笔者觉得其实是有违区块链精神。</p>

<h2 id="section-15">区块链能做什么?</h2>

<p>区块链能做什么，就看看它是为了解决什么问题而诞生的就行了</p>

<h4 id="section-16">1. 需要去中心化</h4>

<p>如果没有去中心化的强需求，那么他不需要区块链，一个中心化的权威组织在大部分情况下都能做得更好。</p>

<h4 id="section-17">2. 处于不受信环境下</h4>

<p>如果是一个受信环境，更不需要区块链了，极有可能需要的仅仅是一个分布式数据库。这种场景下，一般是联盟链的工作环境。而且，受信环境下矿工可能本身就受雇于这个某个盈利性组织，所以经济激励也不需要了，所谓的无token区块链一般也是在这种环境下才能存活。</p>

<h4 id="section-18">3. 性能要求不高</h4>

<p>这是区块链目前的现状导致的，也许未来就不存在了。因为存在出块竞争，所以目前公链都有性能问题，如果想基于区块链做一个电商系统，同时又想达到淘宝的交易承载量，那基本是不可能的。有个比较公认的说法，区块链是环保+性能+去中心化三者折衷的结果。</p>

<p>此外，要注意区块链的智能合约不能强依赖于现实世界，原因在于合约代码是明确的，而现实世界的定义是模糊的，即便能够做准确定义，那么将这个现实的信息注入到区块链里，目前除了引用一个权威机构的数据，也没有特别好的办法，所以这又回到要不要去中心化的问题了。</p>

<p>所以，目前看起来，纯线上业务比较适合区块链，比如金融和游戏。以太坊创始人V神在回答王峰十问时，就谈到了这个问题: <a href="http://tech.ifeng.com/a/20180622/45035376_0.shtm">以太坊创始人V神在做客王峰十问时表示，金融业和游戏行业是最先应用区块链技术的两行业</a></p>

<h2 id="section-19">区块链不能做什么?</h2>

<p><strong>真瓶装假酒</strong></p>

<p>我这个观点可能很多人不认同，因为区块链火起来之后，很多人开始做区块链溯源、区块链打车之类的事情，试图以区块链解决信任和防伪的问题。但是实际情况是，这些场景下的问题出在人身上，而不是自动化流程身上，区块链作为一项信息技术是解决不了这个问题的。</p>

<p>打个比方，有人目前在做红酒的区块链溯源防伪，整个流程上链是没有问题的，他做到了保证82年的拉菲的这个酒瓶的确是从产地直接送到顾客手里(甚至这一点都不能保证)，并不能保证酒瓶里就是拉菲而不是长城干红。为什么呢，因为如果我是最后一级经销商，我打开酒瓶喝了拉菲，然后换进去长城干红，然后保证完美重新包装，顾客除非拿到酒喝到嘴里，基本上是分辨不出来的。</p>

<p>这就是之前提到的，区块链无法辨别现实世界的问题。所以，区块链防伪是个伪命题，但是如果做溯源勉强还说得通，那么问题来了，仅仅是做溯源，哪个中心化的系统又做不到呢，如果硬要用区块链，也仅仅是把它作为一个分布式数据库来用罢了。</p>

<h2 id="section-20">区块链生态</h2>

<h3 id="section-21">矿工节点</h3>

<p>矿工只有挖矿才能完成记账，从区块链运行机制上来说，矿工节点记账就是区块链的源动力，它们的挖矿行为就是在保证区块链正常运作不宕机。</p>

<h3 id="section-22">智能合约</h3>

<p>智能合约并不是区块链上所必须的，比如比特币就没有。但是如果区块链想提供除转账外更多的可能，就必须要智能合约来实现了。尤其因为以太坊起了区块链2.0的头，后续新型公链里智能合约基本成为标配,成为驱动去中心化赋能的核心动力。</p>

<h3 id="sdk">SDK</h3>

<p>很多情况下,SDK其实并未直接出现在用户面前，但它其实对生态的发展非常重要，SDK是和智能合约直接对话的工具。SDK是否成熟完善，是吸引开发者重要原因，区块链是社群烘托起来的工具，没有用户何来共识，但如果没有开发者来开发Dapp,又何来用户?</p>

<h3 id="dapp">DApp</h3>

<p>公链是平台，平台建好了，需要在上面开发Dapp,有了百花齐放的Dapp,整个生态才能起来。</p>

<h3 id="section-23">钱包</h3>

<p>钱包是链的基本入口，目前众多公司在数字钱包上竞争，希望能成为区块链上的支付宝，可见钱包的重要性。</p>

<h3 id="section-24">交易所</h3>

<p>作为公链，必然产出虚拟货币。那么虚拟货币必然有个消耗的出口，直接作为支付手段进行消费是一种，另一种就是和法币进行直接或间接兑换。目前由于基础设施的不完善，中心化的交易所不论是规模和影响力都远远超过去中心化交易所，其对区块链施加的影响力甚至超过社群本身，所以某种程度来说，也挺讽刺的。</p>

<h3 id="section-25">用户</h3>

<p>用户位于生态最顶端，也是最重要的一环,所有的底层设施，都是为了吸引用户,用户多了又能反过来促进生态繁荣。</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/block-ecosys.png" alt="blockchain" /></p>

<h2 id="section-26">几条著名公链</h2>

<h3 id="btc">BTC</h3>

<p>开山鼻祖，区块链的信仰所在。比特币的出世打开了整个区块链的世界，它的存在已经成为了一种象征，寄托了大家对币/链圈的价值期望。所以比特币也成为了行业风向标，比特币行情的涨跌会直接影响其他虚拟货币的涨跌。</p>

<ul>
  <li>货币名称: BTC(比特币)</li>
  <li>共识机制: PoW</li>
  <li>创新点: 开山鼻祖，都是创新</li>
  <li>区块确认时间: 10min</li>
  <li>智能合约: 无,只有简单的加锁解锁脚本,合约语言图灵不完备</li>
</ul>

<h3 id="ethereum">Ethereum</h3>

<p>以太坊代表了区块链2.0，它将智能合约带进了现实，使得基于以太坊发放代币成为可能，直接引爆了ICO,促成了币圈第一波大浪潮。</p>

<ul>
  <li>货币名称: ETH(以太币)</li>
  <li>共识机制: PoW -&gt; PoA -&gt; PoS,以太坊在逐渐从耗能污染的PoW切换到绿色环保的PoS</li>
  <li>创新点: 第一条支持智能合约的公链</li>
  <li>区块确认时间: 15s</li>
  <li>智能合约: 有,合约语言solidity图灵完备,语法类似javascript,成熟度较高</li>
</ul>

<h3 id="eos">EOS</h3>

<p>被其粉丝冠名区块链3.0，实际上是个开历史倒车的产品，向币圈展示了项目方割韭菜的能力。</p>

<ul>
  <li>货币名称: EOS</li>
  <li>共识机制: DPoS</li>
  <li>创新点: 成功忽悠粉丝认可其独裁式治理，并冠之以民主立宪式社区治理; 另外TPS提升，我认为算不得是创新</li>
  <li>区块确认时间: 3s</li>
  <li>智能合约: 有,合约语言C++图灵完备,对开发人员要求较高</li>
</ul>

<h3 id="ont">ONT</h3>

<p>国内知名度比较高的公链</p>

<ul>
  <li>货币名称: ONT,ONG</li>
  <li>共识机制: DBFT</li>
  <li>创新点: 尝试将实体信任机制引入区块链</li>
  <li>区块确认时间: 10s</li>
  <li>智能合约: 有,合约语言python,C#,golang等,图灵完备,持续进化中</li>
</ul>

<h3 id="bch">BCH</h3>

<p>比特币现金是比特币在478599的硬分叉产物,BCH是比特币项目作为点对点数字现金的延续,它是比特币区块链帐本 (ledger) 的分叉，并具有升级版的共识规则，即允许增长和扩容。</p>

<ul>
  <li>货币名称: BCH</li>
  <li>共识机制: 比特币共识升级支持扩容</li>
  <li>创新点: 扩容算不算</li>
  <li>区块确认时间: 10s-2h</li>
  <li>智能合约: wormhole cash Wormhole虫洞协议,可以实现代币颁发,转移等等,类似于以太坊ERC20</li>
</ul>

<h1 id="section-27">进阶篇</h1>

<h2 id="utxobalance">UTXO/Balance两种模型</h2>

<p>现有的区块链基本都是基于UTXO/Balance两种模型之一构建而来，比特币采用了UTXO模型。</p>

<p>UTXO(Unspent Transaction Output)未消费交易输出，这是类似物理世界的纸币消费模型。在比特币系统中，每个交易输出就是一张比特币，这些比特币面值不一，并且无法拆分，就如同不能把100块人名币撕成两半当做两张50用一样。所以，如果用比特币买一杯2.7BTC的咖啡，你发现自己钱包里只有一张1btc和一张2btc比特币，那么只能把这两张BTC作为交易输入，这笔交易会产生两个输出，2.7btc付给商家，并且你会获得0.3btc的找零。</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/utxo.png" alt="blockchain" /></p>

<p>而Balance余额模型就是以太坊为代表的账户模型，它和刷银行卡消费是一样的，以太坊系统里有个字段专门记录用户的账户余额，交易时只要对这个余额字段做加减就行了。比如你还是买一杯2.7ETH的咖啡，购买时商家会直接收到你支付的2.7eth，整个消费过程不产生找零操作。</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/balance-model.jpg" alt="blockchain" /></p>

<blockquote>
  <p>P.S. 为了容易理解，举例都省略的交易手续费的描述。</p>
</blockquote>

<h2 id="section-28">分叉</h2>

<p>比特币中的软分叉和硬分叉主要指因比特币协议的突发改变而导致的兼容性的问题。比特币协议发生改变，会有两个不同版本的比特币协议在同时使，他们对其他区块的接受规则不同会导致区块链长期分叉，这两个不同的链都会被不同的网络认为是有效的。链分叉也导致网络分叉。</p>

<h3 id="section-29">软分叉</h3>

<p>软分叉的新的规则是以前旧规则的子集，所有被新版本认为是合法的区块也会被以前旧版本认为是合法的。旧版本会接受新版本创建的区块。新版本和旧版本是兼容的。</p>

<p>如果有至少51%的矿工的算力转向的新版本，那么网络自动完成软分叉：一开始旧版本创建的区块在新协议下被认为是不合法的，这时会出现一个短暂的分叉，但最终新版本的分叉会赶超旧版本的分叉成为最长链。因为在旧版本上的算力是小于新版本的。</p>

<p>但是如果小于51%的矿工算力转向新版本，那么软分叉将不会出现，因为旧版本比新版本有更多的算力支持，同时旧版本不兼容新版本。</p>

<h3 id="section-30">硬分叉</h3>

<p>旧版本不会接受新版本创建的合法区块，认为新版本的合法区块是不合法的。所以很明显硬分叉是不向前兼容。要实现硬分叉所有的用户（矿工，交易所，普通用户）都要切换的新的协议版本上。</p>

<h2 id="section-31">共识机制</h2>

<h3 id="pow">POW</h3>

<p>比特币在Block的生成过程中使用了POW机制，一个符合要求的Block Hash由N个前导零构成，零的个数取决于网络的难度值。要得到合理的Block Hash需要经过大量尝试计算，计算时间取决于机器的哈希运算速度。当某个节点提供出一个合理的Block Hash值，说明该节点确实经过了大量的尝试计算，当然，并不能得出计算次数的绝对值，因为寻找合理hash是一个概率事件。当节点拥有占全网n%的算力时，该节点即有n/100的概率找到Block Hash。</p>

<h3 id="pos">POS</h3>

<p>POS：也称股权证明，类似于财产储存在银行，这种模式会根据你持有数字货币的量和时间，分配给你相应的利息。 
简单来说，就是一个根据你持有货币的量和时间，给你发利息的一个制度，在股权证明POS模式下，有一个名词叫币龄，每个币每天产生1币龄，比如你持有100个币，总共持有了30天，那么，此时你的币龄就为3000，这个时候，如果你发现了一个POS区块，你的币龄就会被清空为0。你每被清空365币龄，你将会从区块中获得0.05个币的利息(假定利息可理解为年利率5%)，那么在这个案例中，利息 = 3000 * 5% / 365 = 0.41个币，这下就很有意思了，持币有利息</p>

<h3 id="dpos">DPOS</h3>

<p>比特股的DPoS机制，中文名叫做股份授权证明机制（又称受托人机制），它的原理是让每一个持有比特股的人进行投票，由此产生101位代表 , 我们可以将其理解为101个超级节点或者矿池，而这101个超级节点彼此的权利是完全相等的。从某种角度来看，DPOS有点像是议会制度或人民代表大会制度。如果代表不能履行他们的职责（当轮到他们时，没能生成区块），他们会被除名，网络会选出新的超级节点来取代他们。DPOS的出现最主要还是因为矿机的产生，大量的算力在不了解也不关心比特币的人身上，类似演唱会的黄牛，大量囤票而丝毫不关心演唱会的内容。</p>

<h3 id="pbft">PBFT</h3>

<p>PBFT是一种状态机副本复制算法，即服务作为状态机进行建模，状态机在分布式系统的不同节点进行副本复制。每个状态机的副本都保存了服务的状态，同时也实现了服务的操作。将所有的副本组成的集合使用大写字母R表示，使用0到<code>|R|-1</code>的整数表示每一个副本。为了描述方便，假设<code>|R|=3f+1</code>，这里f是有可能失效的副本的最大个数。尽管可以存在多于3f+1个副本，但是额外的副本除了降低性能之外不能提高可靠性。</p>

<h2 id="section-32">51%与双花</h2>

<p>51%攻击是一种攻击手段，而双花是一种攻击目的。很多文章将二者混为一谈，实际上是手段和目的混淆。</p>

<p>因为区块链(以比特币为例)，实际上使用的是一种类似”多数人认可即真理”的世俗逻辑，比特币网络中一般以上矿工达成共识，那么区块就是合法的，交易就能正常被认可。试想，如果某个组织或个人拥有比特币网络51%以上的算力，那么当他发现一笔自己”不喜欢”的交易，他就可以发动手里全部算力，强制在另一个区块开始挖矿，这就在实质上造成了网络分叉，并且因为他拥有网络大部分算力，导致最终整个网络都会放弃正常的主链，在他挖掘的分叉上继续挖矿，从而整个网络都抛弃这笔交易,分叉变成主链;这就是51%攻击，攻击者通过操纵算力篡改区块链达到自己的个人目的。</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/btc-51.jpg" alt="blockchain" /></p>

<p>而双花(Double spend)是指同一笔钱被双重支付。还是以上面的例子来说明，如果这个控制51%算力的人提交一笔10BTC的交易到交易所，然后他在交易所立即将比特币提现成美元到自己的银行卡上，然后他立即将10BTC转账给自己另一个账户，并且同时操纵算力抛弃第一笔交易:即在第一笔交易的父区块上执行分叉挖矿，最终，他只是将10BTC从一个账户转移到自己另一个账户，但是交易所已经损失了10BTC等值的现金，该攻击者达到了双花的目的。</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/double-spend.jpg" alt="blockchain" /></p>

<p>51%攻击的防范是一个大可提，各种共识算法也在致力于尽量降低被攻击的可能性；除了共识漏洞，更为难于预料的其实是现实算力集中，比如比特币矿池导致的事实上算力集中。</p>

<p>双花则比较好防范，目前双花都是由于低确认次数导致的，所以增大确认次数，就能极大概率保证规避双花问题。</p>

<h2 id="zcash">零知识证明与zcash</h2>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/zcash.jpeg" alt="blockchain" /></p>

<p>零知识证明指的是证明者能够在不向验证者提供任何有用的信息的情况下，使验证者相信某个论断是正确的。比如证明者向验证者证明并使其相信自己知道或拥有某一消息，但证明过程不能向验证者泄漏任何关于被证明消息的信息。</p>

<p>比如阿里巴巴怎么向四十大盗证明自己知道打开宝藏大门的咒语，并且不能直接告诉他们咒语，如童话里一样，他只需要独自念动咒语进入宝藏拿一块宝石出来给强盗看就行了。</p>

<p>零知识证明是一个技术和哲学相关的话题，很有意思，生活中可能以脑筋急转弯的形式在你身边出现过，比如<a href="https://zhuanlan.zhihu.com/p/29909734">怎么向色盲证明你能看出两个球颜色是不同的</a>。</p>

<blockquote>
  <p>如果读过《三体》的读者，很快能联想到，”宇宙安全声明”其实也是一种零知识证明。</p>
</blockquote>

<p>零知识证明的代表货币是zcash,使用zcash转账是完全匿名且不可追踪的. 具体原理这篇文章讲得很好,<a href="https://zhuanlan.zhihu.com/p/24440530">不是程序员也能看懂的ZCash零知识证明</a></p>

<h2 id="section-33">环形签名与门罗币</h2>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/monero.png" alt="blockchain" /></p>

<p>门罗币的匿名性主要是由其环形签名技术实现的。在十七世纪的时候，法国群臣向国王进谏时，为了不让国王追查到是由谁带头签名上书的，于是他们发明出了一种环形签名的方式，所有人的姓名按环形排列，自然的隐藏了签名顺序，从而做到无法追查源头。</p>

<p>2015 年，在这种签名方式的概念基础之上，数学博士 Shen Noether 发表了一篇名为《环形加密交易》的文章，为正在改进技术的门罗币奠定了环形签名算法的基础。环形签名算法与比特币一样也是使用基于哈希值的公钥+私钥模式，不同的是环形签名技术将交易发送方的公钥和另外一个公钥进行混合，然后对信息进行签署，最后再由接收者的私钥解密验证，这样一来外界就无法判断交易发起者的公钥是哪一个，从而使门罗币实现了隐藏交易发送方地址信息的功能，使外部攻击者无法看出地址之间的关联性。</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/circle-sign.jpeg" alt="blockchain" /></p>

<p>详细的技术原理参考文献<a href="http://blog.51cto.com/huihua/2170409">环形签名</a></p>

<h2 id="p2p">P2P</h2>

<p>P2P就参考我自己两篇文章吧</p>

<p><a href="http://qjpcpu.github.io/blog/2018/01/26/p2pzhi-udpda-dong/">p2p之UDP打洞</a></p>

<p><a href="http://qjpcpu.github.io/blog/2018/01/30/shen-ru-ethereumyuan-ma-p2pmo-kuai-jie-dian-fa-xian-ji-zhi/">p2p模块节点发现机制</a></p>

<h2 id="section-34">联盟链</h2>

<p>联盟链，只针对特定某个群体的成员和有限的第三方，内部指定多个预选的节点为记账人，每个块的生成由所有的预选节点共同决定，其他接入节点可以参与交易，但不过问记账过程，其他第三方可以通过该区块链开放的API进行限定查询。为了获得更好的性能，联盟链对于共识或验证节点的配置和网络环境有一定要求。有了准入机制，可以使得交易性能更容易提高，避免由参次不齐的参与者产生的一些问题。</p>

<p>联盟链对比公链，它的准入要求高，只有授权的节点可以接入，记账节点也是严格受权限策略控制，并且由于其工作环境可信度高，并不需要使用PoW这种强证明共识算法，而且联盟链是不需要经济激励，所以大部分联盟链也不需要代币驱动矿工。所以综合起来看，我个人觉得虽然联盟链的产生是基于区块链，但它其实更应该被称为一种分布式数据库。联盟链的工作场景使用传统中心化的解决方案也许性能更优异，但存在即合理，为什么区块链以前并没有提出这种分布式解决方案? 因为区块链，它将这种一体式的解决方案打包起来，以联盟链的形式封装，所以它在企业联盟里形成了标准化的范本，这才促使它的兴起。</p>

<p>因为联盟链的这些属性，要求解决方案提供者在使用前要更加深思熟虑，是不是我真的需要一条联盟链？</p>

<p>联盟链笔者使用得不多，就简单说说我用过的.</p>

<h3 id="quorum">quorum</h3>

<p><a href="https://www.jpmorgan.co.jp/country/JP/ja/Quorum">quorum</a>是基于以太坊的联盟链解决方案。它在金融银行业相对用的多一点,在以太坊的基础上添加了许多联盟场景的功能:</p>

<ul>
  <li>取消耗能低效的PoW共识，使用了Raft/BFT协议共识算法</li>
  <li>P2P通信层修改为仅接受授权节点</li>
  <li>区块产生/验证逻辑修改,状态Patricia树修改</li>
  <li>支持私有交易</li>
  <li>去除GasPrice策略</li>
</ul>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/quorum.jpg" alt="blockchain" /></p>

<p>我的感受是，如果对以太坊比较熟悉，迁移到quorum是比较顺畅的，但是quorum使用起来还不够舒心</p>

<ul>
  <li>对私有交易的支持比较生硬，交易权限控制无法动态变更</li>
  <li>公共合约和私有合约间相互调用，可能存在一些坑</li>
</ul>

<h3 id="hyperledger-fabric">Hyperledger Fabric</h3>

<p><a href="https://www.hyperledger.org/projects/fabric">Fabric</a>是由大名鼎鼎的linux基金会负责推进的项目，技术实力有保证，可以说是目前比较靠前的联盟链项目，然而项目目前还是处于非常早期状态，我感觉用起来还是很膈应。由于fabric目前文档比较齐全，我就不做复制粘贴了，仅聊下自己的使用感受。</p>

<ul>
  <li>运维性较差，尤其是chaincode部署得一个一个节点来，整套节点管理灵活性差</li>
  <li>生产环境共识排序依赖于kafka,BFT共识还在开发中，目前感觉kafka也是一个临时解决方案，实际使用问题不少</li>
  <li>整个体系庞杂臃肿，学习曲线陡峭,属于入门易，拔高难</li>
</ul>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/fabric.webp" alt="blockchain" /></p>

<h1 id="section-35">参考文献</h1>

<ul>
  <li>精通比特币</li>
  <li><a href="https://blog.csdn.net/lsttoy/article/details/61624287">共识算法（POW,POS,DPOS,PBFT）介绍和心得</a></li>
  <li><a href="https://github.com/jpmorganchase/quorum/wiki/Quorum-Overview">Quorum</a></li>
  <li><a href="https://www.hyperledger.org/projects/fabric">Hyperledger Fabric</a></li>
  <li><a href="https://ont.io/wp/Ontology-technology-white-paper-ZH.pdf">ONT技术白皮书</a></li>
  <li><a href="https://eospark.com/">EOS-park</a></li>
  <li><a href="https://www.bitcoincash.org/zh-CN/">BCH</a></li>
  <li><a href="https://zhuanlan.zhihu.com/p/42300572">大话币圈丨BCH：“矿霸”吴忌寒一手操纵，币圈史上惊天背叛案</a></li>
  <li><a href="https://zhuanlan.zhihu.com/p/32613487">三分钟让你了解什么是Segwit隔离见证</a></li>
  <li><a href="https://mp.weixin.qq.com/s/-PfxSe9WPUOXMd8yrYUeZA">一种基于Bitcoin Cash的智能合约实现方案</a></li>
  <li><a href="https://zhuanlan.zhihu.com/p/24440530">不是程序员也能看懂的ZCash零知识证明</a></li>
  <li><a href="https://zhuanlan.zhihu.com/p/29909734">Zcash核心：零知识证明</a></li>
  <li><a href="https://z.cash/">z.cash</a></li>
  <li><a href="http://www.17aiot.com/blockchain/49947.html">门罗币的环形签名技术如何提高区块链的隐私性</a></li>
  <li><a href="http://blog.51cto.com/huihua/2170409">环形签名</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Rebuild Ethereum](二)区块基础结构]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/09/10/qu-kuai-ji-chu-jie-gou/"/>
    <updated>2018-09-10T06:24:59+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/09/10/qu-kuai-ji-chu-jie-gou</id>
    <content type="html"><![CDATA[<p>区块链是融合了密码学、分布式技术等等多个计算机领域的产物，虽然这些技术听起来都很高大上，并且不同区块链的源码看起来也都是很庞杂，令人望而生畏，但是我们回归到区块链最本身，她的基础数据结构——“链”，却是很简单的，就是一条单向链表。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">数据结构</a>    <ul>
      <li><a href="#header">Header</a></li>
      <li><a href="#transactions">Transactions</a></li>
    </ul>
  </li>
  <li><a href="#section-1">存储结构</a>    <ul>
      <li><a href="#section-2">区块头</a></li>
      <li><a href="#section-3">区块体</a></li>
      <li><a href="#section-4">交易索引</a></li>
      <li><a href="#section-5">其他</a></li>
    </ul>
  </li>
  <li><a href="#section-6">为什么是单向链表呢？</a>    <ul>
      <li><a href="#section-7">简单</a></li>
      <li><a href="#section-8">世界线</a></li>
    </ul>
  </li>
  <li><a href="#rebuild">关于rebuild</a></li>
</ul>

<h1 id="section">数据结构</h1>

<p>首先，我们来看看以太坊区块的基本结构(省略了部分非核心成员变量)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// Block represents an entire block in the Ethereum blockchain.</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">Block</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">header</span>       <span class="o">*</span><span class="nx">Header</span>
</span><span class="line">	<span class="nx">transactions</span> <span class="nx">Transactions</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// 省略其他辅助成员</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一个区块主要由两部分组成: <code>Header</code>和 <code>Transactions</code>列表。</p>

<p><code>Transactions</code>列表就是区块的核心业务数据，无论是ETH的转账，还是某个合约调用，他们都是以一笔笔交易的形式打包到区块里,区块链被称之为分布式账本，那么这些交易就是构成账本的一笔笔流水,通过从账本第一页逐笔交易”翻阅”到最后一页,就可以还原成每个人所以的交易及账户余额。</p>

<p><code>Header</code>是区块链的索引结构，也可以看做单向链表的指向”上一个链节点”的指针，我们所谓的”翻阅”这个行为，其实就是根据这个<code>Header</code>指针遍历单向链表的过程。</p>

<p>看到这里，有数据结构基础的同学应该已经非常明白区块链的核心结构了。生产环境的区块链结果不外乎就是这条单向链表在易用性、安全性、传输、存储等多方便调和的产物。</p>

<p>下面我们还是看看以太坊的具体实现。</p>

<h2 id="header">Header</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// Header represents a block header in the Ethereum blockchain.</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">Header</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">ParentHash</span>  <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span>    <span class="s">`json:&quot;parentHash&quot;       gencodec:&quot;required&quot;`</span>
</span><span class="line">	<span class="nx">Number</span>      <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span>       <span class="s">`json:&quot;number&quot;           gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// 省略其他非结构性成员</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>header</code>的结构成员有大概15个，这里我们省略了其他和链遍历无关的成员(其他成员也很重要，包含挖矿难度、交易、共识相关参数，只是与本文无关,详细介绍可以参考<a href="http://qjpcpu.github.io/blog/2018/02/24/shen-ru-ethereumyuan-ma-cong-qu-kuai-tou-kan-gong-shi-wa-kuang/">从区块头看共识挖矿</a>).</p>

<p>结构体里面的<code>ParentHash</code>就是上一个区块的”地址”，而这里面还有一个参数<code>Number</code>就是我们常说的区块高度。单向链表的指针可以从当前最新区块回溯到创世区块，而<code>Number</code>就类似于数组序号，可以方便地直接按区块高度直接访问到某个区块。这个两个参数合起来，可以做到随机访问和顺序访问的双重满足。</p>

<blockquote>
  <p>P.S.某个区块的”地址”值由block.Hash()方法获得.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/eth-core-struct1.jpeg" alt="eth-core-struct1" /></p>

<h2 id="transactions">Transactions</h2>

<p>区块中的<code>Transactions</code>是交易列表,交易结构就是区块链真正的业务数据。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">Transaction</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">data</span> <span class="nx">txdata</span>
</span><span class="line">	<span class="c1">// 省略cache成员</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">txdata</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">AccountNonce</span> <span class="kt">uint64</span>          <span class="s">`json:&quot;nonce&quot;    gencodec:&quot;required&quot;`</span>
</span><span class="line">	<span class="nx">Price</span>        <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span>        <span class="s">`json:&quot;gasPrice&quot; gencodec:&quot;required&quot;`</span>
</span><span class="line">	<span class="nx">GasLimit</span>     <span class="kt">uint64</span>          <span class="s">`json:&quot;gas&quot;      gencodec:&quot;required&quot;`</span>
</span><span class="line">	<span class="nx">Recipient</span>    <span class="o">*</span><span class="nx">common</span><span class="p">.</span><span class="nx">Address</span> <span class="s">`json:&quot;to&quot;       rlp:&quot;nil&quot;`</span> <span class="c1">// nil means contract creation</span>
</span><span class="line">	<span class="nx">Amount</span>       <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span>        <span class="s">`json:&quot;value&quot;    gencodec:&quot;required&quot;`</span>
</span><span class="line">	<span class="nx">Payload</span>      <span class="p">[]</span><span class="kt">byte</span>          <span class="s">`json:&quot;input&quot;    gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// Signature values</span>
</span><span class="line">	<span class="nx">V</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span> <span class="s">`json:&quot;v&quot; gencodec:&quot;required&quot;`</span>
</span><span class="line">	<span class="nx">R</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span> <span class="s">`json:&quot;r&quot; gencodec:&quot;required&quot;`</span>
</span><span class="line">	<span class="nx">S</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span> <span class="s">`json:&quot;s&quot; gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// This is only used when marshaling to JSON.</span>
</span><span class="line">	<span class="nx">Hash</span> <span class="o">*</span><span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span> <span class="s">`json:&quot;hash&quot; rlp:&quot;-&quot;`</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>AccountNonce</code>是每个账户的交易自增序号,以太坊的个人交易其实是串行执行的，比如同一个账户发出<code>AccountNonce=10</code>和<code>AccountNonce=11</code>的两笔交易，即便是11先到区块链节点，最终还是需要等待10号交易打包入区块才有可能执行11号交易。</li>
  <li><code>Price</code>就是矿工的快乐源泉用户的头痛症,gasPrice。</li>
  <li><code>GasLimit</code>交易指令执行上限，这也是耳熟能详的参数了。</li>
  <li><code>Recipient</code>交易收据</li>
  <li><code>Amount</code>交易包含的eth</li>
  <li><code>Payload</code>交易体数据包</li>
  <li><code>V,R,S</code>签名数据</li>
  <li><code>Hash</code>交易hash</li>
</ul>

<h1 id="section-1">存储结构</h1>

<p>以太坊底层使用leveldb作为基础存储层，leveldb是一个高性能的k-v本地存储。那么我们主要看看它是怎么把区块数据组织起来便于CRUD的。</p>

<h2 id="section-2">区块头</h2>

<p>首先是区块头,以太坊中很多时候我们只需要获取区块头，比如轻钱包做区块查询时并不需要获取整个区块数据，仅需要header数据就足够了。</p>

<p>以太坊的区块头是这样的k-v结构:</p>

<ul>
  <li><code>key</code>:固定前缀h+区块高度大端编码+区块hash</li>
  <li><code>value</code>: rlp编码的header头数据</li>
</ul>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/eth-core-struct-header.jpeg" alt="eth-core-struct" /></p>

<h2 id="section-3">区块体</h2>

<p>区块体的存储和区块头非常相似:</p>

<ul>
  <li><code>key</code>:固定前缀b+区块高度大端编码+区块hash</li>
  <li><code>value</code>:rlp编码的交易列表和叔区块header体</li>
</ul>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/eth-core-struct-block.jpeg" alt="eth-core-struct" /></p>

<p>注意交易的数据是存在区块体中的,那么我们平时在使用以太坊浏览器的时候，可能大部分时候都是根据交易hash查询交易，如果每次都要读取区块体才知道交易性能就太低了，所以我们再看看交易存储</p>

<h2 id="section-4">交易索引</h2>

<p>为了便于查询，以太坊额外存储了交易的索引信息:</p>

<ul>
  <li><code>key</code>:固定前缀l+交易hash</li>
  <li><code>value</code>:区块hash,区块高度,交易在区块中的序号</li>
</ul>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/eth-core-struct-tx.jpeg" alt="eth-core-struct" /></p>

<h2 id="section-5">其他</h2>

<p>区块其他存储结构(比如收据,难度td)都以类似的k-v结构存储在leveldb中，他们共同构成了以太坊的存储结构。详细代码比较简单,可以参考<code>github.com/ethereum/go-ethereum/core/rawdb</code>和<code>github.com/ethereum/go-ethereum/ethdb</code>这两个包。</p>

<p>以太坊的基础数据结构非常简单，在看源码之前最好先熟悉一下。我之前就是忽略了这个基础，在阅读区块重组reorg的代码的时候看到<code>DeleteTxLookupEntry</code>以为是删除交易数据，导致对叔区块的理解障碍，后来补看了rawdb源码才知道，这只是删除了交易索引。</p>

<h1 id="section-6">为什么是单向链表呢？</h1>

<p>回到开头，那么为什么大多数区块链都选择了单向链表作为基础数据结构呢，我擅自揣摩可能有这样几点原因:</p>

<h2 id="section-7">简单</h2>

<p>简单既是技术抉择的原因，也是技术成型后的结果。毫无疑问，单向链表是简单的,上完第一节数据结构课的同学应该都能轻松实现一条简单链表。它简单才能易于拓展,才能在这上面方便地设计状态机，从而完成滚动记账。</p>

<h2 id="section-8">世界线</h2>

<p>这里借用一个二次元的概念,区块链的数据是有严格上下文关系的，不能摒弃历史凭空捏造数据，它天生就是交易流水串起来的一条连续的线,这和我们现实世界类似，现实世界的当前状态不过是一个一个事件串联起来的，连续演化出的结果,这就是世界线,它具有状态转移的连续性，唯一性。从这个概念的描述也能感受出，这个业务场景和单向链表也是非常匹配的,我们接触区块链很多时候都是从了解”历史不可篡改”开始，然而链表指向父节点的指针，天然承认了数据历史这一需求。</p>

<h1 id="rebuild">关于rebuild</h1>

<p>所以呢，最后我还是偷了个懒，这块的基础结构比较简单,我就不手动写Demo了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[rebuild ethereum](一) 搭建p2p网络]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/09/02/rebuild-ethereum-da-jian-p2pwang-luo/"/>
    <updated>2018-09-02T06:24:16+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/09/02/rebuild-ethereum-da-jian-p2pwang-luo</id>
    <content type="html"><![CDATA[<p>接触使用ethereum已经有大半年时间，一直觉得对以太坊了解无法更进一步。结合自己以前的经验, the most efficient way of learn something is to build one. 想要深入学习一样东西，最有效的方式就是自己弄脏手，从头搭建一个。</p>

<p>比如动手做linux from scratch来学习linux的五脏六腑，rebuild rails来学习rails，所以我想尝试做一个rebuild ethereum系列,来解构ethereum。</p>

<p>在该rebuild系列中，我将把视角定在构成区块链的大模块纬度,先从以太坊源码中抽离该模块,然后使用该模块编写一个可执行的程序，这样能够真实感受到这个模块的运行机制和使用方法；最终能产生”以太坊(区块链)不外乎就是这几个模块组装起来的”这种印象就达到我的目的的。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">基本诉求</a></li>
  <li><a href="#ethereum-p2pp2p">基于ethereum-p2p实现一个自定义协议的p2p网络</a>    <ul>
      <li><a href="#foo-bar">foo-bar网络</a></li>
      <li><a href="#section-2">启动网络</a></li>
      <li><a href="#section-3">观察模块运行</a></li>
    </ul>
  </li>
  <li><a href="#real-ethereum-p2p">real ethereum p2p</a></li>
  <li><a href="#section-4">本文源码</a></li>
</ul>

<h1 id="section">前言</h1>

<p>这是rebuild ethereum的第一篇,我将尝试抽离以太坊底层的p2p网络模块,搭建一个可执行的3节点的p2p网络。在这里，我不会深入介绍具体细节，其中涉及到技术细节读者可以直接查看ethereum源代码,也可以参考我之前关于以太坊p2p实现细节的几篇博客。</p>

<h1 id="section-1">基本诉求</h1>

<p>先来看看我们对于一个p2p网络模块的基本诉求:</p>

<ul>
  <li>接入网络的便利性,其实也可以表述成网络易于建立，有足够的内网穿透能力</li>
  <li>具备节点发现和维护的能力</li>
  <li>提供上层协议的拓展能力,以tcp类比,能做到在不清楚tcp的底层细节就能够开发出http协议</li>
</ul>

<h1 id="ethereum-p2pp2p">基于ethereum-p2p实现一个自定义协议的p2p网络</h1>

<h2 id="foo-bar">foo-bar网络</h2>

<p>我们实现的这个p2p网络叫foo-bar网络,她的功能很简单,接入网络后向新节点发一条<code>welcome</code>消息,然后再发一条<code>foo</code>,当节点收到后会回复一条<code>bar</code>消息.</p>

<p>定义foo-bar协议:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">MessageType</span> <span class="p">=</span> <span class="kt">uint64</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 消息类型必须从0开始递增</span>
</span><span class="line"><span class="kd">const</span> <span class="p">(</span>
</span><span class="line">	<span class="nx">MT_HelloWorld</span> <span class="nx">MessageType</span> <span class="p">=</span> <span class="kc">iota</span>
</span><span class="line">	<span class="nx">MT_FooBar</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">Message</span> <span class="kt">string</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">FooBarProtocol</span><span class="p">()</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">{</span>
</span><span class="line">		<span class="nx">Name</span><span class="p">:</span>    <span class="s">&quot;FooBarProtocol&quot;</span><span class="p">,</span>
</span><span class="line">		<span class="nx">Version</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class="line">		<span class="nx">Length</span><span class="p">:</span>  <span class="mi">2</span><span class="p">,</span>  <span class="c1">// 有几种消息类型就是几</span>
</span><span class="line">		<span class="nx">Run</span><span class="p">:</span>     <span class="nx">msgHandler</span><span class="p">,</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>要注意关于协议支持的消息类型的定义，具体原因和以太坊实现细节有关,具体可以查阅<a href="http://qjpcpu.github.io/blog/2018/01/29/shen-ru-ethereumyuan-ma-p2pmo-kuai-ji-chu-jie-gou/">p2p模块基础结构</a></p>

<p>实现foo-bar协议handler内容:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">msgHandler</span><span class="p">(</span><span class="nx">peer</span> <span class="o">*</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Peer</span><span class="p">,</span> <span class="nx">ws</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">MsgReadWriter</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">// send msg</span>
</span><span class="line">	<span class="nx">log</span><span class="p">.</span><span class="nx">Infof</span><span class="p">(</span><span class="s">&quot;new peer connected:%v&quot;</span><span class="p">,</span> <span class="nx">peer</span><span class="p">.</span><span class="nx">String</span><span class="p">())</span>
</span><span class="line">	<span class="nx">p2p</span><span class="p">.</span><span class="nx">SendItems</span><span class="p">(</span><span class="nx">ws</span><span class="p">,</span> <span class="nx">MT_HelloWorld</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">().</span><span class="nx">Name</span><span class="o">+</span><span class="s">&quot;:welcome &quot;</span><span class="o">+</span><span class="nx">peer</span><span class="p">.</span><span class="nx">Name</span><span class="p">())</span>
</span><span class="line">	<span class="nx">p2p</span><span class="p">.</span><span class="nx">SendItems</span><span class="p">(</span><span class="nx">ws</span><span class="p">,</span> <span class="nx">MT_FooBar</span><span class="p">,</span> <span class="s">&quot;foo&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="k">for</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">msg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ws</span><span class="p">.</span><span class="nx">ReadMsg</span><span class="p">()</span>
</span><span class="line">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">log</span><span class="p">.</span><span class="nx">Warningf</span><span class="p">(</span><span class="s">&quot;peer %s disconnected&quot;</span><span class="p">,</span> <span class="nx">peer</span><span class="p">.</span><span class="nx">Name</span><span class="p">())</span>
</span><span class="line">			<span class="k">return</span> <span class="nx">err</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">
</span><span class="line">		<span class="kd">var</span> <span class="nx">myMessage</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="nx">Message</span>
</span><span class="line">		<span class="nx">err</span> <span class="p">=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">myMessage</span><span class="p">)</span>
</span><span class="line">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">log</span><span class="p">.</span><span class="nx">Errorf</span><span class="p">(</span><span class="s">&quot;decode msg err:%v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">			<span class="c1">// handle decode error</span>
</span><span class="line">			<span class="k">continue</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">
</span><span class="line">		<span class="nx">log</span><span class="p">.</span><span class="nx">Info</span><span class="p">(</span><span class="s">&quot;code:&quot;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">Code</span><span class="p">,</span> <span class="s">&quot;receiver at:&quot;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">ReceivedAt</span><span class="p">,</span> <span class="s">&quot;msg:&quot;</span><span class="p">,</span> <span class="nx">myMessage</span><span class="p">)</span>
</span><span class="line">		<span class="k">switch</span> <span class="nx">myMessage</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">{</span>
</span><span class="line">		<span class="k">case</span> <span class="s">&quot;foo&quot;</span><span class="p">:</span>
</span><span class="line">			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">SendItems</span><span class="p">(</span><span class="nx">ws</span><span class="p">,</span> <span class="nx">MT_FooBar</span><span class="p">,</span> <span class="s">&quot;bar&quot;</span><span class="p">)</span>
</span><span class="line">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">				<span class="nx">log</span><span class="p">.</span><span class="nx">Errorf</span><span class="p">(</span><span class="s">&quot;send bar error:%v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">				<span class="k">return</span> <span class="nx">err</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">		<span class="k">default</span><span class="p">:</span>
</span><span class="line">			<span class="nx">log</span><span class="p">.</span><span class="nx">Info</span><span class="p">(</span><span class="s">&quot;recv:&quot;</span><span class="p">,</span> <span class="nx">myMessage</span><span class="p">)</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">启动网络</h2>

<p>这里我们启动3个节点,对于测试网络结构及运转已经足够了.</p>

<p>首先编译二进制程序:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">cd</span> <span class="nx">ethereum</span><span class="o">-</span><span class="nx">from</span><span class="o">-</span><span class="nx">scratch</span><span class="o">/</span><span class="nx">p2p</span><span class="o">-</span><span class="nx">network</span> <span class="o">&amp;&amp;</span> <span class="k">go</span> <span class="nx">build</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>启动3个节点</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="err">#</span> <span class="err">启动节点</span><span class="mi">1</span>
</span><span class="line"><span class="p">.</span><span class="o">/</span><span class="nx">start_node1</span><span class="p">.</span><span class="nx">sh</span>
</span><span class="line">
</span><span class="line"><span class="err">#</span> <span class="err">打开新终端窗口启动节点</span><span class="mi">2</span>
</span><span class="line"><span class="p">.</span><span class="o">/</span><span class="nx">start_node2</span><span class="p">.</span><span class="nx">sh</span>
</span><span class="line">
</span><span class="line"><span class="err">#</span> <span class="err">打开新终端窗口启动节点</span><span class="mi">3</span>
</span><span class="line"><span class="p">.</span><span class="o">/</span><span class="nx">start_node3</span><span class="p">.</span><span class="nx">sh</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/foo-bar-node1.png" alt="foo-bar1" /></p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/foo-bar-node2.png" alt="foo-bar2" /></p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/foo-bar-node3.png" alt="foo-bar3" /></p>

<h2 id="section-3">观察模块运行</h2>

<p>从日志可以看出,ethereum的p2p模块功能非常完备，在由种子节点接入网络后,可以自动完成节点发现，并且不断刷新自身的连接表，对已经建立的节点链路发送心跳保持连接。协议数据包使用rlp格式打包,不管是消息发送还是分拆都对上层提供了极为简单的接口，所以基于次实现高级协议就非常方便了，比如以太坊whisper协议。这是向上的延展。</p>

<p>如果要向下深入，那么就可以逐个了解，rlp拆包解包，子协议拓展规则,kad网络节点发现机制,内网穿透，等等</p>

<h1 id="real-ethereum-p2p">real ethereum p2p</h1>

<p>回到真实以太坊,geth节点启动最终执行启动p2p网络的地方位于<code>github.com/ethereum/go-ethereum/node/node.go</code>文件:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// Start create a live P2P node and starts running it.</span>
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span><span class="nx">Node</span><span class="p">)</span> <span class="nx">Start</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">n</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class="line">	<span class="k">defer</span> <span class="nx">n</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// Short circuit if the node&#39;s already running</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">n</span><span class="p">.</span><span class="nx">server</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">ErrNodeRunning</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">openDataDir</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">err</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// Initialize the p2p server. This creates the node key and</span>
</span><span class="line">	<span class="c1">// discovery databases.</span>
</span><span class="line">	<span class="nx">n</span><span class="p">.</span><span class="nx">serverConfig</span> <span class="p">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">P2P</span>
</span><span class="line">	<span class="nx">n</span><span class="p">.</span><span class="nx">serverConfig</span><span class="p">.</span><span class="nx">PrivateKey</span> <span class="p">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">NodeKey</span><span class="p">()</span>
</span><span class="line">	<span class="nx">n</span><span class="p">.</span><span class="nx">serverConfig</span><span class="p">.</span><span class="nx">Name</span> <span class="p">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">NodeName</span><span class="p">()</span>
</span><span class="line">	<span class="nx">n</span><span class="p">.</span><span class="nx">serverConfig</span><span class="p">.</span><span class="nx">Logger</span> <span class="p">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">log</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">n</span><span class="p">.</span><span class="nx">serverConfig</span><span class="p">.</span><span class="nx">StaticNodes</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">n</span><span class="p">.</span><span class="nx">serverConfig</span><span class="p">.</span><span class="nx">StaticNodes</span> <span class="p">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">StaticNodes</span><span class="p">()</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">n</span><span class="p">.</span><span class="nx">serverConfig</span><span class="p">.</span><span class="nx">TrustedNodes</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">n</span><span class="p">.</span><span class="nx">serverConfig</span><span class="p">.</span><span class="nx">TrustedNodes</span> <span class="p">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">TrustedNodes</span><span class="p">()</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">n</span><span class="p">.</span><span class="nx">serverConfig</span><span class="p">.</span><span class="nx">NodeDatabase</span> <span class="o">==</span> <span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">n</span><span class="p">.</span><span class="nx">serverConfig</span><span class="p">.</span><span class="nx">NodeDatabase</span> <span class="p">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">NodeDB</span><span class="p">()</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">running</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span><span class="nx">Config</span><span class="p">:</span> <span class="nx">n</span><span class="p">.</span><span class="nx">serverConfig</span><span class="p">}</span>
</span><span class="line">	<span class="nx">n</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">Info</span><span class="p">(</span><span class="s">&quot;Starting peer-to-peer node&quot;</span><span class="p">,</span> <span class="s">&quot;instance&quot;</span><span class="p">,</span> <span class="nx">n</span><span class="p">.</span><span class="nx">serverConfig</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// Otherwise copy and specialize the P2P configuration</span>
</span><span class="line">    <span class="o">......</span><span class="p">..</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>是不是和我们的demo基本一模一样.</p>

<p>具体的协议参考源码文件<code>github.com/ethereum/go-ethereum/eth/handler.go</code>子协议管理器<code>ProtocolManager</code></p>

<h1 id="section-4">本文源码</h1>

<p><a href="https://github.com/qjpcpu/ethereum-from-scratch/tree/master/p2p-network">本文源码</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hyperledger-fabric服务端开发]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/07/25/hyperledger-fabricfu-wu-duan-kai-fa/"/>
    <updated>2018-07-25T06:23:59+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/07/25/hyperledger-fabricfu-wu-duan-kai-fa</id>
    <content type="html"><![CDATA[<p>这篇文章并不是介绍fabric智能合约怎么编写的,因为这类的文章随便在google上一搜一大把. 但反而是fabric服务端开发应该怎么做需要有人稍稍点拨一下。本文就以golang服务端为例，介绍一下fabric服务端基本做法。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#fabric-sdk-go">fabric-sdk-go</a></li>
  <li><a href="#section">准备基础配置文件</a></li>
  <li><a href="#sdk">初始化sdk</a></li>
  <li><a href="#section-1">初始化通道</a></li>
  <li><a href="#chaincode">操作ChainCode</a></li>
  <li><a href="#section-2">完整示例</a></li>
  <li><a href="#section-3">其他官方示例</a></li>
</ul>

<h1 id="fabric-sdk-go">fabric-sdk-go</h1>

<p>fabric目前主要提供了<code>node</code>和<code>go</code>的SDK，我们将以<a href="https://github.com/hyperledger/fabric-sdk-go">fabric-sdk-go</a>为例搭建一个简单服务端程序。</p>

<p>首先安装fabric开发基础库:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">go get -u github.com/hyperledger/fabric/orderer
</span><span class="line">go get -u github.com/hyperledger/fabric/peer
</span><span class="line">go get -u github.com/hyperledger/fabric-sdk-go
</span><span class="line">
</span><span class="line"><span class="c"># Optional - populate vendor directory (if needed by your downstream vendoring solution)</span>
</span><span class="line"><span class="c"># cd $GOPATH/src/github.com/hyperledger/fabric-sdk-go/</span>
</span><span class="line"><span class="c"># make populate</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section">准备基础配置文件</h1>

<p>首先准备一份客户端连接的配置文件，配置连接orderer、peer节点，证书路径等信息:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config_e2e.yaml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
<span class="line-number">177</span>
<span class="line-number">178</span>
<span class="line-number">179</span>
<span class="line-number">180</span>
<span class="line-number">181</span>
<span class="line-number">182</span>
<span class="line-number">183</span>
<span class="line-number">184</span>
<span class="line-number">185</span>
<span class="line-number">186</span>
<span class="line-number">187</span>
<span class="line-number">188</span>
<span class="line-number">189</span>
<span class="line-number">190</span>
<span class="line-number">191</span>
<span class="line-number">192</span>
<span class="line-number">193</span>
<span class="line-number">194</span>
<span class="line-number">195</span>
<span class="line-number">196</span>
<span class="line-number">197</span>
<span class="line-number">198</span>
<span class="line-number">199</span>
<span class="line-number">200</span>
<span class="line-number">201</span>
<span class="line-number">202</span>
<span class="line-number">203</span>
<span class="line-number">204</span>
<span class="line-number">205</span>
<span class="line-number">206</span>
<span class="line-number">207</span>
<span class="line-number">208</span>
<span class="line-number">209</span>
<span class="line-number">210</span>
<span class="line-number">211</span>
<span class="line-number">212</span>
<span class="line-number">213</span>
<span class="line-number">214</span>
<span class="line-number">215</span>
<span class="line-number">216</span>
<span class="line-number">217</span>
<span class="line-number">218</span>
<span class="line-number">219</span>
<span class="line-number">220</span>
<span class="line-number">221</span>
<span class="line-number">222</span>
<span class="line-number">223</span>
<span class="line-number">224</span>
<span class="line-number">225</span>
<span class="line-number">226</span>
<span class="line-number">227</span>
<span class="line-number">228</span>
<span class="line-number">229</span>
<span class="line-number">230</span>
<span class="line-number">231</span>
<span class="line-number">232</span>
<span class="line-number">233</span>
<span class="line-number">234</span>
<span class="line-number">235</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Schema version of the content. Used by the SDK to apply the corresponding parsing rules.</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1.0.0</span>
</span><span class="line">
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># The client section used by GO SDK.</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="l-Scalar-Plain">client</span><span class="p-Indicator">:</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Which organization does this application instance belong to? The value must be the name of an org</span>
</span><span class="line">  <span class="c1"># defined under &quot;organizations&quot;</span>
</span><span class="line">  <span class="l-Scalar-Plain">organization</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">org1</span>
</span><span class="line">
</span><span class="line">  <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="l-Scalar-Plain">level</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">info</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Root of the MSP directories with keys and certs.</span>
</span><span class="line">  <span class="l-Scalar-Plain">cryptoconfig</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/home/ubuntu/.local/src/playfabric/first-network/crypto-config</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Some SDKs support pluggable KV stores, the properties under &quot;credentialStore&quot;</span>
</span><span class="line">  <span class="c1"># are implementation specific</span>
</span><span class="line">  <span class="l-Scalar-Plain">credentialStore</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="c1"># [Optional]. Used by user store. Not needed if all credentials are embedded in configuration</span>
</span><span class="line">    <span class="c1"># and enrollments are performed elswhere.</span>
</span><span class="line">    <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="s">&quot;/tmp/state-store&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations</span>
</span><span class="line">    <span class="c1"># requiring a key store. PKCS#11 based implementations does not.</span>
</span><span class="line">    <span class="l-Scalar-Plain">cryptoStore</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="c1"># Specific to the underlying KeyValueStore that backs the crypto key store.</span>
</span><span class="line">      <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/tmp/msp</span>
</span><span class="line">
</span><span class="line">   <span class="c1"># BCCSP config for the client. Used by GO SDK.</span>
</span><span class="line">  <span class="l-Scalar-Plain">BCCSP</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="l-Scalar-Plain">security</span><span class="p-Indicator">:</span>
</span><span class="line">     <span class="l-Scalar-Plain">enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class="line">     <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span> <span class="s">&quot;SW&quot;</span>
</span><span class="line">     <span class="l-Scalar-Plain">hashAlgorithm</span><span class="p-Indicator">:</span> <span class="s">&quot;SHA2&quot;</span>
</span><span class="line">     <span class="l-Scalar-Plain">softVerify</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class="line">     <span class="l-Scalar-Plain">level</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">256</span>
</span><span class="line">
</span><span class="line">  <span class="l-Scalar-Plain">tlsCerts</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="c1"># [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false</span>
</span><span class="line">    <span class="l-Scalar-Plain">systemCertPool</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class="line">
</span><span class="line"><span class="l-Scalar-Plain">channels</span><span class="p-Indicator">:</span>
</span><span class="line">  <span class="c1"># name of the channel</span>
</span><span class="line">  <span class="l-Scalar-Plain">mychannel</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="c1"># Required. list of peers from participating orgs</span>
</span><span class="line">    <span class="l-Scalar-Plain">peers</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="l-Scalar-Plain">peer0.org1.example.com</span><span class="p-Indicator">:</span>
</span><span class="line">        <span class="c1"># [Optional]. will this peer be sent transaction proposals for endorsement? The peer must</span>
</span><span class="line">        <span class="c1"># have the chaincode installed. The app can also use this property to decide which peers</span>
</span><span class="line">        <span class="c1"># to send the chaincode install request. Default: true</span>
</span><span class="line">        <span class="l-Scalar-Plain">endorsingPeer</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class="line">
</span><span class="line">        <span class="c1"># [Optional]. will this peer be sent query proposals? The peer must have the chaincode</span>
</span><span class="line">        <span class="c1"># installed. The app can also use this property to decide which peers to send the</span>
</span><span class="line">        <span class="c1"># chaincode install request. Default: true</span>
</span><span class="line">        <span class="l-Scalar-Plain">chaincodeQuery</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class="line">
</span><span class="line">        <span class="c1"># [Optional]. will this peer be sent query proposals that do not require chaincodes, like</span>
</span><span class="line">        <span class="c1"># queryBlock(), queryTransaction(), etc. Default: true</span>
</span><span class="line">        <span class="l-Scalar-Plain">ledgerQuery</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class="line">
</span><span class="line">        <span class="c1"># [Optional]. will this peer be the target of the SDK&#39;s listener registration? All peers can</span>
</span><span class="line">        <span class="c1"># produce events but the app typically only needs to connect to one to listen to events.</span>
</span><span class="line">        <span class="c1"># Default: true</span>
</span><span class="line">        <span class="l-Scalar-Plain">eventSource</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># [Optional]. The application can use these options to perform channel operations like retrieving channel</span>
</span><span class="line">    <span class="c1"># config etc.</span>
</span><span class="line">    <span class="l-Scalar-Plain">policies</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="c1">#[Optional] options for retrieving channel configuration blocks</span>
</span><span class="line">      <span class="l-Scalar-Plain">queryChannelConfig</span><span class="p-Indicator">:</span>
</span><span class="line">        <span class="c1">#[Optional] min number of success responses (from targets/peers)</span>
</span><span class="line">        <span class="l-Scalar-Plain">minResponses</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class="line">        <span class="c1">#[Optional] channel config will be retrieved for these number of random targets</span>
</span><span class="line">        <span class="l-Scalar-Plain">maxTargets</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class="line">        <span class="c1">#[Optional] retry options for query config block</span>
</span><span class="line">        <span class="l-Scalar-Plain">retryOpts</span><span class="p-Indicator">:</span>
</span><span class="line">          <span class="c1">#[Optional] number of retry attempts</span>
</span><span class="line">          <span class="l-Scalar-Plain">attempts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5</span>
</span><span class="line">          <span class="c1">#[Optional] the back off interval for the first retry attempt</span>
</span><span class="line">          <span class="l-Scalar-Plain">initialBackoff</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">500ms</span>
</span><span class="line">          <span class="c1">#[Optional] the maximum back off interval for any retry attempt</span>
</span><span class="line">          <span class="l-Scalar-Plain">maxBackoff</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5s</span>
</span><span class="line">          <span class="c1">#[Optional] he factor by which the initial back off period is exponentially incremented</span>
</span><span class="line">          <span class="l-Scalar-Plain">backoffFactor</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2.0</span>
</span><span class="line">
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># list of participating organizations in this network</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="l-Scalar-Plain">organizations</span><span class="p-Indicator">:</span>
</span><span class="line">  <span class="l-Scalar-Plain">org1</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="l-Scalar-Plain">mspid</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Org1MSP</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># This org&#39;s MSP store (absolute path or relative to client.cryptoconfig)</span>
</span><span class="line">    <span class="l-Scalar-Plain">cryptoPath</span><span class="p-Indicator">:</span>  <span class="l-Scalar-Plain">peerOrganizations/org1.example.com/users/{username}@org1.example.com/msp</span>
</span><span class="line">
</span><span class="line">    <span class="l-Scalar-Plain">peers</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">peer0.org1.example.com</span>
</span><span class="line">      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">peer1.org1.example.com</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based</span>
</span><span class="line">    <span class="c1"># network. Typically certificates provisioning is done in a separate process outside of the</span>
</span><span class="line">    <span class="c1"># runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for</span>
</span><span class="line">    <span class="c1"># dynamic certificate management (enroll, revoke, re-enroll). The following section is only for</span>
</span><span class="line">    <span class="c1"># Fabric-CA servers.</span>
</span><span class="line">    <span class="l-Scalar-Plain">certificateAuthorities</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ca.org1.example.com</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># the profile will contain public information about organizations other than the one it belongs to.</span>
</span><span class="line">  <span class="c1"># These are necessary information to make transaction lifecycles work, including MSP IDs and</span>
</span><span class="line">  <span class="c1"># peers with a public URL to send transaction proposals. The file will not contain private</span>
</span><span class="line">  <span class="c1"># information reserved for members of the organization, such as admin key and certificate,</span>
</span><span class="line">  <span class="c1"># fabric-ca registrar enroll ID and secret, etc.</span>
</span><span class="line">  <span class="l-Scalar-Plain">org2</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="l-Scalar-Plain">mspid</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Org2MSP</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># This org&#39;s MSP store (absolute path or relative to client.cryptoconfig)</span>
</span><span class="line">    <span class="l-Scalar-Plain">cryptoPath</span><span class="p-Indicator">:</span>  <span class="l-Scalar-Plain">peerOrganizations/org2.example.com/users/{username}@org2.example.com/msp</span>
</span><span class="line">
</span><span class="line">    <span class="l-Scalar-Plain">peers</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">peer0.org2.example.com</span>
</span><span class="line">
</span><span class="line">    <span class="l-Scalar-Plain">certificateAuthorities</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ca.org2.example.com</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Orderer Org name</span>
</span><span class="line">  <span class="l-Scalar-Plain">ordererorg</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="c1"># Membership Service Provider ID for this organization</span>
</span><span class="line">      <span class="l-Scalar-Plain">mspID</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">OrdererMSP</span>
</span><span class="line">
</span><span class="line">      <span class="c1"># Needed to load users crypto keys and certs for this org (absolute path or relative to global crypto path, DEV mode)</span>
</span><span class="line">      <span class="l-Scalar-Plain">cryptoPath</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ordererOrganizations/example.com/users/{username}@example.com/msp</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># List of orderers to send transaction and channel create/update requests to. For the time</span>
</span><span class="line"><span class="c1"># being only one orderer is needed. If more than one is defined, which one get used by the</span>
</span><span class="line"><span class="c1"># SDK is implementation specific. Consult each SDK&#39;s documentation for its handling of orderers.</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="l-Scalar-Plain">orderers</span><span class="p-Indicator">:</span>
</span><span class="line">  <span class="l-Scalar-Plain">orderer.example.com</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">orderer.example.com:7050</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># these are standard properties defined by the gRPC library</span>
</span><span class="line">    <span class="c1"># they will be passed in as-is to gRPC client constructor</span>
</span><span class="line">    <span class="l-Scalar-Plain">grpcOptions</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="l-Scalar-Plain">ssl-target-name-override</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">orderer.example.com</span>
</span><span class="line">      <span class="c1"># These parameters should be set in coordination with the keepalive policy on the server,</span>
</span><span class="line">      <span class="c1"># as incompatible settings can result in closing of connection.</span>
</span><span class="line">      <span class="c1"># When duration of the &#39;keep-alive-time&#39; is set to 0 or less the keep alive client parameters are disabled</span>
</span><span class="line">      <span class="l-Scalar-Plain">keep-alive-time</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0s</span>
</span><span class="line">      <span class="l-Scalar-Plain">keep-alive-timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">20s</span>
</span><span class="line">      <span class="l-Scalar-Plain">keep-alive-permit</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class="line">      <span class="l-Scalar-Plain">fail-fast</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class="line">      <span class="c1"># allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs</span>
</span><span class="line">      <span class="l-Scalar-Plain">allow-insecure</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class="line">
</span><span class="line">    <span class="l-Scalar-Plain">tlsCACerts</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="c1"># Certificate location absolute path</span>
</span><span class="line">      <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/home/ubuntu/repository/golang-repos/src/playfabric/first-network/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem</span>
</span><span class="line">
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># List of peers to send various requests to, including endorsement, query</span>
</span><span class="line"><span class="c1"># and event listener registration.</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="l-Scalar-Plain">peers</span><span class="p-Indicator">:</span>
</span><span class="line">  <span class="l-Scalar-Plain">peer0.org1.example.com</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="c1"># this URL is used to send endorsement and query requests</span>
</span><span class="line">    <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">peer0.org1.example.com:7051</span>
</span><span class="line">    <span class="c1"># eventUrl is only needed when using eventhub (default is delivery service)</span>
</span><span class="line">    <span class="l-Scalar-Plain">eventUrl</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">peer0.org1.example.com:7053</span>
</span><span class="line">
</span><span class="line">    <span class="l-Scalar-Plain">grpcOptions</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="l-Scalar-Plain">ssl-target-name-override</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">peer0.org1.example.com</span>
</span><span class="line">      <span class="c1"># These parameters should be set in coordination with the keepalive policy on the server,</span>
</span><span class="line">      <span class="c1"># as incompatible settings can result in closing of connection.</span>
</span><span class="line">      <span class="c1"># When duration of the &#39;keep-alive-time&#39; is set to 0 or less the keep alive client parameters are disabled</span>
</span><span class="line">      <span class="l-Scalar-Plain">keep-alive-time</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0s</span>
</span><span class="line">      <span class="l-Scalar-Plain">keep-alive-timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">20s</span>
</span><span class="line">      <span class="l-Scalar-Plain">keep-alive-permit</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class="line">      <span class="l-Scalar-Plain">fail-fast</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class="line">      <span class="c1"># allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs</span>
</span><span class="line">      <span class="l-Scalar-Plain">allow-insecure</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class="line">
</span><span class="line">    <span class="l-Scalar-Plain">tlsCACerts</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="c1"># Certificate location absolute path</span>
</span><span class="line">      <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/home/ubuntu/repository/golang-repos/src/playfabric/first-network/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem</span>
</span><span class="line">
</span><span class="line">  <span class="l-Scalar-Plain">peer1.org1.example.com</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="c1"># this URL is used to send endorsement and query requests</span>
</span><span class="line">    <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">peer1.org1.example.com:7151</span>
</span><span class="line">    <span class="c1"># eventUrl is only needed when using eventhub (default is delivery service)</span>
</span><span class="line">    <span class="l-Scalar-Plain">eventUrl</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">peer1.org1.example.com:7153</span>
</span><span class="line">
</span><span class="line">    <span class="l-Scalar-Plain">grpcOptions</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="l-Scalar-Plain">ssl-target-name-override</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">peer1.org1.example.com</span>
</span><span class="line">      <span class="c1"># These parameters should be set in coordination with the keepalive policy on the server,</span>
</span><span class="line">      <span class="c1"># as incompatible settings can result in closing of connection.</span>
</span><span class="line">      <span class="c1"># When duration of the &#39;keep-alive-time&#39; is set to 0 or less the keep alive client parameters are disabled</span>
</span><span class="line">      <span class="l-Scalar-Plain">keep-alive-time</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0s</span>
</span><span class="line">      <span class="l-Scalar-Plain">keep-alive-timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">20s</span>
</span><span class="line">      <span class="l-Scalar-Plain">keep-alive-permit</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class="line">      <span class="l-Scalar-Plain">fail-fast</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class="line">      <span class="c1"># allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs</span>
</span><span class="line">      <span class="l-Scalar-Plain">allow-insecure</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class="line">
</span><span class="line">    <span class="l-Scalar-Plain">tlsCACerts</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="c1"># Certificate location absolute path</span>
</span><span class="line">      <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/home/ubuntu/repository/golang-repos/src/playfabric/first-network/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem</span>
</span><span class="line">
</span><span class="line">  <span class="l-Scalar-Plain">peer0.org2.example.com</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">peer0.org2.example.com:8051</span>
</span><span class="line">    <span class="c1"># eventUrl is only needed when using eventhub (default is delivery service)</span>
</span><span class="line">    <span class="l-Scalar-Plain">eventUrl</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">peer0.org2.example.com:8053</span>
</span><span class="line">    <span class="l-Scalar-Plain">grpcOptions</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="l-Scalar-Plain">ssl-target-name-override</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">peer0.org2.example.com</span>
</span><span class="line">      <span class="c1"># These parameters should be set in coordination with the keepalive policy on the server,</span>
</span><span class="line">      <span class="c1"># as incompatible settings can result in closing of connection.</span>
</span><span class="line">      <span class="c1"># When duration of the &#39;keep-alive-time&#39; is set to 0 or less the keep alive client parameters are disabled</span>
</span><span class="line">      <span class="l-Scalar-Plain">keep-alive-time</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0s</span>
</span><span class="line">      <span class="l-Scalar-Plain">keep-alive-timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">20s</span>
</span><span class="line">      <span class="l-Scalar-Plain">keep-alive-permit</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class="line">      <span class="l-Scalar-Plain">fail-fast</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class="line">      <span class="c1"># allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs</span>
</span><span class="line">      <span class="l-Scalar-Plain">allow-insecure</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class="line">
</span><span class="line">    <span class="l-Scalar-Plain">tlsCACerts</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/home/ubuntu/repository/golang-repos/src/playfabric/first-network/crypto-config/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="sdk">初始化sdk</h1>

<p>使用<code>github.com/hyperledger/fabric-sdk-go/pkg/core/config</code>包读取并解析配置文件,加载完成后即可初始化sdk</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">configPath</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getenv</span><span class="p">(</span><span class="s">&quot;GOPATH&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;/src/playfabric/config_e2e.yaml&quot;</span>
</span><span class="line"><span class="nx">configOpt</span> <span class="o">:=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">FromFile</span><span class="p">(</span><span class="nx">configPath</span><span class="p">)</span>
</span><span class="line"><span class="nx">sdk</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">fabsdk</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">configOpt</span><span class="p">)</span>
</span><span class="line"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">defer</span> <span class="nx">sdk</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-1">初始化通道</h1>

<p>初始化channelContext及channel,至此初始化工作完成，可以操作chain code或者查询账本。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">//prepare channel client context using client context</span>
</span><span class="line"><span class="nx">clientChannelContext</span> <span class="o">:=</span> <span class="nx">sdk</span><span class="p">.</span><span class="nx">ChannelContext</span><span class="p">(</span><span class="s">&quot;mychannel&quot;</span><span class="p">,</span> <span class="nx">fabsdk</span><span class="p">.</span><span class="nx">WithUser</span><span class="p">(</span><span class="s">&quot;User1&quot;</span><span class="p">),</span> <span class="nx">fabsdk</span><span class="p">.</span><span class="nx">WithOrg</span><span class="p">(</span><span class="nx">orgName</span><span class="p">))</span>
</span><span class="line"><span class="c1">// Channel client is used to query and execute transactions (Org1 is default org)</span>
</span><span class="line"><span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">channel</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">clientChannelContext</span><span class="p">)</span>
</span><span class="line"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Failed to create new channel client: %s&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="chaincode">操作ChainCode</h1>

<p>以官方example02的chain code（代币转移合约）为例:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// a =&gt; b转账2个代币</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">executeCC</span><span class="p">(</span><span class="nx">client</span> <span class="o">*</span><span class="nx">channel</span><span class="p">.</span><span class="nx">Client</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Execute</span><span class="p">(</span><span class="nx">channel</span><span class="p">.</span><span class="nx">Request</span><span class="p">{</span><span class="nx">ChaincodeID</span><span class="p">:</span> <span class="nx">ccID</span><span class="p">,</span> <span class="nx">Fcn</span><span class="p">:</span> <span class="s">&quot;invoke&quot;</span><span class="p">,</span> <span class="nx">Args</span><span class="p">:</span> <span class="nx">makeArgs</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;2&quot;</span><span class="p">)},</span>
</span><span class="line">		<span class="nx">channel</span><span class="p">.</span><span class="nx">WithRetry</span><span class="p">(</span><span class="nx">retry</span><span class="p">.</span><span class="nx">DefaultChannelOpts</span><span class="p">))</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;exe tx:&quot;</span><span class="p">,</span> <span class="nx">res</span><span class="p">.</span><span class="nx">TransactionID</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">err</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="c1">// 查询某个账户代币余额</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">queryCC</span><span class="p">(</span><span class="nx">client</span> <span class="o">*</span><span class="nx">channel</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">who</span> <span class="kt">string</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">response</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Query</span><span class="p">(</span><span class="nx">channel</span><span class="p">.</span><span class="nx">Request</span><span class="p">{</span><span class="nx">ChaincodeID</span><span class="p">:</span> <span class="nx">ccID</span><span class="p">,</span> <span class="nx">Fcn</span><span class="p">:</span> <span class="s">&quot;query&quot;</span><span class="p">,</span> <span class="nx">Args</span><span class="p">:</span> <span class="nx">makeArgs</span><span class="p">(</span><span class="nx">who</span><span class="p">)},</span>
</span><span class="line">		<span class="nx">channel</span><span class="p">.</span><span class="nx">WithRetry</span><span class="p">(</span><span class="nx">retry</span><span class="p">.</span><span class="nx">DefaultChannelOpts</span><span class="p">),</span>
</span><span class="line">		<span class="nx">channel</span><span class="p">.</span><span class="nx">WithTargetEndpoints</span><span class="p">(),</span>
</span><span class="line">	<span class="p">)</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;query tx:&quot;</span><span class="p">,</span> <span class="nx">response</span><span class="p">.</span><span class="nx">TransactionID</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Failed to query funds: %s&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Payload</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-2">完整示例</h1>

<p>完整示例很简单，包含代币转让及查询、底层账本查询（对应fabric1.1，BYFN示例网络）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;encoding/hex&quot;</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/hyperledger/fabric-sdk-go/pkg/client/ledger&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/hyperledger/fabric-sdk-go/third_party/github.com/hyperledger/fabric/protos/common&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/hyperledger/fabric/common/util&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/hyperledger/fabric-sdk-go/pkg/common/errors/retry&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/hyperledger/fabric-sdk-go/pkg/client/channel&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/hyperledger/fabric-sdk-go/pkg/core/config&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/hyperledger/fabric-sdk-go/pkg/fabsdk&quot;</span>
</span><span class="line">	<span class="s">&quot;os&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">const</span> <span class="p">(</span>
</span><span class="line">	<span class="nx">channelID</span>      <span class="p">=</span> <span class="s">&quot;mychannel&quot;</span>
</span><span class="line">	<span class="nx">orgName</span>        <span class="p">=</span> <span class="s">&quot;Org1&quot;</span>
</span><span class="line">	<span class="nx">orgAdmin</span>       <span class="p">=</span> <span class="s">&quot;Admin&quot;</span>
</span><span class="line">	<span class="nx">ordererOrgName</span> <span class="p">=</span> <span class="s">&quot;OrdererOrg&quot;</span>
</span><span class="line">	<span class="nx">ccID</span>           <span class="p">=</span> <span class="s">&quot;mycc&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">queryLedgerExample</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">configPath</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getenv</span><span class="p">(</span><span class="s">&quot;GOPATH&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;/src/playfabric/config_e2e.yaml&quot;</span>
</span><span class="line">	<span class="nx">configOpt</span> <span class="o">:=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">FromFile</span><span class="p">(</span><span class="nx">configPath</span><span class="p">)</span>
</span><span class="line">	<span class="nx">sdk</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">fabsdk</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">configOpt</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">defer</span> <span class="nx">sdk</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class="line">	<span class="c1">//prepare channel client context using client context</span>
</span><span class="line">	<span class="nx">clientChannelContext</span> <span class="o">:=</span> <span class="nx">sdk</span><span class="p">.</span><span class="nx">ChannelContext</span><span class="p">(</span><span class="nx">channelID</span><span class="p">,</span> <span class="nx">fabsdk</span><span class="p">.</span><span class="nx">WithUser</span><span class="p">(</span><span class="s">&quot;User1&quot;</span><span class="p">),</span> <span class="nx">fabsdk</span><span class="p">.</span><span class="nx">WithOrg</span><span class="p">(</span><span class="nx">orgName</span><span class="p">))</span>
</span><span class="line">	<span class="c1">// Channel client is used to query and execute transactions (Org1 is default org)</span>
</span><span class="line">	<span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ledger</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">clientChannelContext</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Failed to create new channel client: %s&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">ledgerInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">QueryInfo</span><span class="p">()</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">printBCI</span><span class="p">(</span><span class="nx">ledgerInfo</span><span class="p">.</span><span class="nx">BCI</span><span class="p">)</span>
</span><span class="line">	<span class="nx">block</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">QueryBlock</span><span class="p">(</span><span class="nx">ledgerInfo</span><span class="p">.</span><span class="nx">BCI</span><span class="p">.</span><span class="nx">GetHeight</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">printBlock</span><span class="p">(</span><span class="nx">block</span><span class="p">)</span>
</span><span class="line">	<span class="c1">// txid := &quot;63abb9a2ae8e7f3f689498f4ccedef6001ab7902ba9dfe69e2c270a4f7ff1d4d&quot;</span>
</span><span class="line">	<span class="c1">// tx, err := client.QueryTransaction(fab.TransactionID(txid))</span>
</span><span class="line">	<span class="c1">// if err != nil {</span>
</span><span class="line">	<span class="c1">// 	fmt.Println(err)</span>
</span><span class="line">	<span class="c1">// 	os.Exit(1)</span>
</span><span class="line">	<span class="c1">// }</span>
</span><span class="line">	<span class="c1">// fmt.Println(&quot;Tx:&quot;, txid, &quot;payload:&quot;, hex.EncodeToString(tx.GetTransactionEnvelope().GetPayload()))</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">printBCI</span><span class="p">(</span><span class="nx">blk</span> <span class="o">*</span><span class="nx">common</span><span class="p">.</span><span class="nx">BlockchainInfo</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;block height:&quot;</span><span class="p">,</span> <span class="nx">blk</span><span class="p">.</span><span class="nx">GetHeight</span><span class="p">())</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;block hash:&quot;</span><span class="p">,</span> <span class="nx">hex</span><span class="p">.</span><span class="nx">EncodeToString</span><span class="p">(</span><span class="nx">blk</span><span class="p">.</span><span class="nx">GetCurrentBlockHash</span><span class="p">()))</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;block prevhash:&quot;</span><span class="p">,</span> <span class="nx">hex</span><span class="p">.</span><span class="nx">EncodeToString</span><span class="p">(</span><span class="nx">blk</span><span class="p">.</span><span class="nx">GetPreviousBlockHash</span><span class="p">()))</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;=====================================================&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">printBlock</span><span class="p">(</span><span class="nx">blk</span> <span class="o">*</span><span class="nx">common</span><span class="p">.</span><span class="nx">Block</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;BlockNO:%v\n&quot;</span><span class="p">,</span> <span class="nx">blk</span><span class="p">.</span><span class="nx">GetHeader</span><span class="p">().</span><span class="nx">GetNumber</span><span class="p">())</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;prevhash:&quot;</span><span class="p">,</span> <span class="nx">hex</span><span class="p">.</span><span class="nx">EncodeToString</span><span class="p">(</span><span class="nx">blk</span><span class="p">.</span><span class="nx">GetHeader</span><span class="p">().</span><span class="nx">GetPreviousHash</span><span class="p">()))</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;hash:&quot;</span><span class="p">,</span> <span class="nx">hex</span><span class="p">.</span><span class="nx">EncodeToString</span><span class="p">(</span><span class="nx">util</span><span class="p">.</span><span class="nx">ComputeSHA256</span><span class="p">(</span><span class="nx">util</span><span class="p">.</span><span class="nx">ConcatenateBytes</span><span class="p">(</span><span class="nx">blk</span><span class="p">.</span><span class="nx">GetData</span><span class="p">().</span><span class="nx">GetData</span><span class="p">()</span><span class="o">...</span><span class="p">))))</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;=====================================================&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">configPath</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getenv</span><span class="p">(</span><span class="s">&quot;GOPATH&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;/src/playfabric/config_e2e.yaml&quot;</span>
</span><span class="line">	<span class="nx">configOpt</span> <span class="o">:=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">FromFile</span><span class="p">(</span><span class="nx">configPath</span><span class="p">)</span>
</span><span class="line">	<span class="nx">sdk</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">fabsdk</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">configOpt</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">defer</span> <span class="nx">sdk</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class="line">	<span class="c1">//prepare channel client context using client context</span>
</span><span class="line">	<span class="nx">clientChannelContext</span> <span class="o">:=</span> <span class="nx">sdk</span><span class="p">.</span><span class="nx">ChannelContext</span><span class="p">(</span><span class="nx">channelID</span><span class="p">,</span> <span class="nx">fabsdk</span><span class="p">.</span><span class="nx">WithUser</span><span class="p">(</span><span class="s">&quot;User1&quot;</span><span class="p">),</span> <span class="nx">fabsdk</span><span class="p">.</span><span class="nx">WithOrg</span><span class="p">(</span><span class="nx">orgName</span><span class="p">))</span>
</span><span class="line">	<span class="c1">// Channel client is used to query and execute transactions (Org1 is default org)</span>
</span><span class="line">	<span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">channel</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">clientChannelContext</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Failed to create new channel client: %s&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">queryCC</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">)))</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">queryCC</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line">	<span class="nx">executeCC</span><span class="p">(</span><span class="nx">client</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">queryCC</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">)))</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">queryCC</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">)))</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">executeCC</span><span class="p">(</span><span class="nx">client</span> <span class="o">*</span><span class="nx">channel</span><span class="p">.</span><span class="nx">Client</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Execute</span><span class="p">(</span><span class="nx">channel</span><span class="p">.</span><span class="nx">Request</span><span class="p">{</span><span class="nx">ChaincodeID</span><span class="p">:</span> <span class="nx">ccID</span><span class="p">,</span> <span class="nx">Fcn</span><span class="p">:</span> <span class="s">&quot;invoke&quot;</span><span class="p">,</span> <span class="nx">Args</span><span class="p">:</span> <span class="nx">makeArgs</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;2&quot;</span><span class="p">)},</span>
</span><span class="line">		<span class="nx">channel</span><span class="p">.</span><span class="nx">WithRetry</span><span class="p">(</span><span class="nx">retry</span><span class="p">.</span><span class="nx">DefaultChannelOpts</span><span class="p">))</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;exe tx:&quot;</span><span class="p">,</span> <span class="nx">res</span><span class="p">.</span><span class="nx">TransactionID</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">err</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">queryCC</span><span class="p">(</span><span class="nx">client</span> <span class="o">*</span><span class="nx">channel</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">who</span> <span class="kt">string</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">response</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Query</span><span class="p">(</span><span class="nx">channel</span><span class="p">.</span><span class="nx">Request</span><span class="p">{</span><span class="nx">ChaincodeID</span><span class="p">:</span> <span class="nx">ccID</span><span class="p">,</span> <span class="nx">Fcn</span><span class="p">:</span> <span class="s">&quot;query&quot;</span><span class="p">,</span> <span class="nx">Args</span><span class="p">:</span> <span class="nx">makeArgs</span><span class="p">(</span><span class="nx">who</span><span class="p">)},</span>
</span><span class="line">		<span class="nx">channel</span><span class="p">.</span><span class="nx">WithRetry</span><span class="p">(</span><span class="nx">retry</span><span class="p">.</span><span class="nx">DefaultChannelOpts</span><span class="p">),</span>
</span><span class="line">		<span class="nx">channel</span><span class="p">.</span><span class="nx">WithTargetEndpoints</span><span class="p">(),</span>
</span><span class="line">	<span class="p">)</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;query tx:&quot;</span><span class="p">,</span> <span class="nx">response</span><span class="p">.</span><span class="nx">TransactionID</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Failed to query funds: %s&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Payload</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">makeArgs</span><span class="p">(</span><span class="nx">args</span> <span class="o">...</span><span class="kt">string</span><span class="p">)</span> <span class="p">[][]</span><span class="kt">byte</span> <span class="p">{</span>
</span><span class="line">	<span class="kd">var</span> <span class="nx">ccargs</span> <span class="p">[][]</span><span class="kt">byte</span>
</span><span class="line">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">arg</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">args</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">ccargs</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">ccargs</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">arg</span><span class="p">))</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">ccargs</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-3">其他官方示例</h1>

<ul>
  <li><a href="https://github.com/hyperledger/fabric-sdk-go/tree/master/test/integration/e2e/end_to_end.go">E2E Test</a>: Basic example that uses SDK to query and execute transaction</li>
  <li><a href="https://github.com/hyperledger/fabric-sdk-go/tree/master/test/integration/pkg/client/ledger/ledger_queries_test.go">Ledger Query Test</a>: Basic example that uses SDK to query a channel’s underlying ledger</li>
  <li><a href="https://github.com/hyperledger/fabric-sdk-go/tree/master/test/integration/e2e/orgs/multiple_orgs_test.go">Multi Org Test</a>: An example that has multiple organisations involved in transaction</li>
  <li><a href="https://github.com/hyperledger/fabric-sdk-go/tree/master/test/integration/pkg/fabsdk/provider/sdk_provider_test.go">Dynamic Endorser Selection</a>: An example that uses dynamic endorser selection (based on chaincode policy)</li>
  <li><a href="https://github.com/hyperledger/fabric-sdk-go/tree/master/test/integration/e2e/pkcs11/e2e_test.go">E2E PKCS11 Test</a>: E2E Test using a PKCS11 crypto suite and configuration</li>
  <li><a href="https://github.com/securekey/fabric-examples/tree/master/fabric-cli/">CLI</a>: An example CLI for Fabric built with the Go SDK.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hyperledger-fabric分布式部署]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/07/23/hyperledger-fabricfen-bu-shi-bu-shu/"/>
    <updated>2018-07-23T02:48:30+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/07/23/hyperledger-fabricfen-bu-shi-bu-shu</id>
    <content type="html"><![CDATA[<p>fabric官方文档给出了怎样搭建第一个联盟网络(<a href="https://hyperledger-fabric.readthedocs.io/en/latest/build_network.html">Build your first network</a>),然而这个文档实际只给出了单机部署多个docker实例的例子,如果要在真实分布式环境部署，还是得费不少力气.</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">基本思路</a></li>
  <li><a href="#section-1">搭建流程</a>    <ul>
      <li><a href="#section-2">创建必要配置文件</a></li>
      <li><a href="#swarm">创建swarm集群</a></li>
      <li><a href="#section-3">创建集群网络</a></li>
      <li><a href="#fabric">创建fabric控制脚本</a></li>
      <li><a href="#section-4">启动网络</a>        <ul>
          <li><a href="#orderer">启动orderer</a></li>
          <li><a href="#peer">启动peer</a></li>
          <li><a href="#fabric-1">配置fabric网络</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#section-5">后记</a></li>
</ul>

<h1 id="section">基本思路</h1>

<blockquote>
  <p>题外话:老实说，fabric这个部署文档写得并不漂亮。因为他引入了过多的先决知识，譬如docker,docker-compose等多个docker组件，虽然使用docker大大提高了部署成功率，然而这样做对于fabric入门来说却走偏了，容易让初学者产生一种疑惑: 好似很容易就”得到”了一个完整的fabric网络，然而实际上，好像对于fabric是怎么运行起来的仍然一无所知。如果想要了解怎么样一步步将fabric搭建起来的话，可以仔细看看<code>fabric-samples/first-network</code>文件夹的脚本及compose配置文件，或者参考<code>[区块链原理、设计、与应用] 作者:杨保华,陈昌</code>这本书第9章,相信这样的搭建教程才能让人有直观的了解。所以，本文也不必一步步拆分搭建步骤，本文的目的是为了想读者展示如果利用现有的BYFN文档及脚本搭建真正分布式网络。</p>
</blockquote>

<p>所有的宿主机环境以及fabric二进制程序的安装还是按照Build Your First Network文档所说进行，在完成后，用docker swarm将各个宿主机上的docker实例连接起来。</p>

<h1 id="section-1">搭建流程</h1>

<p>假设我们有5台宿主机</p>

<ul>
  <li>orderer(cli) 我们将在orderer宿主机上启动客户端cli配置网络，实际上这个cli可以在任意机器上启动</li>
  <li>peer0.org1</li>
  <li>peer1.org1</li>
  <li>peer0.org2</li>
  <li>peer1.org2</li>
</ul>

<p>在5台宿主机上同构部署fabric环境，具体操作参考<a href="https://hyperledger-fabric.readthedocs.io/en/latest/build_network.html">Build your first network</a></p>

<h2 id="section-2">创建必要配置文件</h2>

<p>在任意一台机器上生成配置文件:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd ./fabric-samples/first-network
</span><span class="line">./byfn.sh generate</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后将生成的配置同步到所有其他几台宿主机的相同目录,同步的文件包含</p>

<ul>
  <li>channel-artifacts</li>
  <li>crypto-config</li>
</ul>

<h2 id="swarm">创建swarm集群</h2>

<p>假设我们将cli作为集群manager，则在cli上创建swarm集群:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">docker swarm init</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>查看集群join token:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">docker swarm join-token manager</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出可能类似这样:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">docker swarm join — token SWMTKN-1–3as8cvf3yxk8e7zj98954jhjza3w75mngmxh543llgpo0c8k7z-61zyibtaqjjimkqj8p6t9lwgu 172.16.0.153:2377</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在其他所有机器上执行这条输出的命令，完成后说明所以机器处于同一集群.</p>

<h2 id="section-3">创建集群网络</h2>

<p>在cli宿主机执行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">docker network create --attachable --driver overlay byfn</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="fabric">创建fabric控制脚本</h2>

<p>现在，所有宿主均处于swarm集群，然而docker-compose并不直接使用swarm,所以我这里不再使用docker-compose，原因有两个: 1.docker-compose主要用于多个服务打包部署，然而我们在每个宿主机仅部署单个docker，不必非要使用compose 2.docker-compose还需要单独配置才能运行在swarm模式下。 所以，我将docker启动命令独立出来，写入一个shell脚本，将这个shell脚本放入所有宿主机<code>./fabric-samples/first-network/</code>下命令为<code>control</code>文件.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line"><span class="nv">NETWORK</span><span class="o">=</span>byfn    <span class="c"># 网络名称必须和创建的集群网络名称一致</span>
</span><span class="line"><span class="nv">IMAGETAG</span><span class="o">=</span>latest
</span><span class="line">
</span><span class="line"><span class="k">function </span>startOrderer<span class="o">()</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">    docker run --rm -d --network<span class="o">=</span><span class="k">${</span><span class="nv">NETWORK</span><span class="k">}</span> --name orderer.example.com -p 7050:7050 <span class="se">\</span>
</span><span class="line">    -e <span class="nv">ORDERER_GENERAL_LOGLEVEL</span><span class="o">=</span>INFO <span class="se">\</span>
</span><span class="line">    -e <span class="nv">ORDERER_GENERAL_LISTENADDRESS</span><span class="o">=</span>0.0.0.0 <span class="se">\</span>
</span><span class="line">    -e <span class="nv">ORDERER_GENERAL_GENESISMETHOD</span><span class="o">=</span>file <span class="se">\</span>
</span><span class="line">    -e <span class="nv">ORDERER_GENERAL_GENESISFILE</span><span class="o">=</span>/var/hyperledger/orderer/orderer.genesis.block <span class="se">\</span>
</span><span class="line">    -e <span class="nv">ORDERER_GENERAL_LOCALMSPID</span><span class="o">=</span>OrdererMSP <span class="se">\</span>
</span><span class="line">    -e <span class="nv">ORDERER_GENERAL_LOCALMSPDIR</span><span class="o">=</span>/var/hyperledger/orderer/msp <span class="se">\</span>
</span><span class="line">    -e <span class="nv">ORDERER_GENERAL_TLS_ENABLED</span><span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
</span><span class="line">    -e <span class="nv">ORDERER_GENERAL_TLS_PRIVATEKEY</span><span class="o">=</span>/var/hyperledger/orderer/tls/server.key <span class="se">\</span>
</span><span class="line">    -e <span class="nv">ORDERER_GENERAL_TLS_CERTIFICATE</span><span class="o">=</span>/var/hyperledger/orderer/tls/server.crt <span class="se">\</span>
</span><span class="line">    -e <span class="nv">ORDERER_GENERAL_TLS_ROOTCAS</span><span class="o">=[</span>/var/hyperledger/orderer/tls/ca.crt<span class="o">]</span> <span class="se">\</span>
</span><span class="line">    --mount <span class="nb">type</span><span class="o">=</span><span class="nb">bind</span>,source<span class="o">=</span>/root/fabric/fabric-samples/first-network/channel-artifacts/genesis.block,target<span class="o">=</span>/var/hyperledger/orderer/orderer.genesis.block    <span class="se">\</span>
</span><span class="line">    --mount <span class="nb">type</span><span class="o">=</span><span class="nb">bind</span>,source<span class="o">=</span>/root/fabric/fabric-samples/first-network/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp,target<span class="o">=</span>/var/hyperledger/orderer/msp    <span class="se">\</span>
</span><span class="line">    --mount <span class="nb">type</span><span class="o">=</span><span class="nb">bind</span>,source<span class="o">=</span>/root/fabric/fabric-samples/first-network/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/,target<span class="o">=</span>/var/hyperledger/orderer/tls    <span class="se">\</span>
</span><span class="line">    hyperledger/fabric-orderer:<span class="k">${</span><span class="nv">IMAGETAG</span><span class="k">}</span> orderer
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c"># startPeer 0 1 means start peer 0 of org 1</span>
</span><span class="line"><span class="k">function </span>startPeer<span class="o">()</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">	<span class="nv">PEER</span><span class="o">=</span><span class="nv">$1</span>
</span><span class="line">	<span class="nv">ORG</span><span class="o">=</span><span class="nv">$2</span>
</span><span class="line">	<span class="nv">PEER2</span><span class="o">=</span>1
</span><span class="line">	<span class="o">[</span> <span class="nv">$PEER</span> -eq 1 <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nv">PEER2</span><span class="o">=</span>0
</span><span class="line">	<span class="nv">BOOT</span><span class="o">=</span>peer<span class="k">${</span><span class="nv">PEER2</span><span class="k">}</span>.org<span class="k">${</span><span class="nv">ORG</span><span class="k">}</span>.example.com:7051
</span><span class="line">    docker run --rm -d  --network<span class="o">=</span><span class="k">${</span><span class="nv">NETWORK</span><span class="k">}</span> --name peer<span class="k">${</span><span class="nv">PEER</span><span class="k">}</span>.org<span class="k">${</span><span class="nv">ORG</span><span class="k">}</span>.example.com -p 7051:7051 -p 7053:7053 <span class="se">\</span>
</span><span class="line">    -e <span class="nv">CORE_PEER_ID</span><span class="o">=</span>peer<span class="k">${</span><span class="nv">PEER</span><span class="k">}</span>.org<span class="k">${</span><span class="nv">ORG</span><span class="k">}</span>.example.com <span class="se">\</span>
</span><span class="line">    -e <span class="nv">CORE_PEER_ADDRESS</span><span class="o">=</span>peer<span class="k">${</span><span class="nv">PEER</span><span class="k">}</span>.org<span class="k">${</span><span class="nv">ORG</span><span class="k">}</span>.example.com:7051 <span class="se">\</span>
</span><span class="line">    -e <span class="nv">CORE_PEER_GOSSIP_BOOTSTRAP</span><span class="o">=</span><span class="k">${</span><span class="nv">BOOT</span><span class="k">}</span> <span class="se">\</span>
</span><span class="line">    -e <span class="nv">CORE_PEER_GOSSIP_EXTERNALENDPOINT</span><span class="o">=</span>peer<span class="k">${</span><span class="nv">PEER</span><span class="k">}</span>.org<span class="k">${</span><span class="nv">ORG</span><span class="k">}</span>.example.com:7051 <span class="se">\</span>
</span><span class="line">    -e <span class="nv">CORE_PEER_LOCALMSPID</span><span class="o">=</span>Org<span class="k">${</span><span class="nv">ORG</span><span class="k">}</span>MSP <span class="se">\</span>
</span><span class="line">    -e <span class="nv">CORE_VM_ENDPOINT</span><span class="o">=</span>unix:///host/var/run/docker.sock <span class="se">\</span>
</span><span class="line">    -e <span class="nv">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE</span><span class="o">=</span><span class="k">${</span><span class="nv">NETWORK</span><span class="k">}</span> <span class="se">\</span>
</span><span class="line">    -e <span class="nv">CORE_LOGGING_LEVEL</span><span class="o">=</span>INFO <span class="se">\</span>
</span><span class="line">    -e <span class="nv">CORE_PEER_TLS_ENABLED</span><span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
</span><span class="line">    -e <span class="nv">CORE_PEER_GOSSIP_USELEADERELECTION</span><span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
</span><span class="line">    -e <span class="nv">CORE_PEER_GOSSIP_ORGLEADER</span><span class="o">=</span><span class="nb">false</span> <span class="se">\</span>
</span><span class="line">    -e <span class="nv">CORE_PEER_PROFILE_ENABLED</span><span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
</span><span class="line">    -e <span class="nv">CORE_PEER_TLS_CERT_FILE</span><span class="o">=</span>/etc/hyperledger/fabric/tls/server.crt <span class="se">\</span>
</span><span class="line">    -e <span class="nv">CORE_PEER_TLS_KEY_FILE</span><span class="o">=</span>/etc/hyperledger/fabric/tls/server.key <span class="se">\</span>
</span><span class="line">    -e <span class="nv">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="o">=</span>/etc/hyperledger/fabric/tls/ca.crt <span class="se">\</span>
</span><span class="line">    --mount <span class="nb">type</span><span class="o">=</span><span class="nb">bind</span>,source<span class="o">=</span>/var/run/,target<span class="o">=</span>/host/var/run/ <span class="se">\</span>
</span><span class="line">    --mount <span class="nb">type</span><span class="o">=</span><span class="nb">bind</span>,source<span class="o">=</span>/root/fabric/fabric-samples/first-network/crypto-config/peerOrganizations/org<span class="k">${</span><span class="nv">ORG</span><span class="k">}</span>.example.com/peers/peer<span class="k">${</span><span class="nv">PEER</span><span class="k">}</span>.org<span class="k">${</span><span class="nv">ORG</span><span class="k">}</span>.example.com/msp,target<span class="o">=</span>/etc/hyperledger/fabric/msp <span class="se">\</span>
</span><span class="line">    --mount <span class="nb">type</span><span class="o">=</span><span class="nb">bind</span>,source<span class="o">=</span>/root/fabric/fabric-samples/first-network/crypto-config/peerOrganizations/org<span class="k">${</span><span class="nv">ORG</span><span class="k">}</span>.example.com/peers/peer<span class="k">${</span><span class="nv">PEER</span><span class="k">}</span>.org<span class="k">${</span><span class="nv">ORG</span><span class="k">}</span>.example.com/tls,target<span class="o">=</span>/etc/hyperledger/fabric/tls <span class="se">\</span>
</span><span class="line">    hyperledger/fabric-peer:<span class="k">${</span><span class="nv">IMAGETAG</span><span class="k">}</span>  peer node start
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c"># scripts/script.sh $CHANNEL_NAME $CLI_DELAY $LANGUAGE $CLI_TIMEOUT</span>
</span><span class="line"><span class="k">function </span>startCli<span class="o">()</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">    docker run --rm -it --network<span class="o">=</span><span class="k">${</span><span class="nv">NETWORK</span><span class="k">}</span> --name cli <span class="se">\</span>
</span><span class="line">    -e  <span class="nv">CHANNEL_NAME</span><span class="o">=</span><span class="s2">&quot;mychannel&quot;</span> <span class="se">\</span>
</span><span class="line">    -e  <span class="nv">CLI_DELAY</span><span class="o">=</span>3 <span class="se">\</span>
</span><span class="line">    -e  <span class="nv">LANGUAGE</span><span class="o">=</span>golang <span class="se">\</span>
</span><span class="line">    -e  <span class="nv">CLI_TIMEOUT</span><span class="o">=</span>10 <span class="se">\</span>
</span><span class="line">    -e  <span class="nv">GOPATH</span><span class="o">=</span>/opt/gopath <span class="se">\</span>
</span><span class="line">    -e  <span class="nv">CORE_VM_ENDPOINT</span><span class="o">=</span>unix:///host/var/run/docker.sock <span class="se">\</span>
</span><span class="line">    -e  <span class="nv">CORE_LOGGING_LEVEL</span><span class="o">=</span>INFO <span class="se">\</span>
</span><span class="line">    -e  <span class="nv">CORE_PEER_ID</span><span class="o">=</span>cli <span class="se">\</span>
</span><span class="line">    -e  <span class="nv">CORE_PEER_ADDRESS</span><span class="o">=</span>peer0.org1.example.com:7051 <span class="se">\</span>
</span><span class="line">    -e  <span class="nv">CORE_PEER_LOCALMSPID</span><span class="o">=</span>Org1MSP <span class="se">\</span>
</span><span class="line">    -e  <span class="nv">CORE_PEER_TLS_ENABLED</span><span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
</span><span class="line">    -e  <span class="nv">CORE_PEER_TLS_CERT_FILE</span><span class="o">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt <span class="se">\</span>
</span><span class="line">    -e  <span class="nv">CORE_PEER_TLS_KEY_FILE</span><span class="o">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key <span class="se">\</span>
</span><span class="line">    -e  <span class="nv">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="o">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt <span class="se">\</span>
</span><span class="line">    -e  <span class="nv">CORE_PEER_MSPCONFIGPATH</span><span class="o">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp <span class="se">\</span>
</span><span class="line">    --mount <span class="nb">type</span><span class="o">=</span><span class="nb">bind</span>,source<span class="o">=</span>/var/run/,target<span class="o">=</span>/host/var/run/ <span class="se">\</span>
</span><span class="line">    --mount <span class="nb">type</span><span class="o">=</span><span class="nb">bind</span>,source<span class="o">=</span>/root/fabric/fabric-samples/chaincode/,target<span class="o">=</span>/opt/gopath/src/github.com/chaincode <span class="se">\</span>
</span><span class="line">    --mount <span class="nb">type</span><span class="o">=</span><span class="nb">bind</span>,source<span class="o">=</span>/root/fabric/fabric-samples/first-network/crypto-config,target<span class="o">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ <span class="se">\</span>
</span><span class="line">    --mount <span class="nb">type</span><span class="o">=</span><span class="nb">bind</span>,source<span class="o">=</span>/root/fabric/fabric-samples/first-network/scripts,target<span class="o">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/ <span class="se">\</span>
</span><span class="line">    --mount <span class="nb">type</span><span class="o">=</span><span class="nb">bind</span>,source<span class="o">=</span>/root/fabric/fabric-samples/first-network/channel-artifacts,target<span class="o">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts <span class="se">\</span>
</span><span class="line">    --workdir /opt/gopath/src/github.com/hyperledger/fabric/peer <span class="se">\</span>
</span><span class="line">    hyperledger/fabric-tools:<span class="k">${</span><span class="nv">IMAGETAG</span><span class="k">}</span> /bin/bash
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">case </span>X<span class="nv">$1</span> in
</span><span class="line">    Xorderer<span class="o">)</span>
</span><span class="line">        startOrderer
</span><span class="line">        ;;
</span><span class="line">    Xpeer<span class="o">)</span>
</span><span class="line">        startPeer <span class="nv">$2</span> <span class="nv">$3</span>
</span><span class="line">        ;;
</span><span class="line">    Xcli<span class="o">)</span>
</span><span class="line">        startCli
</span><span class="line">        ;;
</span><span class="line">    X*<span class="o">)</span>
</span><span class="line">        <span class="nb">echo</span> <span class="s2">&quot;Usage: $0 orderer|peer|cli&quot;</span>
</span><span class="line">        <span class="nb">exit</span> -1
</span><span class="line">        ;;
</span><span class="line"><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-4">启动网络</h2>

<h3 id="orderer">启动orderer</h3>

<p>在orderer宿主机执行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> ./fabric-samples/first-network
</span><span class="line">./contrl orderer
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="peer">启动peer</h3>

<p>在peer0.org1宿主机执行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> ./fabric-samples/first-network
</span><span class="line">./contrl peer 0 1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在peer1.org1宿主机执行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> ./fabric-samples/first-network
</span><span class="line">./contrl peer 1 1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同理启动org2的peer</p>

<h3 id="fabric-1">配置fabric网络</h3>

<p>在任意宿主机,这里我们就用orderer宿主机:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> ./fabric-samples/first-network
</span><span class="line">./control cli
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>执行这个命令后进入客户端配置实例,直接运行配置脚本即可:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">scripts/script.sh <span class="nv">$CHANNEL_NAME</span> <span class="nv">$CLI_DELAY</span> <span class="nv">$LANGUAGE</span> <span class="nv">$CLI_TIMEOUT</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>出现的配置及测试输出应该和单机部署一样,至此部署完成。</p>

<h1 id="section-5">后记</h1>

<p>按这个步骤，应该是可以将这个分布式fabric搭建起来的，但是其他优化还需要自行完成，比如为了测试方便，我并没有将区块链数据挂载出来，所以docker重启后区块数据就没有了，生产环境得自己将数据卷挂载上去；还有，为了权限隔离，一般也不会将整个crypto-config文件夹分发给各个联盟节点，而是需要什么给什么，保持目录结构一致即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用call实现合约任意调用]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/07/02/li-yong-callshi-xian-he-yue-ren-yi-diao-yong/"/>
    <updated>2018-07-02T05:50:25+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/07/02/li-yong-callshi-xian-he-yue-ren-yi-diao-yong</id>
    <content type="html"><![CDATA[<p>call()是一个底层的接口，用来向一个合约发送消息，也就是说如果你想实现自己的消息传递，可以使用这个函数。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">需求场景</a>    <ul>
      <li><a href="#section-1">业务需求</a></li>
      <li><a href="#section-2">明确需求</a></li>
    </ul>
  </li>
  <li><a href="#section-3">实现关键点</a>    <ul>
      <li><a href="#section-4">调用任意合约</a></li>
      <li><a href="#section-5">权限控制</a></li>
    </ul>
  </li>
  <li><a href="#section-6">实现参考</a>    <ul>
      <li><a href="#section-7">热钱包工厂</a></li>
      <li><a href="#section-8">热钱包合约</a></li>
    </ul>
  </li>
  <li><a href="#section-9">后记</a></li>
</ul>

<h1 id="section">需求场景</h1>

<p>“合约动态调用”的需求场景是什么呢,答案是”热钱包”。为什么是热钱包呢,我们可以从最终需求出发一步步来推导:</p>

<h2 id="section-1">业务需求</h2>

<p>首先,假设一个业务需求，我们现在要做一个ERC721的热钱包，用户可以托管他全部的数字资产给项目方，项目方代表用户对其资产进行任意操作，这样我们可以向用户屏蔽以太坊的细节，大大提升用户体验，只有当用户想要提现资产的时候，才把资产归还到用户的冷钱包地址中去。</p>

<h2 id="section-2">明确需求</h2>

<p>初看这个需求很简单，我们可以为每个用户生成一个私钥从而建立对应地址。每次需要对资产进行操作的时候，读取这个私钥进行链上交互就行了。</p>

<p>好像很完美，但细想下来，在真正生产环境中实践却会有诸多问题: 首先带来的就是管理问题，众多的私钥不容许有一丝数据的丢失损坏，否则就需要承担用户资产的遗失风险; 其次是泄露的风险，私钥的众多更加大了泄露的风险系数，一旦有任何一个私钥泄露，项目方基本上是属于束手无策的，以太坊上可没有账户封禁这一说。</p>

<p>那么，怎么解决这个问题呢？我这里提供的一个解决方案就是利用合约。</p>

<p>我们为每个用户创建的热钱包并不是一个普通钱包地址，而是一个合约。所有的用户的热钱包都统一受控于项目方的管理账户地址,只有管理账户有权操作合约，如果有任何问题，我们只需要使用管理账户进行维护操作就行，不需要更改其他东西。 但利用合约来做热钱包又带来另一个问题，合约能调用的方法在上链之后就无法更改了或新增了，如果我们要对接的某个721藏品后续支持了某个新方法，那么我们的热钱包岂不是不能完成这个调用了？所以，如果使用合约做热钱包，还必须能够实现这个钱包合约能够动态调用其他合约。</p>

<p>归纳一下，这个721热钱包细化下来的技术需求有这样几点需要满足:</p>

<ol>
  <li>管理收敛，所有热钱包管理最好收敛到一个管理账户下</li>
  <li>管理账户能更改</li>
  <li>如果是合约热钱包,这个钱包必须能适配各类标准非标准藏品合约的调用</li>
</ol>

<p>这里对第3点补充说明一下，可能有的读者会疑惑，既然erc721都是标准化的协议，为什么还需要适配各种非标接口呢？原因之一是我们业务需求里已经说了，要能对用户资产进行任意操作，不仅仅限制于基本721的几个API。此外，ERC721的藏品通常都不会只包含721协议里几个基础接口，各个项目方会根据自己的业务研发出诸如繁殖、战斗等等资产操作，一个好的721钱包最好是能适配这些功能。还有，即便是ERC721协议本身，也可能出现变动，比如日前刚确认的721协议的最终版和以CryptoKitty所代表的beta版，协议本身就差别不小。</p>

<h1 id="section-3">实现关键点</h1>

<h2 id="section-4">调用任意合约</h2>

<p>这是本文要讲述的关键点。</p>

<p>其实要实现这个功能,使用<code>call</code>方法就可以了。call调用失败会返回一个调用成功与否的布尔值，需要检查一下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">contract</span> <span class="nx">DynamicCaller</span><span class="p">{</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">dyn_call</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_constract</span><span class="p">,</span> <span class="nx">bytes</span> <span class="nx">_data</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">payable</span><span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">_constract</span><span class="p">.</span><span class="nx">call</span><span class="p">.</span><span class="nx">value</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">value</span><span class="p">)(</span><span class="nx">_data</span><span class="p">)){</span>
</span><span class="line">            <span class="nx">revert</span><span class="p">();</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果<code>DynamicCaller</code>就是我们的热钱包合约，那么这个<code>dyn_call</code>方法就可以实现任意调用，注意这个动态方法最终调用的合约和对应方法都是由参数传递进来；</p>

<p>在ropsten部署这个合约,合约地址是<code>0x5ec567cf2137da526945f4820d0c0621ddcd02ce</code>。现在我们有一份任意合约<code>AnyContract</code>(这里先不以ERC721合约举例，为了阐明任意调用这个点，使用了一个简单合约示例)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">contract</span> <span class="nx">AnyContract</span><span class="p">{</span>
</span><span class="line">    <span class="nx">mapping</span><span class="p">(</span><span class="nx">address</span> <span class="o">=&gt;</span> <span class="nx">uint256</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">numbers</span><span class="p">;</span>
</span><span class="line">    <span class="nx">mapping</span><span class="p">(</span><span class="nx">address</span> <span class="o">=&gt;</span> <span class="nx">string</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">texts</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">uint256</span> <span class="nx">_a</span><span class="p">,</span><span class="nx">uint256</span> <span class="nx">_b</span><span class="p">)</span> <span class="kr">public</span><span class="p">{</span>
</span><span class="line">        <span class="nx">numbers</span><span class="p">[</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">]</span> <span class="o">=</span><span class="nx">_a</span><span class="o">+</span><span class="nx">_b</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">write</span><span class="p">(</span><span class="nx">string</span> <span class="nx">_text</span><span class="p">)</span> <span class="kr">public</span><span class="p">{</span>
</span><span class="line">        <span class="nx">texts</span><span class="p">[</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_text</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">batchWrite</span><span class="p">(</span><span class="nx">uint256</span> <span class="nx">_a</span><span class="p">,</span><span class="nx">uint256</span> <span class="nx">_b</span><span class="p">,</span><span class="nx">string</span> <span class="nx">_text</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">payable</span><span class="p">{</span>
</span><span class="line">        <span class="nx">numbers</span><span class="p">[</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">]</span> <span class="o">=</span><span class="nx">_a</span><span class="o">+</span><span class="nx">_b</span><span class="p">;</span>
</span><span class="line">        <span class="nx">texts</span><span class="p">[</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_text</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">getBalance</span><span class="p">()</span> <span class="kr">public</span> <span class="nx">view</span> <span class="nx">returns</span><span class="p">(</span><span class="nx">uint256</span><span class="p">){</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">address</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">balance</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在我们怎么进行调用呢？我们可以使用<code>github.com/qjpcpu/ethereum/contracts</code>提供的参数打包方法<code>PackArguments</code>生成<code>dyn_call</code>要的数据，比如我们要从<code>DynamicCaller</code>调用<code>AnyContract</code>的add方法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">anyABI</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">contracts</span><span class="p">.</span><span class="nx">ParseABI</span><span class="p">(</span><span class="s">&quot;[{\&quot;constant\&quot;:true,\&quot;inputs\&quot;:[{\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;address\&quot;}],\&quot;name\&quot;:\&quot;texts\&quot;,\&quot;outputs\&quot;:[{\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;string\&quot;}],\&quot;payable\&quot;:false,\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;},{\&quot;constant\&quot;:true,\&quot;inputs\&quot;:[],\&quot;name\&quot;:\&quot;getBalance\&quot;,\&quot;outputs\&quot;:[{\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;}],\&quot;payable\&quot;:false,\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;},{\&quot;constant\&quot;:false,\&quot;inputs\&quot;:[{\&quot;name\&quot;:\&quot;_a\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;},{\&quot;name\&quot;:\&quot;_b\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;}],\&quot;name\&quot;:\&quot;add\&quot;,\&quot;outputs\&quot;:[],\&quot;payable\&quot;:false,\&quot;stateMutability\&quot;:\&quot;nonpayable\&quot;,\&quot;type\&quot;:\&quot;function\&quot;},{\&quot;constant\&quot;:false,\&quot;inputs\&quot;:[{\&quot;name\&quot;:\&quot;_a\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;},{\&quot;name\&quot;:\&quot;_b\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;},{\&quot;name\&quot;:\&quot;_text\&quot;,\&quot;type\&quot;:\&quot;string\&quot;}],\&quot;name\&quot;:\&quot;batchWrite\&quot;,\&quot;outputs\&quot;:[],\&quot;payable\&quot;:true,\&quot;stateMutability\&quot;:\&quot;payable\&quot;,\&quot;type\&quot;:\&quot;function\&quot;},{\&quot;constant\&quot;:true,\&quot;inputs\&quot;:[{\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;address\&quot;}],\&quot;name\&quot;:\&quot;numbers\&quot;,\&quot;outputs\&quot;:[{\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;}],\&quot;payable\&quot;:false,\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;},{\&quot;constant\&quot;:false,\&quot;inputs\&quot;:[{\&quot;name\&quot;:\&quot;_text\&quot;,\&quot;type\&quot;:\&quot;string\&quot;}],\&quot;name\&quot;:\&quot;write\&quot;,\&quot;outputs\&quot;:[],\&quot;payable\&quot;:false,\&quot;stateMutability\&quot;:\&quot;nonpayable\&quot;,\&quot;type\&quot;:\&quot;function\&quot;}]&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">contracts</span><span class="p">.</span><span class="nx">PackArguments</span><span class="p">(</span><span class="nx">anyABI</span><span class="p">,</span> <span class="s">&quot;add&quot;</span><span class="p">,</span> <span class="nx">big</span><span class="p">.</span><span class="nx">NewInt</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">big</span><span class="p">.</span><span class="nx">NewInt</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class="line"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">err</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">builder</span> <span class="o">:=</span> <span class="nx">contracts</span><span class="p">.</span><span class="nx">NewTxOptsBuilderFromPK</span><span class="p">(</span><span class="nx">pk</span><span class="p">)</span>
</span><span class="line"><span class="nx">dc</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">NewDynamicCaller</span><span class="p">(</span><span class="nx">common</span><span class="p">.</span><span class="nx">HexToAddress</span><span class="p">(</span><span class="nx">DynamicCallerAddres</span><span class="p">),</span> <span class="nx">conn</span><span class="p">)</span>
</span><span class="line"><span class="nx">tx</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">dc</span><span class="p">.</span><span class="nx">DynCall</span><span class="p">(</span><span class="nx">builder</span><span class="p">.</span><span class="nx">Get</span><span class="p">(),</span> <span class="nx">common</span><span class="p">.</span><span class="nx">HexToAddress</span><span class="p">(</span><span class="s">&quot;0x2f44fc640F9708FD969620466F9eddD21859e8E9&quot;</span><span class="p">),</span> <span class="nx">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>完整代码示例参考<a href="https://github.com/qjpcpu/dynamic-caller">dynamic-caller</a></p>

<h2 id="section-5">权限控制</h2>

<p>对于热钱包创建合约,需要能更改管理账户,并且<code>dyn_call</code>这个函数只有管理账户能够调用,这个继承<code>Ownable</code>合约就可能办到了。</p>

<p>对于热钱包合约本身,除了提现操作，所有方法调用必须来自管理合约的管理员。</p>

<h1 id="section-6">实现参考</h1>

<h2 id="section-7">热钱包工厂</h2>

<p>热钱包工厂唯一作用就是创建热并记录用户的热钱包，唯一需要注意的就是控制权的管理</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">contract</span> <span class="nx">Ownable</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">address</span> <span class="kr">public</span> <span class="nx">owner</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="nx">constructor</span><span class="p">()</span> <span class="kr">public</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">owner</span> <span class="o">=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">modifier</span> <span class="nx">onlyOwner</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span> <span class="o">==</span> <span class="nx">owner</span><span class="p">);</span>
</span><span class="line">        <span class="nx">_</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">transferOwnership</span><span class="p">(</span><span class="nx">address</span> <span class="nx">newOwner</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">onlyOwner</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="nx">newOwner</span> <span class="o">!=</span> <span class="nx">address</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">owner</span> <span class="o">=</span> <span class="nx">newOwner</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">getOwner</span><span class="p">()</span> <span class="kr">public</span> <span class="nx">view</span> <span class="nx">returns</span><span class="p">(</span><span class="nx">address</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">owner</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">contract</span> <span class="nx">WalletFactory</span> <span class="nx">is</span> <span class="nx">Ownable</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 记录用户热钱包地址</span>
</span><span class="line">    <span class="nx">mapping</span><span class="p">(</span><span class="nx">address</span> <span class="o">=&gt;</span> <span class="nx">address</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">hotwallets</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 仅管理员owner可以创建热钱包</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">createWallet</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_owner</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">onlyOwner</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// 每个用户仅有一个热钱包</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">hotwallets</span><span class="p">[</span><span class="nx">_owner</span><span class="p">]</span> <span class="o">==</span> <span class="nx">address</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class="line">        <span class="nx">HotWallet</span> <span class="nx">w</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HotWallet</span><span class="p">(</span><span class="nx">address</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="nx">_owner</span><span class="p">);</span>
</span><span class="line">        <span class="nx">hotwallets</span><span class="p">[</span><span class="nx">_owner</span><span class="p">]</span> <span class="o">=</span> <span class="nx">address</span><span class="p">(</span><span class="nx">w</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">isWalletFactory</span><span class="p">()</span> <span class="nx">external</span> <span class="nx">pure</span> <span class="nx">returns</span><span class="p">(</span><span class="nx">bool</span><span class="p">){</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其实，在实际应用中,这里还潜藏了一个问题: 比如通常的产品逻辑会在用户注册完成时就生成热钱包备用,但这个以太坊交易被打包最快可能也要15秒左右，如果我们要在用户注册完成就显示用户热钱包地址好像是不可能的。实际上呢？交易打包确认确实要很长时间,但是我们却可以提前获知热钱包的地址:</p>

<p>以太坊中合约地址的生成规则是这样的:根据<code>(msg.sender + nonce)</code>二元组的hash来生成合约地址的,这个生成算法很简单,有兴趣可以查阅源码<code>crypto</code>包。</p>

<p>举个例子,加入<code>WalletFactory</code>这个合约地址是<code>0x5ec567cf2137da526945f4820d0c0621ddcd02ce</code>,那么第一次调用<code>createWallet</code>时nonce肯定是1，则对应生成的<code>HotWallet</code>地址可以这样算出: <code>addr := crypto.CreateAddress(common.HexToAddress("0x5ec567cf2137da526945f4820d0c0621ddcd02ce"), 1) // 热钱包地址是:0xE139cd3E5FcC127A54B0fF8687c703265E282842</code></p>

<h2 id="section-8">热钱包合约</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">contract</span> <span class="nx">HotWallet</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">address</span> <span class="kr">public</span> <span class="nx">owner</span><span class="p">;</span>
</span><span class="line">    <span class="nx">WalletFactory</span> <span class="kr">public</span> <span class="nx">factory</span><span class="p">;</span>
</span><span class="line">    <span class="c1">// 这里的owner是热钱包所属用户</span>
</span><span class="line">    <span class="nx">modifier</span> <span class="nx">onlyOwner</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span> <span class="o">==</span> <span class="nx">owner</span><span class="p">);</span>
</span><span class="line">        <span class="nx">_</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">// 保证动态方法的调用者一定是管理员</span>
</span><span class="line">    <span class="nx">modifier</span> <span class="nx">onlyAdmin</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span> <span class="o">==</span> <span class="nx">factory</span><span class="p">.</span><span class="nx">getOwner</span><span class="p">());</span>
</span><span class="line">        <span class="nx">_</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">constructor</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_admin</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">_owner</span><span class="p">)</span> <span class="kr">public</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">_admin</span> <span class="o">!=</span> <span class="nx">address</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">_owner</span> <span class="o">!=</span> <span class="nx">address</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class="line">        <span class="nx">factory</span> <span class="o">=</span> <span class="nx">WalletFactory</span><span class="p">(</span><span class="nx">_admin</span><span class="p">);</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">factory</span><span class="p">.</span><span class="nx">isWalletFactory</span><span class="p">());</span>
</span><span class="line">        <span class="nx">owner</span> <span class="o">=</span> <span class="nx">_owner</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">isHotWallet</span><span class="p">()</span> <span class="nx">external</span> <span class="nx">pure</span> <span class="nx">returns</span><span class="p">(</span><span class="nx">bool</span><span class="p">){</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// the msg.sender must be factory.owner</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">dyn_call</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_constract</span><span class="p">,</span> <span class="nx">bytes</span> <span class="nx">_data</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">payable</span> <span class="nx">onlyAdmin</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">_constract</span><span class="p">.</span><span class="nx">call</span><span class="p">.</span><span class="nx">value</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">value</span><span class="p">)(</span><span class="nx">_data</span><span class="p">)){</span>
</span><span class="line">            <span class="nx">revert</span><span class="p">();</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 能提现eth</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">withdraw</span><span class="p">()</span> <span class="nx">external</span> <span class="nx">onlyOwner</span><span class="p">{</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">owner</span> <span class="o">!=</span> <span class="nx">address</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class="line">        <span class="nx">owner</span><span class="p">.</span><span class="nx">transfer</span><span class="p">(</span><span class="nx">address</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">balance</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 很多场景下都需要能接受eth转账</span>
</span><span class="line">    <span class="kd">function</span><span class="p">()</span> <span class="kr">public</span> <span class="nx">payable</span><span class="p">{}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// other functions</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="https://github.com/qjpcpu/dynamic-caller/blob/master/wallets.sol">完整合约代码</a></p>

<h1 id="section-9">后记</h1>

<p>要完成个业务特定热钱包,可以在这个基础上修改HotWallet代码即可,比如数字资产的提现等等,但要特别注意: <code>call</code>方法是一个非常底层方法，为了合约安全，该方法不应该接受直接来自用户的数据。</p>

<p>此外,我观察到一些交易所给用户分配的以太热钱包地址也是一份用户独立的合约而不是普通地址,所以我猜想他们可能也是为了业务灵活性和管理性才这样做的，不过是不是使用call来实现，就不得而知了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样实现以太坊交易可靠提交]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/06/14/zen-yang-shi-xian-yi-tai-fang-jiao-yi-ke-kao-ti-jiao/"/>
    <updated>2018-06-14T06:54:01+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/06/14/zen-yang-shi-xian-yi-tai-fang-jiao-yi-ke-kao-ti-jiao</id>
    <content type="html"><![CDATA[<p>在真实环境下的以太坊Dapp开发,是一定涉及到链上链下逻辑的交互的。那么开发者可能会遇到这样一种场景,当用户使用metamask签名交易并提交后,Dapp的中心服务端需要拿到这个交易ID,并跟踪这个交易的执行,甚至会根据这笔交易去触发后端逻辑(当然使用event可以一定程度避开这个问题,但这种回避式的解决方案不在此讨论)，但现实情况往往是令人痛苦的，因为很可能会因为种种原因，我们无法取到metamask的回调，导致开发者因此”丢失”掉这笔交易。</p>

<p>那么，如果我们要直面这个问题，要怎么样实现交易可靠提交呢？</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">提炼问题</a>    <ul>
      <li><a href="#metamask">1. 最显而易见,metamask能够提供可靠回调</a></li>
      <li><a href="#metamask-1">2. metamask将交易签名和发送拆分开来</a></li>
      <li><a href="#section-1">3. 弄脏手自己做</a></li>
    </ul>
  </li>
  <li><a href="#section-2">关键实现</a>    <ul>
      <li><a href="#section-3">1.前端获取裸交易数据</a></li>
      <li><a href="#hash">2.后端计算裸交易hash</a></li>
      <li><a href="#metamask-2">3.前端唤起metamask签名</a></li>
      <li><a href="#section-4">4.后端发送交易</a></li>
    </ul>
  </li>
  <li><a href="#section-5">反思</a>    <ul>
      <li><a href="#section-6">1.安全性</a></li>
      <li><a href="#section-7">2.用户体验</a></li>
      <li><a href="#section-8">3.时效性</a></li>
    </ul>
  </li>
</ul>

<h1 id="section">提炼问题</h1>

<p>首先，我再次描述下问题的发生场景: 在metamask环境下，我们需要拿到用户提交的交易来触发后续中心化逻辑，但是在现实情况下很可能拿不到这个回调交易ID.</p>

<p>看起来，问题的核心并不是交易可靠提交，而是可靠地拿到交易提交的回调。那么解决问题，就有两种思路:</p>

<h5 id="metamask">1. 最显而易见,metamask能够提供可靠回调</h5>

<p>这个解决方案最无痛，然而完全依赖于metamask团队的开发意愿。所幸的是metamask团队在接收开发者的反馈后，有意愿往这方面努力。但开发时间不确定，甚至于我认为，在浏览器环境下，可能无法完美解决。所以短期内，这个方向是无法在生产环境实施的。</p>

<h5 id="metamask-1">2. metamask将交易签名和发送拆分开来</h5>

<p>如果没做过以太坊Dapp开发，可能不清楚metamask提交交易其实是串行执行了两步操作： 一.先对交易裸数据签名，得到签名后的交易,二.将签名后的交易提交到以太坊。</p>

<p>实际上，在metamask完成第一步签名后，这个交易就已经是一笔以太坊合法交易了，任何一个以太坊节点都可以拿着这笔交易进行全网广播，要求矿工打包。试想，如果metamsk将这两个操作拆分开来，那么开发者就可以要求metamask先对裸交易签名，然后客户端将这笔交易发送给服务端，让服务端向以太坊节点提交交易，这样应用开发者就能够使用各种传统手段保证交易提交，并且能够实施后续各种中心化逻辑了。</p>

<p>看似很美好，然而metamask目前不提供这样的接口。虽然web3js已经有这样的接口，但metamask并没有对接。不过前景还是可以期望的,metamask团队表示已经会进行操作拆分，将来可以这样做。详细可以参考<a href="https://github.com/MetaMask/metamask-extension/issues/3475">Issue#3475</a>.</p>

<h5 id="section-1">3. 弄脏手自己做</h5>

<p>既然靠不了别人，就自己来解决。这第3种解决方案，其实和第二种思路是一样的，只是达到这个目的有些纠结。</p>

<p>首先，metamsk支持web3js一个比较原始的签名方法<code>web3.eth.sign</code>,他是对一段数据进行以太坊签名，看起来可以满足我们的需求，不过为了使用这个方法我们还需要做很多工作。</p>

<p>该方法输入是交易的hash，但web3并没有提供从裸交易数据计算hash的方法，所以我选择让前端提交裸交易数据到服务端，服务端计算出hash值返还给前端;</p>

<p>前端拿到这个交易hash后，就可以调用<code>web3.eth.sign</code>唤起metamask签名，然后将签名字段和裸交易数据再次发送给服务端，服务端负责验证签名并且将交易和签名拼装好后发送到以太坊。</p>

<h1 id="section-2">关键实现</h1>

<h2 id="section-3">1.前端获取裸交易数据</h2>

<p>前端直面用户，可以拿到裸交易全部数据</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">    from: "0x...",
</span><span class="line">    to: "0x....",
</span><span class="line">    value: "0x...",
</span><span class="line">    gas: 10000,
</span><span class="line">    gasPrice: 21000,
</span><span class="line">    data: "0x...",
</span><span class="line">    nonce: "0x..."
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="hash">2.后端计算裸交易hash</h2>

<p>后端拿到前端的裸交易json，可以很容易计算出交易hash，下面给出计算的golang代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">tx</span> <span class="o">:=</span> <span class="nx">types</span><span class="p">.</span><span class="nx">NewTransaction</span><span class="p">(</span><span class="o">...</span><span class="p">.)</span>
</span><span class="line"><span class="nx">hash</span> <span class="o">:=</span> <span class="nx">types</span><span class="p">.</span><span class="nx">HomesteadSigner</span><span class="p">{}.</span><span class="nx">Hash</span><span class="p">(</span><span class="nx">tx</span><span class="p">).</span><span class="nx">Hex</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后将计算出的hash返回给前端</p>

<h2 id="metamask-2">3.前端唤起metamask签名</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 第一个参数是返回的交易hash</span>
</span><span class="line"><span class="c1">// 第二个参数是用户地址</span>
</span><span class="line"><span class="nx">web3</span><span class="p">.</span><span class="nx">eth</span><span class="p">.</span><span class="nx">sign</span><span class="p">(</span><span class="s2">&quot;0x...&quot;</span><span class="p">,</span> <span class="s2">&quot;0x...&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里将唤起metamask.</p>

<h2 id="section-4">4.后端发送交易</h2>

<p>前端将裸交易数据和第3步得到的签名发送给后端，后端验证签名并发送到以太坊,关键go代码如下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">sign</span> <span class="o">:=</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Hex2Bytes</span><span class="p">(</span><span class="nx">txSign</span><span class="p">)</span>
</span><span class="line"><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">sign</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">65</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;bad sign&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">if</span> <span class="nx">sign</span><span class="p">[</span><span class="mi">64</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">27</span> <span class="o">&amp;&amp;</span> <span class="nx">sign</span><span class="p">[</span><span class="mi">64</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">28</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;invalid Ethereum signature (V is not 27 or 28)&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">sign</span><span class="p">[</span><span class="mi">64</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">27</span>
</span><span class="line"><span class="nx">signer</span> <span class="o">:=</span> <span class="nx">types</span><span class="p">.</span><span class="nx">HomesteadSigner</span><span class="p">{}</span>
</span><span class="line"><span class="nx">signedTx</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">WithSignature</span><span class="p">(</span><span class="nx">signer</span><span class="p">,</span> <span class="nx">sign</span><span class="p">)</span>
</span><span class="line"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">ethConn</span><span class="p">.</span><span class="nx">SendTransaction</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Background</span><span class="p">(),</span> <span class="nx">signedTx</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-5">反思</h1>

<p>看起来，上面的技术方案好像完美解决了问题，实则不然，这只是当前环境下的较优方案罢了，并且这个方案还是存在诸多问题:</p>

<h2 id="section-6">1.安全性</h2>

<p>这是最大的问题,因为调用<code>web3.eth.sign</code>进行数据签名时，metamask无法展示签名的数据，所以用户根本不了解他到底是在对什么授权签名。这是非常可怕的，这可能被骇客利用，让用户对一笔转出自己账户所有余额的交易进行签名，导致资金盗窃。</p>

<h2 id="section-7">2.用户体验</h2>

<p>还是因为签名的方法，metamask在签名时会展示一段红色警告，导致用户体验下降。</p>

<h2 id="section-8">3.时效性</h2>

<p>因为这个安全原因，metamask团队将来也许会放弃对这个方法的支持，不过我倒是觉得，保留对这个方法的支持，将签名数据做详细展示，让开发者自己做安全性的权衡。</p>

<p>最后聊一点感想吧，目前区块链上簇拥了太多投机者，真正致力于深耕技术的人不多，metamask团队算一个，区块链是个有意思的技术，因为它的技术背后，隐含了人类社会化的意识，它目前的基础组件都还不够完善，需要我们热爱技术的所有人，去投入，去发展。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那些以太坊DApp服务端开发期望已久的轮子]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/05/16/na-xie-yi-tai-fang-dappfu-wu-duan-kai-fa-qi-wang-yi-jiu-de-lun-zi/"/>
    <updated>2018-05-16T09:20:33+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/05/16/na-xie-yi-tai-fang-dappfu-wu-duan-kai-fa-qi-wang-yi-jiu-de-lun-zi</id>
    <content type="html"><![CDATA[<p>以太坊虽说是一个去中心化的东西,但DApp却并非是完全去中心化的应用,其主要原因不外乎是以太坊的处理能力和资源有限,无法承载一个完整应用全部的逻辑。所以，目前市面上所有的DApp应用都是需要中心化服务解释的。那么，本文就是列举一些可能会用到的轮子,帮助快速构建应用。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#nonce">nonce管理</a></li>
  <li><a href="#section">交易重发</a></li>
  <li><a href="#section-1">交易备注</a>    <ul>
      <li><a href="#eth">裸交易(仅发送eth的交易)</a></li>
      <li><a href="#section-2">合约调用交易</a></li>
    </ul>
  </li>
  <li><a href="#section-3">事件扫描器</a></li>
  <li><a href="#section-4">登录</a></li>
  <li><a href="#section-5">其他</a></li>
  <li><a href="#qjpcpuethereumhttpsgithubcomqjpcpuethereum"><a href="https://github.com/qjpcpu/ethereum">代码地址qjpcpu/ethereum</a></a></li>
</ul>

<h1 id="nonce">nonce管理</h1>

<p>重要的放在前面,nonce管理应该是所有以太坊开发者遇到的第一个问题。nonce类似于账户的自增主键,必须连续提交,如果每次都使用<code>pending nonce</code>自动提交交易,就会造成之前交易被丢弃,除非你想要替换原交易，否则这可能不是我们期望的结果。</p>

<p><code>github.com/qjpcpu/ethereum/ethnonce</code>包将nonce存储在redis中,使用类似事务的方式申请、使用nonce。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">TestWrap</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">mgr</span> <span class="o">:=</span> <span class="nx">_testinit</span><span class="p">()</span>
</span><span class="line">	<span class="nx">addr</span> <span class="o">:=</span> <span class="nx">common</span><span class="p">.</span><span class="nx">HexToAddress</span><span class="p">(</span><span class="s">`0xe35f3e2a93322b61e5d8931f806ff38f4a4f4d88`</span><span class="p">)</span>
</span><span class="line">    <span class="nx">mgr</span><span class="p">.</span><span class="nx">SyncNonce</span><span class="p">(</span><span class="nx">addr</span><span class="p">)</span>  <span class="c1">// 注意,该方法仅在程序第一次运行做初始化时需要调用,或者nonce发生不一致时调用</span>
</span><span class="line">	<span class="nx">tx</span><span class="p">,</span><span class="nx">err</span><span class="o">:=</span><span class="nx">mgr</span><span class="p">.</span><span class="nx">GiveNonceForTx</span><span class="p">(</span><span class="nx">addr</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">nonce</span> <span class="kt">uint64</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// 向以太坊提交交易</span>
</span><span class="line">        <span class="c1">// 使用nonce manager注入的nonce进行交易提交</span>
</span><span class="line">		<span class="k">return</span> <span class="nb">new</span><span class="p">(</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">),</span> <span class="kc">nil</span>
</span><span class="line">	<span class="p">})</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span><span class="o">!=</span><span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">t</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">    <span class="nx">t</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="nx">tx</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>P.S. 该包基于redis lua脚本,实现nonce的原子读写,可适用于多协程并行操作。</p>

<h1 id="section">交易重发</h1>

<p>对于要做以太坊交易的可靠提交,我相信交易重发绝对是DApp后端程序员的痛点需求。通常,在以太坊拥堵的时候,常常提交的交易会发生”丢失”,以太坊浏览器上搜索这笔交易会被提示: <code>Sorry, we are unable to locate this Transaction Hash</code>。发生这种情况主要有两个可能: 1.用户给的gas太低,导致交易长时间挂在pending队列不能打包进区块 2. 网络环境恶劣,导致投放的节点丢弃交易(网络环境恶劣只是诱因,其真实的丢包原因是及其复杂的)</p>

<p><code>github.com/qjpcpu/ethereum/contracts</code>提交交易重发的函数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">ResendTransaction</span><span class="p">(</span><span class="nx">conn</span> <span class="o">*</span><span class="nx">ethclient</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">tx</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">,</span> <span class="nx">signerFunc</span> <span class="nx">bind</span><span class="p">.</span><span class="nx">SignerFn</span><span class="p">,</span> <span class="nx">nonce</span> <span class="kt">uint64</span><span class="p">,</span> <span class="nx">gasPrice</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>conn, eth client</li>
  <li>tx, 需要重发的交易</li>
  <li>signerFunc, 交易签名函数</li>
  <li>nonce, 可选参数,为0表示将交易重发为全新的交易,非0表示替换之前未被打包的交易</li>
  <li>gasPrice,可选参数,为nil表示自动选择合适的price</li>
</ul>

<p>返回值为重发的新交易数据结构。</p>

<p>通常的使用场景是:</p>

<ol>
  <li>发送交易,并将返回的交易tx marshal为json存储到数据库</li>
  <li>定时检查交易是否成功打包</li>
  <li>超过超时时间后,调用ResendTransaction重发交易，再进入第1步循环</li>
</ol>

<p>结合第一步<code>ethnonce</code>包管理nonce,可以比较完美实现以太坊可靠交易提交。</p>

<p>简单的代码示例:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">signerFunc</span> <span class="o">:=</span> <span class="nx">contracts</span><span class="p">.</span><span class="nx">SignerFuncOf</span><span class="p">(</span><span class="nx">keyJson</span><span class="p">,</span> <span class="nx">keyPwd</span><span class="p">)</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">oldTx</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span> <span class="p">=</span> <span class="nx">getLastTxFromDB</span><span class="p">()</span>
</span><span class="line"><span class="nx">contracts</span><span class="p">.</span><span class="nx">ResendTransaction</span><span class="p">(</span><span class="nx">conn</span><span class="p">,</span> <span class="nx">oldTx</span><span class="p">,</span> <span class="nx">signerFunc</span><span class="p">,</span> <span class="nx">oldTx</span><span class="p">.</span><span class="nx">Nonce</span><span class="p">(),</span> <span class="kc">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-1">交易备注</h1>

<p>交易备注其实就是在交易<code>data</code>字段附加一些额外的数据,前端时间有人收费在以太坊永久”刻字”其实就是干的这个事情。那么，抛开这个噱头不说,正常开发中怎么会有这个需求呢?</p>

<p>比如,我们要基于以太坊做一个区块链商品抢购,前端在提交了交易后拿到<code>metafox</code>回调后,才能通知到后端是抢购的哪个商品,但是很多时候<code>metafox</code>的回调并不可靠,那其实就可以使用交易备注,等后端收到这个交易的event log后,再去查询交易的备注信息就知道了是哪个商品。</p>

<p>相关辅助方法还是在<code>github.com/qjpcpu/ethereum/contracts</code>包中,目前交易备注有两种场景</p>

<h2 id="eth">裸交易(仅发送eth的交易)</h2>

<p>有两个生成交易数据的辅助方法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// 备注字符串</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">PackString</span><span class="p">(</span><span class="nx">str</span> <span class="kt">string</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span>
</span><span class="line"><span class="c1">// 备注一个数字</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">PackNum</span><span class="p">(</span><span class="nx">num</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">合约调用交易</h2>

<p>也有两个辅助方法,他们均是将备注信息放置在合约方法参数最后:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">PackArgumentsWithNumber</span><span class="p">(</span><span class="nx">_abi</span> <span class="nx">abi</span><span class="p">.</span><span class="nx">ABI</span><span class="p">,</span> <span class="nx">method</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">params</span> <span class="o">...</span><span class="kd">interface</span><span class="p">{})</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">PackArgumentsWithString</span><span class="p">(</span><span class="nx">_abi</span> <span class="nx">abi</span><span class="p">.</span><span class="nx">ABI</span><span class="p">,</span> <span class="nx">method</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">params</span> <span class="o">...</span><span class="kd">interface</span><span class="p">{})</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后调用发送<code>raw</code>交易的方法提交:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">SendRawTransaction</span><span class="p">(</span><span class="nx">conn</span> <span class="o">*</span><span class="nx">ethclient</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">from</span><span class="p">,</span> <span class="nx">to</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Address</span><span class="p">,</span> <span class="nx">value</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">,</span> <span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">signerFunc</span> <span class="nx">bind</span><span class="p">.</span><span class="nx">SignerFn</span><span class="p">,</span> <span class="nx">nonce</span> <span class="kt">uint64</span><span class="p">,</span> <span class="nx">gasPrice</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">,</span> <span class="nx">gasLimit</span> <span class="kt">uint64</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>简单的代码示例(不可直接运行):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">mgr</span> <span class="o">:=</span> <span class="nx">GetNonceManager</span><span class="p">()</span>
</span><span class="line"><span class="nx">_abi</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">contracts</span><span class="p">.</span><span class="nx">ParseABI</span><span class="p">(</span><span class="nx">myABI</span><span class="p">)</span>
</span><span class="line"><span class="nx">signer</span> <span class="o">:=</span> <span class="nx">contracts</span><span class="p">.</span><span class="nx">SignerFuncOf</span><span class="p">(</span><span class="nx">keyjson</span><span class="p">,</span> <span class="nx">keypwd</span><span class="p">)</span>
</span><span class="line"><span class="nx">tx</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mgr</span><span class="p">.</span><span class="nx">GiveNonceForTx</span><span class="p">(</span><span class="nx">from_addr</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">nonce</span> <span class="kt">uint64</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 该合约方法function_name只有一个number参数,后面额外的参数2是备注</span>
</span><span class="line">	<span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">contracts</span><span class="p">.</span><span class="nx">PackArgumentsWithNumber</span><span class="p">(</span><span class="nx">_abi</span><span class="p">,</span> <span class="s">&quot;function_name&quot;</span><span class="p">,</span> <span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">contracts</span><span class="p">.</span><span class="nx">SendRawTransaction</span><span class="p">(</span><span class="nx">conf</span><span class="p">.</span><span class="nx">EthConn</span><span class="p">(),</span> <span class="nx">from_addr</span><span class="p">,</span> <span class="nx">getContractAddress</span><span class="p">(),</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">signer</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-3">事件扫描器</h1>

<p>扫描某个/某些事件并更改中心化服务器数据状态,这个需求很常见,直接上代码.</p>

<p>举个例子,扫描 <code>CryptoKitties</code> 的怀孕事件:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/common&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/ethclient&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/qjpcpu/ethereum/events&quot;</span>
</span><span class="line">	<span class="s">&quot;os&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ethclient</span><span class="p">.</span><span class="nx">Dial</span><span class="p">(</span><span class="s">&quot;https://api.myetherapi.com/eth&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">dataCh</span><span class="p">,</span> <span class="nx">errCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">events</span><span class="p">.</span><span class="nx">Event</span><span class="p">,</span> <span class="mi">1000</span><span class="p">),</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">error</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="nx">b</span> <span class="o">:=</span> <span class="nx">events</span><span class="p">.</span><span class="nx">NewScanBuilder</span><span class="p">()</span>
</span><span class="line">	<span class="nx">rep</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">SetClient</span><span class="p">(</span><span class="nx">conn</span><span class="p">).</span>
</span><span class="line">		<span class="nx">SetContract</span><span class="p">(</span><span class="nx">common</span><span class="p">.</span><span class="nx">HexToAddress</span><span class="p">(</span><span class="s">`0x06012c8cf97BEaD5deAe237070F9587f8E7A266d`</span><span class="p">),</span><span class="nx">abi_text</span><span class="p">,</span><span class="s">&quot;Pregnant&quot;</span><span class="p">).</span>
</span><span class="line">		<span class="nx">SetFrom</span><span class="p">(</span><span class="mi">5547829</span><span class="p">).</span>
</span><span class="line">		<span class="nx">SetGracefullExit</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span>
</span><span class="line">		<span class="nx">BuildAndRun</span><span class="p">(</span><span class="nx">dataCh</span><span class="p">,</span> <span class="nx">errCh</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">done</span> <span class="o">:=</span> <span class="nx">rep</span><span class="p">.</span><span class="nx">WaitChan</span><span class="p">()</span>
</span><span class="line">		<span class="k">for</span> <span class="p">{</span>
</span><span class="line">			<span class="k">select</span> <span class="p">{</span>
</span><span class="line">			<span class="k">case</span> <span class="nx">data</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">dataCh</span><span class="p">:</span>
</span><span class="line">				<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s\n&quot;</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">String</span><span class="p">())</span>
</span><span class="line">			<span class="k">case</span> <span class="nx">err1</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">errCh</span><span class="p">:</span>
</span><span class="line">				<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;error:&quot;</span><span class="p">,</span> <span class="nx">err1</span><span class="p">)</span>
</span><span class="line">			<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">done</span><span class="p">:</span>
</span><span class="line">				<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;EXIT&quot;</span><span class="p">)</span>
</span><span class="line">				<span class="k">return</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">}()</span>
</span><span class="line">
</span><span class="line">	<span class="nx">rep</span><span class="p">.</span><span class="nx">Wait</span><span class="p">()</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-4">登录</h1>

<p>以太坊登录其实就是签名和验签.</p>

<p>代码位于包<code>github.com/qjpcpu/ethereum/key</code></p>

<p>示例:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">key</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">    <span class="nx">crand</span> <span class="s">&quot;crypto/rand&quot;</span>
</span><span class="line">    <span class="s">&quot;github.com/ethereum/go-ethereum/common/hexutil&quot;</span>
</span><span class="line">    <span class="s">&quot;github.com/ethereum/go-ethereum/crypto&quot;</span>
</span><span class="line">    <span class="s">&quot;testing&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">TestSignature</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">pk</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">newKey</span><span class="p">(</span><span class="nx">crand</span><span class="p">.</span><span class="nx">Reader</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">t</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="nx">msg</span> <span class="o">:=</span> <span class="s">&quot;JasonGeek&quot;</span>
</span><span class="line">    <span class="nx">sign</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Sign</span><span class="p">(</span><span class="nx">pk</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">msg</span><span class="p">))</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">t</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="nx">from</span> <span class="o">:=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">PubkeyToAddress</span><span class="p">(</span><span class="nx">pk</span><span class="p">.</span><span class="nx">PublicKey</span><span class="p">).</span><span class="nx">Hex</span><span class="p">()</span>
</span><span class="line">    <span class="nx">signHex</span> <span class="o">:=</span> <span class="nx">hexutil</span><span class="p">.</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">sign</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">VerifySign</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">signHex</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">msg</span><span class="p">));</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">t</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-5">其他</h1>

<p>其他辅助小方法,可能痛点不是那么强烈,我简单列举,有需要的自行参看代码 <a href="https://github.com/qjpcpu/ethereum">qjpcpu/ethereum</a></p>

<ul>
  <li>获取合约From自段 <code>func (tx *TransactionWithExtra) From() common.Address</code></li>
  <li>合约是否执行成功 <code>func (tx *TransactionWithExtra) IsSuccess(conn *ethclient.Client) (bool, error)</code></li>
  <li>某个地址是否是个合约 <code>func IsContract(conn *ethclient.Client, hexAddr string) bool</code></li>
  <li>交易构造builder <code>func NewTxOptsBuilder(keyJson, keyPwd string) *TxOptsBuilder</code></li>
  <li>等待交易完成 <code>func WaitTxDone(conn *ethclient.Client, txhash common.Hash, timeout ...time.Duration) error</code></li>
  <li>根据keystore私钥生成签名方法 <code>func SignerFuncOf(keyJson, keyPasswd string) bind.SignerFn</code></li>
  <li>直接发送ETH <code>func TransferETH(conn *ethclient.Client, from, to common.Address, amount *big.Int, signerFunc bind.SignerFn, nonce uint64, gasPrice *big.Int, notes ...string) (*types.Transaction, error)</code></li>
  <li>私钥导入导出 <code>key</code>包</li>
</ul>

<h1 id="qjpcpuethereumhttpsgithubcomqjpcpuethereum"><a href="https://github.com/qjpcpu/ethereum">代码地址qjpcpu/ethereum</a></h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ethereum-solidity的坑]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/04/02/ethereum-solidityde-keng/"/>
    <updated>2018-04-02T02:54:43+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/04/02/ethereum-solidityde-keng</id>
    <content type="html"><![CDATA[<p>以太坊合约的坑.</p>

<!-- more -->

<h1 id="section">被意外更改的合约变量</h1>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">pragma</span> <span class="nx">solidity</span> <span class="o">^</span><span class="mf">0.4</span><span class="p">.</span><span class="mi">11</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">contract</span> <span class="nx">Test</span><span class="p">{</span>
</span><span class="line">    <span class="nx">address</span> <span class="kr">public</span> <span class="nx">a</span><span class="p">;</span>
</span><span class="line">    <span class="nx">address</span> <span class="kr">public</span> <span class="nx">b</span><span class="p">;</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">Test</span><span class="p">()</span> <span class="kr">public</span><span class="p">{</span>
</span><span class="line">        <span class="nx">a</span><span class="o">=</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">;</span>
</span><span class="line">        <span class="nx">b</span><span class="o">=</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">;</span>
</span><span class="line">        <span class="nx">uint256</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="nx">g</span><span class="o">=</span><span class="p">[</span><span class="nx">uint256</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="nx">uint256</span><span class="p">(</span><span class="mi">0</span><span class="p">)];</span>
</span><span class="line">        <span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">uint256</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果<code>msg.sender</code>是 <code>0xca35b7d915458ef540ade6068dfe2f44e8fa733c</code>,那么想象中的合约变量<code>a,b</code>都应该是这个值,但是结果却是:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// a: address: 0xffffffffffffffffffffffffffffffffffffffff</span>
</span><span class="line"><span class="c1">// b: address: 0xca35b7d915458ef540ade6068dfe2f44e8fa733c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看出<code>a</code>变成了 <code>g[0]</code>的值。 这是因为solidity对于这个未初始化的数组时,把它指向了合约变量地址,所以修改 <code>g[0]</code>就相当于修改了 <code>a</code>,读者可以试试修改 <code>g[1]</code>实际是修改了 <code>b</code>.</p>

<p>解决办法是将数组改成<code>memory</code>,防止他变成<code>storage</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">uint256</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="nx">memory</span> <span class="nx">g</span> <span class="o">=</span> <span class="p">[</span><span class="nx">uint256</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="nx">uint256</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[以太坊合约开发中那些危险的坑]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/03/18/yi-tai-fang-he-yue-kai-fa-zhong-na-xie-wei-xian-de-keng/"/>
    <updated>2018-03-18T08:29:02+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/03/18/yi-tai-fang-he-yue-kai-fa-zhong-na-xie-wei-xian-de-keng</id>
    <content type="html"><![CDATA[<p>列举合约开发中那些危险的操作.</p>

<!-- more -->

<p><a href="https://github.com/ConsenSys/smart-contract-best-practices/blob/master/README-zh.md">以太坊智能合约 —— 最佳安全开发指南</a></p>

<p><a href="http://me.tryblockchain.org/blockchain-solidity-fallback.html">Solidity的fallback函数</a></p>

<p><a href="http://me.tryblockchain.org/Solidity-call-callcode-delegatecall.html">深入浅出Solidity call相关函数</a></p>

<p><a href="http://me.tryblockchain.org/blockchain-solidity-send-ether-bestpractice.html">Solidity发送ether最佳实践</a></p>

<p><a href="http://solidity.readthedocs.io/en/v0.4.21/contracts.html#fallback-function">Fallback Function</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[以太坊实战-交易爬虫]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/03/13/yi-tai-fang-shi-zhan-jiao-yi-pa-chong/"/>
    <updated>2018-03-13T11:46:40+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/03/13/yi-tai-fang-shi-zhan-jiao-yi-pa-chong</id>
    <content type="html"><![CDATA[<p>本文从一个区块链跑路项目说起,怎么通过大家可见的区块数据进行自己的业务分析,目的主要是讲述中间涉及到的技术,如果你能从中获益,并因此构建自己更加强大的分析工具,我深感荣幸.</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">防止区块链项目跑路</a></li>
  <li><a href="#section-1">服务端控制智能合约</a></li>
  <li><a href="#erc20">ERC20关键参数获取</a>    <ul>
      <li><a href="#section-2">某个地址是否合约</a></li>
      <li><a href="#from">From</a></li>
      <li><a href="#to">To</a>        <ul>
          <li><a href="#section-3">函数签名</a></li>
          <li><a href="#section-4">参数编码</a></li>
          <li><a href="#transfer">transfer</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#put-it-together">Put it together</a></li>
  <li><a href="#section-5">参考文献</a></li>
</ul>

<h1 id="section">防止区块链项目跑路</h1>

<p>首先要说说这个争议颇多的英雄链: 做为首个全球加密数字货币区块链博彩平台的建设者，HeroChain致力打造数字货币一站式博彩娱乐互动平台，是实现在区块链上加密数字货币的娱乐和产品集合服务平台。HeroChain团队目标是落地与合作全球85个博彩合法的国家和地区，或博彩业合法牌照或与当地博彩业紧密合作，未来使得HEC能与线下赌场打通，使得HEC拥有更大的交易场景。团队认为：HEC的应用覆盖和使用领域确实足以支撑这个巨量加密数字货币的流通市值。由于没有税收，使得HeroChain团队每年可以拿出收益的30%，在进行市场回购HEC， 让参与者获利。关键这个博彩业市场不像之前其它项目的预测的预期市场，是庞大而真实的网络娱乐刚需市场。</p>

<p>从这段描述来看，英雄链所针对的应用场景和未来目标都是非常有说服力的。然而目前出现有用户和项目团队因为破发矛盾激化,进而对该项目本身也产生各种质疑。媒体也对其核心人员的资金流向进行了分析:</p>

<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/JFoxiaVESXq0R8KvzDkcyicO28Yyo94Ngzl8JoqNXcPxFBgibetLQ74ENNDiaFY1S3gQokIAddFrxI9snaPooY4dWA/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="balance flow" /></p>

<p>从结果来看，项目募集的资金都最终流向了某一个地址，确实存在发行者卷款跑路的可能(详细分析可以查阅参考文献两篇文章)。</p>

<p>我这里只是以这件事件做一个引子，由于区块链的数据对大众完全透明公开,所有人的资金流向其实都摆在眼前，只是说现在链上基础工具不完善，普通人很难去分析这庞大而精细的交易记录。如果我们做一个交易爬虫，能够轻松分析任意账户的资金流动，那么不论是对普通小白验证项目的可信度还是金融从业者分析深度数据，都是很有价值的。</p>

<p>下面，我就介绍下，如果要产生ERC20某个代币的资金流向图(类似下图)，要注意哪些技术关键点。</p>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/JFoxiaVESXq0R8KvzDkcyicO28Yyo94NgzgqH5wW9TgI5o4zoBZB3owgvXNbykPhEkEep9zHS5rjqm0GD12BfgRg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="hec" /></p>

<h1 id="section-1">服务端控制智能合约</h1>

<p>要和智能合约进行交互,显然需要完成通用编程语言对合约的控制,这里我们以<code>golang</code>代码为例,展示怎么从<code>golang</code>中调用合约函数。<a href="https://github.com/ethereum/go-ethereum">官方go-ethereum</a>已经提供了这样的工具<code>abigen</code>,直接从合约<code>sol</code>代码生成go代码:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><code>abigen</code></td>
      <td>Source code generator to convert Ethereum contract definitions into easy to use, compile-time type-safe Go packages. It operates on plain <a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI">Ethereum contract ABIs</a> with expanded functionality if the contract bytecode is also available. However it also accepts Solidity source files, making development much more streamlined. Please see our <a href="https://github.com/ethereum/go-ethereum/wiki/Native-DApps:-Go-bindings-to-Ethereum-contracts">Native DApps</a> wiki page for details.</td>
    </tr>
  </tbody>
</table>

<p>那我们要分析erc20的代币，所以定义好一份接口合约即可:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">contract</span> <span class="nx">Token</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">name</span><span class="p">()</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">string</span> <span class="nx">name</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// 可选方法，返回代币符号，如EOS</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">symbol</span><span class="p">()</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">string</span> <span class="nx">symbol</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// 可选方法,返回代币小数位数，如8</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">decimals</span><span class="p">()</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint8</span> <span class="nx">decimals</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 货币总发行量</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">totalSupply</span><span class="p">()</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span> <span class="nx">totalSupply</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// 获取某个账户的代币余额</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">balanceOf</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_owner</span><span class="p">)</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span> <span class="nx">balance</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// (本人)向某人转账</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">transfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span> <span class="nx">success</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// (本人)批准只能合约可以向某人转账</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">approve</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_spender</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span> <span class="nx">success</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// 合约代理from向to转账(须先经过from账户approve)</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">transferFrom</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_from</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">_to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span> <span class="nx">success</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// 查询_owner允许合约代理向_spender转账的金额</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">allowance</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_owner</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">_spender</span><span class="p">)</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span> <span class="nx">remaining</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后使用<code>abigen</code>工具生成go代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">abigen --sol ./erc20.sol --pkg erc20 --out token.go
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后在<code>golang</code>中就可以像这样调用合约函数:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;log&quot;</span>
</span><span class="line">
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/common&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/ethclient&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">// Create an IPC based RPC connection to a remote node</span>
</span><span class="line">	<span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ethclient</span><span class="p">.</span><span class="nx">Dial</span><span class="p">(</span><span class="s">&quot;/home/karalabe/.ethereum/testnet/geth.ipc&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">log</span><span class="p">.</span><span class="nx">Fatalf</span><span class="p">(</span><span class="s">&quot;Failed to connect to the Ethereum client: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="c1">// Instantiate the contract and display its name</span>
</span><span class="line">	<span class="nx">token</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">NewToken</span><span class="p">(</span><span class="nx">common</span><span class="p">.</span><span class="nx">HexToAddress</span><span class="p">(</span><span class="s">&quot;0x21e6fc92f93c8a1bb41e2be64b4e1f88a54d3576&quot;</span><span class="p">),</span> <span class="nx">conn</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">log</span><span class="p">.</span><span class="nx">Fatalf</span><span class="p">(</span><span class="s">&quot;Failed to instantiate a Token contract: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">name</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">token</span><span class="p">.</span><span class="nx">Name</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">log</span><span class="p">.</span><span class="nx">Fatalf</span><span class="p">(</span><span class="s">&quot;Failed to retrieve token name: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Token name:&quot;</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="erc20">ERC20关键参数获取</h1>

<p>做交易爬虫,现在最关键的是分析交易参数,比如这是<code>etherscan.io</code>上一个<code>MCAP</code>转账交易:</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/eth-tx.png" alt="tx" /></p>

<h2 id="section-2">某个地址是否合约</h2>

<p>在交易里，如果是合约的调用那么<code>To</code>字段必然是一个合约地址,那么当我们拿到一个交易时，怎么判断这个交易是否一次合约调用呢，或者怎么判断<code>To</code>是合约地址而不是用户钱包地址呢？</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="err">很简单</span><span class="p">,</span><span class="err">地址对应存储位置上有代码则是合约地址</span><span class="p">,</span><span class="err">反之是用户钱包</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>理解了这个原理,那么在go代码里就很容易判断了:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// 某个地址是否合约</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">IsContract</span><span class="p">(</span><span class="nx">conn</span> <span class="o">*</span><span class="nx">ethclient</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">hexAddr</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">code</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">CodeAt</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Background</span><span class="p">(),</span> <span class="nx">common</span><span class="p">.</span><span class="nx">HexToAddress</span><span class="p">(</span><span class="nx">hexAddr</span><span class="p">),</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">code</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>这里附上其他环境判断是否合约的方法</p>
</blockquote>

<p>在合约solidity代码里判断:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">isContract</span><span class="p">(</span><span class="nx">address</span> <span class="nx">addr</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">uint</span> <span class="nx">size</span><span class="p">;</span>
</span><span class="line">  <span class="nx">assembly</span> <span class="p">{</span> <span class="nx">size</span> <span class="o">:=</span> <span class="nx">extcodesize</span><span class="p">(</span><span class="nx">addr</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在<code>geth</code>的console:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">eth.getCode<span class="o">(</span><span class="s2">&quot;0xbfb2e296d9cf3e593e79981235aed29ab9984c0f&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="from">From</h2>

<p><code>From</code>无法直接从交易函数里获取,因为来源地址可以从签名里反解出来,为了拿取到这个字段,用的方法是解析交易的<code>String()</code>输出来获取,虽然办法效率不高,但为了不改动源码这是最简单的。</p>

<p>[update]<code>from</code>获取已经更新,不再使用正则解析,详见代码<a href="https://github.com/qjpcpu/ethereum/blob/f3fa29e5d9ef3762d69dd838a465ee0e8b116e1f/contracts/helper.go#L35">get from field</a></p>

<h2 id="to">To</h2>

<p>收款地址的获取就比较麻烦一些了，它不像eth的直接转账,交易的<code>to</code>字段就是收款地址,合约调用的<code>To</code>是合约地址,真正的收款地址存放在<code>Data</code>字段里,那么我们来看看<code>Data</code>字段怎么编码的。</p>

<h3 id="section-3">函数签名</h3>

<p><code>Data</code>的起始4个字节是函数签名的sha3结果的前缀,举个例子,对于下面的合约</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">contract</span> <span class="nx">Foo</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">bar</span><span class="p">(</span><span class="nx">fixed</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="nx">xy</span><span class="p">)</span> <span class="p">{}</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">baz</span><span class="p">(</span><span class="nx">uint32</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">bool</span> <span class="nx">y</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span> <span class="nx">r</span><span class="p">)</span> <span class="p">{</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">&gt;</span> <span class="mi">32</span> <span class="o">||</span> <span class="nx">y</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">sam</span><span class="p">(</span><span class="nx">bytes</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">bool</span> <span class="nx">z</span><span class="p">,</span> <span class="nx">uint</span><span class="p">[]</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>
如果要调用</code>baz<code>函数,则结果应该是</code>keccak256(“baz(uint32,bool)”)[0:4]<code>转换为16进制是</code>0xcdcd77c0`</p>

<h3 id="section-4">参数编码</h3>

<p>参数编码是依次对函数签名每个参数进行32字节左补齐编码,如<code>baz(69,true)</code>这次调用,参数<code>69</code>和<code>true</code>分别编码结果是:</p>

<ul>
  <li><code>69</code>,编码为<code>0x0000000000000000000000000000000000000000000000000000000000000045</code></li>
  <li><code>true</code>,编码为<code>0x0000000000000000000000000000000000000000000000000000000000000001</code></li>
</ul>

<p>那么整合起来,<code>baz(69,true)</code>调用时交易的<code>Data</code>应该为:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="mh">0xcdcd77c000000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="transfer">transfer</h3>

<p>回到我们的需求,我们要分析的20代币的转账，其实就是分析<code>transfer(address _to,unit256 _value)</code>的合约函数调用,该函数签名编码是<code>0xa9059cbb</code>,比如我们要对<code>0x54d28e24df3a2381d4c072118da0ef0a51a4fcd9</code>转账<code>493480000</code>个MCAP,编码过程为:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nb">Function</span><span class="o">:</span> <span class="nx">transfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nx">MethodID</span><span class="o">:</span> <span class="mh">0xa9059cbb</span>
</span><span class="line"><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span>  <span class="mi">00000000000000000000000054</span><span class="nx">d28e24df3a2381d4c072118da0ef0a51a4fcd9</span>
</span><span class="line"><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span>  <span class="mi">000000000000000000000000000000000000000000000000000000001</span><span class="nx">d69e840</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最终结果<code>Data</code>是</p>

<p><code>0xa9059cbb00000000000000000000000054d28e24df3a2381d4c072118da0ef0a51a4fcd9000000000000000000000000000000000000000000000000000000001d69e840</code></p>

<h1 id="put-it-together">Put it together</h1>

<p>把这上面关键点整合起来,就可以构建一个简单爬虫,这个爬虫执行流程应该是:</p>

<ul>
  <li>遍历区块交易,取到我们关注的某个合约的所有转账交易</li>
  <li>解析交易关键字段,包含交易ID,from,to,金额,时间戳</li>
  <li>入库,提供webAPI给应用层</li>
</ul>

<h1 id="section-5">参考文献</h1>

<ul>
  <li><a href="https://mp.weixin.qq.com/s/2wG9-NyeHwan8pgmlaLSwQ">英雄链深度调查 永不说谎的地址</a></li>
  <li><a href="https://mp.weixin.qq.com/s/KPIDMwujSZI_MhpmMIG5Gg?scene=25#wechat_redirect">谁是英雄链背后的英雄</a></li>
  <li><a href="https://github.com/ethereum/go-ethereum/wiki/Native-DApps:-Go-bindings-to-Ethereum-contracts">Go bindings to Ethereum contracts</a></li>
  <li><a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#argument-encoding">Ethereum Contract ABI</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solidity备忘录]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/03/08/soliditybei-wang-lu/"/>
    <updated>2018-03-08T01:38:45+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/03/08/soliditybei-wang-lu</id>
    <content type="html"><![CDATA[<p>关于以太坊solidity语言一些有趣或者有意义的tips.</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#basic-sytax">basic sytax</a>    <ul>
      <li><a href="#section">字符串比较</a></li>
      <li><a href="#storage-vs-memory">storage vs memory</a></li>
    </ul>
  </li>
  <li><a href="#function">function</a>    <ul>
      <li><a href="#section-1">访问修饰符</a></li>
      <li><a href="#section-2">函数修饰符</a></li>
    </ul>
  </li>
  <li><a href="#msg">msg</a></li>
  <li><a href="#section-3">接口</a></li>
  <li><a href="#ownable">Ownable</a></li>
  <li><a href="#section-4">性能优化</a></li>
  <li><a href="#section-5">间接转账</a>    <ul>
      <li><a href="#section-6">将发到合约的转账再转给另一个地址</a></li>
      <li><a href="#eth">将发到合约的eth再转发给另一个合约调用</a></li>
    </ul>
  </li>
</ul>

<h1 id="basic-sytax">basic sytax</h1>

<h2 id="section">字符串比较</h2>

<p><code>solidity</code>本身无法直接比较字符串,需要转换成整数比较</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">keccak256</span><span class="p">(</span><span class="s2">&quot;aaaab&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="nx">keccak256</span><span class="p">(</span><span class="s2">&quot;bbbbbc&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="storage-vs-memory">storage vs memory</h2>

<ul>
  <li><code>storage</code>,变量将存储到链上,如合约变量默认即storage</li>
  <li><code>memory</code>, 内存临时变量</li>
</ul>

<h1 id="function">function</h1>

<h2 id="section-1">访问修饰符</h2>

<ul>
  <li><code>public</code>, 任何人可以调用,包括其他合约</li>
  <li><code>private</code>, 仅本合约可调用</li>
  <li><code>internal</code>, 本合约和继承本合约的合约可调用</li>
  <li><code>external</code>, 仅能外部调用</li>
</ul>

<h2 id="section-2">函数修饰符</h2>

<ul>
  <li><code>view</code>, 仅查看数据不修改数据,另外注意<code>view</code>修饰符不耗费gas,因为它只做本地查询</li>
  <li><code>pure</code>, 根本不访问(区块链)数据,如仅做内存数学计算</li>
</ul>

<p>函数修饰符还可以带参数:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 存储用户年龄的映射</span>
</span><span class="line"><span class="nx">mapping</span> <span class="p">(</span><span class="nx">uint</span> <span class="o">=&gt;</span> <span class="nx">uint</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">age</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 限定用户年龄的修饰符</span>
</span><span class="line"><span class="nx">modifier</span> <span class="nx">olderThan</span><span class="p">(</span><span class="nx">uint</span> <span class="nx">_age</span><span class="p">,</span> <span class="nx">uint</span> <span class="nx">_userId</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">require</span><span class="p">(</span><span class="nx">age</span><span class="p">[</span><span class="nx">_userId</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nx">_age</span><span class="p">);</span>
</span><span class="line">  <span class="nx">_</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 必须年满16周岁才允许开车 (至少在美国是这样的).</span>
</span><span class="line"><span class="c1">// 我们可以用如下参数调用`olderThan` 修饰符:</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">driveCar</span><span class="p">(</span><span class="nx">uint</span> <span class="nx">_userId</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">olderThan</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="nx">_userId</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// 其余的程序逻辑</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="msg">msg</h1>

<p>msg对象有几个常用属性</p>

<ul>
  <li><code>msg.sender</code>, 合约调用者</li>
  <li><code>msg.value</code>, 合约调用者发送的ETH金额</li>
</ul>

<h1 id="section-3">接口</h1>

<p>接口定义及使用非常简单,不需要额外语言描述.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 声明</span>
</span><span class="line"><span class="nx">contract</span> <span class="nx">NumberInterface</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">getNum</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_myAddress</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">view</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">contract</span> <span class="nx">MyContract</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">address</span> <span class="nx">NumberInterfaceAddress</span> <span class="o">=</span> <span class="mh">0x06012c8cf97BEaD5deAe237070F9587f8E</span><span class="p">....;</span>
</span><span class="line">  <span class="c1">// ^ The address of the FavoriteNumber contract on Ethereum</span>
</span><span class="line">  <span class="nx">NumberInterface</span> <span class="nx">numberContract</span> <span class="o">=</span> <span class="nx">NumberInterface</span><span class="p">(</span><span class="nx">NumberInterfaceAddress</span><span class="p">);</span>
</span><span class="line">  <span class="c1">// Now numberContract is pointing to the other contract</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">someFunction</span><span class="p">()</span> <span class="kr">public</span> <span class="p">{</span>
</span><span class="line">     <span class="c1">// Now we can call getNum from that contract:</span>
</span><span class="line">     <span class="nx">uint</span> <span class="nx">num</span> <span class="o">=</span> <span class="nx">numberContract</span><span class="p">.</span><span class="nx">getNum</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// ...and do something with num here</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接口的使用和实现分离的特点,也是实战中重要特性:解决bugfix,调用外部合同等等灵活场景.</p>

<h1 id="ownable">Ownable</h1>

<p><code>Ownable</code>是进行合约管理的常用手段</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @title Ownable</span>
</span><span class="line"><span class="cm"> * @dev The Ownable contract has an owner address, and provides basic authorization control</span>
</span><span class="line"><span class="cm"> * functions, this simplifies the implementation of &quot;user permissions&quot;.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="nx">contract</span> <span class="nx">Ownable</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">address</span> <span class="kr">public</span> <span class="nx">owner</span><span class="p">;</span>
</span><span class="line">  <span class="nx">event</span> <span class="nx">OwnershipTransferred</span><span class="p">(</span><span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">previousOwner</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">newOwner</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * @dev The Ownable constructor sets the original `owner` of the contract to the sender</span>
</span><span class="line"><span class="cm">   * account.</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">Ownable</span><span class="p">()</span> <span class="kr">public</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">owner</span> <span class="o">=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * @dev Throws if called by any account other than the owner.</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="nx">modifier</span> <span class="nx">onlyOwner</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">require</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span> <span class="o">==</span> <span class="nx">owner</span><span class="p">);</span>
</span><span class="line">    <span class="nx">_</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * @dev Allows the current owner to transfer control of the contract to a newOwner.</span>
</span><span class="line"><span class="cm">   * @param newOwner The address to transfer ownership to.</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">transferOwnership</span><span class="p">(</span><span class="nx">address</span> <span class="nx">newOwner</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">onlyOwner</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">require</span><span class="p">(</span><span class="nx">newOwner</span> <span class="o">!=</span> <span class="nx">address</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class="line">    <span class="nx">OwnershipTransferred</span><span class="p">(</span><span class="nx">owner</span><span class="p">,</span> <span class="nx">newOwner</span><span class="p">);</span>
</span><span class="line">    <span class="nx">owner</span> <span class="o">=</span> <span class="nx">newOwner</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-4">性能优化</h1>

<p>通常情况下我们不会考虑使用 unit 变种，因为无论如何定义 uint的大小，Solidity 为它保留256位的存储空间。例如，使用 uint8 而不是uint（uint256）不会为你节省任何gas。</p>

<p>除非，把 unit 绑定到 struct 里面。</p>

<p>如果一个 struct 中有多个 uint，则尽可能使用较小的 uint, Solidity 会将这些 uint 打包在一起，从而占用较少的存储空间。例如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">struct</span> <span class="nx">NormalStruct</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">uint</span> <span class="nx">a</span><span class="p">;</span>
</span><span class="line">  <span class="nx">uint</span> <span class="nx">b</span><span class="p">;</span>
</span><span class="line">  <span class="nx">uint</span> <span class="nx">c</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">struct</span> <span class="nx">MiniMe</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">uint32</span> <span class="nx">a</span><span class="p">;</span>
</span><span class="line">  <span class="nx">uint32</span> <span class="nx">b</span><span class="p">;</span>
</span><span class="line">  <span class="nx">uint</span> <span class="nx">c</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>// 因为使用了结构打包，<code>mini</code> 比 <code>normal</code> 占用的空间更少</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">NormalStruct</span> <span class="nx">normal</span> <span class="o">=</span> <span class="nx">NormalStruct</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
</span><span class="line"><span class="nx">MiniMe</span> <span class="nx">mini</span> <span class="o">=</span> <span class="nx">MiniMe</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所以，当 uint 定义在一个 struct 中的时候，尽量使用最小的整数子类型以节约空间。 并且把同样类型的变量放一起（即在struct中将把变量按照类型依次放置），这样 Solidity 可以将存储空间最小化。例如，有两个 struct：</p>

<p>uint c; uint32 a; uint32 b; 和 uint32 a; uint c; uint32 b;</p>

<p>前者比后者需要的gas更少，因为前者把uint32放一起了。</p>

<h1 id="section-5">间接转账</h1>

<p>直接转账用<code>who.transfer(value)</code>,这个很常见, 但有时候还是需要间接转账</p>

<h2 id="section-6">将发到合约的转账再转给另一个地址</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">delayTransfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_to</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">payable</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">_to</span><span class="p">.</span><span class="nx">transfer</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个示例就是一个间接转账,这笔转账能够完成的原因其实是,调用这个函数时，用户发过来的eth已经加到合约上了，所以可以再转给第三个地址。</p>

<h2 id="eth">将发到合约的eth再转发给另一个合约调用</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">contract</span> <span class="nx">Sub</span> <span class="p">{</span>
</span><span class="line">   <span class="nx">address</span> <span class="nx">realReceiver</span><span class="p">;</span>
</span><span class="line">   <span class="kd">function</span> <span class="nx">recevice</span><span class="p">()</span> <span class="kr">public</span> <span class="nx">payable</span> <span class="p">{</span>
</span><span class="line">       <span class="nx">realReceiver</span><span class="p">.</span><span class="nx">transfer</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class="line">   <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">contract</span> <span class="nx">Main</span><span class="p">{</span>
</span><span class="line">  <span class="nx">Sub</span> <span class="nx">sub</span><span class="p">;</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">transferToSub</span><span class="p">()</span> <span class="kr">public</span> <span class="nx">payable</span><span class="p">{</span>
</span><span class="line">      <span class="nx">sub</span><span class="p">.</span><span class="nx">recevice</span><span class="p">.</span><span class="nx">value</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">value</span><span class="p">)();</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面示例将用户的eth通过两次转发最终发给了<code>realReceiver</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于以太坊的数字资产]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/03/06/ji-yu-yi-tai-fang-de-shu-zi-zi-chan/"/>
    <updated>2018-03-06T10:24:35+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/03/06/ji-yu-yi-tai-fang-de-shu-zi-zi-chan</id>
    <content type="html"><![CDATA[<p>代币(token)是什么?</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">什么是代币</a>    <ul>
      <li><a href="#section-1">最小可用代币</a></li>
    </ul>
  </li>
  <li><a href="#erc20">ERC20</a>    <ul>
      <li><a href="#section-2">大纲</a></li>
      <li><a href="#section-3">摘要</a></li>
      <li><a href="#section-4">动机</a></li>
      <li><a href="#section-5">标准内容</a>        <ul>
          <li><a href="#section-6">方法定义</a></li>
          <li><a href="#section-7">事件定义</a></li>
          <li><a href="#section-8">范例</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#erc721">ERC721</a>    <ul>
      <li><a href="#section-9">实用性</a></li>
      <li><a href="#nft-ids">NFT IDs</a></li>
      <li><a href="#section-10">向后兼容性</a></li>
    </ul>
  </li>
  <li><a href="#section-11">其他问题</a>    <ul>
      <li><a href="#gas">自动装填gas</a></li>
    </ul>
  </li>
  <li><a href="#section-12">参考文献</a></li>
</ul>

<h1 id="section">什么是代币</h1>

<p>通常区块链上由矿工挖出的币种,我们把它称之为初代币，初代币是该区块链最底层的货币，链上的转账及各类基础交易都是以初代币作为结算依据。比如比特币对于比特币区块链，以太币之于以太坊等等。</p>

<p>而通常我们说的代币,或者token(令牌),又指的是什么呢？代币是基于区块链的智能合约定义出的二代币,如果把比特币/以太币比作tcp层的数据包，那么代币就可以类比为http层的http包，它是一个更加上层的概念。</p>

<p>目前市场上发行的代币大部分都是基于以太坊，这是因为以太坊本身是一个图灵完备的区块链，即它的智能合约语言是图灵完备语言。对比起来比特币链上的脚本是非图灵完备的。正是因为以太坊的图灵完备性，使得基于以太坊的开发者可以根据自己的业务需求设计出各种特性各异的代币,它们可以代表任何可替代的可交易商品: 虚拟货币，忠诚点，金牌，白条，游戏内物品等。</p>

<h2 id="section-1">最小可用代币</h2>

<p>标准令牌合约可能相当复杂。但实际上，一个非常基本的令牌归结为:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">contract</span> <span class="nx">MyToken</span> <span class="p">{</span>
</span><span class="line">    <span class="cm">/* This creates an array with all balances */</span>
</span><span class="line">    <span class="nx">mapping</span> <span class="p">(</span><span class="nx">address</span> <span class="o">=&gt;</span> <span class="nx">uint256</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">balanceOf</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* Initializes contract with initial supply tokens to the creator of the contract */</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">MyToken</span><span class="p">(</span><span class="nx">uint256</span> <span class="nx">initialSupply</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">balanceOf</span><span class="p">[</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">]</span> <span class="o">=</span> <span class="nx">initialSupply</span><span class="p">;</span>              <span class="c1">// Give the creator all initial tokens</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* Send coins */</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">transfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">balanceOf</span><span class="p">[</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nx">_value</span><span class="p">);</span>           <span class="c1">// Check if the sender has enough</span>
</span><span class="line">        <span class="nx">require</span><span class="p">(</span><span class="nx">balanceOf</span><span class="p">[</span><span class="nx">_to</span><span class="p">]</span> <span class="o">+</span> <span class="nx">_value</span> <span class="o">&gt;=</span> <span class="nx">balanceOf</span><span class="p">[</span><span class="nx">_to</span><span class="p">]);</span> <span class="c1">// Check for overflows</span>
</span><span class="line">        <span class="nx">balanceOf</span><span class="p">[</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">]</span> <span class="o">-=</span> <span class="nx">_value</span><span class="p">;</span>                    <span class="c1">// Subtract from the sender</span>
</span><span class="line">        <span class="nx">balanceOf</span><span class="p">[</span><span class="nx">_to</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">_value</span><span class="p">;</span>                           <span class="c1">// Add the same to the recipient</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>阅读这段代码时，请不要拘泥于<code>token</code>的字面意思。这里的<code>MyToken</code>在发行时限定了发行总额(合约构造函数),同时具备了转账功能<code>transfer</code>。那么其实他就是一个简易的货币,具备作为物物交易的中间桥梁来转移价值的能力。</p>

<h1 id="erc20">ERC20</h1>

<p>以以太坊为例，由于大家均在链上以大致相同的方式发行了各自的代币，逐渐发现其实这里面有共同的模式可以被提炼出来:由于所有代币都以标准方式实施一些基本功能，这也意味着您的代币将立即与以太坊钱包和任何其他使用相同标准的客户或合同兼容.于是就出现了<code>ERC20</code>提案。</p>

<h2 id="section-2">大纲</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">EIP</span><span class="o">:</span> <span class="mi">20</span>
</span><span class="line"><span class="nx">Title</span><span class="o">:</span> <span class="nx">ERC</span><span class="o">-</span><span class="mi">20</span> <span class="nx">Token</span> <span class="nx">Standard</span>
</span><span class="line"><span class="nx">Author</span><span class="o">:</span> <span class="nx">Fabian</span> <span class="nx">Vogelsteller</span> <span class="o">&lt;</span><span class="nx">fabian</span><span class="err">@</span><span class="nx">ethereum</span><span class="p">.</span><span class="nx">org</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">Vitalik</span> <span class="nx">Buterin</span> <span class="o">&lt;</span><span class="nx">vitalik</span><span class="p">.</span><span class="nx">buterin</span><span class="err">@</span><span class="nx">ethereum</span><span class="p">.</span><span class="nx">org</span><span class="o">&gt;</span>
</span><span class="line"><span class="nx">Type</span><span class="o">:</span> <span class="nx">Standard</span>
</span><span class="line"><span class="nx">Category</span><span class="o">:</span> <span class="nx">ERC</span>
</span><span class="line"><span class="nx">Status</span><span class="o">:</span> <span class="nx">Accepted</span>
</span><span class="line"><span class="nx">Created</span><span class="o">:</span> <span class="mi">2015</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">19</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">摘要</h2>

<p>以下标准定义了在智能合约中实施代币的标准API。该标准提供了传送代币的基本功能，并允许代币被批准，以便其他链上第三方可以使用它们。</p>

<h2 id="section-4">动机</h2>

<p>标准接口允许其他应用程序重新使用以太坊上的任何令牌：从钱包到分散式交换。</p>

<h2 id="section-5">标准内容</h2>

<h3 id="section-6">方法定义</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 可选方法,返回代币名称,如MyToken</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">name</span><span class="p">()</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">string</span> <span class="nx">name</span><span class="p">)</span>
</span><span class="line"><span class="c1">// 可选方法，返回代币符号，如EOS</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">symbol</span><span class="p">()</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">string</span> <span class="nx">symbol</span><span class="p">)</span>
</span><span class="line"><span class="c1">// 可选方法,返回代币小数位数，如8</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">decimals</span><span class="p">()</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint8</span> <span class="nx">decimals</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 货币总发行量</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">totalSupply</span><span class="p">()</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span> <span class="nx">totalSupply</span><span class="p">)</span>
</span><span class="line"><span class="c1">// 获取某个账户的代币余额</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">balanceOf</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_owner</span><span class="p">)</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span> <span class="nx">balance</span><span class="p">)</span>
</span><span class="line"><span class="c1">// (本人)向某人转账</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">transfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span> <span class="nx">success</span><span class="p">)</span>
</span><span class="line"><span class="c1">// (本人)批准只能合约可以向某人转账</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">approve</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_spender</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span> <span class="nx">success</span><span class="p">)</span>
</span><span class="line"><span class="c1">// 合约代理from向to转账(须先经过from账户approve)</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">transferFrom</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_from</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">_to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span> <span class="nx">success</span><span class="p">)</span>
</span><span class="line"><span class="c1">// 查询_owner允许合约代理向_spender转账的金额</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">allowance</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_owner</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">_spender</span><span class="p">)</span> <span class="nx">constant</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span> <span class="nx">remaining</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-7">事件定义</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 转移代币时必须触发该事件</span>
</span><span class="line"><span class="nx">event</span> <span class="nx">Transfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">_from</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">_to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span>
</span><span class="line"><span class="c1">// 批准代币时必须触发该事件</span>
</span><span class="line"><span class="nx">event</span> <span class="nx">Approval</span><span class="p">(</span><span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">_owner</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">_spender</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-8">范例</h3>

<p><a href="https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol">https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol</a>
<a href="https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol">https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol</a></p>

<h1 id="erc721">ERC721</h1>

<p>至于erc721的产生是为了解决数字资产唯一性问题。本质上说，erc20的两个代币之间是没有任何区别的，所以它适合作为通用的数字货币来流通，单还有一类有区别的场景，比如数字世界里我的一栋房子和你的一栋房子，他们的面积，朝向，颜色等等都会有区别，是无法同质化标识的，所以就有了erc721.</p>

<p>ERC721官方称谓是:Non-fungible Token Standard(NFT),非同质化代币标准。</p>

<p>ERC721的标准内容我这里不再详述，具体标准可以参考github上以太坊提案,实现实例的话，以太猫就是最好的代表。</p>

<h3 id="section-9">实用性</h3>

<p>许多以太坊智能合约的建议用途都依赖于跟踪单个非同质币（NFTs）。现有或计划中的NFTs 有很多，例如 Decentraland 中的 LAND，与CryptoPunks 项目同名的punks（朋克），以及Dmarket 或 EnjinCoin 等系统的游戏内物品。未来的用途包括检测真实世界中的非同质资产，例如房地产（例如 Ubitquity 或 Propy 等公司所设想的）。在这些情况下，项目在账本中不是“集中在一起的”，相反，每单位代币必须有独立的所有权并自动跟踪，这非常重要。无论这些项目的性质如何，如果我们有一个标准化的接口，并且建立跨功能的NFTs管理和销售平台，这将使得生态系统更加强大。</p>

<h3 id="nft-ids">NFT IDs</h3>

<p>该标准的基础是，每一个 NFT 在跟踪它的合约中，用唯一的一个256 位无符号整数进行标识。每个NFT 的 ID 标号在智能合约的生命周期内不允许改变。元组 ( contract address, asset ID ) 是每个特定 NFT 在以太坊生态系统中的全局唯一且完全合格的标识。虽然某些合约可能觉得 ID 从 0 开始编码，并且对于每一个新 NFT 的 ID 简单增 1 进行编码更加简便，但是使用者绝不能假设 ID 编号具有任何特定模式，并且需要将 ID 编码看做 “黑盒”。</p>

<h3 id="section-10">向后兼容性</h3>

<p>本标准尽可能遵循 ERC-20 的语义，但由于同质代币与非同质代币之间的根本差异，并不能完全兼容 ERC-20。</p>

<h1 id="section-11">其他问题</h1>

<h2 id="gas">自动装填gas</h2>

<p>每次，您在Ethereum上进行交易，您需要向该块矿工支付费用，以计算您的智能合约的结果。虽然这可能会在未来发生变化，但目前费用只能在以太网中支付，因此您的代币的所有用户都需要它。账户余额小于费用的账户被卡住，直到业主可以支付必要的费用。但在某些使用案例中，您可能不希望用户考虑以太坊，区块链或如何获得以太网，因此只要检测到平衡危险性低，您的硬币就会自动重新填充用户余额。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">uint</span> <span class="nx">minBalanceForAccounts</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">setMinBalance</span><span class="p">(</span><span class="nx">uint</span> <span class="nx">minimumBalanceInFinney</span><span class="p">)</span> <span class="nx">onlyOwner</span> <span class="p">{</span>
</span><span class="line">     <span class="nx">minBalanceForAccounts</span> <span class="o">=</span> <span class="nx">minimumBalanceInFinney</span> <span class="o">*</span> <span class="mi">1</span> <span class="nx">finney</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="cm">/* Send coins */</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">transfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">_to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">_value</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">.</span><span class="nx">balance</span> <span class="o">&lt;</span> <span class="nx">minBalanceForAccounts</span><span class="p">)</span>
</span><span class="line">        <span class="nx">sell</span><span class="p">((</span><span class="nx">minBalanceForAccounts</span> <span class="o">-</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">.</span><span class="nx">balance</span><span class="p">)</span> <span class="o">/</span> <span class="nx">sellPrice</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-12">参考文献</h1>

<ul>
  <li><a href="http://ethfans.org/posts/eip-721-non-fungible-token-standard">干货ERC721 Non-fungible Token Standard</a></li>
  <li><a href="https://ethereum.org/token">Create your own CRYPTO-CURRENCY with Ethereum</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[以太坊交易]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/03/05/yi-tai-fang-jiao-yi/"/>
    <updated>2018-03-05T06:26:24+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/03/05/yi-tai-fang-jiao-yi</id>
    <content type="html"><![CDATA[<p>交易是区块链和重中之重,不论是简单的转账还是复杂的智能合约的执行,都是依托于交易来完成。但是我回头仔细研究了一把以太坊的交易,并梳理这篇文章的原因,仅仅是因为在面试的时候没有回答上来,羞愧……</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">交易的主要结构</a></li>
  <li><a href="#section-1">交易打包流程</a>    <ul>
      <li><a href="#section-2">拼装交易参数</a></li>
      <li><a href="#section-3">对交易签名</a></li>
      <li><a href="#section-4">是否重复交易</a></li>
      <li><a href="#section-5">验证交易参数</a></li>
      <li><a href="#section-6">丢弃低价交易</a></li>
      <li><a href="#section-7">替换重复交易(更新旧交易)</a></li>
      <li><a href="#section-8">提交交易进入交易队列</a></li>
      <li><a href="#nonce">关于交易nonce</a>        <ul>
          <li><a href="#txpoolvalidatetxnoncenonce">TxPool.validateTx()检查当前交易的<code>nonce</code>大于最新区块中账户<code>nonce</code>值</a></li>
          <li><a href="#pending">检查<code>pending</code>队列中是否有旧交易需要更新</a></li>
          <li><a href="#pendingnonce">尝试将交易加入<code>pending</code>队列时检查是否需要剔除过期的nonce</a></li>
          <li><a href="#noncependingnonce">从队列中获取所有<code>nonce</code>值小于等于账户<code>pending</code>状态的<code>nonce</code>值</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#section-9">关于失败的交易</a></li>
</ul>

<h1 id="section">交易的主要结构</h1>

<p>废话不多说,先看看交易的基础数据结构。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/core/types/transaction.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">txdata</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">AccountNonce</span> <span class="kt">uint64</span>          <span class="s">`json:&quot;nonce&quot;    gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">Price</span>        <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span>        <span class="s">`json:&quot;gasPrice&quot; gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">GasLimit</span>     <span class="kt">uint64</span>          <span class="s">`json:&quot;gas&quot;      gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">Recipient</span>    <span class="o">*</span><span class="nx">common</span><span class="p">.</span><span class="nx">Address</span> <span class="s">`json:&quot;to&quot;       rlp:&quot;nil&quot;`</span> <span class="c1">// nil means contract creation</span>
</span><span class="line">    <span class="nx">Amount</span>       <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span>        <span class="s">`json:&quot;value&quot;    gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">Payload</span>      <span class="p">[]</span><span class="kt">byte</span>          <span class="s">`json:&quot;input&quot;    gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Signature values</span>
</span><span class="line">    <span class="nx">V</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span> <span class="s">`json:&quot;v&quot; gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">R</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span> <span class="s">`json:&quot;r&quot; gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">S</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span> <span class="s">`json:&quot;s&quot; gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// This is only used when marshaling to JSON.</span>
</span><span class="line">    <span class="nx">Hash</span> <span class="o">*</span><span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span> <span class="s">`json:&quot;hash&quot; rlp:&quot;-&quot;`</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li><code>AccountNonce</code>,交易发起者内部唯一标识交易的字段,避免交易双重支付</li>
  <li><code>Price</code>,此交易的gas price</li>
  <li><code>GasLimit</code>,此交易允许的最大gas量</li>
  <li><code>Recipient</code>,交易接收者,如果为<code>nil</code>说明是个合同创建交易</li>
  <li><code>Amount</code>, 交易转移的<code>ETH</code>数量,单位是<code>wei</code></li>
  <li><code>Payload</code>, 交易数据</li>
  <li><code>V,R,S</code>, 交易签名,通过交易签名可以计算出交易发送者地址</li>
</ul>

<h1 id="section-1">交易打包流程</h1>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/transaction-pkg.png" alt="pkg" /></p>

<h2 id="section-2">拼装交易参数</h2>

<p>拼装交易参数主要在<code>github.com/ethereum/go-ethereum/internal/ethapi/api.go setDefaults()</code>实现。</p>

<ul>
  <li><code>Gas</code>如果未设置,设置未默认值<code>90000</code></li>
  <li><code>GasPrice</code>如果未设置，设置为建议值</li>
  <li><code>Nonce</code>如果未设置,自动生成nonce值,该值等于当前账户nonce偏移量加上账户nonces数组长度,由此可见账户交易的nonce值是连续递增量</li>
</ul>

<h2 id="section-3">对交易签名</h2>

<p>首先使用账户的私钥对交易hash信息生成签名,注意该hash计算了包含了<code>nonce</code>值和<code>chainId</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">EIP155Signer</span><span class="p">)</span> <span class="nx">Hash</span><span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">Transaction</span><span class="p">)</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">rlpHash</span><span class="p">([]</span><span class="kd">interface</span><span class="p">{}{</span>
</span><span class="line">		<span class="nx">tx</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">AccountNonce</span><span class="p">,</span>
</span><span class="line">		<span class="nx">tx</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">Price</span><span class="p">,</span>
</span><span class="line">		<span class="nx">tx</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">GasLimit</span><span class="p">,</span>
</span><span class="line">		<span class="nx">tx</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">Recipient</span><span class="p">,</span>
</span><span class="line">		<span class="nx">tx</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">Amount</span><span class="p">,</span>
</span><span class="line">		<span class="nx">tx</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">Payload</span><span class="p">,</span>
</span><span class="line">		<span class="nx">s</span><span class="p">.</span><span class="nx">chainId</span><span class="p">,</span> <span class="nb">uint</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="nb">uint</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class="line">	<span class="p">})</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将签名信息的<code>0-31</code>字节放入<code>R</code>,<code>32-63</code>放入<code>S</code>,<code>64</code>放入<code>V</code>(共65字节).</p>

<p>签名完成后,开始向以太坊提交交易.注意,如果交易的<code>To</code>字段为空,说明是个合同创建交易,则自动生成合约地址,合约地址生成规则其实是<code>hash(from_addr,nonce)</code>函数:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// Creates an ethereum address given the bytes and the nonce</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">CreateAddress</span><span class="p">(</span><span class="nx">b</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Address</span><span class="p">,</span> <span class="nx">nonce</span> <span class="kt">uint64</span><span class="p">)</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Address</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">data</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">rlp</span><span class="p">.</span><span class="nx">EncodeToBytes</span><span class="p">([]</span><span class="kd">interface</span><span class="p">{}{</span><span class="nx">b</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">})</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">common</span><span class="p">.</span><span class="nx">BytesToAddress</span><span class="p">(</span><span class="nx">Keccak256</span><span class="p">(</span><span class="nx">data</span><span class="p">)[</span><span class="mi">12</span><span class="p">:])</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-4">是否重复交易</h2>

<p>通过检查交易池里是否存在该交易hash判断是否是重复交易</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">hash</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">Hash</span><span class="p">()</span>
</span><span class="line"><span class="k">if</span> <span class="nx">pool</span><span class="p">.</span><span class="nx">all</span><span class="p">[</span><span class="nx">hash</span><span class="p">]</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">log</span><span class="p">.</span><span class="nx">Trace</span><span class="p">(</span><span class="s">&quot;Discarding already known transaction&quot;</span><span class="p">,</span> <span class="s">&quot;hash&quot;</span><span class="p">,</span> <span class="nx">hash</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Errorf</span><span class="p">(</span><span class="s">&quot;known transaction: %x&quot;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-5">验证交易参数</h2>

<ul>
  <li>检查交易大小是否小于等于<code>32KB</code>,防止DOS攻击</li>
  <li>检查是否正确签名</li>
  <li>检查gas是否超过区块gas限制</li>
  <li>抛弃非local的且gas price偏低的交易</li>
  <li>检查nonce是否过小</li>
  <li>检查账户余额是否足够,<code>balance &gt;= gas_price * gas_limit + amount</code></li>
</ul>

<h2 id="section-6">丢弃低价交易</h2>

<p>如果交易池已满，需要将交易池中低于当前交易的踢出一个,注意踢出的交易仅限于远端交易，本地节点的交易不受影响</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// Discard finds a number of most underpriced transactions, removes them from the</span>
</span><span class="line"><span class="c1">// priced list and returns them for further removal from the entire pool.</span>
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">txPricedList</span><span class="p">)</span> <span class="nx">Discard</span><span class="p">(</span><span class="nx">count</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">local</span> <span class="o">*</span><span class="nx">accountSet</span><span class="p">)</span> <span class="nx">types</span><span class="p">.</span><span class="nx">Transactions</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">drop</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transactions</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="c1">// Remote underpriced transactions to drop</span>
</span><span class="line">    <span class="nx">save</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transactions</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>    <span class="c1">// Local underpriced transactions to keep</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="nb">len</span><span class="p">(</span><span class="o">*</span><span class="nx">l</span><span class="p">.</span><span class="nx">items</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">count</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// Discard stale transactions if found during cleanup</span>
</span><span class="line">        <span class="nx">tx</span> <span class="o">:=</span> <span class="nx">heap</span><span class="p">.</span><span class="nx">Pop</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">items</span><span class="p">).(</span><span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="p">(</span><span class="o">*</span><span class="nx">l</span><span class="p">.</span><span class="nx">all</span><span class="p">)[</span><span class="nx">tx</span><span class="p">.</span><span class="nx">Hash</span><span class="p">()];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">l</span><span class="p">.</span><span class="nx">stales</span><span class="o">--</span>
</span><span class="line">            <span class="k">continue</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="c1">// Non stale transaction found, discard unless local</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">local</span><span class="p">.</span><span class="nx">containsTx</span><span class="p">(</span><span class="nx">tx</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">save</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">save</span><span class="p">,</span> <span class="nx">tx</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">drop</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">drop</span><span class="p">,</span> <span class="nx">tx</span><span class="p">)</span>
</span><span class="line">            <span class="nx">count</span><span class="o">--</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tx</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">save</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">heap</span><span class="p">.</span><span class="nx">Push</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="nx">tx</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">drop</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-7">替换重复交易(更新旧交易)</h2>

<p>因为交易可以使用<code>account+nonce</code>唯一标识,所以如果发现同一账户下已存在同nonce的交易,则视为是对旧交易的一次更新,此时会使用当前交易替换掉旧交易。该机制常用于用来提升gas值避免旧交易长时间得不到处理。</p>

<h2 id="section-8">提交交易进入交易队列</h2>

<p><code>promoteExecutables()</code>将交易从待处理队列移入<code>pending</code>队列</p>

<ul>
  <li>丢弃过旧的交易,过旧的定义是<code>nonce</code>小于当前账户<code>nonce</code>值的交易</li>
  <li>丢弃低余额(账户余额不足以支持交易gas燃烧)</li>
  <li>丢弃超过账户数量限额的交易</li>
  <li>…</li>
</ul>

<p>在一系列交易控制之后,将交易写入<code>pending</code>队列,此时交易真正可被矿工打包到区块中。</p>

<h2 id="nonce">关于交易nonce</h2>

<p>流程中涉及到<code>nonce</code>的几个地方:</p>

<h4 id="txpoolvalidatetxnoncenonce">TxPool.validateTx()检查当前交易的<code>nonce</code>大于最新区块中账户<code>nonce</code>值</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// Ensure the transaction adheres to nonce ordering</span>
</span><span class="line"><span class="k">if</span> <span class="nx">pool</span><span class="p">.</span><span class="nx">currentState</span><span class="p">.</span><span class="nx">GetNonce</span><span class="p">(</span><span class="nx">from</span><span class="p">)</span> <span class="p">&gt;</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">Nonce</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">ErrNonceTooLow</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="pending">检查<code>pending</code>队列中是否有旧交易需要更新</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="k">if</span> <span class="nx">list</span> <span class="o">:=</span> <span class="nx">pool</span><span class="p">.</span><span class="nx">pending</span><span class="p">[</span><span class="nx">from</span><span class="p">];</span> <span class="nx">list</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">Overlaps</span><span class="p">(</span><span class="nx">tx</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">   <span class="o">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>Overlaps()</code>函数即根据<code>account,nonce</code>参数对进行重复检测</p>

<h4 id="pendingnonce">尝试将交易加入<code>pending</code>队列时检查是否需要剔除过期的nonce</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// 检查并剔除小于最新区块的交易</span>
</span><span class="line"><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tx</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">list</span><span class="p">.</span><span class="nx">Forward</span><span class="p">(</span><span class="nx">pool</span><span class="p">.</span><span class="nx">currentState</span><span class="p">.</span><span class="nx">GetNonce</span><span class="p">(</span><span class="nx">addr</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">   <span class="o">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="noncependingnonce">从队列中获取所有<code>nonce</code>值小于等于账户<code>pending</code>状态的<code>nonce</code>值</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tx</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">list</span><span class="p">.</span><span class="nx">Ready</span><span class="p">(</span><span class="nx">pool</span><span class="p">.</span><span class="nx">pendingState</span><span class="p">.</span><span class="nx">GetNonce</span><span class="p">(</span><span class="nx">addr</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">   <span class="o">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>另外,</p>

<ul>
  <li>本地节点low gas的交易并不会被丢弃</li>
  <li>如果nonce出现”空洞”,则空洞后的交易将无法打包</li>
</ul>

<h1 id="section-9">关于失败的交易</h1>

<p>有时候我们在使用以太坊时交易(转账)时,会遇到一些令人迷惑的失败交易,比如在imToken上转账失败,然而在etherscan.io上无法查到该交易;而有时候又发现失败的转账能够在以太坊浏览器里成功查看到,说明交易是被正确打包上链了,只是交易本身是失败的交易而已，如下图所示,这是一笔因gas过低而失败的交易:</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/fail-tx.png" alt="fail-tx" /></p>

<p>那么我们深入源码来看看是怎么回事.这里我们只跟踪挖矿过程中的失败交易处理,因为普通交易在还没进入到pending队列时的失败的话,是根本不会打包到区块里的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">env</span> <span class="o">*</span><span class="nx">Work</span><span class="p">)</span> <span class="nx">commitTransaction</span><span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">,</span> <span class="nx">bc</span> <span class="o">*</span><span class="nx">core</span><span class="p">.</span><span class="nx">BlockChain</span><span class="p">,</span> <span class="nx">coinbase</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Address</span><span class="p">,</span> <span class="nx">gp</span> <span class="o">*</span><span class="nx">core</span><span class="p">.</span><span class="nx">GasPool</span><span class="p">)</span> <span class="p">(</span><span class="kt">error</span><span class="p">,</span> <span class="p">[]</span><span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Log</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="o">...</span>
</span><span class="line">  <span class="c1">// 如果执行交易报错,则回滚账户状态(即不从用户账户扣钱,完全回滚,交易不会打包)</span>
</span><span class="line">  <span class="nx">receipt</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">core</span><span class="p">.</span><span class="nx">ApplyTransaction</span><span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">config</span><span class="p">,</span> <span class="nx">bc</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">coinbase</span><span class="p">,</span> <span class="nx">gp</span><span class="p">,</span> <span class="nx">env</span><span class="p">.</span><span class="nx">state</span><span class="p">,</span> <span class="nx">env</span><span class="p">.</span><span class="nx">header</span><span class="p">,</span> <span class="nx">tx</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">env</span><span class="p">.</span><span class="nx">header</span><span class="p">.</span><span class="nx">GasUsed</span><span class="p">,</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">Config</span><span class="p">{})</span>
</span><span class="line">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">env</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">RevertToSnapshot</span><span class="p">(</span><span class="nx">snap</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">err</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="nx">env</span><span class="p">.</span><span class="nx">txs</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">txs</span><span class="p">,</span> <span class="nx">tx</span><span class="p">)</span>
</span><span class="line">  <span class="nx">env</span><span class="p">.</span><span class="nx">receipts</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">receipts</span><span class="p">,</span> <span class="nx">receipt</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">receipt</span><span class="p">.</span><span class="nx">Logs</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>commitTransaction()</code>就是在”挖矿”中调用的交易执行函数,其实从该函数就可以看出来:如果执行交易报错,则回滚账户状态,那么交易是不会被打包到区块的.</p>

<p>那么我们继续进入<code>ApplyTransaction()</code>看看什么情况下交易会报错,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">ApplyTransaction</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">params</span><span class="p">.</span><span class="nx">ChainConfig</span><span class="p">,</span> <span class="nx">bc</span> <span class="o">*</span><span class="nx">BlockChain</span><span class="p">,</span> <span class="nx">author</span> <span class="o">*</span><span class="nx">common</span><span class="p">.</span><span class="nx">Address</span><span class="p">,</span> <span class="nx">gp</span> <span class="o">*</span><span class="nx">GasPool</span><span class="p">,</span> <span class="nx">statedb</span> <span class="o">*</span><span class="nx">state</span><span class="p">.</span><span class="nx">StateDB</span><span class="p">,</span> <span class="nx">header</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Header</span><span class="p">,</span> <span class="nx">tx</span> <span class="o">*</span><span class="kd">type</span><span class="err">$</span>
</span><span class="line">  <span class="c1">// 1.参数检查类错误</span>
</span><span class="line">  <span class="nx">msg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">AsMessage</span><span class="p">(</span><span class="nx">types</span><span class="p">.</span><span class="nx">MakeSigner</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">header</span><span class="p">.</span><span class="nx">Number</span><span class="p">))</span>
</span><span class="line">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="o">...</span>
</span><span class="line">  <span class="c1">// 2.执行类,稍后再看</span>
</span><span class="line">  <span class="nx">_</span><span class="p">,</span> <span class="nx">gas</span><span class="p">,</span> <span class="nx">failed</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ApplyMessage</span><span class="p">(</span><span class="nx">vmenv</span><span class="p">,</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">gp</span><span class="p">)</span>
</span><span class="line">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="c1">// 3.存储交易收据,注意失败的交易也会创建收据</span>
</span><span class="line">  <span class="nx">receipt</span> <span class="o">:=</span> <span class="nx">types</span><span class="p">.</span><span class="nx">NewReceipt</span><span class="p">(</span><span class="nx">root</span><span class="p">,</span> <span class="nx">failed</span><span class="p">,</span> <span class="o">*</span><span class="nx">usedGas</span><span class="p">)</span>
</span><span class="line">  <span class="nx">receipt</span><span class="p">.</span><span class="nx">TxHash</span> <span class="p">=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">Hash</span><span class="p">()</span>
</span><span class="line">  <span class="nx">receipt</span><span class="p">.</span><span class="nx">GasUsed</span> <span class="p">=</span> <span class="nx">gas</span>
</span><span class="line">  <span class="o">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>ApplyTransaction()</code>就比较有意思了,由代码可以看出来,如果是参数检查类错误就直接返回错误,到上层后继续返回就相当于回滚了交易。然而该函数的第二步<code>ApplyMessage()</code>实际执行交易返回的后两个值<code>bool,error</code>就是关键所在了:</p>

<p>如果返回<code>error</code>,那么没什么好说的,错误逐层冒泡出去回滚交易;但如果返回<code>bool==false,error==nil</code>,则交易就正确打包了(生成了交易收据打包到区块),但是此时其实交易是执行失败了的,具体我们在进入<code>ApplyMessage()</code>,这个函数最终调用到<code>TransitionDb()</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">unc</span> <span class="p">(</span><span class="nx">st</span> <span class="o">*</span><span class="nx">StateTransition</span><span class="p">)</span> <span class="nx">TransitionDb</span><span class="p">()</span> <span class="p">(</span><span class="nx">ret</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">usedGas</span> <span class="kt">uint64</span><span class="p">,</span> <span class="nx">failed</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="o">...</span>
</span><span class="line">  <span class="c1">// 1. 该函数根据交易数据检查是否超出基本gas限制,会抛出我们常见的vm.ErrOutOfGas(out of gas),注意此处抛出的错误会使得交易完全回滚</span>
</span><span class="line">  <span class="nx">gas</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">IntrinsicGas</span><span class="p">(</span><span class="nx">st</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">contractCreation</span><span class="p">,</span> <span class="nx">homestead</span><span class="p">)</span>
</span><span class="line">  <span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">st</span><span class="p">.</span><span class="nx">useGas</span><span class="p">(</span><span class="nx">gas</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="p">(</span>
</span><span class="line">    <span class="nx">evm</span> <span class="p">=</span> <span class="nx">st</span><span class="p">.</span><span class="nx">evm</span>
</span><span class="line">    <span class="nx">vmerr</span> <span class="kt">error</span>
</span><span class="line">  <span class="p">)</span>
</span><span class="line">  <span class="c1">// 2.这里如果返回错误(vmerr!=nil)则说明交易执行失败</span>
</span><span class="line">  <span class="k">if</span> <span class="nx">contractCreation</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">ret</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">gas</span><span class="p">,</span> <span class="nx">vmerr</span> <span class="p">=</span> <span class="nx">evm</span><span class="p">.</span><span class="nx">Create</span><span class="p">(</span><span class="nx">sender</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">gas</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Increment the nonce for the next transaction</span>
</span><span class="line">    <span class="nx">st</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">SetNonce</span><span class="p">(</span><span class="nx">sender</span><span class="p">.</span><span class="nx">Address</span><span class="p">(),</span> <span class="nx">st</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">GetNonce</span><span class="p">(</span><span class="nx">sender</span><span class="p">.</span><span class="nx">Address</span><span class="p">())</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="nx">ret</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">gas</span><span class="p">,</span> <span class="nx">vmerr</span> <span class="p">=</span> <span class="nx">evm</span><span class="p">.</span><span class="nx">Call</span><span class="p">(</span><span class="nx">sender</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">to</span><span class="p">().</span><span class="nx">Address</span><span class="p">(),</span> <span class="nx">st</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">gas</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">if</span> <span class="nx">vmerr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 余额不足(&quot;insufficient balance for transfer&quot;)错误也会导致交易完全回滚</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">vmerr</span> <span class="o">==</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">ErrInsufficientBalance</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">vmerr</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="c1">// 退回剩余的gas</span>
</span><span class="line">  <span class="nx">st</span><span class="p">.</span><span class="nx">refundGas</span><span class="p">()</span>
</span><span class="line">  <span class="nx">st</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">AddBalance</span><span class="p">(</span><span class="nx">st</span><span class="p">.</span><span class="nx">evm</span><span class="p">.</span><span class="nx">Coinbase</span><span class="p">,</span> <span class="nb">new</span><span class="p">(</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">).</span><span class="nx">Mul</span><span class="p">(</span><span class="nb">new</span><span class="p">(</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">).</span><span class="nx">SetUint64</span><span class="p">(</span><span class="nx">st</span><span class="p">.</span><span class="nx">gasUsed</span><span class="p">()),</span> <span class="nx">st</span><span class="p">.</span><span class="nx">gasPrice</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// 3.vmerr不为空将导致交易失败,但仍能正确打包</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">ret</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">gasUsed</span><span class="p">(),</span> <span class="nx">vmerr</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在这个函数里可以看出来,如果交易在以太坊交易执行前报错,那么交易可以完全回滚,然而一旦交易在以太坊虚拟机内执行过程中出错,交易终止退出,消耗的gas并不会退还,这个失败的交易也会被打包到区块中.此外,以太坊中多给的gas并不会浪费掉,gas的消耗完全是按需的,多余的gas会正确退还给发起者:<code>st.refundGas()</code>.</p>

<p>综上,对于失败的交易我们能总结出以下几点性质:</p>

<ul>
  <li>失败的交易一旦被执行,就一定会被打包到区块链中,并且执行过程中消耗的gas也不会退还,交易的成功与失败可以使用交易的收据状态进行判断</li>
  <li>失败的交易如果没有打包到区块,那么可能的原因就有很多了,根据交易所处的阶段不同大概有这么几种可能: a.交易gas过低或参数错误根本没有进入到pending队列 b.交易进入pending进行处理,然而在检查gas等参数时报错被丢弃</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入ethereum源码-从区块头看共识挖矿]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/02/24/shen-ru-ethereumyuan-ma-cong-qu-kuai-tou-kan-gong-shi-wa-kuang/"/>
    <updated>2018-02-24T08:09:11+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/02/24/shen-ru-ethereumyuan-ma-cong-qu-kuai-tou-kan-gong-shi-wa-kuang</id>
    <content type="html"><![CDATA[<p>区块是区块链的基本组成单位,而区块头又是区块的核心数据,本文希望从区块头延展开来,看看区块链的挖矿机制。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">区块头的基本数据结构</a></li>
  <li><a href="#section-1">结构信息</a></li>
  <li><a href="#section-2">挖矿基础信息</a></li>
  <li><a href="#section-3">状态信息</a></li>
  <li><a href="#section-4">挖矿难度控制</a></li>
  <li><a href="#pow">PoW参数</a>    <ul>
      <li><a href="#dag">DAG</a></li>
      <li><a href="#hashimoto">hashimoto</a></li>
    </ul>
  </li>
  <li><a href="#section-5">其他</a></li>
  <li><a href="#section-6">参考文献</a></li>
</ul>

<h1 id="section">区块头的基本数据结构</h1>

<p>废话不多说,直接看代码:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/core/types/block.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// Header represents a block header in the Ethereum blockchain.</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">Header</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 1.结构信息</span>
</span><span class="line">    <span class="nx">ParentHash</span>  <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span>    <span class="s">`json:&quot;parentHash&quot;       gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">UncleHash</span>   <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span>    <span class="s">`json:&quot;sha3Uncles&quot;       gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">Number</span>      <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span>       <span class="s">`json:&quot;number&quot;           gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 2.挖矿基础信息</span>
</span><span class="line">    <span class="nx">Coinbase</span>    <span class="nx">common</span><span class="p">.</span><span class="nx">Address</span> <span class="s">`json:&quot;miner&quot;            gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">GasLimit</span>    <span class="kt">uint64</span>         <span class="s">`json:&quot;gasLimit&quot;         gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">GasUsed</span>     <span class="kt">uint64</span>         <span class="s">`json:&quot;gasUsed&quot;          gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 3.状态信息</span>
</span><span class="line">    <span class="nx">Time</span>        <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span>       <span class="s">`json:&quot;timestamp&quot;        gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">Root</span>        <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span>    <span class="s">`json:&quot;stateRoot&quot;        gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">TxHash</span>      <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span>    <span class="s">`json:&quot;transactionsRoot&quot; gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">ReceiptHash</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span>    <span class="s">`json:&quot;receiptsRoot&quot;     gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">Bloom</span>       <span class="nx">Bloom</span>          <span class="s">`json:&quot;logsBloom&quot;        gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 4.挖矿难度控制</span>
</span><span class="line">    <span class="nx">Difficulty</span>  <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span>       <span class="s">`json:&quot;difficulty&quot;       gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 5.PoW参数</span>
</span><span class="line">    <span class="nx">MixDigest</span>   <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span>    <span class="s">`json:&quot;mixHash&quot;          gencodec:&quot;required&quot;`</span>
</span><span class="line">    <span class="nx">Nonce</span>       <span class="nx">BlockNonce</span>     <span class="s">`json:&quot;nonce&quot;            gencodec:&quot;required&quot;`</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 6.其他</span>
</span><span class="line">    <span class="nx">Extra</span>       <span class="p">[]</span><span class="kt">byte</span>         <span class="s">`json:&quot;extraData&quot;        gencodec:&quot;required&quot;`</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>乍一看区块头的字段非常多,别着急,接下来我们逐个分析。按照字段的作用,我们可以将这些字段分成6大类(如代码注释所示),分别控制结构、状态、挖矿等信息,下面我们依次查看.</p>

<blockquote>
  <p>本文引用源码大部分均位于miner/consensus两个包中,代码引用均会给出文件名</p>
</blockquote>

<h1 id="section-1">结构信息</h1>

<p>1.<code>ParentHash</code></p>

<p>简单来说,区块链其实是一个单向链表。那么单向链表中必然存在一个将链表串起来的指针,这个指针在区块链里就是<code>ParentHash</code>.每个新挖出来的区块都包含了父区块的hash值,这样我们就可以从当前区块一直溯源到创世区块,创世区块hash值为<code>0x00</code>.</p>

<p>2.<code>UncleHash</code></p>

<p>类似ParentHash,指向叔区块hash值。</p>

<p>3.<code>Number</code></p>

<p>用于标记当前区块高度,子区块高度一定是父区块+1.</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/blockchain-link.png" alt="blockchain-link" /></p>

<p>构建区块的代码包含在<code>commitNewWork</code>函数中,该函数其实就是挖矿主流程所在位置。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/miner/worker.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">self</span> <span class="o">*</span><span class="nx">worker</span><span class="p">)</span> <span class="nx">commitNewWork</span><span class="p">(){</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="nx">num</span> <span class="o">:=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">Number</span><span class="p">()</span>
</span><span class="line">    <span class="nx">header</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">types</span><span class="p">.</span><span class="nx">Header</span><span class="p">{</span>
</span><span class="line">        <span class="nx">ParentHash</span><span class="p">:</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">Hash</span><span class="p">(),</span>          <span class="c1">// 父区块的hash</span>
</span><span class="line">        <span class="nx">Number</span><span class="p">:</span>     <span class="nx">num</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="nx">num</span><span class="p">,</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Big1</span><span class="p">),</span>  <span class="c1">// 父区块的number+1</span>
</span><span class="line">        <span class="nx">GasLimit</span><span class="p">:</span>   <span class="nx">core</span><span class="p">.</span><span class="nx">CalcGasLimit</span><span class="p">(</span><span class="nx">parent</span><span class="p">),</span>
</span><span class="line">        <span class="nx">Extra</span><span class="p">:</span>      <span class="nx">self</span><span class="p">.</span><span class="nx">extra</span><span class="p">,</span>
</span><span class="line">        <span class="nx">Time</span><span class="p">:</span>       <span class="nx">big</span><span class="p">.</span><span class="nx">NewInt</span><span class="p">(</span><span class="nx">tstamp</span><span class="p">),</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-2">挖矿基础信息</h1>

<p>1.<code>Coinbase</code></p>

<p>区块链中矿工没挖出一个新区块,都会得到两部分奖励收益:挖矿奖励+手续费,那么这个奖励是到哪个账户的,就是这个coinbase帐号,默认通常是矿工本地第一个账户。</p>

<p>2.<code>GasUsed</code></p>

<p>实际使用的gas,每执行一笔交易往该字段上累积gas值,具体代码可查看<code>ethereum/go-ethereum/core/state_processor.go:ApplyTransaction</code>.</p>

<p>3.<code>GasLimit</code></p>

<p>矿工执行交易的上限gas用量,如果执行某个交易时发现gas使用超过这个值则放弃执行后续交易。其数值是基于父区块gas用量来调整,如果<code>parentGasUsed &gt; parentGasLimit * (2/3)</code>,则增大该数值，反之则减小。具体实现可参考下面代码实现。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/core/block_validator.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// CalcGasLimit computes the gas limit of the next block after parent.</span>
</span><span class="line"><span class="c1">// This is miner strategy, not consensus protocol.</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">CalcGasLimit</span><span class="p">(</span><span class="nx">parent</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Block</span><span class="p">)</span> <span class="kt">uint64</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// contrib = (parentGasUsed * 3 / 2) / 1024</span>
</span><span class="line">    <span class="nx">contrib</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">parent</span><span class="p">.</span><span class="nx">GasUsed</span><span class="p">()</span> <span class="o">+</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">GasUsed</span><span class="p">()</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="nx">params</span><span class="p">.</span><span class="nx">GasLimitBoundDivisor</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// decay = parentGasLimit / 1024 -1</span>
</span><span class="line">    <span class="nx">decay</span> <span class="o">:=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">GasLimit</span><span class="p">()</span><span class="o">/</span><span class="nx">params</span><span class="p">.</span><span class="nx">GasLimitBoundDivisor</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">        strategy: gasLimit of block-to-mine is set based on parent&#39;s</span>
</span><span class="line"><span class="cm">        gasUsed value.  if parentGasUsed &gt; parentGasLimit * (2/3) then we</span>
</span><span class="line"><span class="cm">        increase it, otherwise lower it (or leave it unchanged if it&#39;s right</span>
</span><span class="line"><span class="cm">        at that usage) the amount increased/decreased depends on how far away</span>
</span><span class="line"><span class="cm">        from parentGasLimit * (2/3) parentGasUsed is.</span>
</span><span class="line"><span class="cm">    */</span>
</span><span class="line">    <span class="nx">limit</span> <span class="o">:=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">GasLimit</span><span class="p">()</span> <span class="o">-</span> <span class="nx">decay</span> <span class="o">+</span> <span class="nx">contrib</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">limit</span> <span class="p">&lt;</span> <span class="nx">params</span><span class="p">.</span><span class="nx">MinGasLimit</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">limit</span> <span class="p">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">MinGasLimit</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">// however, if we&#39;re now below the target (TargetGasLimit) we increase the</span>
</span><span class="line">    <span class="c1">// limit as much as we can (parentGasLimit / 1024 -1)</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">limit</span> <span class="p">&lt;</span> <span class="nx">params</span><span class="p">.</span><span class="nx">TargetGasLimit</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">limit</span> <span class="p">=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">GasLimit</span><span class="p">()</span> <span class="o">+</span> <span class="nx">decay</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">limit</span> <span class="p">&gt;</span> <span class="nx">params</span><span class="p">.</span><span class="nx">TargetGasLimit</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">limit</span> <span class="p">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">TargetGasLimit</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">limit</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-3">状态信息</h1>

<p>1.<code>Time</code></p>

<p>新区块的出块时间(按代码描述,严格来说其实是开始挖矿的时间)。</p>

<p>2.<code>Root</code>,<code>TxHash</code>,<code>ReceiptHash</code></p>

<p>这三个hash值对验证区块意义重大.</p>

<p><code>Root</code>代表的区块链当前所有账户的状态,<code>TxHash</code>是本区块所有交易摘要,<code>ReceiptHash</code>是本区块所有收据的摘要。</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/merkle.png" alt="merkle" /></p>

<p>这几个值都是MPT树的root hash值,只要树中任意节点数据有更改，那么这个root hash必然会跟着更改,这就为轻钱包实现提供了可能:不需要下载整个区块的数据,仅使用区块头就可以验证区块的合法性。具体说来,它允许轻客户端轻松地进行并核实以下类型的查询答案:</p>

<p>这笔交易被包含在特定的区块中了么？</p>

<ul>
  <li>
    <p>告诉我这个地址在过去30天中，发出X类型事件的所有实例（例如，一个众筹合约完成了它的目标）</p>
  </li>
  <li>
    <p>目前我的账户余额是多少？</p>
  </li>
  <li>
    <p>这个账户是否存在？</p>
  </li>
  <li>
    <p>假装在这个合约中运行这笔交易，它的输出会是什么？</p>
  </li>
</ul>

<p>第一种是由交易树（transaction tree）来处理的；第三和第四种则是由状态树（state tree）负责处理，第二种则由收据树（receipt tree）处理。计算前四个查询任务是相当简单的。服务器简单地找到对象，获取默克尔分支，并通过分支来回复轻客户端。</p>

<p>第五种查询任务同样也是由状态树处理，但它的计算方式会比较复杂。这里，我们需要构建下我们称之为默克尔状态转变的证明（Merkle state transition proof）。从本质上来讲，这样的证明也就是在说“如果你在根S的状态树上运行交易T，其结果状态树将是根为S’，log为L，输出为O” （“输出”作为存在于以太坊的一种概念，因为每一笔交易都是一个函数调用，它在理论上并不是必要的）。</p>

<p>为了推断这个证明，服务器在本地创建了一个假的区块，将状态设为 S，并假装是一个轻客户端，同时请求这笔交易。也就是说，如果请求这笔交易的过程，需要客户端确定一个账户的余额，这个轻客户端会发出一个余额疑问。如果这个轻客户端需要检查存储在一个特定合约的特定项目，该轻客户端会对此发出针对查询。服务器会正确地“回应”它所有的查询，但服务器也会跟踪它所有发回的数据。然后，服务器会把综合数据发送给客户端。客户端会进行相同的步骤，但会使用它的数据库所提供的证明。如果它的结果和服务器要求的是相同的，那客户端就接受证明。</p>

<blockquote>
  <p>MPT树可以参考文章<a href="http://ethfans.org/posts/Merkle-Patricia-Tree">Merkle树</a></p>
</blockquote>

<p>3.<code>Bloom</code></p>

<p>区块头里的布隆过滤器是用于搜索收据而构建的。</p>

<blockquote>
  <p><a href="https://github.com/cpselvis/zhihu-crawler/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0">布隆过滤器</a></p>
</blockquote>

<h1 id="section-4">挖矿难度控制</h1>

<p>1.<code>Difficulty</code></p>

<p>以太坊的挖矿难度是动态调整的,它的难度调整仅和父区块和本区块挖矿时间有关。 而该函数实现里根据启动参数目前有三种难度调整方案:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/consensus/ethash/consensus.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">CalcDifficulty</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">params</span><span class="p">.</span><span class="nx">ChainConfig</span><span class="p">,</span> <span class="nx">time</span> <span class="kt">uint64</span><span class="p">,</span> <span class="nx">parent</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Header</span><span class="p">)</span> <span class="o">*</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">next</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">).</span><span class="nx">Add</span><span class="p">(</span><span class="nx">parent</span><span class="p">.</span><span class="nx">Number</span><span class="p">,</span> <span class="nx">big1</span><span class="p">)</span>
</span><span class="line">    <span class="k">switch</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="nx">config</span><span class="p">.</span><span class="nx">IsByzantium</span><span class="p">(</span><span class="nx">next</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">calcDifficultyByzantium</span><span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="nx">parent</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="nx">config</span><span class="p">.</span><span class="nx">IsHomestead</span><span class="p">(</span><span class="nx">next</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">calcDifficultyHomestead</span><span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="nx">parent</span><span class="p">)</span>
</span><span class="line">    <span class="k">default</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">calcDifficultyFrontier</span><span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="nx">parent</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>每种策略代码这里不具体展开,总的来说难度值的计算是这样的:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/consensus/ethash/consensus.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="err">本区块难度</span> <span class="p">=</span> <span class="err">父区块难度</span> <span class="o">+</span> <span class="err">难度调整值</span> <span class="o">+</span> <span class="err">难度炸弹</span>
</span><span class="line"><span class="err">难度调整值</span> <span class="p">=</span> <span class="nx">f</span><span class="p">(</span><span class="err">父区块难度</span><span class="p">,</span><span class="err">父区块产生时间</span><span class="p">,</span><span class="err">本区块产生时间</span><span class="p">)</span>
</span><span class="line"><span class="err">难度炸弹</span> <span class="p">=</span> <span class="mi">2</span><span class="p">^(</span><span class="err">区块号</span><span class="o">/</span><span class="mi">100000</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以太坊的区块难度以单个区块为单位进行调整，可以非常迅速的适应算力的变化，正是这种机制，使以太坊在硬分叉出以太坊经典(ETC)以后没有出现比特币分叉出比特币现金(BCC)后的算力“暴击”问题。同时，以太坊的新区块难度在老区块的基础上有限调整的机制也使区块难度不会出现非常大的跳变</p>

<p>从这个公式可以看出,区块难度短期内仅和难度调整值有关(因为难度炸弹只有每100000个区块才会产生跳变),但是当挖矿到5400000区块后,难度值跳变到非常大,这个时候就不再适合挖矿。 </p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/eth-diff.jpg" alt="eth-diff" /></p>

<h1 id="pow">PoW参数</h1>

<p>接下来的两个参数就和无人不知无人不晓的工作量证明息息相关了,以太坊的工作量证明最终拼的就是谁最先得到这两个参数:<code>MixDigest</code>和<code>Nonce</code>.</p>

<p>目前以太坊线上使用的共识算法是基于PoW的ethash算法,主要实现位于<code>github.com/ethereum/go-ethereum/consensus/ethash</code>包中。</p>

<p>PoW算法的思路都大致是相似的,通过暴力枚举猜测一个nonce值,使得根据这个nonce种子计算出的hash值符合约定的难度,这个难度其实就是要求hash值前缀包含多少个0. </p>

<p>目前以太坊使用的hash是256位,所以将难度折算成前缀0的位数就是:<code>bits0 = (2^256)/difficulty</code>,那么我们的代码不停枚举nonce然后将计算得到的hash值前缀0位数和这个做比较就行了,主逻辑代码如下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">ethash</span> <span class="o">*</span><span class="nx">Ethash</span><span class="p">)</span> <span class="nx">mine</span><span class="p">(</span><span class="nx">block</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Block</span><span class="p">,</span> <span class="nx">id</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">seed</span> <span class="kt">uint64</span><span class="p">,</span> <span class="nx">abort</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{},</span> <span class="nx">found</span> <span class="kd">chan</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Block</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Extract some data from the header</span>
</span><span class="line">    <span class="kd">var</span> <span class="p">(</span>
</span><span class="line">        <span class="nx">header</span>  <span class="p">=</span> <span class="nx">block</span><span class="p">.</span><span class="nx">Header</span><span class="p">()</span>
</span><span class="line">        <span class="nx">hash</span>    <span class="p">=</span> <span class="nx">header</span><span class="p">.</span><span class="nx">HashNoNonce</span><span class="p">().</span><span class="nx">Bytes</span><span class="p">()</span>
</span><span class="line">        <span class="c1">// 将难度转换得出前缀0的位数</span>
</span><span class="line">        <span class="nx">target</span>  <span class="p">=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">).</span><span class="nx">Div</span><span class="p">(</span><span class="nx">maxUint256</span><span class="p">,</span> <span class="nx">header</span><span class="p">.</span><span class="nx">Difficulty</span><span class="p">)</span>
</span><span class="line">        <span class="nx">number</span>  <span class="p">=</span> <span class="nx">header</span><span class="p">.</span><span class="nx">Number</span><span class="p">.</span><span class="nx">Uint64</span><span class="p">()</span>
</span><span class="line">        <span class="nx">dataset</span> <span class="p">=</span> <span class="nx">ethash</span><span class="p">.</span><span class="nx">dataset</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span>
</span><span class="line">    <span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="nx">search</span><span class="p">:</span>
</span><span class="line">    <span class="k">for</span> <span class="p">{</span>
</span><span class="line">        <span class="o">...</span>
</span><span class="line">            <span class="c1">// Compute the PoW value of this nonce</span>
</span><span class="line">            <span class="nx">digest</span><span class="p">,</span> <span class="nx">result</span> <span class="o">:=</span> <span class="nx">hashimotoFull</span><span class="p">(</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">dataset</span><span class="p">,</span> <span class="nx">hash</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="nb">new</span><span class="p">(</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">).</span><span class="nx">SetBytes</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">Cmp</span><span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class="line">                <span class="c1">// Correct nonce found, create a new header with it</span>
</span><span class="line">                <span class="nx">header</span> <span class="p">=</span> <span class="nx">types</span><span class="p">.</span><span class="nx">CopyHeader</span><span class="p">(</span><span class="nx">header</span><span class="p">)</span>
</span><span class="line">                <span class="nx">header</span><span class="p">.</span><span class="nx">Nonce</span> <span class="p">=</span> <span class="nx">types</span><span class="p">.</span><span class="nx">EncodeNonce</span><span class="p">(</span><span class="nx">nonce</span><span class="p">)</span>
</span><span class="line">                <span class="nx">header</span><span class="p">.</span><span class="nx">MixDigest</span> <span class="p">=</span> <span class="nx">common</span><span class="p">.</span><span class="nx">BytesToHash</span><span class="p">(</span><span class="nx">digest</span><span class="p">)</span>
</span><span class="line">                <span class="o">...</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="nx">nonce</span><span class="o">++</span>
</span><span class="line">         <span class="o">...</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>该函数首先计算出区块难度对应的前缀0位数<code>target</code>,然后生成PoW依赖的计算数据集<code>dataset = ethash.dataset(number)</code>,最终开始死循环尝试计算<code>digest, result := hashimotoFull(dataset.dataset, hash, nonce)</code>,得到结果后将这两个随机数据赋值到区块头对应字段去。</p>

<p>当这个区块成功挖出后，别的区块很容易验证这个区块的PoW是否有效,就使用同样方法产生计算数据集<code>dataset</code>,然后调用<code>hashimotoLight(和hashimotoFull基本一致)</code>计算出<code>digest</code>和区块头的<code>MixDigest</code>做比较就可以了。</p>

<p>这里我们跳过了两个重要的步骤:</p>

<p>a.依赖数据集<code>dataset</code>的生成实现
b.<code>hashimotoFull/hashimotoLight</code>的具体实现</p>

<p>依赖数据集的生成就要说到以太坊的DAG</p>

<h2 id="dag">DAG</h2>

<p>ethash将DAG（有向非循环图）用于工作量证明算法，这是为每个epoch(<code>epoch := block / epochLength</code>)生成，例如，每3000个区块（125个小时，大约5.2天）。DAG要花很长时间生成。如果客户端只是按需要生成它，那么在找到新epoch第一个区块之前，每个epoch过渡都要等待很长时间。然而，DAG只取决于区块数量，所以可以预先计算来避免在每个epoch过渡过长的等待时间。Geth和ethminer执行自动的DAG生成，每次维持2个DAG以便epoch过渡流畅。挖矿从控制台操控的时候，自动DAG生成会被打开和关闭。</p>

<h2 id="hashimoto">hashimoto</h2>

<blockquote>
  <p>下面的描述摘自<a href="http://blog.csdn.net/teaspring/article/details/78050274">挖矿和共识算法的奥秘</a></p>
</blockquote>

<p>hashimoto()的逻辑比较复杂，包含了多次、多种哈希运算。下面尝试从其中数据结构变化的角度来简单描述之：</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/consensus.png" alt="hashimoto" /></p>

<p>简单介绍一下上图所代表的代码流程：</p>

<ul>
  <li>首先，hashimoto()函数将入参@hash和@nonce合并成一个40 bytes长的数组，取它的SHA-512哈希值取名seed，长度为64 bytes。</li>
  <li>然后，将seed[]转化成以uint32为元素的数组mix[]，注意一个uint32数等于4 bytes，故而seed[]只能转化成16个uint32数，而mix[]数组长度32，所以此时mix[]数组前后各半是等值的。</li>
  <li>接着，lookup()函数登场。用一个循环，不断调用lookup()从外部数据集中取出uint32元素类型数组，向mix[]数组中混入未知的数据。循环的次数可用参数调节，目前设为64次。每次循环中，变化生成参数index，从而使得每次调用lookup()函数取出的数组都各不相同。这里混入数据的方式是一种类似向量“异或”的操作，来自于FNV算法。</li>
  <li>待混淆数据完成后，得到一个基本上面目全非的mix[]，长度为32的uint32数组。这时，将其折叠(压缩)成一个长度缩小成原长1/4的uint32数组，折叠的操作方法还是来自FNV算法。</li>
  <li>最后，将折叠后的mix[]由长度为8的uint32型数组直接转化成一个长度32的byte数组，这就是返回值@digest；同时将之前的seed[]数组与digest合并再取一次SHA-256哈希值，得到的长度32的byte数组，即返回值@result。</li>
</ul>

<p>最终经过一系列多次、多种的哈希运算，hashimoto()返回两个长度均为32的byte数组 - digest[]和result[]。回忆一下ethash.mine()函数中，对于hashimotoFull()的两个返回值，会直接以big.int整型数形式比较result和target；如果符合要求，则将digest取SHA3-256的哈希值(256 bits)，并存于Header.MixDigest中，待以后Ethash.VerifySeal()可以加以验证。</p>

<h1 id="section-5">其他</h1>

<p>1.<code>Extra</code></p>

<h1 id="section-6">参考文献</h1>

<ul>
  <li><a href="http://blog.csdn.net/teaspring/article/details/78050274">挖矿和共识算法的奥秘</a> </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入ethereum源码-whisper协议解读]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/02/07/shen-ru-ethereumyuan-ma-whisperxie-yi-jie-du/"/>
    <updated>2018-02-07T08:13:02+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/02/07/shen-ru-ethereumyuan-ma-whisperxie-yi-jie-du</id>
    <content type="html"><![CDATA[<p>whisper协议是以太坊DApps之间的通信协议。</p>

<!-- more -->

<h1 id="section">概述</h1>

<p>whisper是完全基于<code>ID</code>的消息系统,它的设计目的是形成一套p2p节点间的异步广播系统。whisper网络上的消息是加密传送的,完全可以暴露在公网进行传输;此外,为了防范<code>DDos</code>攻击,whisper使用了<code>proof-of-work(PoW)</code>工作量证明提高消息发送门槛。</p>

<h1 id="whisper">whisper基础构件</h1>

<p>whisper协议对上层暴露出一套类似于<code>订阅-发布</code>的API模型,节点可以申请自己感兴趣的<code>topic</code>，那么就只会接收到这些<code>topic</code>的消息,无关主题的消息将被丢弃。在这套体系内，有几个基础构件需要说明下:</p>

<h2 id="envelope">Envelope信封</h2>

<p><code>envelope即信封</code>是whisper网络节点传输数据的基本形式。信封包含了加密的数据体和明文的元数据,元数据主要用于基本的消息校验和消息体的解密。</p>

<p>信封是以RLP编码的格式传输:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[ Version, Expiry, TTL, Topic, AESNonce, Data, EnvNonce ]</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>Version</code>:最多4字节(目前仅使用了1字节)，如果信封的<code>Version</code>比本节点当前值高,将无法解密,仅做转发</li>
  <li><code>Expiry</code>:4字节（unix时间戳秒数）,过期时间</li>
  <li><code>TTL</code>:4字节,剩余存活时间秒数</li>
  <li><code>Topic</code>:4字节,信封主题</li>
  <li><code>AESNonce</code>:12字节随机数据,仅在对称加密时有效</li>
  <li><code>Data</code>:消息体</li>
  <li><code>EnvNonce</code>:8字节任意数据(用于PoW计算)</li>
</ul>

<p>如果节点无法解密信封，那么节点对信封内的消息内容一无所知，单这并不影响节点将消息进行转发扩散。</p>

<h2 id="message">Message消息</h2>

<p>信封内的消息体解密后即得到消息内容。</p>

<h2 id="topic">Topic主题</h2>

<p>每个信封上都有一个主题,注意主题可以仅使用部分前缀</p>

<h2 id="filter">Filter过滤器</h2>

<p><code>filter</code>即<code>订阅-发布</code>模型中的订阅者</p>

<h2 id="pow">PoW工作量证明</h2>

<p><code>PoW</code>的存在是为了反垃圾信息以及降低网络负担。计算PoW所付出的代价可以理解为抵扣节点为传播和存储信息锁花费的资源.</p>

<p>在<code>whisperv5</code>中,<code>PoW</code>定义为:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">PoW = (2^BestBit) / (size * TTL)</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>BestBit</code>是hash计算值的前导0个数</li>
  <li><code>size</code>是消息大小</li>
  <li><code>TTL</code></li>
</ul>

<p>具有高<code>PoW</code>的消息具有优先处理权。</p>

<p>whisper节点发送消息需要经过<code>创建消息whisper.NewSentMessage()</code>—-&gt;<code>封装入信封msg.Wrap(msg)</code>—-&gt;<code>shh.Send()</code>,消息的工作量证明就在第二步装入信封的时候进行计算。</p>

<p><code>Warp</code>函数最终调用<code>Seal</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/whisper/whisperv5/envelope.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">Envelope</span><span class="p">)</span> <span class="nx">Seal</span><span class="p">(</span><span class="nx">options</span> <span class="o">*</span><span class="nx">MessageParams</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">target</span><span class="p">,</span> <span class="nx">bestBit</span> <span class="kt">int</span> <span class="c1">// target是需要达到的目标前置0位数</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">PoW</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// 将消息过期时间调整到工作量计算完成后</span>
</span><span class="line">        <span class="nx">e</span><span class="p">.</span><span class="nx">Expiry</span> <span class="o">+=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">WorkTime</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// 根据公式 PoW = (2^BestBit) / (size * TTL) 从预设的PoW阈值反解出BestBit</span>
</span><span class="line">        <span class="nx">target</span> <span class="p">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">powToFirstBit</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">PoW</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">target</span> <span class="p">&lt;</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">target</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">buf</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>
</span><span class="line">    <span class="c1">// Keccak256是SHA-3的一种,Keccak已可以抵御最小的复杂度为2n的攻击，其中N为散列的大小。它具有广泛的安全边际。至目前为止，第三方密码分析已经显示出Keccak没有严重的弱点</span>
</span><span class="line">    <span class="nx">h</span> <span class="o">:=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">Keccak256</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">rlpWithoutNonce</span><span class="p">())</span>
</span><span class="line">    <span class="nb">copy</span><span class="p">(</span><span class="nx">buf</span><span class="p">[:</span><span class="mi">32</span><span class="p">],</span> <span class="nx">h</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="nx">finish</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">Add</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">WorkTime</span><span class="p">)</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">).</span><span class="nx">UnixNano</span><span class="p">()</span>
</span><span class="line">    <span class="k">for</span> <span class="nx">nonce</span> <span class="o">:=</span> <span class="nb">uint64</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">UnixNano</span><span class="p">()</span> <span class="p">&lt;</span> <span class="nx">finish</span><span class="p">;</span> <span class="p">{</span>
</span><span class="line">        <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">1024</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class="line">            <span class="c1">// 暴力尝试nonce值</span>
</span><span class="line">            <span class="nx">binary</span><span class="p">.</span><span class="nx">BigEndian</span><span class="p">.</span><span class="nx">PutUint64</span><span class="p">(</span><span class="nx">buf</span><span class="p">[</span><span class="mi">56</span><span class="p">:],</span> <span class="nx">nonce</span><span class="p">)</span>
</span><span class="line">            <span class="nx">d</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">big</span><span class="p">.</span><span class="nx">Int</span><span class="p">).</span><span class="nx">SetBytes</span><span class="p">(</span><span class="nx">crypto</span><span class="p">.</span><span class="nx">Keccak256</span><span class="p">(</span><span class="nx">buf</span><span class="p">))</span>
</span><span class="line">            <span class="nx">firstBit</span> <span class="o">:=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">FirstBitSet</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="nx">firstBit</span> <span class="p">&gt;</span> <span class="nx">bestBit</span> <span class="p">{</span>
</span><span class="line">                <span class="nx">e</span><span class="p">.</span><span class="nx">EnvNonce</span><span class="p">,</span> <span class="nx">bestBit</span> <span class="p">=</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">firstBit</span>
</span><span class="line">                <span class="c1">// 当尝试得到满足条件的EnvNonce,计算完成</span>
</span><span class="line">                <span class="k">if</span> <span class="nx">target</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">bestBit</span> <span class="o">&gt;=</span> <span class="nx">target</span> <span class="p">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="nx">nonce</span><span class="o">++</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">target</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">bestBit</span> <span class="p">&lt;</span> <span class="nx">target</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Errorf</span><span class="p">(</span><span class="s">&quot;failed to reach the PoW target, specified pow time (%d seconds) was insufficient&quot;</span><span class="p">,</span> <span class="nx">options</span><span class="p">.</span><span class="nx">WorkTime</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-1">通信流程</h1>

<p>whisper协议的实现位于包<code>github.com/ethereum/go-ethereum/whisper</code>，该包下面有多个版本实现,目前最新协议包是<code>whisperv6</code>.</p>

<h2 id="whisper-main-loop">whisper main loop</h2>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/whisper-main-loop.png" alt="whisper-main-loop" /></p>

<p>whisper节点启动后产生两个分支:</p>

<ul>
  <li>一个分支负责清理<code>shh.envelopes</code>中的过期消息</li>
  <li>另一个分支(proccessQueue)从两个队列取出新接收到的消息,根据消息对应topic投放(Trigger)到对应接收者(filter),从而交付给上层应用进行处理</li>
</ul>

<p>补充说下whisper里两个队列<code>messageQueue,p2pMsgQueue</code>的不同作用,<code>messageQueue</code>接收普通的广播消息,<code>p2pMsgQueue</code>接收点对点的直接消息,可绕过<code>pow</code>和<code>ttl</code>限制.</p>

<h2 id="whisper-protocol">whisper protocol</h2>

<p>whisper协议的具体实现里,代码流程也非常清晰:</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/whisper-peer-loop.png" alt="whisper-peer-loop" /></p>

<p>每个peer连接成功后,产生两个goroutine,进行消息接收和广播:</p>

<ul>
  <li>接收消息协程不断从连接中读取新消息,并且将消息暂存到<code>shh.envelopes</code>中,如果发现是一条未接收过的新消息,则将消息转发到对应的队列<code>(messageQueue,p2pMsgQueue)</code></li>
  <li>广播协程负责将该peer未接收过的消息(本节点认为该peer未接收过,并非peer一定没接收过,p2p网络其他节点可能已经将消息广播到该节点了)投递到该peer</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入ethereum源码-p2p模块节点发现机制]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/01/30/shen-ru-ethereumyuan-ma-p2pmo-kuai-jie-dian-fa-xian-ji-zhi/"/>
    <updated>2018-01-30T03:40:37+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/01/30/shen-ru-ethereumyuan-ma-p2pmo-kuai-jie-dian-fa-xian-ji-zhi</id>
    <content type="html"><![CDATA[<p>ethereum是基于kademlia协议实现其节点自动发现机制,完整整个网络拓扑关系的构建刷新。
<!-- more --></p>

<ul id="markdown-toc">
  <li><a href="#kademlia">Kademlia协议</a></li>
  <li><a href="#kademlia-like">以太坊Kademlia-like协议</a></li>
  <li><a href="#section">源码跟踪以太坊节点发现机制</a>    <ul>
      <li><a href="#refreshloop">1. <code>refreshLoop()</code></a></li>
      <li><a href="#loopreadloop">2. <code>loop()</code>和<code>readLoop()</code></a></li>
    </ul>
  </li>
  <li><a href="#section-1">内网穿透</a></li>
  <li><a href="#section-2">参考文献</a></li>
</ul>

<h1 id="kademlia">Kademlia协议</h1>

<blockquote>
  <p>以下内容摘自维基百科,全文查看参考文献Kademlia</p>
</blockquote>

<p>Kademlia是一种通过分散式杂凑表实现的协议算法，它是由Petar和David为非集中式P2P计算机网络而设计的。Kademlia规定了网络的结构，也规定了通过节点查询进行信息交换的方式。Kademlia网络节点之间使用UDP进行通讯。参与通讯的所有节点形成一张虚拟网（或者叫做覆盖网）。这些节点通过一组数字（或称为节点ID）来进行身份标识。节点ID不仅可以用来做身份标识，还可以用来进行值定位。</p>

<p>Kademlia路由表由多个列表组成，每个列表对应节点ID的一位（例如：假如节点ID共有128位，则节点的路由表将包含128个列表），包含多个条目，条目中包含定位其他节点所必要的一些数据。列表条目中的这些数据通常是由其他节点的IP地址，端口和节点ID组成。每个列表对应于与节点相距特定范围距离的一些节点，节点的第n个列表中所找到的节点的第n位与该节点的第n位肯定不同，而前n-1位相同，这就意味着很容易使用网络中远离该节点的一半节点来填充第一个列表（第一位不同的节点最多有一半），而用网络中四分之一的节点来填充第二个列表（比第一个列表中的那些节点离该节点更近一位），依次类推。如果ID有128个二进制位，则网络中的每个节点按照不同的异或距离把其他所有的节点分成了128类，ID的每一位对应于其中的一类。随着网络中的节点被某节点发现，它们被逐步加入到该节点的相应的列表中，这个过程中包括向节点列表中存信息和从节点列表中取信息的操作，甚至还包括当时协助其他节点寻找相应键对应值的操作。这个过程中发现的所有节点都将被加入到节点的列表之中，因此节点对整个网络的感知是动态的，这使得网络一直保持着频繁地更新，增强了抵御错误和攻击的能力。</p>

<p>在Kademlia相关的论文中，列表也称为K桶，其中K是一个系统变量，如20，每一个K桶是一个最多包含K个条目的列表，也就是说，网络中所有节点的一个列表（对应于某一位，与该节点相距一个特定的距离）最多包含20个节点。随着对应的bit位变低（即对应的异或距离越来越短），K桶包含的可能节点数迅速下降（这是由于K桶对应的异或距离越近，节点数越少），因此，对应于更低bit位的K桶显然包含网络中所有相关部分的节点。由于网络中节点的实际数量远远小于可能ID号的数量，所以对应那些短距离的某些K桶可能一直是空的（如果异或距离只有1，可能的数量就最大只能为1，这个异或距离为1的节点如果没有发现，则对应于异或距离为1的K桶则是空的）。</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/6/63/Dht_example_SVG.svg" alt="kademlia example" /></p>

<p>让我们看上面的那个简单网络，该网络最大可有2^3，即8个关键字和节点，目前共有7个节点加入，每个节点用一个小圈表示（在树的底部）。我们考虑那个用黑圈标注的节点6，它共有3个K桶，节点0，1和2（二进制表示为000，001和010）是第一个K桶的候选节点，节点3目前（二进制表示为011）还没有加入网络，节点4和节点5（二进制表示分别为100和101）是第二个K桶的候选节点，只有节点7（二进制表示为111）是第3个K桶的候选节点。图中，3个K桶都用灰色圈表示，假如K桶的大小（即K值）是2，那么第一个K桶只能包含3个节点中的2个。众所周知，那些长时间在线连接的节点未来长时间在线的可能性更大，基于这种静态统计分布的规律，Kademlia选择把那些长时间在线的节点存入K桶，这一方法增长了未来某一时刻有效节点的数量，同时也提供了更为稳定的网络。当某个K桶已满，而又发现了相应于该桶的新节点的时候，那么，就首先检查K桶中最早访问的节点，假如该节点仍然存活，那么新节点就被安排到一个附属列表中（作为一个替代缓存）.只有当K桶中的某个节点停止响应的时候，替代cache才被使用。换句话说，新发现的节点只有在老的节点消失后才被使用。</p>

<h1 id="kademlia-like">以太坊Kademlia-like协议</h1>

<p>以太坊的kademlia网(简称kad)和标准kad网有部分差异.</p>

<p>下面对照以太坊源码,阐述下kad网里几个概念:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/p2p/discover/table.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">const</span> <span class="p">(</span>
</span><span class="line">    <span class="nx">alpha</span>      <span class="p">=</span> <span class="mi">3</span>                      <span class="c1">// Kademlia并发参数</span>
</span><span class="line">    <span class="nx">bucketSize</span> <span class="p">=</span> <span class="mi">16</span>                     <span class="c1">// Kademlia K桶大小(可容纳节点数)</span>
</span><span class="line">    <span class="nx">hashBits</span>   <span class="p">=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span><span class="p">{})</span> <span class="o">*</span> <span class="mi">8</span> <span class="c1">// 每个节点ID长度,32*8=256, 32位16进制</span>
</span><span class="line">    <span class="nx">nBuckets</span>   <span class="p">=</span> <span class="nx">hashBits</span> <span class="o">+</span> <span class="mi">1</span>           <span class="c1">// K桶个数</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>α</code>即代码里的<code>alpha</code>,是系统内一个优化参数,控制每次从K桶最多取出节点个数,ethereum取值3</li>
  <li><code>bucketSize</code>,K桶大小,ethereum取16</li>
  <li><code>hashBits</code>,节点长度256位</li>
  <li><code>nBuckets</code>,K桶个数,目前取257</li>
</ul>

<p>以太坊Kad网总共定义了4种消息类型:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/p2p/discover/udp.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">const</span> <span class="p">(</span>
</span><span class="line">    <span class="nx">pingPacket</span> <span class="p">=</span> <span class="kc">iota</span> <span class="o">+</span> <span class="mi">1</span> <span class="c1">// ping操作</span>
</span><span class="line">    <span class="nx">pongPacket</span>            <span class="c1">// pong操作</span>
</span><span class="line">
</span><span class="line">    <span class="nx">findnodePacket</span>        <span class="c1">// find node节点查询</span>
</span><span class="line">    <span class="nx">neighborsPacket</span>       <span class="c1">// neighbors邻居回应</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>ping</code>和<code>pong</code>是一对操作,用于检测节点活性,节点收到<code>ping</code>消息后立即回复<code>pong</code>响应:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// 收到ping消息的响应函数</span>
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">ping</span><span class="p">)</span> <span class="nx">handle</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">udp</span><span class="p">,</span> <span class="nx">from</span> <span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">,</span> <span class="nx">fromID</span> <span class="nx">NodeID</span><span class="p">,</span> <span class="nx">mac</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 向ping消息发送方回复pong</span>
</span><span class="line">    <span class="nx">t</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">pongPacket</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">pong</span><span class="p">{</span>
</span><span class="line">        <span class="nx">To</span><span class="p">:</span>         <span class="nx">makeEndpoint</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">From</span><span class="p">.</span><span class="nx">TCP</span><span class="p">),</span>
</span><span class="line">        <span class="nx">ReplyTok</span><span class="p">:</span>   <span class="nx">mac</span><span class="p">,</span>
</span><span class="line">        <span class="nx">Expiration</span><span class="p">:</span> <span class="nb">uint64</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">Add</span><span class="p">(</span><span class="nx">expiration</span><span class="p">).</span><span class="nx">Unix</span><span class="p">()),</span>
</span><span class="line">    <span class="p">})</span>
</span><span class="line">    <span class="k">if</span> <span class="p">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">handleReply</span><span class="p">(</span><span class="nx">fromID</span><span class="p">,</span> <span class="nx">pingPacket</span><span class="p">,</span> <span class="nx">req</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// 成功完成一次ping-pong,更新K桶节点信息</span>
</span><span class="line">        <span class="k">go</span> <span class="nx">t</span><span class="p">.</span><span class="nx">bond</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="nx">fromID</span><span class="p">,</span> <span class="nx">from</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">From</span><span class="p">.</span><span class="nx">TCP</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>findnode</code>和<code>neighbors</code>是一对操作.</p>

<p><code>findnode</code>用于查找与某节点相距最近的节点,查找到后以<code>neighbors</code>类型消息回复查找发起者</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// 收到findnode消息的响应函数</span>
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">findnode</span><span class="p">)</span> <span class="nx">handle</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">udp</span><span class="p">,</span> <span class="nx">from</span> <span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">,</span> <span class="nx">fromID</span> <span class="nx">NodeID</span><span class="p">,</span> <span class="nx">mac</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="nx">target</span> <span class="o">:=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">Keccak256Hash</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">Target</span><span class="p">[:])</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 从本节点路由表里查找于target节点相距最近的bucketSize的节点</span>
</span><span class="line">    <span class="nx">closest</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">closest</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">bucketSize</span><span class="p">).</span><span class="nx">entries</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">
</span><span class="line">    <span class="nx">p</span> <span class="o">:=</span> <span class="nx">neighbors</span><span class="p">{</span><span class="nx">Expiration</span><span class="p">:</span> <span class="nb">uint64</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">Add</span><span class="p">(</span><span class="nx">expiration</span><span class="p">).</span><span class="nx">Unix</span><span class="p">())}</span>
</span><span class="line">    <span class="c1">// 回复查询发起方</span>
</span><span class="line">    <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">n</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">closest</span> <span class="p">{</span>
</span><span class="line">        <span class="o">...</span>
</span><span class="line">        <span class="nx">t</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">neighborsPacket</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">p</span><span class="p">)</span>
</span><span class="line">        <span class="o">...</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section">源码跟踪以太坊节点发现机制</h1>

<p>了解了以太坊的4种基本操作以及kad网络概念,我们就可以来看看节点发现机制怎么流转起来的:</p>

<p>节点发现的代码位于<code>github.com/ethereum/go-ethereum/p2p/discover</code>包。</p>

<p>首先,在节点启动时启动UDP”端口监听”:<code>server.Start() ==&gt; discover.ListenUDP ==&gt; newUDP()</code></p>

<p><code>newUDP()</code>分叉出去三个流程,三个流程均是无限循环:</p>

<ul>
  <li><code>func (tab *Table) refreshLoop()</code></li>
  <li><code>func (t *udp) loop()</code></li>
  <li><code>func (t *udp) readLoop(unhandled chan ReadPacket)</code></li>
</ul>

<h4 id="refreshloop">1. <code>refreshLoop()</code></h4>

<p>该流程每隔1小时或按需刷新K桶,核心逻辑实现位于<code>doRefresh</code>函数:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/p2p/discover/table.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">tab</span> <span class="o">*</span><span class="nx">Table</span><span class="p">)</span> <span class="nx">doRefresh</span><span class="p">(</span><span class="nx">done</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 和标准Kademlia协议选取最旧的K桶进行刷新不同，以太坊选取一个随机节点ID作为刷新基点</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">target</span> <span class="nx">NodeID</span>
</span><span class="line">    <span class="nx">rand</span><span class="p">.</span><span class="nx">Read</span><span class="p">(</span><span class="nx">target</span><span class="p">[:])</span>
</span><span class="line">    <span class="c1">// lookup函数是最kad网最核心函数,查询离target最近一批节点</span>
</span><span class="line">    <span class="nx">result</span> <span class="o">:=</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 如果没找到,则从本地节点数据库加载预配置的种子节点到对应K桶</span>
</span><span class="line">    <span class="nx">seeds</span> <span class="o">:=</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">querySeeds</span><span class="p">(</span><span class="nx">seedCount</span><span class="p">,</span> <span class="nx">seedMaxAge</span><span class="p">)</span>
</span><span class="line">    <span class="nx">seeds</span> <span class="p">=</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">bondall</span><span class="p">(</span><span class="nb">append</span><span class="p">(</span><span class="nx">seeds</span><span class="p">,</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">nursery</span><span class="o">...</span><span class="p">))</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 最后,以自身作为目标节点,刷新K桶</span>
</span><span class="line">    <span class="nx">tab</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="nx">tab</span><span class="p">.</span><span class="nx">self</span><span class="p">.</span><span class="nx">ID</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>tab.lookup</code>函数虽然关键,然而其逻辑其实是很简单的:</p>

<p>a. 查询离target最近一批节点,距离计算即对kad网络XOR(异或)距离计算的实现</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">tab</span> <span class="o">*</span><span class="nx">Table</span><span class="p">)</span> <span class="nx">closest</span><span class="p">(</span><span class="nx">target</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span><span class="p">,</span> <span class="nx">nresults</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="nx">nodesByDistance</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 遍历本地路由节点表</span>
</span><span class="line">    <span class="nx">close</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">nodesByDistance</span><span class="p">{</span><span class="nx">target</span><span class="p">:</span> <span class="nx">target</span><span class="p">}</span>
</span><span class="line">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">b</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">buckets</span> <span class="p">{</span>
</span><span class="line">        <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">n</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">b</span><span class="p">.</span><span class="nx">entries</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">close</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">nresults</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">close</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="c1">// close.push最终调用distcmp进行异或计算</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">distcmp</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class="line">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">target</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">da</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">^</span> <span class="nx">target</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class="line">        <span class="nx">db</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">^</span> <span class="nx">target</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">da</span> <span class="p">&gt;</span> <span class="nx">db</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">da</span> <span class="p">&lt;</span> <span class="nx">db</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>b. 迭代上一步查到的所有节点,向这些节点发起<code>findnode</code>操作查询离target节点最近的节点列表,将查询得到的节点进行<code>ping-pong</code>测试,将测试通过的节点落库保存</p>

<p>经过这个流程后,节点的K桶就能够比较均匀地将不同网络节点更新到本地K桶中。</p>

<h4 id="loopreadloop">2. <code>loop()</code>和<code>readLoop()</code></h4>

<p>这两个循环流程放在一起说,它们主要是一个工程实现,将异步调用代码通过channel串接成同步。业务上主要是负责处理<code>ping,pong,findnode,neighbors</code>四个消息类型的收发。</p>

<p>唯一值得稍加阐述的可能只有<code>pending</code>结构:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// pending实现了一种延迟处理逻辑</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">// 它主要有两个作用:</span>
</span><span class="line"><span class="c1">// 1. 提供回调机制,当某一个操作发起异步请求时,就使用pending结构封装一个闭包,当收到异步回复后从pending列表取出这个闭包,执行回调,因此在这个回调里可以完成数据包校验等后处理</span>
</span><span class="line"><span class="c1">// 如findnode操作将更新k桶的操作暂存,再获取到异步回复后执行这个闭包完成k桶更新</span>
</span><span class="line"><span class="c1">// 2. 提供多个回复接收功能,一个RPC请求可能会对应多个回复包,比如findnode对应多个neigbours回复包,此时可以提供多个pending进行逐个包校验</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">pending</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 来源节点</span>
</span><span class="line">    <span class="nx">from</span>  <span class="nx">NodeID</span>
</span><span class="line">    <span class="nx">ptype</span> <span class="kt">byte</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 调用超时丢弃pending结构</span>
</span><span class="line">    <span class="nx">deadline</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 回调函数,简单而强大</span>
</span><span class="line">    <span class="nx">callback</span> <span class="kd">func</span><span class="p">(</span><span class="nx">resp</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">(</span><span class="nx">done</span> <span class="kt">bool</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="nx">errc</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">error</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>综述,邻居节点发现流程:</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/eth_kad.jpeg" alt="kademlia" /></p>

<p>节点第一次启动读取公共种子节点信息,已本节点ID作为target更新本地K桶,然后每隔一段时间进行节点更新, 刷新K桶流程如下:</p>

<p>a. 随机生成目标节点Id，记为TargetId，从1开始记录发现次数和刷新时间。</p>

<p>b. 在当前节点的K桶里查找与目标节点最近的16个节点</p>

<p>c. 向b中得到的每个节点发送findnode命令,接收到每个节点传回的neighbours节点</p>

<p>d. 对c返回的每个节点进行ping-pong测试然后更新到本地k桶</p>

<p>e. 上述流程均是基于UDP的发现流程,p2p网络会定时随机取k桶中未连接的节点进行TCP连接,在连接好的TCP通道进行通信(tcp连接协程里会自己做心跳维护这个连接)</p>

<h1 id="section-1">内网穿透</h1>

<p>ethereum是基于p2p通信的,所有的操作都有可能涉及到内网穿透,而目前内网穿透最常用的方法是udp打洞,这也是kad网络使用udp作为基础通信协议的原因。</p>

<p>一个简单的udp打通进行p2p通信的例子讲解可以参考<a href="http://qjpcpu.github.io/blog/2018/01/29/shen-ru-ethereumyuan-ma-p2pmo-kuai-ji-chu-jie-gou/">深入ethereum源码-p2p模块基础结构</a>。</p>

<p>然而以太坊里将这部分逻辑全部隐藏,可以在节点初始化函数里看出一点痕迹:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">srv</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nx">Start</span><span class="p">()</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">addr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">ResolveUDPAddr</span><span class="p">(</span><span class="s">&quot;udp&quot;</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">ListenAddr</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="nx">err</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">ListenUDP</span><span class="p">(</span><span class="s">&quot;udp&quot;</span><span class="p">,</span> <span class="nx">addr</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="nx">err</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="nx">realaddr</span> <span class="p">=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">LocalAddr</span><span class="p">().(</span><span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">NAT</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">!</span><span class="nx">realaddr</span><span class="p">.</span><span class="nx">IP</span><span class="p">.</span><span class="nx">IsLoopback</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">                <span class="c1">// 进行内网网端口映射</span>
</span><span class="line">                <span class="k">go</span> <span class="nx">nat</span><span class="p">.</span><span class="nx">Map</span><span class="p">(</span><span class="nx">srv</span><span class="p">.</span><span class="nx">NAT</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">quit</span><span class="p">,</span> <span class="s">&quot;udp&quot;</span><span class="p">,</span> <span class="nx">realaddr</span><span class="p">.</span><span class="nx">Port</span><span class="p">,</span> <span class="nx">realaddr</span><span class="p">.</span><span class="nx">Port</span><span class="p">,</span> <span class="s">&quot;ethereum discovery&quot;</span><span class="p">)</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="c1">// TODO: react to external IP changes over time.</span>
</span><span class="line">            <span class="k">if</span> <span class="nx">ext</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">NAT</span><span class="p">.</span><span class="nx">ExternalIP</span><span class="p">();</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">                <span class="nx">realaddr</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">{</span><span class="nx">IP</span><span class="p">:</span> <span class="nx">ext</span><span class="p">,</span> <span class="nx">Port</span><span class="p">:</span> <span class="nx">realaddr</span><span class="p">.</span><span class="nx">Port</span><span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>首先，以太坊tcp/udp共用了一个端口,然后使用uPnp协议簇进行内外网端口映射,完成链路打通,从而穿透内网.</p>

<p>具体封装位于<code>nat</code>模块,但具体实现也是使用了三方库<a href="https://github.com/huin/goupnp">goupnp</a>.具体实现是关于uPnP的一个大话题,就不在这里分叉出去了。</p>

<h1 id="section-2">参考文献</h1>

<ul>
  <li><a href="https://zh.wikipedia.org/wiki/Kademlia">Kademlia</a></li>
  <li><a href="http://www.yeolar.com/note/2010/03/21/kademlia/">Kademlia协议原理简介</a></li>
  <li><a href="https://github.com/ethereum/wiki/wiki/Node-discovery-protocol">Node discovery protocol</a></li>
  <li><a href="http://www.8btc.com/etc-p2p">P2P网络及节点发现机制</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入ethereum源码-p2p模块基础结构]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/01/29/shen-ru-ethereumyuan-ma-p2pmo-kuai-ji-chu-jie-gou/"/>
    <updated>2018-01-29T03:19:23+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/01/29/shen-ru-ethereumyuan-ma-p2pmo-kuai-ji-chu-jie-gou</id>
    <content type="html"><![CDATA[<p>(go-ethereum/p2p)包允许您快速方便地将对等网络添加到任何类型的应用程序。p2p包采用模块化结构,包含p2p网络节点通信维护及新节点发现,将网络结构的基础细节封装并向上层屏蔽,并且暴露了简单接口让上层实现子协议,上层应用使用自己的附加子协议扩展p2p非常简单直接.</p>

<p>如果将以太坊的p2p类比做tcp协议,那么p2p暴露出来的子协议就类似http,使得以太坊能够在基础p2p基础上构建出whisper网络。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#peer-to-peer">Peer to peer</a></li>
  <li><a href="#peer">peer接入</a></li>
  <li><a href="#rlp">数据传输格式RLP</a></li>
  <li><a href="#section">总述</a></li>
  <li><a href="#section-1">参考文献</a></li>
</ul>

<h1 id="peer-to-peer">Peer to peer</h1>

<p>在深入了解前,最好先看看基于p2p包怎么实现一个自己子协议,建立对其的直观印象</p>

<blockquote>
  <p>下面示例来基于官方[Peer to peer]wiki文档(官方文档有个小bug, ^_^),详细参考文献</p>
</blockquote>

<p>启动一个p2p节点仅需要对<code>p2p.Server</code>做一些简单配置:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">nodekey</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">GenerateKey</span><span class="p">()</span>
</span><span class="line"><span class="nx">srv</span> <span class="o">:=</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span>
</span><span class="line">    <span class="nx">Config</span><span class="p">:</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span><span class="line">        <span class="nx">MaxPeers</span><span class="p">:</span>   <span class="mi">10</span><span class="p">,</span>
</span><span class="line">        <span class="nx">PrivateKey</span><span class="p">:</span> <span class="nx">nodekey</span><span class="p">,</span>
</span><span class="line">        <span class="nx">Name</span><span class="p">:</span>       <span class="s">&quot;my node name&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="nx">ListenAddr</span><span class="p">:</span> <span class="s">&quot;:30300&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="nx">Protocols</span><span class="p">:</span>  <span class="p">[]</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">{},</span>
</span><span class="line">        <span class="nx">NAT</span><span class="p">:</span>        <span class="nx">nat</span><span class="p">.</span><span class="nx">Any</span><span class="p">(),</span>   <span class="c1">// 支持内网穿透</span>
</span><span class="line">        <span class="nx">Logger</span><span class="p">:</span>     <span class="nx">log</span><span class="p">.</span><span class="nx">New</span><span class="p">(),</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样启动的节点仅包含了以太坊自身的基础协议:</p>

<p>要实现自己的子协议,就需要拓展<code>Protocols:  []p2p.Protocol{}</code>,实现自己的<code>p2p.Protocol</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">MyProtocol</span><span class="p">()</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">{</span>                                                          <span class="c1">// 1.</span>
</span><span class="line">		<span class="nx">Name</span><span class="p">:</span>    <span class="s">&quot;MyProtocol&quot;</span><span class="p">,</span>                                                    <span class="c1">// 2.</span>
</span><span class="line">		<span class="nx">Version</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>                                                               <span class="c1">// 3.</span>
</span><span class="line">		<span class="nx">Length</span><span class="p">:</span>  <span class="mi">1</span><span class="p">,</span>                                                               <span class="c1">// 4.</span>
</span><span class="line">		<span class="nx">Run</span><span class="p">:</span>     <span class="kd">func</span><span class="p">(</span><span class="nx">peer</span> <span class="o">*</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Peer</span><span class="p">,</span> <span class="nx">ws</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">MsgReadWriter</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">},</span> <span class="c1">// 5.</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>一个子协议即一个<code>p2p.Protocol</code></li>
  <li>子协议名,需要唯一标识该子协议</li>
  <li>协议版本号,当一个子协议有多个版本时,采纳最高版本的协议</li>
  <li>该协议拥有的消息类型个数,因为p2p网络是可扩展的，因此其需要具有能够发送随意个数的信息的能力（需要携带type，在下文中我们能够看到说明）,p2p的handler需要知道应该预留多少空间以用来服务你的协议。这是也是共识信息能够通过message ID到达各个peer并实现协商的保障。我们的协议仅仅支持一种类型</li>
  <li>在你的协议主要的handler中，我们现在故意将其留空。这个peer变量是指代连接到当前节点，其携带了一些peer本身的信息。其ws变量是reader和writer允许你同该peer进行通信，如果信息能够发送到当前节点，则反之也能够从本节点发送到对端peer节点</li>
</ol>

<p>现在让我们将前面留空的handler代码实现，以让它能够同别的peer通信:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">const</span> <span class="nx">messageId</span> <span class="p">=</span> <span class="mi">0</span>   <span class="c1">// 1.</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">Message</span> <span class="kt">string</span>   <span class="c1">// 2.</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">msgHandler</span><span class="p">(</span><span class="nx">peer</span> <span class="o">*</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Peer</span><span class="p">,</span> <span class="nx">ws</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">MsgReadWriter</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="k">for</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">msg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ws</span><span class="p">.</span><span class="nx">ReadMsg</span><span class="p">()</span>   <span class="c1">// 3.</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>            <span class="c1">// 4.</span>
</span><span class="line">            <span class="k">return</span> <span class="nx">err</span> <span class="c1">// if reading fails return err which will disconnect the peer.</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">var</span> <span class="nx">myMessage</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="nx">Message</span>
</span><span class="line">        <span class="nx">err</span> <span class="p">=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">myMessage</span><span class="p">)</span> <span class="c1">// 5.</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">            <span class="c1">// handle decode error</span>
</span><span class="line">            <span class="k">continue</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">switch</span> <span class="nx">myMessage</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">{</span>
</span><span class="line">        <span class="k">case</span> <span class="s">&quot;foo&quot;</span><span class="p">:</span>
</span><span class="line">            <span class="nx">err</span> <span class="o">:=</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">SendItems</span><span class="p">(</span><span class="nx">ws</span><span class="p">,</span> <span class="nx">messageId</span><span class="p">,</span> <span class="s">&quot;bar&quot;</span><span class="p">)</span>  <span class="c1">// 6.</span>
</span><span class="line">            <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">                <span class="k">return</span> <span class="nx">err</span> <span class="c1">// return (and disconnect) error if writing fails.</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">         <span class="k">default</span><span class="p">:</span>
</span><span class="line">             <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;recv:&quot;</span><span class="p">,</span> <span class="nx">myMessage</span><span class="p">)</span>
</span><span class="line">         <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>其中有且唯一的已知信息ID；</li>
  <li>将Messages alias 为string类型；</li>
  <li>ReadMsg将一直阻塞等待，直到其收到了一条新的信息，一个错误或者EOF；</li>
  <li>如果在读取流信息的过程当中收到了一个错误，最好的解决实践是将其返回给p2p server进行处理。这种错误通常是对端节点已经断开连接；</li>
  <li>msg包括两个属性和一个decode方法
    <ol>
      <li>Code 包括了信息ID，Code == messageId (i.e.0),取值范围为[0,p2p.Protocol.Length)</li>
      <li>Payload 是信息的内容</li>
      <li>Decode(<ptr>) 是一个工具方法：取得 msg.Payload并将其解码，并将其内容设置到传入的message指针中，如果失败了则返回一个error</ptr></li>
    </ol>
  </li>
  <li>如果解码出来的信息是foo将发回一个NewMessage并用messageId标记信息类型，信息内容是bar；而bar信息在被对端收到之后将被defaultcase捕获。</li>
</ol>

<p>现在，我们将上述的所有部分整合起来，得到下面的p2p样例代码:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/crypto&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/log&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/p2p&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/p2p/discover&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/p2p/nat&quot;</span>
</span><span class="line">	<span class="s">&quot;net&quot;</span>
</span><span class="line">	<span class="s">&quot;os&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">const</span> <span class="nx">messageId</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class="line"><span class="kd">const</span> <span class="nx">messageId1</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">Message</span> <span class="kt">string</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">MyProtocol</span><span class="p">()</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">{</span>
</span><span class="line">		<span class="nx">Name</span><span class="p">:</span>    <span class="s">&quot;MyProtocol&quot;</span><span class="p">,</span>
</span><span class="line">		<span class="nx">Version</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class="line">		<span class="nx">Length</span><span class="p">:</span>  <span class="mi">2</span><span class="p">,</span>
</span><span class="line">		<span class="nx">Run</span><span class="p">:</span>     <span class="nx">msgHandler</span><span class="p">,</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">nodekey</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">GenerateKey</span><span class="p">()</span>
</span><span class="line">	<span class="nx">logger</span> <span class="o">:=</span> <span class="nx">log</span><span class="p">.</span><span class="nx">New</span><span class="p">()</span>
</span><span class="line">	<span class="nx">logger</span><span class="p">.</span><span class="nx">SetHandler</span><span class="p">(</span><span class="nx">log</span><span class="p">.</span><span class="nx">StderrHandler</span><span class="p">)</span>
</span><span class="line">	<span class="nx">srv</span> <span class="o">:=</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span>
</span><span class="line">		<span class="nx">Config</span><span class="p">:</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span><span class="line">			<span class="nx">MaxPeers</span><span class="p">:</span>   <span class="mi">10</span><span class="p">,</span>
</span><span class="line">			<span class="nx">PrivateKey</span><span class="p">:</span> <span class="nx">nodekey</span><span class="p">,</span>
</span><span class="line">			<span class="nx">Name</span><span class="p">:</span>       <span class="s">&quot;my node name&quot;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">ListenAddr</span><span class="p">:</span> <span class="s">&quot;:30300&quot;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">Protocols</span><span class="p">:</span>  <span class="p">[]</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">{</span><span class="nx">MyProtocol</span><span class="p">()},</span>
</span><span class="line">			<span class="nx">NAT</span><span class="p">:</span>        <span class="nx">nat</span><span class="p">.</span><span class="nx">Any</span><span class="p">(),</span>
</span><span class="line">			<span class="nx">Logger</span><span class="p">:</span>     <span class="nx">logger</span><span class="p">,</span>
</span><span class="line">		<span class="p">},</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">Start</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;started..&quot;</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">())</span>
</span><span class="line">	<span class="k">select</span> <span class="p">{}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">msgHandler</span><span class="p">(</span><span class="nx">peer</span> <span class="o">*</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Peer</span><span class="p">,</span> <span class="nx">ws</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">MsgReadWriter</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;peer&quot;</span><span class="p">,</span><span class="nx">peer</span><span class="p">.</span><span class="nx">Name</span><span class="p">(),</span><span class="s">&quot;connected.&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="nx">p2p</span><span class="p">.</span><span class="nx">SendItems</span><span class="p">(</span><span class="nx">ws</span><span class="p">,</span> <span class="nx">messageId</span><span class="p">,</span> <span class="s">&quot;foo&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="k">for</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">msg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ws</span><span class="p">.</span><span class="nx">ReadMsg</span><span class="p">()</span>
</span><span class="line">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;peer&quot;</span><span class="p">,</span><span class="nx">peer</span><span class="p">.</span><span class="nx">Name</span><span class="p">(),</span><span class="s">&quot;disconnected&quot;</span><span class="p">)</span>
</span><span class="line">			<span class="k">return</span> <span class="nx">err</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">        <span class="c1">// SendItems writes an RLP with the given code and data elements.</span>
</span><span class="line">        <span class="c1">// For a call such as:</span>
</span><span class="line">        <span class="c1">//</span>
</span><span class="line">        <span class="c1">//    SendItems(w, code, e1, e2, e3)</span>
</span><span class="line">        <span class="c1">//</span>
</span><span class="line">        <span class="c1">// the message payload will be an RLP list containing the items:</span>
</span><span class="line">        <span class="c1">//</span>
</span><span class="line">        <span class="c1">//    [e1, e2, e3]</span>
</span><span class="line">        <span class="c1">// 所以这里收消息应该定义为数组</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">myMessage</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="nx">Message</span>
</span><span class="line">		<span class="nx">err</span> <span class="p">=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">myMessage</span><span class="p">)</span>
</span><span class="line">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">			<span class="c1">// handle decode error</span>
</span><span class="line">			<span class="k">continue</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;code:&quot;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">Code</span><span class="p">,</span> <span class="s">&quot;receiver at:&quot;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">ReceivedAt</span><span class="p">,</span> <span class="s">&quot;msg:&quot;</span><span class="p">,</span> <span class="nx">myMessage</span><span class="p">)</span>
</span><span class="line">		<span class="k">switch</span> <span class="nx">myMessage</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">{</span>
</span><span class="line">		<span class="k">case</span> <span class="s">&quot;foo&quot;</span><span class="p">:</span>
</span><span class="line">			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">SendItems</span><span class="p">(</span><span class="nx">ws</span><span class="p">,</span> <span class="nx">messageId1</span><span class="p">,</span> <span class="s">&quot;bar&quot;</span><span class="p">)</span>
</span><span class="line">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">				<span class="k">return</span> <span class="nx">err</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">		<span class="k">default</span><span class="p">:</span>
</span><span class="line">			<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;recv:&quot;</span><span class="p">,</span> <span class="nx">myMessage</span><span class="p">)</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="peer">peer接入</h1>

<p>从上面的例子,我们可以看出来实现ethereum是非常便利的,那么下一步,我们可以看看一个节点是怎么处理新peer的接入的?梳理出这个接入过程,也就明白了节点间基本的数据流通方式.</p>

<p>首先,每个节点启动入口都在<code>func (srv *Server) Start() (err error)</code>.该函数调用<code>srv.startListening()</code>在传入的ip地址监听tcp连接:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">srv</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nx">startListening</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Launch the TCP listener.</span>
</span><span class="line">    <span class="nx">listener</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">ListenAddr</span><span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="k">go</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">listenLoop</span><span class="p">()</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 主执行逻辑</span>
</span><span class="line">    <span class="k">go</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">dialer</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当接收到一个新的tcp连接,节点开始检查并初始化peer</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">srv</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nx">setupConn</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">conn</span><span class="p">,</span> <span class="nx">flags</span> <span class="nx">connFlag</span><span class="p">,</span> <span class="nx">dialDest</span> <span class="o">*</span><span class="nx">discover</span><span class="p">.</span><span class="nx">Node</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 从这里开始,其实已经开始了ethereum的自有协议,doEncHandshake是RLPX协议的握手方法</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">doEncHandshake</span><span class="p">(</span><span class="nx">srv</span><span class="p">.</span><span class="nx">PrivateKey</span><span class="p">,</span> <span class="nx">dialDest</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">srv</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">Trace</span><span class="p">(</span><span class="s">&quot;Failed RLPx handshake&quot;</span><span class="p">,</span> <span class="s">&quot;addr&quot;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">fd</span><span class="p">.</span><span class="nx">RemoteAddr</span><span class="p">(),</span> <span class="s">&quot;conn&quot;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">flags</span><span class="p">,</span> <span class="s">&quot;err&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">err</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 两次握手消息代码(handshakeMsg = 0x00)和(discMsg = 0x01)</span>
</span><span class="line">    <span class="nx">phs</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">doProtoHandshake</span><span class="p">(</span><span class="nx">srv</span><span class="p">.</span><span class="nx">ourHandshake</span><span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 握手完毕,将新连接对象*p2p.conn压入server.addpeer</span>
</span><span class="line">    <span class="nx">err</span> <span class="p">=</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">checkpoint</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">addpeer</span><span class="p">)</span>
</span><span class="line">    <span class="c1">// If the checks completed successfully, runPeer has now been</span>
</span><span class="line">    <span class="c1">// launched by run.</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面开始看<code>Start()</code>函数里的节点主逻辑,主逻辑位于<code>Start()</code>末尾的<code>srv.run()</code>,该函数逻辑较复杂,我们现在主要看新peer接入的代码:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">srv</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nx">run</span><span class="p">(</span><span class="nx">dialstate</span> <span class="nx">dialer</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="o">...</span>
</span><span class="line">      <span class="k">select</span><span class="p">{</span>
</span><span class="line">          <span class="o">...</span>
</span><span class="line">          <span class="k">case</span> <span class="nx">c</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">srv</span><span class="p">.</span><span class="nx">addpeer</span><span class="p">:</span>  <span class="c1">// 在这里取出之前压入addpeer的连接对象conn</span>
</span><span class="line">          <span class="c1">// 执行到这里表明握手完成,并且通过了节点验证</span>
</span><span class="line">          <span class="nx">err</span> <span class="o">:=</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">protoHandshakeChecks</span><span class="p">(</span><span class="nx">peers</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
</span><span class="line">          <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">              <span class="c1">// 创建节点peer对象,传入所有子协议实现,自己实现的子协议就是在这里传入peer的,传入的所以协议通过matchProtocols函数格式化组织</span>
</span><span class="line">              <span class="nx">p</span> <span class="o">:=</span> <span class="nx">newPeer</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">Protocols</span><span class="p">)</span>
</span><span class="line">              <span class="o">...</span>
</span><span class="line">              <span class="k">go</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">runPeer</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
</span><span class="line">          <span class="p">}</span>
</span><span class="line">          <span class="o">...</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="o">...</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里补充说一下<code>newPeer()</code>对子协议的一个组织方式:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">matchProtocols</span><span class="p">(</span><span class="nx">protocols</span> <span class="p">[]</span><span class="nx">Protocol</span><span class="p">,</span> <span class="nx">caps</span> <span class="p">[]</span><span class="nx">Cap</span><span class="p">,</span> <span class="nx">rw</span> <span class="nx">MsgReadWriter</span><span class="p">)</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">protoRW</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 按协议(name asc,version asc)排序子协议</span>
</span><span class="line">    <span class="nx">sort</span><span class="p">.</span><span class="nx">Sort</span><span class="p">(</span><span class="nx">capsByNameAndVersion</span><span class="p">(</span><span class="nx">caps</span><span class="p">))</span>
</span><span class="line">    <span class="c1">// 自定义协议偏移</span>
</span><span class="line">    <span class="nx">offset</span> <span class="o">:=</span> <span class="nx">baseProtocolLength</span>
</span><span class="line">    <span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">protoRW</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nx">outer</span><span class="p">:</span>
</span><span class="line">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">cap</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">caps</span> <span class="p">{</span>
</span><span class="line">        <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">proto</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">protocols</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="nx">proto</span><span class="p">.</span><span class="nx">Name</span> <span class="o">==</span> <span class="nx">cap</span><span class="p">.</span><span class="nx">Name</span> <span class="o">&amp;&amp;</span> <span class="nx">proto</span><span class="p">.</span><span class="nx">Version</span> <span class="o">==</span> <span class="nx">cap</span><span class="p">.</span><span class="nx">Version</span> <span class="p">{</span>
</span><span class="line">                <span class="c1">// If an old protocol version matched, revert it</span>
</span><span class="line">                <span class="k">if</span> <span class="nx">old</span> <span class="o">:=</span> <span class="nx">result</span><span class="p">[</span><span class="nx">cap</span><span class="p">.</span><span class="nx">Name</span><span class="p">];</span> <span class="nx">old</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">                    <span class="nx">offset</span> <span class="o">-=</span> <span class="nx">old</span><span class="p">.</span><span class="nx">Length</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">                <span class="c1">// Assign the new match</span>
</span><span class="line">                <span class="nx">result</span><span class="p">[</span><span class="nx">cap</span><span class="p">.</span><span class="nx">Name</span><span class="p">]</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">protoRW</span><span class="p">{</span><span class="nx">Protocol</span><span class="p">:</span> <span class="nx">proto</span><span class="p">,</span> <span class="nx">offset</span><span class="p">:</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">in</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">Msg</span><span class="p">),</span> <span class="nx">w</span><span class="p">:</span> <span class="nx">rw</span><span class="p">}</span>
</span><span class="line">                <span class="nx">offset</span> <span class="o">+=</span> <span class="nx">proto</span><span class="p">.</span><span class="nx">Length</span>
</span><span class="line">
</span><span class="line">                <span class="k">continue</span> <span class="nx">outer</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">result</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最终每个子协议以<code>name=&gt;protocol</code>的map格式组织起来,然后每个协议根据自身支持消息类型数量<code>Protocol.Length</code>在整个以太坊消息类型轴上占据了<code>[proto.offset,proto.offset+proto.Length)</code>的左闭右开消息类型段,理解这个结构,才好理解最终根据消息类型<code>Msg.Code</code>去找handler的逻辑(<code>func (p *Peer) getProto(code uint64) (*protoRW, error)</code>)。</p>

<p>下面继续看最终peer处理逻辑<code>srv.runPeer</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Peer</span><span class="p">)</span> <span class="nx">run</span><span class="p">()</span> <span class="p">(</span><span class="nx">remoteRequested</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// peer逻辑里最重要两个循环逻辑</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 收取消息循环,核心逻辑是根据消息的代号proto, err := p.getProto(msg.Code),</span>
</span><span class="line">    <span class="c1">// 取得对应的子协议,然后投放到对应协议的读队列proto.in &lt;- msg</span>
</span><span class="line">    <span class="k">go</span> <span class="nx">p</span><span class="p">.</span><span class="nx">readLoop</span><span class="p">(</span><span class="nx">readErr</span><span class="p">)</span>
</span><span class="line">    <span class="c1">// 不停发送ping心跳包到远端peer</span>
</span><span class="line">    <span class="k">go</span> <span class="nx">p</span><span class="p">.</span><span class="nx">pingLoop</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 在startProtocols里最终调用我们自定义子协议的Run方法proto.Run(p, rw)</span>
</span><span class="line">    <span class="nx">p</span><span class="p">.</span><span class="nx">startProtocols</span><span class="p">(</span><span class="nx">writeStart</span><span class="p">,</span> <span class="nx">writeErr</span><span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="rlp">数据传输格式RLP</h1>

<p>以太坊数据传输都是基于RLP编码,下面文字摘自<a href="http://ethfans.org/posts/415">RLP编码原理</a></p>

<blockquote>
  <p>RLP(Recursive Length Prefix，递归长度前缀)是一种编码算法，用于编码任意的嵌套结构的二进制数据，它是以太坊中数据序列化/反序列化的主要方法，区块、交易等数据结构在持久化时会先经过RLP编码后再存储到数据库中</p>
</blockquote>

<p>定义</p>

<blockquote>
  <p>RLP编码的定义只处理两类数据：一类是字符串（例如字节数组），一类是列表。字符串指的是一串二进制数据，列表是一个嵌套递归的结构，里面可以包含字符串和列表，例如<code>["cat",["puppy","cow"],"horse",[[]],"pig",[""],"sheep"]</code>就是一个复杂的列表。其他类型的数据需要转成以上的两类，转换的规则不是RLP编码定义的，可以根据自己的规则转换，例如struct可以转成列表，int可以转成二进制（属于字符串一类），以太坊中整数都以大端形式存储。</p>
</blockquote>

<p>这部分代码均位于<code>github.com/ethereum/go-ethereum/rlp</code>包中,代码相对独立,我也没深入研究改算法,就不详细说明了。</p>

<h1 id="section">总述</h1>

<p>本文主要梳理了以太坊p2p模块的主流程,描述了核心的peer间数据读写的来龙去脉,从代码里也能够比较容易理解以太坊子协议的概念,理清这个主干流程,以后也就能够从每个细节发散开来,深入细节。</p>

<h1 id="section-1">参考文献</h1>

<ul>
  <li><a href="https://github.com/ethereum/go-ethereum">go-ethereum github地址</a></li>
  <li><a href="https://github.com/ethereum/go-ethereum/wiki/Peer-to-Peer">Peer to Peer</a></li>
  <li><a href="http://blog.csdn.net/teaspring/article/details/78455046">基于p2p的底层通信</a></li>
  <li><a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-RLP">RLP</a></li>
  <li><a href="http://ethfans.org/posts/415">RLP编码原理</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
