<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jason's space]]></title>
  <link href="http://qjpcpu.github.io/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2014-03-14T00:11:42+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[route]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/14/route/"/>
    <updated>2014-03-14T00:03:30+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/14/route</id>
    <content type="html"><![CDATA[<p>算是记录一个教训吧。</p>

<p>下午我的机器突然不能上外网，尝试内网和别的机器互访都没有问题，就是访问外网显示<code>connect: Network is unreachable</code>，<code>nslookup</code>查看DNS解析也没有问题，就是没想到网络不大达很有可能是没有路由信息，最后朋友指点发现没有默认网关，外网ip没得路由规则走，添加默认网关后ok：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>route add default gw 10.46.148.1
</span></code></pre></td></tr></table></div></figure>


<p>提醒自己以后把学到的东西利用起来！</p>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ls遍历空目录处理]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/12/lsbian-li-kong-mu-lu-chu-li/"/>
    <updated>2014-03-12T23:18:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/12/lsbian-li-kong-mu-lu-chu-li</id>
    <content type="html"><![CDATA[<p>先说说原因：<code>for</code>循环是利用空格做分隔符，所以可以这样打印句子中的单词：</p>

<pre><code>centence="Linux is cool"
for word in $centence;do
    echo $word
done
</code></pre>

<p>有时用ls命令遍历目录会遇到空目录：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>d in <span class="k">$(</span>ls<span class="k">)</span>;<span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;$d&quot;</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>处理办法是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ls -1 | <span class="k">while </span><span class="nb">read </span>d
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;$d&quot;</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[date命令]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/12/dateming-ling/"/>
    <updated>2014-03-12T23:03:56+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/12/dateming-ling</id>
    <content type="html"><![CDATA[<p>首先看看常用的格式字符串</p>

<pre><code> %Y 年
 %m 月
 %d 日
 %H 时
 %M 分
 %S 秒
 %s 时间戳(秒)
</code></pre>

<p><strong>date命令常用操作</strong></p>

<p>获取当前时间</p>

<pre><code>date +%Y-%m-%d    # 2014-02-21
</code></pre>

<!--more-->


<p>几天前(后)，几月前(后)，几年前(后)</p>

<pre><code>date -d "1 day ago"  "+%Y-%m-%d %H:%M:%S"  #一天前的当前时间 2014-02-20 11:11:31
date -d "2 days ago"  # 或者date-d "-2 days"
date -d "-8 months"
date -d "+2 years" # 两年后
</code></pre>

<p>多少分钟，小时前（后）</p>

<pre><code>date -d "-5 minutes"  "+%Y-%m-%d %H:%M:%S"  #5分钟前
date -d "5 minutes"  "%H:%M:%S"  #5分钟后
</code></pre>

<p>时间戳和日期互转，常用于计算</p>

<pre><code>date -d "2014-02-20 11:11:31" +%s  #获取某时间的时间戳
date +%s   #返回当前时间戳1392954893
date -d @1392954893 "+%Y-%m-%d %H:%M:%S"  #将时间戳转换为时间
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stat命令与文件时间]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/12/statming-ling-yu-wen-jian-shi-jian/"/>
    <updated>2014-03-12T15:04:54+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/12/statming-ling-yu-wen-jian-shi-jian</id>
    <content type="html"><![CDATA[<h3>stat命令</h3>

<p>stat命令常用来获取文件三个时间<code>access time</code>,<code>modify time</code>和<code>change time</code></p>

<pre><code>$ stat access.log
  File: `access.log'
  Size: 1559877779  Blocks: 3049624    IO Block: 4096   regular file
Device: ca20h/51744d    Inode: 16269326    Links: 1
Access: (0644/-rw-r--r--)  Uid: (  500/    work)   Gid: (  500/    work)
Access: 2014-03-09 21:58:33.000000000 +0800
Modify: 2014-03-07 08:17:36.000000000 +0800
Change: 2014-03-07 08:17:36.000000000 +0800
</code></pre>

<p>通常可以使用<code>-c</code>参数直接获取三个时间</p>

<pre><code>$ stat -c %x access.log   #获取access time
2014-03-09 21:58:33.000000000 +0800
$ stat -c %y access.log  #获取modify time
2014-03-07 08:17:36.000000000 +0800
$ stat -c %z access.log #获取change time
2014-03-07 08:17:36.000000000 +0800
</code></pre>

<!--more-->


<h3>三个时间</h3>

<p><code>access time</code>对应文件访问时间，只要有读操作就会更新这个时间。</p>

<p><code>change time</code>对应文件元信息，比如文件重命名会更新该时间。</p>

<p><code>modify time</code>对应文件内容修改时间，只要修改文件内容就会更新该时间，由于内容改变实际也改变文件元数据，所以写操作也更新<code>change time</code>。</p>

<p>注意：对于文件夹来说，对文件夹下的文件增删，重命名，等操作，会修改文件夹<code>change time</code>和<code>modify time</code>，因为文件名实际是作为目录文件的内容存在的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[shell数组]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/10/shellshu-zu/"/>
    <updated>2014-03-10T00:22:25+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/10/shellshu-zu</id>
    <content type="html"><![CDATA[<h3>数组定义</h3>

<p>定义数组需要用括号把元素包裹起来。</p>

<pre><code>colors=(red green blue black white)
# 打印整个数组
echo ${colors[*]}  # red green blue black white
echo ${colors[@]}  # red green blue black white
</code></pre>

<!--more-->


<h3>基本操作</h3>

<pre><code># 有两种方法获取数组长度
echo ${#colors[@]}    # 5
echo ${#colors[*]}    # 5
</code></pre>

<p>遍历数组</p>

<pre><code>for e in ${colors[*]};do
    echo $e
done
</code></pre>

<p>或</p>

<pre><code>for((i=0;i&lt;${#colors[*]};i++));do
    echo ${colors[i]}
done
</code></pre>

<p>读写数组</p>

<pre><code>echo ${colors[0]}    # red
colors[0]=RED
echo ${colors[0]}    # RED
</code></pre>

<p>移除元素</p>

<pre><code>unset colors[1]
echo ${colors[*]}    # red blue black white
echo ${#colors[*]}   # 4
</code></pre>

<h3>切片</h3>

<p>切片不影响原数组</p>

<pre><code>echo ${colors[*]:1:3}    # green blue black
# 获取切片得到的新数组
c=(${colors[*]:1:3})
echo ${c[*]}             # green blue black
</code></pre>

<h3>替换</h3>

<p>替换也不影响原数组</p>

<pre><code>echo ${colors[*]/e/E}    # rEd grEen bluE black whitE
</code></pre>

<h3>字符串转换为数组</h3>

<p>使用<code>()</code>操作符和<code>IFS</code>指定分隔符</p>

<pre><code>IFS=";"
str="a;b;c;d;e"
arr=($str)
echo ${arr[*]}  # a b c d e
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[compile ruby from source]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/07/compile-ruby-from-source/"/>
    <updated>2014-03-07T15:35:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/07/compile-ruby-from-source</id>
    <content type="html"><![CDATA[<h3>下载需要的软件包</h3>

<ul>
<li><a href="http://www.openssl.org/source/">openssl</a></li>
<li><a href="http://pyyaml.org/wiki/PyYAML">yaml</a></li>
<li><a href="https://www.ruby-lang.org">ruby</a></li>
<li><a href="http://sqlite.org/2014/sqlite-autoconf-3080301.tar.gz">sqlite3</a>(可选)</li>
</ul>


<!--more-->


<p>假设需要安装的ruby目录为<code>/ruby</code></p>

<h3>编译openssl</h3>

<pre><code>./config --prefix=/ruby  shared
make 
make install
</code></pre>

<h3>编译libyaml</h3>

<pre><code>./configure --prefix=/ruby
make
make install
</code></pre>

<h3>编译ruby</h3>

<p>先导入环境变量,否则ruby找不到ssl的链接目录</p>

<pre><code>export LD_LIBRARY_PATH=/ruby/lib
export C_INCLUDE_PATH=/ruby/include
</code></pre>

<p>开始编译ruby</p>

<pre><code>./configure --prefix=/ruby --with-opt-dir=/ruby
make
make install
</code></pre>

<h3>编译sqlite3(可选)</h3>

<h3>测试</h3>

<pre><code>/ruby/bin/ruby -v #打印版本号，说明安装成功
export PATH=$PATH:/ruby/bin
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[curl]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/05/curl/"/>
    <updated>2014-03-05T23:29:56+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/05/curl</id>
    <content type="html"><![CDATA[<h3>基本用法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl http://www.google.com
</span><span class='line'>curl --proxy http://proxy.com:8888 http://ww.google.com <span class="c">#使用代理</span>
</span><span class='line'>curl http://user:password@example.org/  <span class="c">#http验证</span>
</span><span class='line'>curl -u user:password http://example.org/ <span class="c">#http验证</span>
</span></code></pre></td></tr></table></div></figure>


<p>获取响应头</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -i http://example.com  <span class="c">#在返回结果中包含响应头 </span>
</span><span class='line'>curl -IL http://example.com  <span class="c">#仅返回响应头</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>REST请求</h3>

<p><strong>GET</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl http://www.google.com
</span></code></pre></td></tr></table></div></figure>


<p><strong>POST</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl --data <span class="s2">&quot;birthyear=1905&amp;press=%20OK%20&quot;</span>  http://www.example.com/when.cgi
</span><span class='line'><span class="c">#or</span>
</span><span class='line'>curl --data-urlencode <span class="s2">&quot;name=I am Daniel&quot;</span> http://www.example.com
</span></code></pre></td></tr></table></div></figure>


<p><strong>PUT</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl --upload-file uploadfile http://www.example.com/receive.cgi <span class="c">#upload a file</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>DELETE</strong></p>

<p>实际上，可以用<code>curl -X http_method</code>指定包括GET,POST,PUT内的任意方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X DELETE http://example.com
</span></code></pre></td></tr></table></div></figure>


<h3>header</h3>

<p>使用-H或&mdash;header指定请求头部</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -H <span class="s2">&quot;Content-Type: application/json&quot;</span> http:/example.com
</span></code></pre></td></tr></table></div></figure>


<h3>Cookie</h3>

<p><code>-b,--cookie</code>选项告诉<code>curl</code>使用已有的cookie，可以是键值对也可以是文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -b <span class="s2">&quot;name=value&quot;</span> http://host
</span><span class='line'>curl -b cookie.txt http://host.com
</span></code></pre></td></tr></table></div></figure>


<p><code>-c,--cookie-jar</code>选项告诉<code>curl</code>将新的cookie保存在文件中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -c new.txt http://example.com
</span></code></pre></td></tr></table></div></figure>


<h3>HTTPS</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl https://example.com
</span><span class='line'>curl --cert mycert.pem https://example.com
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[列出目录结构]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/27/lie-chu-mu-lu-jie-gou/"/>
    <updated>2014-02-27T20:52:50+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/27/lie-chu-mu-lu-jie-gou</id>
    <content type="html"><![CDATA[<h3>最简单美观的方法tree</h3>

<p>tree命令是专门用来罗列目录结构的，输出树形结果，很漂亮。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tree demo
</span><span class='line'>demo
</span><span class='line'>├── Gemfile
</span><span class='line'>├── boot.rb
</span><span class='line'>├── collectors
</span><span class='line'>├── config
</span><span class='line'>│   └── mail_config.rb
</span><span class='line'>├── controllers
</span><span class='line'>├── db
</span><span class='line'>│   ├── connection.rb
</span><span class='line'>│   ├── database.yml
</span><span class='line'>│   └── migrate
</span><span class='line'>├── helpers
</span><span class='line'>├── models
</span><span class='line'>├── rakefile
</span><span class='line'>└── views
</span><span class='line'>
</span><span class='line'>8 directories, 6 files
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>折衷的方法find</h3>

<p>如果没有权限在机器上安装tree命令，find命令也是一种折衷的选择。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>find demo -type f -o -type d
</span><span class='line'>demo
</span><span class='line'>demo/boot.rb
</span><span class='line'>demo/collectors
</span><span class='line'>demo/config
</span><span class='line'>demo/config/.gitkeep
</span><span class='line'>demo/config/mail_config.rb
</span><span class='line'>demo/controllers
</span><span class='line'>demo/db
</span><span class='line'>demo/db/connection.rb
</span><span class='line'>demo/db/database.yml
</span><span class='line'>demo/db/migrate
</span><span class='line'>demo/db/migrate/.gitkeep
</span><span class='line'>demo/Gemfile
</span><span class='line'>demo/helpers
</span><span class='line'>demo/helpers/.gitkeep
</span><span class='line'>demo/models
</span><span class='line'>demo/rakefile
</span><span class='line'>demo/views
</span></code></pre></td></tr></table></div></figure>


<p>虽然没有tree命令那么直观，但却有另一个好处，便于使用管道进一步操作。</p>

<h3>仅仅是一种选择ls</h3>

<p>ls命令也可以罗列出目录结构，但这个仅供娱乐了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls -R demo
</span><span class='line'>Gemfile       collectors  controllers helpers     rakefile
</span><span class='line'>boot.rb       config      db      models      views
</span><span class='line'>
</span><span class='line'>demo/collectors:
</span><span class='line'>
</span><span class='line'>demo/config:
</span><span class='line'>mail_config.rb
</span><span class='line'>
</span><span class='line'>demo/controllers:
</span><span class='line'>
</span><span class='line'>demo/db:
</span><span class='line'>connection.rb database.yml    migrate
</span><span class='line'>
</span><span class='line'>demo/db/migrate:
</span><span class='line'>
</span><span class='line'>demo/helpers:
</span><span class='line'>
</span><span class='line'>demo/models:
</span><span class='line'>
</span><span class='line'>demo/views:
</span></code></pre></td></tr></table></div></figure>


<h3>利用shell自己来实现</h3>

<p>在无法安装软件的情况下，自己写一个tree命令吧，至少基本的bash是可以用的。</p>

<figure class='code'><figcaption><span>tree.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>n_char<span class="o">(){</span>
</span><span class='line'>  <span class="nv">ch</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'>  <span class="nv">cnt</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'>  <span class="k">for</span><span class="o">((</span><span class="nv">i</span><span class="o">=</span>0;i&lt;<span class="nv">$cnt</span>;i++<span class="o">))</span>;<span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="nv">string</span><span class="o">=</span><span class="s2">&quot;${ch}____$string&quot;</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="nv">$string</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>dive_into<span class="o">(){</span>
</span><span class='line'>  ls -1a <span class="s2">&quot;$1&quot;</span> | <span class="k">while </span><span class="nb">read </span>f
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'><span class="k">      if</span> <span class="o">[</span> <span class="s2">&quot;$f&quot;</span> <span class="o">==</span> <span class="s2">&quot;.&quot;</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="s2">&quot;$f&quot;</span> <span class="o">==</span> <span class="s2">&quot;..&quot;</span> <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">          continue</span>
</span><span class='line'><span class="k">      fi</span>
</span><span class='line'><span class="k">      if</span> <span class="o">[</span> <span class="s2">&quot;$4&quot;</span> <span class="o">=</span> <span class="s2">&quot;0&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">&quot;${f:0:1}&quot;</span> <span class="o">=</span> <span class="s2">&quot;.&quot;</span> <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">          continue</span>
</span><span class='line'><span class="k">      fi</span>
</span><span class='line'><span class="k">      </span><span class="nv">pre</span><span class="o">=</span><span class="k">$(</span>n_char <span class="s1">&#39;|&#39;</span> <span class="nv">$2</span><span class="k">)</span>
</span><span class='line'>      <span class="nv">line</span><span class="o">=</span><span class="s2">&quot;${pre//_/ }|-- ${f}&quot;</span>
</span><span class='line'>      <span class="o">[[</span> -L <span class="s2">&quot;$1/$f&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nv">line</span><span class="o">=</span><span class="s2">&quot;${line} -&gt; `readlink &quot;</span><span class="nv">$1</span>/<span class="nv">$f</span><span class="s2">&quot;`&quot;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$5&quot;</span> <span class="o">=</span> <span class="s2">&quot;1&quot;</span> <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">          </span><span class="nv">s</span><span class="o">=</span><span class="sb">`</span>du -sh <span class="s2">&quot;$1/$f&quot;</span>|awk <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
</span><span class='line'>          <span class="nv">line</span><span class="o">=</span><span class="s2">&quot;${line} [$s]&quot;</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;$line&quot;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;$1/${f}&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> ! -L <span class="s2">&quot;$1/$f&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="k">$((</span><span class="nv">$2</span><span class="o">+</span><span class="m">1</span><span class="k">))</span> -lt <span class="nv">$3</span> <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">          </span>dive_into <span class="s2">&quot;$1/$f&quot;</span> <span class="k">$((</span><span class="nv">$2</span><span class="o">+</span><span class="m">1</span><span class="k">))</span> <span class="nv">$3</span> <span class="nv">$4</span> <span class="nv">$5</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">  done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">while </span><span class="nb">getopts</span> <span class="s2">&quot;d:l:ahs&quot;</span> args
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  case</span> <span class="nv">$args</span> in
</span><span class='line'>  l<span class="o">)</span> <span class="nv">level</span><span class="o">=</span><span class="nv">$OPTARG</span>
</span><span class='line'>  ;;
</span><span class='line'>  d<span class="o">)</span> <span class="nv">dir</span><span class="o">=</span><span class="s2">&quot;$OPTARG&quot;</span>
</span><span class='line'>  ;;
</span><span class='line'>  a<span class="o">)</span> <span class="nv">all</span><span class="o">=</span>1
</span><span class='line'>  ;;
</span><span class='line'>  s<span class="o">)</span> <span class="nv">size</span><span class="o">=</span>1
</span><span class='line'>  ;;
</span><span class='line'>  h<span class="o">)</span> <span class="nb">echo</span> <span class="s2">&quot;Must specify directoy with -d&quot;</span>
</span><span class='line'>     <span class="nb">echo</span> <span class="s2">&quot;Usage: tree.sh -d directory &quot;</span>
</span><span class='line'>     <span class="nb">echo</span> <span class="s2">&quot;-l maxdepth, the tree depth&quot;</span>
</span><span class='line'>     <span class="nb">echo</span> <span class="s2">&quot;-s, print file size&quot;</span>
</span><span class='line'>     <span class="nb">echo</span> <span class="s2">&quot;-a, print with hidden files&quot;</span>
</span><span class='line'>     <span class="nb">exit </span>1
</span><span class='line'>  ;;
</span><span class='line'>  ?<span class="o">)</span> <span class="nb">echo</span> <span class="s2">&quot;No such argument&quot;</span>
</span><span class='line'>     <span class="nb">exit </span>1
</span><span class='line'>  ;;
</span><span class='line'>  <span class="k">esac</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="o">[[</span> -z <span class="s2">&quot;$dir&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Must specify directory with -d&quot;</span>
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">[[</span> -z <span class="s2">&quot;$level&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nv">level</span><span class="o">=</span>100
</span><span class='line'><span class="o">[[</span> -z <span class="s2">&quot;$all&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nv">all</span><span class="o">=</span>0
</span><span class='line'><span class="o">[[</span> -z <span class="s2">&quot;$size&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nv">size</span><span class="o">=</span>0
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$dir&quot;</span>
</span><span class='line'>dive_into <span class="s2">&quot;$dir&quot;</span>  0 <span class="nv">$level</span> <span class="nv">$all</span> <span class="nv">$size</span>
</span></code></pre></td></tr></table></div></figure>


<p>试试看好用不：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tree.sh -h
</span><span class='line'>Must specify directoy with -d
</span><span class='line'>Usage: tree.sh -d directory
</span><span class='line'>-l maxdepth, the tree depth
</span><span class='line'>-s, print file size
</span><span class='line'>-a, print with hidden files
</span><span class='line'>
</span><span class='line'>tree.sh -d .
</span><span class='line'>.
</span><span class='line'>|-- dir
</span><span class='line'>|    |-- file
</span><span class='line'>|    |-- g.css
</span><span class='line'>|    |-- sub
</span><span class='line'>|    |    |-- sfile
</span><span class='line'>|-- g -&gt; dir/g.css
</span><span class='line'>|-- ldir -&gt; dir/
</span><span class='line'>|-- m.html -&gt; o.html
</span><span class='line'>|-- o.html
</span><span class='line'>|-- s.html
</span><span class='line'>|-- tree.sh
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[find命令]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/27/findming-ling/"/>
    <updated>2014-02-27T20:10:37+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/27/findming-ling</id>
    <content type="html"><![CDATA[<h3>find的基本语法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find PATH OPTIONS <span class="o">[</span>-exec COMMANDD <span class="o">{}</span> <span class="se">\;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>find</code>命令可以使用多个OPTION，不同OPTION之间默认是<code>and</code>关系，除了<code>and</code>关系还有<code>not</code>和<code>or</code>关系，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find / -name <span class="s1">&#39;n1&#39;</span> -type f  <span class="c">#查找/目录下名称为n1且为普通文件的文件</span>
</span><span class='line'>find / -name <span class="s1">&#39;n1&#39;</span> -o -name <span class="s1">&#39;n2&#39;</span> <span class="c">#查找名称为n1或n2的文件</span>
</span><span class='line'>find / ! -name <span class="s1">&#39;n1&#39;</span>  <span class="c"># 查找名称不为n1的文件</span>
</span></code></pre></td></tr></table></div></figure>


<p>当使用的OPTION很多时，可以将OPTIONS括起来增加可读性，注意括号需要用<code>\</code>来转义，同时<code>\(</code>和<code>\)</code>两边都需要有空格：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find / <span class="se">\(</span> -name <span class="s1">&#39;n1&#39;</span> -o -name <span class="s1">&#39;n2&#39;</span> <span class="se">\)</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>find命令常用的OPTION</h3>

<ul>
<li>-name  按名称查找，支持通配符*,?,[]</li>
<li>-user  按用户名查找</li>
<li>-empty  查找空文件(目录)</li>
<li>-perm  查找对应权限的文件，权限表示的三位数字形式如777</li>
<li>-type 按类型查找，类型可为<code>b</code>块设备，<code>c</code>字符设备，<code>p</code>管道，<code>f</code>普通文件，<code>l</code>链接文件，<code>s</code>socket文件</li>
<li>-print  打印结果</li>
<li>-regex 按正则表达式查找，注意该正则匹配属于完全匹配，即如果要查找<code>dir</code>目录下的文件<code>file_23</code>应该用正则表达式<code>.*file_[0-9]+</code>，用<code>file_[0-9]+</code>是匹配不到的，<code>find dir -regex '.*file_[0-9]+</code>是用完整结果即<code>dir/file_23</code>来做和<code>-regex</code>完全匹配的</li>
<li>-maxdepth n  find的最大目录层级查找深度，最小为1</li>
<li>-mindepth n find的最小目录查找深度</li>
</ul>


<p>按时间查找的参数：</p>

<ul>
<li>-amin n  查找n分钟以前被访问（access）的文件</li>
<li>-atime n  查找n天前被访问的文件</li>
<li>-cmin n  查找n分钟前文件元信息被修改（change）的文件</li>
<li>-ctime n  查找n天前文件元信息被修改过的文件</li>
<li>-mmin n  查找n分钟前内容被修改的文件</li>
<li>-mtime n 查找n天前内容被修改的文件</li>
</ul>


<h3>exec</h3>

<p>find命令最后的exec表示对找到的文件执行什么命令，其中<code>{}</code>代表找到的文件，注意<code>{}</code>和<code>\;</code>间有空格。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用expect实现自动登录]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/25/shi-yong-expectshi-xian-zi-dong-deng-lu/"/>
    <updated>2014-02-25T20:13:57+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/25/shi-yong-expectshi-xian-zi-dong-deng-lu</id>
    <content type="html"><![CDATA[<p>网上有很多类似的文章，但很多都是先写expect脚本再从bash里调用expect脚本，
我希望直接在bash脚本里使用expect命令来实现自动登录。</p>

<h3>利用expect命令实现自动登录并执行命令</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>expect -c <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">spawn ssh USER@HOST &quot;commands&quot;</span>
</span><span class='line'><span class="s1">expect {</span>
</span><span class='line'><span class="s1">&quot;*(yes/no)?&quot; { send &quot;yes\r&quot;;exp_continue }</span>
</span><span class='line'><span class="s1">&quot;*assword:&quot; { send &quot;PASSWORD\r&quot; }</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'><span class="s1">expect eof</span>
</span><span class='line'><span class="s1">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于expect的命令在网上有很多资料，这里不在赘述。下面讲讲怎么在bash和expect传递变量。</p>

<!--more-->


<h3>获取登录名及登录密码</h3>

<p>从bash中获取变量无非就是获取登录主机及密码，提高代码移植性。这里利用bash的Here document实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">host</span><span class="o">=</span><span class="s2">&quot;USER@HOST&quot;</span>
</span><span class='line'><span class="nv">password</span><span class="o">=</span><span class="s2">&quot;PASSWORD&quot;</span>
</span><span class='line'><span class="nv">cmd</span><span class="o">=</span><span class="s2">&quot;command_list&quot;</span>
</span><span class='line'>
</span><span class='line'>expect <span class="s">&lt;&lt;EOF </span>
</span><span class='line'><span class="s">spawn ssh $host &quot;$cmd&quot;</span>
</span><span class='line'><span class="s">expect {</span>
</span><span class='line'><span class="s">&quot;*(yes/no)?&quot; { send &quot;yes\r&quot;;exp_continue }</span>
</span><span class='line'><span class="s">&quot;*assword:&quot; { send &quot;$password\r&quot; }</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">expect eof</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>bash会自动解析here document中的变量，个人认为这种方式比使用expect的set命令更简便。</p>

<h3>获取登录执行命令结果</h3>

<p>如果希望保持登录，去掉上面代码的<code>ssh</code>后的命令列表并且将<code>expect eof</code>改成<code>interact</code>即可。</p>

<p>但通常我们只是登录到某台机器并执行命令后就返回，同时希望获得命令执行的结果。但上面的代码会混合登录时的部分输出，所以这里可以使用管道过滤一下。</p>

<p>下面的代码展示的怎样获取并输出远程主机的真正命令输出，同时也是一个在here document后接管道操作的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">host</span><span class="o">=</span><span class="s2">&quot;USER@HOST&quot;</span>
</span><span class='line'><span class="nv">password</span><span class="o">=</span><span class="s2">&quot;PASSWORD&quot;</span>
</span><span class='line'><span class="nv">cmd</span><span class="o">=</span><span class="s2">&quot;command_list&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span>expect <span class="s">&lt;&lt;EOF </span>
</span><span class='line'><span class="s">spawn ssh $host &quot;$cmd&quot;</span>
</span><span class='line'><span class="s">expect {</span>
</span><span class='line'><span class="s">&quot;*(yes/no)?&quot; { send &quot;yes\r&quot;;exp_continue }</span>
</span><span class='line'><span class="s">&quot;*assword:&quot; { send &quot;$password\r&quot; }</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">expect eof</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="o">)</span> | awk <span class="s1">&#39;BEGIN{find=0}</span>
</span><span class='line'><span class="s1">{</span>
</span><span class='line'><span class="s1"> if(find){print $0;next}</span>
</span><span class='line'><span class="s1"> if($0 ~ /[pP]assword:/){ find=1 }</span>
</span><span class='line'><span class="s1">}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是在bash中调用expect自动登录的完整代码了。</p>

<p>P.S. 在here document后接管道操作的几种方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 1</span>
</span><span class='line'>cat <span class="s">&lt;&lt;EOF | sh</span>
</span><span class='line'><span class="s">echo 1</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="c"># 2</span>
</span><span class='line'><span class="o">(</span>cat <span class="s">&lt;&lt;EOF</span>
</span><span class='line'><span class="s">echo 1</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="o">)</span> | sh
</span><span class='line'><span class="c"># 3</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>cat<span class="s">&lt;&lt;EOF</span>
</span><span class='line'><span class="s">echo 1</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="o">}</span> | sh
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux日常维护]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/21/linuxri-chang-wei-hu/"/>
    <updated>2014-02-21T22:58:13+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/21/linuxri-chang-wei-hu</id>
    <content type="html"><![CDATA[<h3>某些用户cron任务失败</h3>

<p>有时某些普通用户的crontab任务会失败，这可能是由于crond执行普通用户的任务时，是以非登录shell的形式切换到普通用户来执行的，所以可能缺失了某些环境变量。</p>

<p>解决办法是在crontab任务前先执行<code>source /home/username/.bash_profile</code>，后面再接用户自己的任务命令即可。</p>

<p>ps.<code>/etc/profile</code>,<code>~/.bash_profile</code>,<code>~/.bashrc</code>三个脚本的区别：</p>

<ul>
<li>/etc/profile     #系统级初始化脚本，会被登录shell执行</li>
<li>~/.bash_profile  #用户配置，会被登录shell执行，非登录shell不执行</li>
<li>~/.bashrc        #非登录shell执行，但通常~/.bash_profile都会在代码里调用~/.bashrc，所以登录shell也执行它</li>
</ul>


<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sendmail发邮件中文乱码]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/19/sendmailfa-you-jian-zhong-wen-luan-ma/"/>
    <updated>2014-02-19T23:23:15+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/19/sendmailfa-you-jian-zhong-wen-luan-ma</id>
    <content type="html"><![CDATA[<p>如果这是要使用sendmail命令发送的邮件file内容：</p>

<pre><code>Subject:标题
TO:to@example.com
From:from@example
Content-Type:text/html
&lt;html&gt;
    &lt;body&gt;
        邮件内容
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3>解决内容乱码</h3>

<p>内容乱码比较好解决，首先内容先使用utf-8编码，然后在修改邮件的<code>Content-Type</code>为：</p>

<pre><code>Content-Type:text/html;charset=UTF-8
</code></pre>

<h3>解决标题乱码</h3>

<p>需要利用base64编码标题内容，例如，如果UTF-8编码的字符串<code>标题</code>进行base64编码后的内容为<code>5qCH6aKY</code>,则邮件标题为：</p>

<pre><code>Subject:=?UTF-8?B?5qCH6aKY?=
</code></pre>

<p>即邮件标题<code>Subject:</code>后字符串格式为：&#8221;<code>=?UTF-8?B?</code><em>base64编码的utf-8字串</em><code>?=</code>&#8221;</p>

<h3>发送邮件</h3>

<p>最后发送文件可以正确显示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat file | sendmail -t
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[axlsx报表工具(四)——条件格式化]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-si-tiao-jian-ge-shi-hua/"/>
    <updated>2014-02-15T00:47:04+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-si-tiao-jian-ge-shi-hua</id>
    <content type="html"><![CDATA[<h3>定义格式化操作</h3>

<p>条件格式化风格定义也是使用格式化定义语句add_style，不同的是必须将type指定为:dxf。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># define the style for conditional formatting</span>
</span><span class='line'><span class="n">profitable</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="n">styles</span><span class="o">.</span><span class="n">add_style</span><span class="p">(</span> <span class="ss">:fg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;FF428751&quot;</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:dxf</span> <span class="p">)</span>
</span><span class='line'><span class="n">unprofitable</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="n">styles</span><span class="o">.</span><span class="n">add_style</span><span class="p">(</span> <span class="ss">:fg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;FF0000&quot;</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:dxf</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>条件格式化有四种类型cellIs，colorScale，dataBar，iconSet。</p>

<!-- more -->


<h3>cellIs</h3>

<p>cellIs条件格式化使用得较为普遍，即对满足条件的单元格更改字体颜色，字体大小，背景色等等。</p>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=0cc20173b8a1cd1101b672258929b9c1/d000baa1cd11728bb30e6961cafcc3cec3fd2c56.jpg?referer=3c8b0130af4bd1135dda82028c4c&amp;x=.jpg" alt="image" /></p>

<p>对于B列，如果数值大于100000表示盈利，则更改字体颜色；对于亏损的，则在C列中将百分比小于100%的赤字显示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Cell Is&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ws</span><span class="o">|</span>
</span><span class='line'><span class="c1"># 产生20行数据</span>
</span><span class='line'><span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Previous Year Quarterly Profits (JPY)&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Quarter&quot;</span><span class="p">,</span> <span class="s2">&quot;Profit&quot;</span><span class="p">,</span> <span class="s2">&quot;% of Total&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">offset</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">rows</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="n">offset</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">rows</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'> <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Q</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="o">*</span><span class="p">((</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)),</span> <span class="s2">&quot;=100*B</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">/SUM(B3:B</span><span class="si">#{</span><span class="n">rows</span><span class="o">+</span><span class="n">offset</span><span class="si">}</span><span class="s2">)&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span><span class="o">=&gt;[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">money</span><span class="p">,</span> <span class="n">percent</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># 格式化条件&gt;100000</span>
</span><span class='line'><span class="n">ws</span><span class="o">.</span><span class="n">add_conditional_formatting</span><span class="p">(</span><span class="s2">&quot;B3:B100&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:cellIs</span><span class="p">,</span> <span class="ss">:operator</span> <span class="o">=&gt;</span> <span class="ss">:greaterThan</span><span class="p">,</span> <span class="ss">:formula</span> <span class="o">=&gt;</span> <span class="s2">&quot;100000&quot;</span><span class="p">,</span> <span class="ss">:dxfId</span> <span class="o">=&gt;</span> <span class="n">profitable</span><span class="p">,</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="c1"># 格式化条件0.00%&lt;x&lt;100%</span>
</span><span class='line'><span class="n">ws</span><span class="o">.</span><span class="n">add_conditional_formatting</span><span class="p">(</span><span class="s2">&quot;C3:C100&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:cellIs</span><span class="p">,</span> <span class="ss">:operator</span> <span class="o">=&gt;</span> <span class="ss">:between</span><span class="p">,</span> <span class="ss">:formula</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;0.00%&quot;</span><span class="p">,</span><span class="s2">&quot;100.00%&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:dxfId</span> <span class="o">=&gt;</span> <span class="n">unprofitable</span><span class="p">,</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>add_conditional_formatting方法指定条件格式化，类型type是cellIs，条件由operator和formula共同指定，dxfId就是我们上面定义的格式化操作，priority优先级数值越小，优先级越高。</p>

<h3>colorScale</h3>

<p><img src="http://h.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=3d1d3870938fa0ec7bc7640816ac28d3/f603918fa0ec08fa0ef0e9e45bee3d6d54fbda85.jpg?referer=6b56cc4859b5c9ea3be437d3269b&amp;x=.jpg" alt="image" /></p>

<p>colorScale是以颜色渐变的方式来格式化表格。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Color Scale&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ws</span><span class="o">|</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Previous Year Quarterly Profits (JPY)&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Quarter&quot;</span><span class="p">,</span> <span class="s2">&quot;Profit&quot;</span><span class="p">,</span> <span class="s2">&quot;% of Total&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">offset</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">rows</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>  <span class="n">offset</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">rows</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Q</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="o">*</span><span class="p">((</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)),</span> <span class="s2">&quot;=100*B</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">/SUM(B3:B</span><span class="si">#{</span><span class="n">rows</span><span class="o">+</span><span class="n">offset</span><span class="si">}</span><span class="s2">)&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span><span class="o">=&gt;[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">money</span><span class="p">,</span> <span class="n">percent</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">color_scale</span> <span class="o">=</span> <span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:ColorScale</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_conditional_formatting</span><span class="p">(</span><span class="s2">&quot;B3:B100&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:colorScale</span><span class="p">,</span> <span class="ss">:operator</span> <span class="o">=&gt;</span> <span class="ss">:greaterThan</span><span class="p">,</span> <span class="ss">:formula</span> <span class="o">=&gt;</span> <span class="s2">&quot;100000&quot;</span><span class="p">,</span> <span class="ss">:dxfId</span> <span class="o">=&gt;</span> <span class="n">profitable</span><span class="p">,</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:color_scale</span> <span class="o">=&gt;</span> <span class="n">color_scale</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>大于100000的单元格颜色越来越深，而小于的单元格越来越浅。</p>

<h3>dataBar</h3>

<p>dataBar格式化能够在单元格中同时显示数值和一个柱形图，非常直观漂亮。</p>

<p><img src="http://f.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=435a969d3f6d55fbc1c676235d193e77/58ee3d6d55fbb2fb26dba2514d4a20a44723dc85.jpg?referer=b0f4797338f33a87c77a342a1c9b&amp;x=.jpg" alt="image" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Data Bar&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ws</span><span class="o">|</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Previous Year Quarterly Profits (JPY)&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Quarter&quot;</span><span class="p">,</span> <span class="s2">&quot;Profit&quot;</span><span class="p">,</span> <span class="s2">&quot;% of Total&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">offset</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">rows</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>  <span class="n">offset</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">rows</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Q</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="o">*</span><span class="p">((</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)),</span> <span class="s2">&quot;=100*B</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">/SUM(B3:B</span><span class="si">#{</span><span class="n">rows</span><span class="o">+</span><span class="n">offset</span><span class="si">}</span><span class="s2">)&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span><span class="o">=&gt;[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">money</span><span class="p">,</span> <span class="n">percent</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data_bar</span> <span class="o">=</span> <span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:DataBar</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_conditional_formatting</span><span class="p">(</span><span class="s2">&quot;B3:B100&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:dataBar</span><span class="p">,</span> <span class="ss">:dxfId</span> <span class="o">=&gt;</span> <span class="n">profitable</span><span class="p">,</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:data_bar</span> <span class="o">=&gt;</span> <span class="n">data_bar</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>iconSet</h3>

<p>iconSet方式是对于满足条件和不满足条件的单元格分别使用不同的图标。</p>

<p><img src="http://d.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=c718e589e4cd7b89ed6c3a863f1f339a/34fae6cd7b899e511cacdf5740a7d933c8950d56.jpg?referer=a0046022fa1986181850dab46b4d&amp;x=.jpg" alt="image" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Icon Set&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ws</span><span class="o">|</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Previous Year Quarterly Profits (JPY)&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Quarter&quot;</span><span class="p">,</span> <span class="s2">&quot;Profit&quot;</span><span class="p">,</span> <span class="s2">&quot;% of Total&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">offset</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">rows</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>  <span class="n">offset</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">rows</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Q</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="o">*</span><span class="p">((</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)),</span> <span class="s2">&quot;=100*B</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">/SUM(B3:B</span><span class="si">#{</span><span class="n">rows</span><span class="o">+</span><span class="n">offset</span><span class="si">}</span><span class="s2">)&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span><span class="o">=&gt;[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">money</span><span class="p">,</span> <span class="n">percent</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">icon_set</span> <span class="o">=</span> <span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:IconSet</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_conditional_formatting</span><span class="p">(</span><span class="s2">&quot;B3:B100&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:iconSet</span><span class="p">,</span> <span class="ss">:dxfId</span> <span class="o">=&gt;</span> <span class="n">profitable</span><span class="p">,</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:icon_set</span> <span class="o">=&gt;</span> <span class="n">icon_set</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[axlsx报表工具(三)创建图表]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-san-chuang-jian-tu-biao/"/>
    <updated>2014-02-15T00:42:48+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-san-chuang-jian-tu-biao</id>
    <content type="html"><![CDATA[<h3>饼图</h3>

<p>axlsx创建饼状图非常简单，上图：</p>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=4ccd2d6c4334970a4373102aa5f1a0f5/fc1f4134970a304ec10145b9d3c8a786c9175c56.jpg?referer=ddc5668e5066d016270eab189c4c&amp;x=.jpg" alt="image" /></p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wb</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Pie Chart&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">sheet</span><span class="o">|</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;First&quot;</span><span class="p">,</span> <span class="s2">&quot;Second&quot;</span><span class="p">,</span> <span class="s2">&quot;Third&quot;</span><span class="p">,</span> <span class="s2">&quot;Fourth&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_chart</span><span class="p">(</span><span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:Pie3DChart</span><span class="p">,</span> <span class="ss">:start_at</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="ss">:end_at</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">15</span><span class="o">]</span><span class="p">,</span> <span class="ss">:title</span><span class="o">=&gt;</span> <span class="s1">&#39;dark corner here&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">chart</span><span class="o">|</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">add_series</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A2:D2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:labels</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A1:D1&quot;</span><span class="o">]</span>    <span class="c1">#数据点序列及其名称</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">show_val</span> <span class="o">=</span> <span class="kp">true</span>       <span class="c1">#是否在饼状图中显示数值</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">show_percent</span> <span class="o">=</span> <span class="kp">true</span>    <span class="c1">#是否在饼状图中显示所占百分比</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">d_lbl_pos</span> <span class="o">=</span> <span class="ss">:outEnd</span>    <span class="c1">#图例位于图标外部</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">show_leader_lines</span> <span class="o">=</span> <span class="kp">true</span>  <span class="c1">#是否显示数据和数值间的指示线</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在add_chart方法中，第一个参数指定图标的类型Aslsx::Pie3DChart，而start_at和end_at分别指定图表的左上角单元格和右下角+1单元格，注意图中饼图的右下角单元格是E15即[4,14]，而end_at是[5,15]，所以称为右下角+1单元格，此外注意和excel编号不同，这里单元格序号是从0开始的。</p>

<ul>
<li>chart.add_series方法是创建图表的主要方法，用来添加点序列的值及其名称。</li>
<li>chart.d_lbls是Data Lables的缩写，顾名思义就是数据标签。</li>
</ul>


<p>饼图中每块扇形的颜色是自动生成的，如果想要手动指定也是可以的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">chart</span><span class="o">.</span><span class="n">add_series</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A2:D2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:labels</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;A1:D1&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:colors</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;FF0000&#39;</span><span class="p">,</span> <span class="s1">&#39;00FF00&#39;</span><span class="p">,</span> <span class="s1">&#39;0000FF&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>折线图</h3>

<p><img src="http://c.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=7fd401bba586c9170c03523cf90601f2/d0c8a786c9177f3e8d17194e72cf3bc79f3d5656.jpg?referer=7d35047437fae6cd55a39e51924c&amp;x=.jpg" alt="image" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wb</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Line Chart&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">sheet</span><span class="o">|</span>
</span><span class='line'> <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s1">&#39;l1&#39;</span><span class="p">,</span><span class="s1">&#39;l2&#39;</span><span class="p">,</span><span class="s1">&#39;l3&#39;</span><span class="p">,</span><span class="s1">&#39;l4&#39;</span><span class="o">]</span>
</span><span class='line'> <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="s1">&#39;=sum(A2:C2)&#39;</span><span class="o">]</span>
</span><span class='line'> <span class="n">sheet</span><span class="o">.</span><span class="n">add_chart</span><span class="p">(</span><span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:Line3DChart</span><span class="p">,</span> <span class="ss">:start_at</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="ss">:end_at</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">17</span><span class="o">]</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s2">&quot;Chart&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">chart</span><span class="o">|</span>
</span><span class='line'>   <span class="n">chart</span><span class="o">.</span><span class="n">add_series</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A2:D2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:labels</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A1:D1&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;bob&#39;</span>
</span><span class='line'>   <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">show_val</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>   <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">show_cat_name</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>   <span class="n">chart</span><span class="o">.</span><span class="n">catAxis</span><span class="o">.</span><span class="n">tick_lbl_pos</span> <span class="o">=</span> <span class="ss">:none</span>   <span class="c1">#不在横轴上显示坐标</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>chart.d_lbls.show_val表示显示数值，而chart.d_lbls.show_cat_name表示显示每个数值的名称。</p>

<h3>柱形图</h3>

<p><img src="http://d.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=4cc5e74b1d30e924cba49c347c331f3b/29381f30e924b899e2cc837b6c061d950b7bf685.jpg?referer=473e18b979cb0a46dc35bf09329b&amp;x=.jpg" alt="image" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wb</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Bar Chart&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">sheet</span><span class="o">|</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;A Simple Bar Chart&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;First&quot;</span><span class="p">,</span> <span class="s2">&quot;Second&quot;</span><span class="p">,</span> <span class="s2">&quot;Third&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_chart</span><span class="p">(</span><span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:Bar3DChart</span><span class="p">,</span> <span class="ss">:start_at</span> <span class="o">=&gt;</span> <span class="s2">&quot;A4&quot;</span><span class="p">,</span> <span class="ss">:end_at</span> <span class="o">=&gt;</span> <span class="s2">&quot;F17&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">chart</span><span class="o">|</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">add_series</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A3:C3&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:labels</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A2:C2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A1&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">valAxis</span><span class="o">.</span><span class="n">label_rotation</span> <span class="o">=</span> <span class="o">-</span><span class="mi">45</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">catAxis</span><span class="o">.</span><span class="n">label_rotation</span> <span class="o">=</span> <span class="mi">45</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">d_lbl_pos</span> <span class="o">=</span> <span class="ss">:outEnd</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">show_val</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">catAxis</span><span class="o">.</span><span class="n">tick_lbl_pos</span> <span class="o">=</span> <span class="ss">:none</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_chart</span><span class="p">(</span><span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:Bar3DChart</span><span class="p">,</span> <span class="ss">:barDir</span> <span class="o">=&gt;</span> <span class="ss">:col</span><span class="p">,</span><span class="ss">:start_at</span> <span class="o">=&gt;</span> <span class="s2">&quot;A17&quot;</span><span class="p">,</span> <span class="ss">:end_at</span> <span class="o">=&gt;</span> <span class="s2">&quot;F30&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">chart</span><span class="o">|</span> <span class="c1">#barDir指定方向:bar或:col</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">add_series</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A3:C3&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:labels</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A2:C2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A1&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">valAxis</span><span class="o">.</span><span class="n">label_rotation</span> <span class="o">=</span> <span class="o">-</span><span class="mi">45</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">catAxis</span><span class="o">.</span><span class="n">label_rotation</span> <span class="o">=</span> <span class="mi">45</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">d_lbl_pos</span> <span class="o">=</span> <span class="ss">:outEnd</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">show_val</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">catAxis</span><span class="o">.</span><span class="n">tick_lbl_pos</span> <span class="o">=</span> <span class="ss">:none</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的图表位置start_at和end_at使用了和上面不同的方式，直接使用单元格名称如A4，F17，但end_at仍然是右下角单元格+1。其他代码的自解释性很强，无须赘述了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[axlsx报表工具(二)格式化为美观的表格]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-er-ge-shi-hua-wei-mei-guan-de-biao-ge/"/>
    <updated>2014-02-15T00:38:10+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-er-ge-shi-hua-wei-mei-guan-de-biao-ge</id>
    <content type="html"><![CDATA[<h3>基础知识</h3>

<p>axlsx的格式化使用Aslsx::Styles类来处理，通常使用Axlsx::Styles#add_style 帮助方法来添加格式，该方法定义：</p>

<pre><code>(Integer) add_style(options = {})
</code></pre>

<!-- more -->


<p>所有的格式设置操作都在options这个hash中指定，该hash的键名非常好记，下面是常见的键值列表：</p>

<pre><code>Options Hash (options):
fg_color (String) — 字体颜色，如：FFFF0000
sz (Integer) — 字体大小
b (Boolean) — 是否粗体
i (Boolean) — 是否斜体
u (Boolean) — 是否加下划线
strike (Boolean) — 是否加删除线
shadow (Boolean) — 是否加阴影
charset (Integer) — 字符集，可选的字符集列表：
0   ANSI_CHARSET
1   DEFAULT_CHARSET
2   SYMBOL_CHARSET
77  MAC_CHARSET
128 SHIFTJIS_CHARSET
129 HANGUL_CHARSET
130 JOHAB_CHARSET
134 GB2312_CHARSET
136 CHINESEBIG5_CHARSET
161 GREEK_CHARSET
162 TURKISH_CHARSET
163 VIETNAMESE_CHARSET
177 HEBREW_CHARSET
178 ARABIC_CHARSET
186 BALTIC_CHARSET
204 RUSSIAN_CHARSET
222 THAI_CHARSET
238 EASTEUROPE_CHARSET
255 OEM_CHARSET


family (Integer) — 字体，可选字体：
0 Not applicable.
1 Roman
2 Swiss
3 Modern
4 Script
5 Decorative
6..14 Reserved for future use


font_name (String) — 字体名称
num_fmt (Integer) — 数字格式：可选格式：
1 0
2 0.00
3 #,##0
4 #,##0.00
5 $#,##0_);($#,##0)
6 $#,##0_);[Red]($#,##0)
7 $#,##0.00_);($#,##0.00)
8 $#,##0.00_);[Red]($#,##0.00)
9 0%
10 0.00%
11 0.00E+00
12 # ?/?
13 # ??/??
14 m/d/yyyy
15 d-mmm-yy
16 d-mmm
17 mmm-yy
18 h:mm AM/PM
19 h:mm:ss AM/PM
20 h:mm
21 h:mm:ss
22 m/d/yyyy h:mm
37 #,##0_);(#,##0)
38 #,##0_);[Red](#,##0)
39 #,##0.00_);(#,##0.00)
40 #,##0.00_);[Red](#,##0.00)
45 mm:ss
46 [h]:mm:ss
47 mm:ss.0
48 ##0.0E+0
49 @


format_code (String) — 自定义格式如'yyyy-mm-dd'，如果设置了该值，则num_fmt将被忽略.
border (Integer|Hash) — 边框样式.
bg_color (String) — 单元格背景色
hidden (Boolean) — 是否隐藏单元格
locked (Boolean) — 是否锁定单元格
type (Symbol) — 风格类型，可选的类型有[:dxf, :xf]. :xf事默认类型
alignment (Hash) — 对齐.该hash的包括：
horizontal (Symbol)，该键对应的值包括有：
:general
:left
:center
:right
:fill
:justify
:centerContinuous
:distributed
vertical (Symbol)，该键对应的值有：
:top
:center
:bottom
:justify
:distributed
textRotation (Integer)
wrapText (Boolean)
indent (Integer)
relativeIndent (Integer)
justifyLastLine (Boolean)
shrinkToFit (Boolean)
readingOrder (Integer)
</code></pre>

<h3>格式化报表示例</h3>

<p>格式化报表是以单元格为单位执行的，通常在添加行的时候，在add_row第二个hash参数里指定：</p>

<pre><code>sheet.add_row ['a', "b"], :style =&gt; [nil, header] #header是创建好的style
#or
sheet.add_row ["a', "b"], :style =&gt; header
</code></pre>

<p>如果style是一个列表，那么列表里每一个格式对应于行内每个单元格，也可以像第二行代码那样为整行指定同一种格式。</p>

<p><img src="http://b.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=9b79859e2c738bd4c021b23491b0f6eb/4bed2e738bd4b31cc6cc6ef885d6277f9f2ff885.jpg?referer=f3368c656f224f4a0e8e4723389b&amp;x=.jpg" alt="image" /></p>

<p>下面是创建如图报表的部分代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;axlsx&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:Package</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span><span class="o">.</span><span class="n">workbook</span> <span class="k">do</span> <span class="o">|</span><span class="n">wb</span><span class="o">|</span>
</span><span class='line'>    <span class="n">styles</span> <span class="o">=</span> <span class="n">wb</span><span class="o">.</span><span class="n">styles</span>
</span><span class='line'>    <span class="n">header</span>     <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">add_style</span> <span class="ss">:bg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;FFFF33&quot;</span><span class="p">,</span><span class="ss">:fg_color</span><span class="o">=&gt;</span><span class="s2">&quot;0033CC&quot;</span><span class="p">,</span> <span class="ss">:sz</span> <span class="o">=&gt;</span> <span class="mi">16</span><span class="p">,</span> <span class="ss">:b</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:alignment</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:horizontal</span> <span class="o">=&gt;</span> <span class="ss">:center</span><span class="p">}</span>
</span><span class='line'>    <span class="n">tbl_header</span> <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">add_style</span> <span class="ss">:bg_color</span><span class="o">=&gt;</span><span class="s2">&quot;99FF33&quot;</span><span class="p">,</span><span class="ss">:b</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:alignment</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:horizontal</span> <span class="o">=&gt;</span> <span class="ss">:center</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">ind_header</span> <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">add_style</span> <span class="ss">:bg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;FFDFDEDF&quot;</span><span class="p">,</span> <span class="ss">:b</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:alignment</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:indent</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>    <span class="n">col_header</span> <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">add_style</span> <span class="ss">:bg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;FFDFDEDF&quot;</span><span class="p">,</span> <span class="ss">:b</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:alignment</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:horizontal</span> <span class="o">=&gt;</span> <span class="ss">:center</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">label</span>      <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">add_style</span> <span class="ss">:alignment</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:indent</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">money</span>      <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">add_style</span> <span class="ss">:num_fmt</span> <span class="o">=&gt;</span> <span class="mi">5</span>
</span><span class='line'>    <span class="n">t_label</span>    <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">add_style</span> <span class="ss">:b</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:bg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;FFDFDEDF&quot;</span>
</span><span class='line'>    <span class="n">t_money</span>    <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">add_style</span> <span class="ss">:b</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:num_fmt</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">,</span> <span class="ss">:bg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;FFDFDEDF&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">wb</span><span class="o">.</span><span class="n">add_worksheet</span> <span class="k">do</span> <span class="o">|</span><span class="n">sheet</span><span class="o">|</span>
</span><span class='line'>      <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span>               <span class="c1">#添加空行</span>
</span><span class='line'>      <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;College Budget&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">header</span><span class="o">]</span>        <span class="c1">#标题，大字体居中</span>
</span><span class='line'>      <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span>
</span><span class='line'>      <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;What&#39;s coming in this month.&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;How am I doing&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="n">tbl_header</span>
</span><span class='line'>      <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;Item&quot;</span><span class="p">,</span> <span class="s2">&quot;Amount&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;Item&quot;</span><span class="p">,</span> <span class="s2">&quot;Amount&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">ind_header</span><span class="p">,</span> <span class="n">col_header</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">ind_header</span><span class="p">,</span> <span class="n">col_header</span><span class="o">]</span>
</span><span class='line'>      <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;Estimated monthly net income&quot;</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;Monthly income&quot;</span><span class="p">,</span> <span class="s2">&quot;=C9&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">money</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">money</span><span class="o">]</span>
</span><span class='line'>      <span class="c1">#省略部分代码</span>
</span><span class='line'>      <span class="sx">%w(B4:C4 E4:F4 B11:C11 E11:F11 B2:F2)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">range</span><span class="o">|</span> <span class="n">sheet</span><span class="o">.</span><span class="n">merge_cells</span><span class="p">(</span><span class="n">range</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">sheet</span><span class="o">.</span><span class="n">column_widths</span> <span class="mi">2</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">p</span><span class="o">.</span><span class="n">use_shared_strings</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="nb">p</span><span class="o">.</span><span class="n">serialize</span> <span class="s1">&#39;styles.xlsx&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[axlsx报表工具(一)安装及入门]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-yi-an-zhuang-ji-ru-men/"/>
    <updated>2014-02-15T00:34:19+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-yi-an-zhuang-ji-ru-men</id>
    <content type="html"><![CDATA[<h3>安装</h3>

<p>axlsx是一个基于ruby的Office Open XML Spreadsheet报表生成工具，下图是它生成的一个报表截图</p>

<p><img src="https://raw.github.com/randym/axlsx/master/examples/sample.png" alt="axlsx" /></p>

<!-- more -->


<p>安装axlsx和安装其他gem一样：</p>

<pre><code>$ gem install axlsx
</code></pre>

<h3>创建第一个报表</h3>

<p>axlsx使用的对象和office文档使用的对象完全一样，workbook代表一个文档，worksheet代表一张表，row和cell代表行和单元格，基本上所有的对象顾名思义即可，而不需要了解文档ECMA规范。</p>

<p>比如要创建一张如图所示的报表：</p>

<p><img src="http://c.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=0b461ccc6e81800a6ae5890b810e42c7/cdbf6c81800a19d86620614631fa828ba61e4656.jpg?referer=5d8a74b17f1ed21b20de1bd5a24c&amp;x=.jpg" alt="image" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;axlsx&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:Package</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">wb</span> <span class="o">=</span> <span class="nb">p</span><span class="o">.</span><span class="n">workbook</span>
</span><span class='line'>
</span><span class='line'><span class="n">wb</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Basic Worksheet&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">sheet</span><span class="o">|</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;First Column&quot;</span><span class="p">,</span> <span class="s2">&quot;Second&quot;</span><span class="p">,</span> <span class="s2">&quot;Third&quot;</span><span class="p">,</span><span class="s2">&quot;Total&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span><span class="s2">&quot;=SUM(A2:C2)&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s1">&#39;This is a very very long sentence.&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">merge_cells</span> <span class="s2">&quot;A3:D3&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">serialize</span> <span class="s1">&#39;basic.xlsx&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码非常简单明了，创建worksheet，再一行行添加数据，在添加第二行数据时甚至使用了一个求和函数，所以我们使用过的Excel的知识完全可以直接拿过来使用，甚至对于较长的内容可以合并单元格，但这里没有居中显示所以还不够美观，美观的事情可以格式化来解决，不过这是下一篇的内容了。</p>

<p>最后一行是将报表序列化到xlsx格式的文件，该文件可以用MSOffice直接打开查看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步搭建mysql主从同步]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/yi-bu-yi-bu-da-jian-mysqlzhu-cong-tong-bu/"/>
    <updated>2014-02-15T00:24:49+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/yi-bu-yi-bu-da-jian-mysqlzhu-cong-tong-bu</id>
    <content type="html"><![CDATA[<h3>下载mysql数据库</h3>

<pre><code>$ wget http://cdn.mysql.com/Downloads/MySQL-5.1/mysql-5.1.73.tar.gz
tar vzxf mysql-5.1.73.tar.gz
</code></pre>

<!-- more -->


<h3>编译安装</h3>

<p>最好专门创建一个用户mysql来安装数据库。</p>

<pre><code>MYSQL_BASEDIR=$HOME/mysql
cd mysql-5.1.73
./configure 
--prefix=${MYSQL_BASEDIR} 
--with-charset=gbk 
--with-extra-charsets=gbk,utf8,ascii,big5,latin1,binary 
--with-unix-socket-path=${MYSQL_BASEDIR}/tmp/mysql.sock 
--with-mysqld-user=mysql     #以哪个用户执行mysqld进程
make
make install
</code></pre>

<h3>初始化数据库</h3>

<p>复制必要的配置文件和启停脚本</p>

<pre><code>cd ${MYSQL_BASEDIR}
mkdir etc log tmp var
cp share/mysql/my-medium.cnf  my.cnf
cp share/mysql/mysql.server  bin/
</code></pre>

<h3>修改配置文件</h3>

<pre><code>vim ./my.cnf
</code></pre>

<p>在[mysqld]下添加配置项：</p>

<pre><code>basedir= ${MYSQL_BASEDIR}   # ${MYSQL_BASEDIR}是你的mysql安装目录
datadir = ${MYSQL_BASEDIR}/var   # mysql数据路径
tmpdir = ${MYSQL_BASEDIR}/tmp   # 临时文件路径
slave-load-tmpdir = ${MYSQL_BASEDIR}/tmp   # 从服务器同步LOAD DATA INFILE语句时创建临时文件的目录名
port = 3306   # 如果修改port，[mysqld] 和 [client]下的port都要修改
pid-file = ${MYSQL_BASEDIR}/var/mysql.pid  # mysqld PID文件位置
#以下为可选
socket = ${MYSQL_BASEDIR}/tmp/mysql.sock  # 用于指定本地连接的Unix套接字文件位置，[mysqld] 和 [client]下的port都要修改
#skip-name-resolve   # 是否仅使用ip验证客户端
#skip-symbolic-links  #忽略MyISAM表的数据及索引文件连接到另一个目录下
max_connect_errors = 10000
max_connections = 500
wait-timeout = 30
</code></pre>

<p>启动数据库</p>

<pre><code>$ ./bin/mysql_install_db  #安装数据库文件
$ ./bin/mysql.server start    #出现下面这行说数据库启动ok了
Starting MySQL.                                            [  OK  ]
</code></pre>

<h3>配置mysql用户</h3>

<p>使用./bin目录下的mysql命令可以登录到数据库，登录后删除匿名用户并且为root设置密码：</p>

<pre><code>$ mysql -u root
&gt; delete from mysql.user where user='';
&gt; UPDATE mysql.user SET Password = PASSWORD('password') WHERE user='root';
</code></pre>

<p>按照以上同样的步骤再搭建一个mysql，注意，如果在同一主机搭建多个mysql实例，那么就需要将端口改成不同才行。</p>

<p>下面开始配置主从同步。</p>

<p>首先在主库新建专门用于同步的数据库账号mysqlsync</p>

<pre><code>&gt; GRANT REPLICATION SLAVE ON *.* TO 'mysqlsync'@'%' IDENTIFIED BY 'password';
</code></pre>

<h3>主库配置</h3>

<p>所有的配置项还是在my.cnf中的[mysqld]下添加。</p>

<p>首先server-id作为MySQL服务器的标识，具有相关联上下游同步系统需具有全局唯一性。主库我们将server-id配置为1。其他主库需要添加的配置有：</p>

<pre><code>server-id=1
# 同步过程中需要忽略的表，支持正则表达式。全库同步时，必须屏蔽mysql系统库和test测试库。
replicate-wild-ignore-table = mysql.%
replicate-wild-ignore-table = test.%
# 需要同步的表，多个表需多次指定，这里我们使用全库同步,方便点
# replicate-do-table = database.table
log-bin = mysql-bin  #二进制日志，强制开启
log-bin-index = mysql-bin.index  # 记录二进制日志索引文件
relay-log-index = relay-log.index # 记录中继日志索引文件
</code></pre>

<h3>从库配置</h3>

<pre><code>server-id=2
read-only # 在从库开启该选项，避免在从库上进行写操作，导致主从数据不一致（不过对super权限无效哦）
skip-slave-start # 在从库开启该选项，启动数据库后，需手动开启同步进程
relay-log = mysql-relay #中继日志，从库开启
relay-log-index = relay-log.index
log-bin = mysql-bin
log-bin-index = mysql-bin.index
replicate-wild-ignore-table = mysql.%
replicate-wild-ignore-table = test.%
</code></pre>

<h3>同步设置</h3>

<p>启动主数据库，并查看主库状态：</p>

<pre><code>$ ./bin/mysql.server start
$ mysql -u root -p
mysql&gt; show master status;
</code></pre>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=21e536be79899e517c8e3a11729ca80e/e7cd7b899e510fb31b3b92d4db33c895d1430c56.jpg?referer=a44e286a8418367af49e4aed6c4d&amp;x=.jpg" alt="image" /></p>

<p>记下来log文件名和位置，这里是“mysql-bin.000005&#8221;和”106“。</p>

<p>然后启动从库，</p>

<pre><code>$ ./bin/mysql.server start
$ mysql -u root -p
mysql&gt; change master to master_host='your_host',master_port=3307,master_user='mysqlsync',master_password='pasword',master_log_file='mysql-bin.000005',master_log_pos=106;
mysql&gt; startslave;  #启动从库
mysql&gt; show slave status\G;
</code></pre>

<p>最后一条sql命令得到如图结果：</p>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=a307b4b80846f21fcd345e56c61f1a5d/7acb0a46f21fbe091fae395769600c338644ad85.jpg?referer=781a5e5095dda144831e58820b9b&amp;x=.jpg" alt="image" /></p>

<p>其中Slave_IO_Running和Slave_SQL_Running是yes就对了。</p>

<p>最后，可以验证一下，在主库修改记录，从库可以看到同步过来的变化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在rails外单独使用ActiveRecord]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/zai-railswai-dan-du-shi-yong-activerecord/"/>
    <updated>2014-02-15T00:20:50+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/zai-railswai-dan-du-shi-yong-activerecord</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>单独使用ActiveRecord</h3>

<p>需要在应用根目录demo/下的app.rb文件中写入：</p>

<pre><code>require 'active_record'  
require 'sqlite3'  

ActiveRecord::Base.establish_connection(  
    :adapter=&gt;'sqlite3',  
    :database=&gt;'data.sqlite3',  
    :pool=&gt;5,  
    :timeout=&gt;5000  
    )  

class CreateUsers &lt; ActiveRecord::Migration  
  def change  
    create_table :users do |t|  
      t.string :name  
      t.integer :age  
    end 
  end  
end  

CreateUsers.new.change

class User &lt; ActiveRecord::Base  
end  

User.create name:"Jack",age:12
</code></pre>

<p>首先，使用ActiveRecord::Base.establish_connection建立连接，然后定义数据表迁移，再使迁移生效建立数据表，最后就可以像在rails中一样定义model，然后正常使用ActiveRecord了。</p>

<p>代码可以正常工作了，但可以做的工作还有很多，因为这段代码实在是不美观。</p>

<h3>像样的结构</h3>

<p>大杂烩式的代码文件总是不美的，上面代码中包含了数据库连接，表创建，model定义和实际的应用代码四部分，这么多功能各异的部件还是分开好。首先创建demo/db目录，在这个目录下放置所有数据库连接的定义；创建demo/models目录，在下面放置model定义文件。demo/app.rb文件位置不变。</p>

<h3>model定义</h3>

<p>model定义文件demo/user.rb的内容就是将上面的user类定义复制过来即可。</p>

<pre><code>class User &lt; ActiveRecord::Base
end
</code></pre>

<h3>ActiveRecord配置</h3>

<p>新建demo/db/connection.rb文件，该文件里设置数据库连接：</p>

<pre><code>require 'active_record'
require 'yaml'

dbconfig = YAML::load(File.open('db/database.yml'))
ActiveRecord::Base.establish_connection(dbconfig)
</code></pre>

<p>这里模仿rails使用了yaml来配置连接，该文件也在demo/db目录下，内容为：</p>

<pre><code>adapter: sqlite3
database: data.sqlite3
pool: 5
timeout: 5000
</code></pre>

<p>现在的demo/app.rb清爽多了：</p>

<pre><code>require File.expand_path('../db/connection',__FILE__)
Dir[File.expand_path('../models',__FILE__)+'/*.rb'].each{|f| require f }

User.create name:"Jack",age:12
</code></pre>

<h3>数据表迁移</h3>

<p>现在还有一个问题，我也想像rails中那样利用rake来迁移数据表定义。参考我前一篇博客Rake就可以轻松写出数据迁移的rakefile。在demo/根目录下创建rakefile文件：</p>

<pre><code>require 'active_record'
require 'yaml'
require 'logger'

task :default =&gt; :migrate

task :migrate =&gt; :environment do
  ActiveRecord::Migrator.migrate('db/migrate', ENV["VERSION"] ? ENV["VERSION"].to_i : nil )
end

task :environment do
  ActiveRecord::Base.establish_connection(YAML::load(File.open('db/database.yml')))
  ActiveRecord::Base.logger = Logger.new(File.open('db/database.log', 'a'))
end
</code></pre>

<p>只要在终端中执行rake命令就可能完成数据迁移：</p>

<pre><code>$ rake
==  CreateUsers: migrating ====================================================
-- create_table(:users)
   -&gt; 0.0020s
==  CreateUsers: migrated (0.0040s) ===========================================
</code></pre>

<p>实际上现在还无法得出这样的输出，因为还没有编写迁移代码文件。那么迁移文件写在哪儿呢？在demo/db/migrate/目录中专门用来放置数据迁移代码，比如现在我们在该目录下新建一个迁移文件001_create_users.rb，写入迁移代码：</p>

<pre><code>class CreateUsers &lt; ActiveRecord::Migration  
  def change  
    create_table :users do |t|  
      t.string :name  
      t.integer :age  
    end 
  end  
end  
</code></pre>

<p>现在执行rake命令才能得出上面给出的正确输出。</p>

<p>最后给出示例应用的最终目录结构：</p>

<p><img src="http://f.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=8350422bd309b3deefbfe46dfc841dbc/9358d109b3de9c8204461ccc6e81800a19d84356.jpg?referer=16e32c709045d688fa158794ad4c&amp;x=.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rspec]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/rspec/"/>
    <updated>2014-02-15T00:14:29+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/rspec</id>
    <content type="html"><![CDATA[<h2>RSpec断言规则</h2>

<p>RSpec有一些常见的断言规则。Ruby的断言方法是以问号结尾并且返回true或false的方法，常见的如： empty?   nil?    instance_of? 等。在spec中的断言很简单，就是should be_去掉问号的断言方法。如：</p>

<pre><code>[].should be_empty =&gt; [].empty? #passes
[].should_not be_empty =&gt; [].empty? #fails
</code></pre>

<!-- more -->


<p>除了用&#8221;be_&ldquo;来前缀断言方法，也可以用&#8221;be_a_&#8221;和&#8221;be_an_&#8221;前缀，使得代码读起来更加自然：</p>

<pre><code>"a string".should be_an_instance_of(String) =&gt;"a string".instance_of?(String)#passes
3.should be_a_kind_of(Fixnum) =&gt; 3.kind_of?(Numeric) #passes
3.should be_a_kind_of(Numeric) =&gt; 3.kind_of?(Numeric) #passes
3.should be_an_instance_of(Fixnum) =&gt; 3.instance_of?(Fixnum) #passes 
3.should_not be_instance_of(Numeric) =&gt; 3.instance_of?(Numeric) #fails
</code></pre>

<p>Rspec也会为诸如“has_key?”之类的断言创建匹配器，要使用该特性，在断言对象上使用 should have_key(:key) 就可以了，rspec会自动在对象上调用has_key?(:key)。如：</p>

<pre><code>{:a =&gt; "A"}.should have_key(:a) =&gt; {:a =&gt; "A"}.has_key?(:a) #passes
{:a =&gt; "A"}.should have_key(:b) =&gt; {:a =&gt; "A"}.has_key?(:b) #fails
</code></pre>

<p>还有一些常见的断言方法如： be  be_close  change  eql  have  be_true  be_false be_nil include raise_error respond_to throw_symbol   等等</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rake based application]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/rake-based-application/"/>
    <updated>2014-02-15T00:04:13+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/rake-based-application</id>
    <content type="html"><![CDATA[<h3>1.什么是rack</h3>

<p>rack是基于ruby的web服务器接口，它将http协议以非常简单的方式包裹起来，为web服务器和应用提供一致性的接口。rack被用于几乎所有的ruby web应用开发框架中。这是维基百科上给出的一个基于rack的ruby应用：</p>

<pre><code>app = lambda do |env|
  body = "Hello, World!"
  [200, {"Content-Type" =&gt; "text/plain", "Content-Length" =&gt; body.length.to_s}, [body]]
end

run app
</code></pre>

<p>重点是第三行，一个基于rack的ruby应用只需要一个包含call方法的对象，在调用call方法后该对象会返回形如第三行的一个列表，该列表包含三个元素：第一个元素是这次http请求的返回状态码200，第二个元素是一个返回的http响应headers的hash表，第三个元素是http响应体的列表，所以该列表的形式为：</p>

<pre><code>[ status_code, headers, body ]
</code></pre>

<!-- more -->


<h3>2.一个简单的rack-based-application</h3>

<p>编写一个最简单的rack based application，ok，需要一个能响应call方法的对象，在该对象上调用call方法能返回[ status_code, headers, body ]列表。在文件夹rack_based下新建simple.ru文件，*.ru被称为rakcup文件，rack使用该文件来启动rack应用。该文件内容为：</p>

<pre><code>run lambda { |env| [200,{'Content-Type'=&gt;'text/plain'},['OK']]}
</code></pre>

<p>That&rsquo;s all.这个基于rack的应用已经编写完成了，在terminal中键入下面命令即可启动这个应用了：</p>

<pre><code>rackup rack_based/simple.ru
</code></pre>

<p>rack使用默认的内置WEBrick服务器，用rackup命令在端口9292启动该应用：</p>

<pre><code>JasondeMacBook-Pro:Projects jason$ rackup rack_based/simple.ru 
Thin web server (v1.6.1 codename Death Proof)
Maximum connections set to 1024
Listening on 0.0.0.0:9292, CTRL+C to stop
</code></pre>

<p>在浏览器中访问<a href="http://localhost:9292">http://localhost:9292</a> 即可看到页面显示“OK”，说明应用正常工作了。</p>

<p>Rails也是基于rack的框架，所以，rails的rackup配置文件是位于应用根目录下的config.ru：</p>

<pre><code># This file is used by Rack-based servers to start the application.

require ::File.expand_path('../config/environment',  __FILE__)
run Rails.application
</code></pre>

<p>所以，Rails.application也能响应call方法。</p>

<p>另外，call方法还带有一个env参数，该参数是一个hash表，包含了请求所有的环境信息，rack应用可以根据env信息给予不同的响应，如下面将simple.ru略作修改，使得它可以返回所有的请求信息：</p>

<pre><code>module Simple
    class Application
        def self.call(env)
            [200,{'Content-Type'=&gt;'text/plain'},[env.to_s]]
        end
    end
end
run Simple::Application
</code></pre>

<p>启动该应用，则可以看到结果：</p>

<p><img src="http://a.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=6bc04cf1d358ccbf1fbcb53f29e3cd03/9d82d158ccbf6c815814c9abbe3eb13533fa4056.jpg?referer=0e96044c8594a4c25334d21ba04c&amp;x=.jpg" alt="image" /></p>

<h3>3.middleware</h3>

<p>这是一个rack应用的请求栈：</p>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=70915c2796eef01f491418c0d0c5e818/8d5494eef01f3a29e9eb308d9b25bc315c607c56.jpg?referer=639819647d3e6709e71770cfbc4c&amp;x=.jpg" alt="image" /></p>

<p>浏览器发出http请求到web Server，web server 再将请求转交给rack，rack负责将请求转交给应用程序栈。在应用栈中，请求经过一层层的中间层middleware后，最好才传达给rack应用，譬如rails的应用的controller最后来处理请求，当rack应用处理完请求后，又逐层返回，最后由rack上交给web server完成响应。注意，并非每次请求都需要完成从上到下的全部栈层次，比如请求一个存在的静态文件，就可能直接由处理静态文件的middleware发送文件，而根本不会将请求传递到rack应用controller中去。</p>

<p>由这张图可以看出来，rack是web server和应用之间的桥梁，或者说适配器。另外，rack应用处在请求栈的最后一层，web请求经过了无数的middleware后才真正到达应用这里。middleware所起的作用和java struts中的拦截器概念非常相似，它们都负责将请求逐层包裹最后递交给应用的是一个非常友好的请求包，使得应用可以更方便地处理逻辑。</p>

<p>下面就来创建一个自定义的middleware，该middleware可以将请求网页内所有&lt;h1>标记内的内容的e改写成大写的X。</p>

<p>首先新建一个rails app，在新建完成后，实用下面命令可以查看rails已经使用的middleware：</p>

<pre><code>rake middleware

use Rack::Sendfile
use ActionDispatch::Static
......
use Rack::Head
use Rack::ConditionalGet
use Rack::ETag
run Demo::Application.routes
</code></pre>

<p>现在在应用的lib目录下新建文件link_jumbler.rb，文件app/lib/link_jumbler.rb的内容：</p>

<pre><code>require 'nokogiri'

class LinkJumbler
    def initialize(app,letters)
        @app=app
        @letters=letters
    end

    def call(env)
        status, headers, response = @app.call(env)
        body=Nokogiri::HTML(response.body)
        body.css("h1").each do |a|
            @letters.each do |f,r|
                a.content=a.content.gsub f.to_s,r.to_s
            end
        end

        [status,headers,[body.to_s]]
    end
end
</code></pre>

<p>首先，在initialize方法中，接受了两个参数，一个是app参数，它会在各个middleware中传递，需要对它调用call方法。另一个参数letters是我们这个middleware需要的参数，这个参数来源是挂载middleware时产生的。不同middleware的传递的这个参数不同，也可能根本没有这个额外的参数。在call方法中，先对@app调用了call方法获得了一个rack风格的响应结果，这里利用nokogiri解析结果，并做出修改，最后返回结果。在java struts中有个前拦截器和后拦截器，从这里也可以看出middleware也可以有相同的功能，比如这里就是对结果作处理，属于一个后处理的middleware。</p>

<p>然后将这个middleware添加到该应用的middleware栈中（看到letters哪儿来的了吧），在app/config/application.rb中添加
<code>config.middleware.use LinkJumbler,{"e"=&gt;"X"}</code>
添加完成后app/config/application.rb文件内容为：</p>

<pre><code>require File.expand_path('../boot', __FILE__)

require 'rails/all'
require File.expand_path('../../lib/link_jumbler', __FILE__)

Bundler.require(:default, Rails.env)

module Demo
  class Application &lt; Rails::Application
    config.middleware.use LinkJumbler,{"e"=&gt;"X"}
  end
end
</code></pre>

<p>再次执行rake middleware命令，可以看到LinkJumbler被添加到最后一层middleware：</p>

<pre><code>use Rack::Sendfile
use ActionDispatch::Static
......
use Rack::Head
use Rack::ConditionalGet
use Rack::ETag
use LinkJumbler
run Demo::Application.routes
</code></pre>

<p>启动该rails应用，可以看到和标准rails欢迎界面的区别了吗？</p>

<p><img src="http://b.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=513d3845adc379317968862cdbffc678/f636afc379310a559ad424b7b54543a983261084.jpg?referer=65c5a1751f950a7b2c227af4509b&amp;x=.jpg" alt="image" /></p>
]]></content>
  </entry>
  
</feed>
