<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jason's space]]></title>
  <link href="http://qjpcpu.github.io/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2014-07-30T23:24:01+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[struct tags]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/07/12/struct-tags/"/>
    <updated>2014-07-12T00:07:11+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/07/12/struct-tags</id>
    <content type="html"><![CDATA[<h3>结构体标签</h3>

<p>在定义结构时，可以为struct定义一个标签，这个标签是作为结构体字段的一个附加属性，主要是反射包会使用到这个属性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;reflect&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">type</span> <span class="nx">S</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">F</span> <span class="kt">string</span> <span class="s">`species:&quot;gopher&quot; color:&quot;blue&quot;`</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">s</span> <span class="o">:=</span> <span class="nx">S</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">st</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">TypeOf</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">field</span> <span class="o">:=</span> <span class="nx">st</span><span class="p">.</span><span class="nx">Field</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">field</span><span class="p">.</span><span class="nx">Tag</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="s">&quot;color&quot;</span><span class="p">),</span> <span class="nx">field</span><span class="p">.</span><span class="nx">Tag</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="s">&quot;species&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>blue gopher
</span></code></pre></td></tr></table></div></figure>


<p>结构体<code>S</code>的<code>F</code>成员具有两个属性<code>species</code>和<code>color</code>，其属性的值分别为<code>blue</code>和<code>gopher</code>。如果不使用反射去取这个属性，在定义时写不写属性都是无所谓的。</p>

<!--more-->


<p>在go中，tag的定义是有规定的：</p>

<blockquote><p>By convention, tag strings are a concatenation of optionally space-separated key:&ldquo;value&rdquo; pairs. Each key is a non-empty string consisting of non-control characters other than space (U+0020 &lsquo; &rsquo;), quote (U+0022 &lsquo;&ldquo;&rsquo;), and colon (U+003A &lsquo;:&rsquo;). Each value is quoted using U+0022 &lsquo;&rdquo;&rsquo; characters and Go string literal syntax.</p></blockquote>

<p>即：按照go的默认约定，tag以<code>key:value</code>的形式定义，多个<code>key:value</code>以空格分割，<code>key</code>不能是控制字符单引号、双引号和冒号，<code>value</code>需要用引号引起来。</p>

<p>当然，也可以不遵守这个约定，因为具体怎么使用tag还是按照开发者自己的意愿来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你不知道的Go]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/06/23/ni-bu-zhi-dao-de-go/"/>
    <updated>2014-06-23T14:37:47+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/06/23/ni-bu-zhi-dao-de-go</id>
    <content type="html"><![CDATA[<h3>1.匿名结构</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>      <span class="kt">string</span>
</span><span class='line'>    <span class="nx">age</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">=</span><span class="s">&quot;jack&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>声明时初始化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">st</span> <span class="o">:=</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">age</span>  <span class="kt">int</span>
</span><span class='line'><span class="p">}{</span>
</span><span class='line'>  <span class="s">&quot;Jack&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">12</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">st</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[信任关系建立]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/05/21/xin-ren-guan-xi-jian-li/"/>
    <updated>2014-05-21T14:58:28+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/05/21/xin-ren-guan-xi-jian-li</id>
    <content type="html"><![CDATA[<h3>建立host1到host2的信任关系</h3>

<h4>如果A的rsa文件不存在可以这样建立</h4>

<p>首先在<code>host1</code>上：</p>

<figure class='code'><figcaption><span>create_rsa.sh   </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-keygen -t rsa -N <span class="s2">&quot;&quot;</span> -f ~/.ssh/id_rsa
</span></code></pre></td></tr></table></div></figure>


<h4>添加信任关系</h4>

<p>在<code>host2</code>上，将<code>host1</code>的<code>~/.ssh/id_rsa.pub</code>文件内容<code>追加</code>到<code>host2</code>的<code>authorized_keys</code>文件中</p>

<h4>避免第一次连接出现添加fingerprint的询问</h4>

<p>在<code>host1</code>上执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-keyscan host2 &gt;&gt; ~/.ssh/known_hosts
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>下面是一个示例脚本，在一个中控机上（能同时访问a和b）建立a到b的信任关系：</p>

<figure class='code'><figcaption><span>relation_a2b</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$#&quot;</span> -lt 2 <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;Usage: relation_a2b host1 host2&quot;</span>
</span><span class='line'>        <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nv">from</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="nv">to</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'><span class="nv">key</span><span class="o">=</span><span class="sb">`</span>ssh <span class="nv">$from</span> <span class="s2">&quot;ssh-keyscan -t rsa $to &gt;&gt; ~/.ssh/known_hosts 2&gt;/dev/null &amp;&amp; cat ~/.ssh/id_rsa.pub&quot;</span><span class="sb">`</span>
</span><span class='line'>ssh <span class="nv">$to</span> <span class="s2">&quot;echo $key &gt;&gt; ~/.ssh/authorized_keys&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$from --&gt; $to [OK]&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>relation_a2b host1 host2
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[命令行参数]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/05/02/ming-ling-xing-can-shu/"/>
    <updated>2014-05-02T01:14:33+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/05/02/ming-ling-xing-can-shu</id>
    <content type="html"><![CDATA[<p>阅读docker源码第一个文件<code>DOCKER/docker/docker.go</code>，这是docker的主函数所在的地方。简单来说，这个文件的代码就做了一件事：解析命令行参数，然后根据命令行参数再分流到各种子过程的调用。</p>

<!-- more -->


<h3>flag</h3>

<p>go语言默认使用flag包来做命令行参数解析，对于这个包的使用可以参考官方文档的说明。但归结起来，使用这个包大概有三个步骤：</p>

<ol>
<li>使用<code>flag.XXX</code>函数定义参数名及保存参数的变量</li>
<li>调用<code>flag.Parse()</code>进行参数的解析，解析结果被保存在定义的各个变量里</li>
<li>读取这些变量值</li>
</ol>


<p>但docker里定义参数的函数和标准库不太一样，docker的flag可以使用参数名数组来定义参数。比如在标准flag库里定义一个显示版本号的参数：</p>

<pre><code>flVersion = flag.Bool("v", false, "Print version information and quit")
</code></pre>

<p>但在docker里是这样定义的：</p>

<figure class='code'><figcaption><span>docker/docker.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">flVersion</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">Bool</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;v&quot;</span><span class="p">,</span> <span class="s">&quot;-version&quot;</span><span class="p">},</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&quot;Print version information and quit&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以即可以使用<code>docker -v</code>也可以使用<code>docker --version</code>来显示版本号。</p>

<h3>docker的实现</h3>

<p>docker在这里玩了个小trick，首先它重写了标准库的flag，并将包名由<code>flag</code>改成<code>mflag</code>，然后这样导入包：</p>

<pre><code>import flag "github.com/dotcloud/docker/pkg/mflag"
</code></pre>

<p>所以在docker里造成直接使用flag的假象。</p>

<p>那么，docker是怎样实现多多参数名的支持的？</p>

<p>首先，mflag将<code>Flag</code>的结构体定义参数名<code>Name</code>修改成数组形式<code>Names</code>：</p>

<figure class='code'><figcaption><span>pkg/mflag/flag.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Flag</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Names</span>    <span class="p">[]</span><span class="kt">string</span> <span class="c1">// name as it appears on command line</span>
</span><span class='line'>    <span class="nx">Usage</span>    <span class="kt">string</span>   <span class="c1">// help message</span>
</span><span class='line'>    <span class="nx">Value</span>    <span class="nx">Value</span>    <span class="c1">// value as set</span>
</span><span class='line'>    <span class="nx">DefValue</span> <span class="kt">string</span>   <span class="c1">// default value (as text); for usage message</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后还利用了flag标准库本身的特性，在同一个变量上可以绑定多个参数名:</p>

<pre><code>var de string
flag.String(&amp;de,"a","","argument")
flag.String(&amp;de,"b","","argument")
</code></pre>

<p>即可以用<code>cmd -a val</code>也可以用<code>cmd -b val</code>来调用，变量de的值都会被绑定为<code>val</code>。</p>

<p>除此之外，docker的<code>mflag</code>包还多定义了一种“隐藏参数”：以<code>#</code>开头来定义参数名：</p>

<pre><code>flag.Bool([]string{"#iptables", "-iptables"}, true, "Enable Docker's addition of iptables rules")
</code></pre>

<p>即，使用<code>-iptables</code>和<code>--iptables</code>都是有效的，但是在显示<code>Usage</code>时仅显示<code>--iptables</code>参数的使用说明，这是docker在不断升级更新时，所采用的一种兼容策略吧，允许旧参数的使用并给出警告，但以无帮助信息的方式不推荐旧参数。</p>

<p>实际实现也很简单，就是在帮助函数里去除对旧参数的说明：</p>

<figure class='code'><figcaption><span>pkg/mflag/flag.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">FlagSet</span><span class="p">)</span> <span class="nx">PrintDefaults</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">f</span><span class="p">.</span><span class="nx">VisitAll</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">flag</span> <span class="o">*</span><span class="nx">Flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">format</span> <span class="o">:=</span> <span class="s">&quot;  -%s=%s: %s\n&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">Value</span><span class="p">.(</span><span class="o">*</span><span class="nx">stringValue</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// put quotes on the value</span>
</span><span class='line'>            <span class="nx">format</span> <span class="p">=</span> <span class="s">&quot;  -%s=%q: %s\n&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">names</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{}</span>
</span><span class='line'>        <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">name</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">Names</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="nx">name</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;#&#39;</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">names</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">names</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">names</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">out</span><span class="p">(),</span> <span class="nx">format</span><span class="p">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">Join</span><span class="p">(</span><span class="nx">names</span><span class="p">,</span> <span class="s">&quot;, -&quot;</span><span class="p">),</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">DefValue</span><span class="p">,</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">Usage</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在10-12行，如果参数名定义时以<code>#</code>开头则不打印参数帮助。</p>

<p>好吧，参数解析源码其实和标准库大部分都是一样的，看到不一样的地方就行了，今天就到这里吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sort]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/04/15/sort/"/>
    <updated>2014-04-15T20:57:34+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/04/15/sort</id>
    <content type="html"><![CDATA[<h3>sort排序常用参数</h3>

<p>-n : 按照数值排序</p>

<p>-u : 过滤重复的行</p>

<p>-r : 降序排序，默认升序</p>

<p>-t : 指定分段符号</p>

<p>-k : 按照第几个字段(1&hellip;)排序</p>

<p>默认sort是按照字符排序的。</p>

<h3>sort临时目录</h3>

<p>默认情况下sort使用<code>/tmp</code>作为临时文件存放目录，如果根分区很小，可能造成分区磁盘飙升，为避免这种情况可以使用<code>-T</code>参数来指定sort的临时目录：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sort -T /path/to/tmp_directory
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[server load]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/27/server-load/"/>
    <updated>2014-03-27T09:39:14+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/27/server-load</id>
    <content type="html"><![CDATA[<h3>先看几个处理器</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grep -c <span class="s1">&#39;model name&#39;</span> /proc/cpuinfo
</span></code></pre></td></tr></table></div></figure>


<p>比如结果是4</p>

<h3>top查看系统整体情况</h3>

<p>执行<code>top</code>命令查看系统负载情况：
1. 关注<code>load average</code>系统负载的当前，5分钟前，15分钟前负载，最好小于cpu个数
2. 第二行显示系统进程概况
3. 第四行us用户占用cpu，sy系统占用cpu，ni，id空闲比例，wa io等待，hi，si swap交换
4. 最后是内存情况和交换分区</p>

<h3>iostat检查io情况</h3>

<p><code>iostat -x</code>，需要关注await即io等待时间，单位ms，一般要小于5ms； %util是io处理时间除以总时间，代表io繁忙度，大于70%需要注意。</p>

<!--more-->


<h3>vmstat查看系统概况</h3>

<pre><code>procs -----------memory---------- ---swap-- -----io---- --system-- ----cpu----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in    cs us sy id wa
 1  0 409548 3317764  56864 39709176    0    0    12    29    0     0  4  1 96  0
</code></pre>

<p> 主要看r和b，代表当前执行进程和阻塞进程，当r长期大于cpu个数需要注意，还有阻塞进程过多也需要注意</p>

<h3>ps和pstree查看进程</h3>

<p>查看线程个数可以用<code>cat /proc/PID/status|grep Threads</code>，另外对于ps，可以这样查看具体线程</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ps -mp PID -o THREAD,tid,time
</span></code></pre></td></tr></table></div></figure>


<p>如：</p>

<pre><code>USER     %CPU PRI SCNT WCHAN  USER SYSTEM   TID     TIME
work      1.8   -    - -         -      -     - 15:08:33
work      0.0  14    - -         -      - 11750 00:00:00
work      0.0  23    - -         -      - 11751 00:00:14
work      0.0  23    - -         -      - 11760 00:03:36
</code></pre>

<p>关注%CPU占用cpu情况，TID是线程id，TIME是占用cpu的时间长。</p>

<p>对于java进程可以用来调试程序：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># tid 转为16进制</span>
</span><span class='line'><span class="nb">printf</span> <span class="s2">&quot;%x\n&quot;</span> tid
</span><span class='line'>jstack PID | grep tid -A 50
</span></code></pre></td></tr></table></div></figure>


<h3>怎么启动这个程序的</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pmap PID
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下查看线程数]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/25/linuxxia-cha-kan-xian-cheng-shu/"/>
    <updated>2014-03-25T08:53:55+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/25/linuxxia-cha-kan-xian-cheng-shu</id>
    <content type="html"><![CDATA[<h3>1. cat /proc/${pid}/status</h3>

<h3>2. ps -mp &lt;PID></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[route]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/14/route/"/>
    <updated>2014-03-14T00:03:30+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/14/route</id>
    <content type="html"><![CDATA[<p>算是记录一个教训吧。</p>

<p>下午我的机器突然不能上外网，尝试内网和别的机器互访都没有问题，就是访问外网显示<code>connect: Network is unreachable</code>，<code>nslookup</code>查看DNS解析也没有问题，就是没想到网络不能到达很有可能是没有路由信息，最后朋友指点发现没有默认网关，外网ip没得路由规则走，添加默认网关后ok：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>route add default gw 10.46.148.1
</span></code></pre></td></tr></table></div></figure>


<p>提醒自己以后把学到的东西利用起来！</p>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ls遍历空目录处理]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/12/lsbian-li-kong-mu-lu-chu-li/"/>
    <updated>2014-03-12T23:18:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/12/lsbian-li-kong-mu-lu-chu-li</id>
    <content type="html"><![CDATA[<p>先说说原因：<code>for</code>循环是利用空格做分隔符，所以可以这样打印句子中的单词：</p>

<pre><code>centence="Linux is cool"
for word in $centence;do
    echo $word
done
</code></pre>

<p>有时用ls命令遍历目录会遇到空目录：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>d in <span class="k">$(</span>ls<span class="k">)</span>;<span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;$d&quot;</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>处理办法是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ls -1 | <span class="k">while </span><span class="nb">read </span>d
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;$d&quot;</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[date命令]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/12/dateming-ling/"/>
    <updated>2014-03-12T23:03:56+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/12/dateming-ling</id>
    <content type="html"><![CDATA[<p>首先看看常用的格式字符串</p>

<pre><code> %Y 年
 %m 月
 %d 日
 %H 时
 %M 分
 %S 秒
 %s 时间戳(秒)
</code></pre>

<p><strong>date命令常用操作</strong></p>

<p>获取当前时间</p>

<pre><code>date +%Y-%m-%d    # 2014-02-21
</code></pre>

<!--more-->


<p>几天前(后)，几月前(后)，几年前(后)</p>

<pre><code>date -d "1 day ago"  "+%Y-%m-%d %H:%M:%S"  #一天前的当前时间 2014-02-20 11:11:31
date -d "2 days ago"  # 或者date-d "-2 days"
date -d "-8 months"
date -d "+2 years" # 两年后
</code></pre>

<p>多少分钟，小时前（后）</p>

<pre><code>date -d "-5 minutes"  "+%Y-%m-%d %H:%M:%S"  #5分钟前
date -d "5 minutes"  "%H:%M:%S"  #5分钟后
</code></pre>

<p>时间戳和日期互转，常用于计算</p>

<pre><code>date -d "2014-02-20 11:11:31" +%s  #获取某时间的时间戳
date +%s   #返回当前时间戳1392954893
date -d @1392954893 "+%Y-%m-%d %H:%M:%S"  #将时间戳转换为时间
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stat命令与文件时间]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/12/statming-ling-yu-wen-jian-shi-jian/"/>
    <updated>2014-03-12T15:04:54+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/12/statming-ling-yu-wen-jian-shi-jian</id>
    <content type="html"><![CDATA[<h3>stat命令</h3>

<p>stat命令常用来获取文件三个时间<code>access time</code>,<code>modify time</code>和<code>change time</code></p>

<pre><code>$ stat access.log
  File: `access.log'
  Size: 1559877779  Blocks: 3049624    IO Block: 4096   regular file
Device: ca20h/51744d    Inode: 16269326    Links: 1
Access: (0644/-rw-r--r--)  Uid: (  500/    work)   Gid: (  500/    work)
Access: 2014-03-09 21:58:33.000000000 +0800
Modify: 2014-03-07 08:17:36.000000000 +0800
Change: 2014-03-07 08:17:36.000000000 +0800
</code></pre>

<p>通常可以使用<code>-c</code>参数直接获取三个时间</p>

<pre><code>$ stat -c %x access.log   #获取access time
2014-03-09 21:58:33.000000000 +0800
$ stat -c %y access.log  #获取modify time
2014-03-07 08:17:36.000000000 +0800
$ stat -c %z access.log #获取change time
2014-03-07 08:17:36.000000000 +0800
</code></pre>

<!--more-->


<h3>三个时间</h3>

<p><code>access time</code>对应文件访问时间，只要有读操作就会更新这个时间。</p>

<p><code>change time</code>对应文件元信息，比如文件重命名会更新该时间。</p>

<p><code>modify time</code>对应文件内容修改时间，只要修改文件内容就会更新该时间，由于内容改变实际也改变文件元数据，所以写操作也更新<code>change time</code>。</p>

<p>注意：对于文件夹来说，对文件夹下的文件增删，重命名，等操作，会修改文件夹<code>change time</code>和<code>modify time</code>，因为文件名实际是作为目录文件的内容存在的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[shell数组]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/10/shellshu-zu/"/>
    <updated>2014-03-10T00:22:25+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/10/shellshu-zu</id>
    <content type="html"><![CDATA[<h3>数组定义</h3>

<p>定义数组需要用括号把元素包裹起来。</p>

<pre><code>colors=(red green blue black white)
# 打印整个数组
echo ${colors[*]}  # red green blue black white
echo ${colors[@]}  # red green blue black white
</code></pre>

<!--more-->


<h3>基本操作</h3>

<pre><code># 有两种方法获取数组长度
echo ${#colors[@]}    # 5
echo ${#colors[*]}    # 5
</code></pre>

<p>遍历数组</p>

<pre><code>for e in ${colors[*]};do
    echo $e
done
</code></pre>

<p>或</p>

<pre><code>for((i=0;i&lt;${#colors[*]};i++));do
    echo ${colors[i]}
done
</code></pre>

<p>读写数组</p>

<pre><code>echo ${colors[0]}    # red
colors[0]=RED
echo ${colors[0]}    # RED
</code></pre>

<p>移除元素</p>

<pre><code>unset colors[1]
echo ${colors[*]}    # red blue black white
echo ${#colors[*]}   # 4
</code></pre>

<h3>切片</h3>

<p>切片不影响原数组</p>

<pre><code>echo ${colors[*]:1:3}    # green blue black
# 获取切片得到的新数组
c=(${colors[*]:1:3})
echo ${c[*]}             # green blue black
</code></pre>

<h3>替换</h3>

<p>替换也不影响原数组</p>

<pre><code>echo ${colors[*]/e/E}    # rEd grEen bluE black whitE
</code></pre>

<h3>字符串转换为数组</h3>

<p>使用<code>()</code>操作符和<code>IFS</code>指定分隔符</p>

<pre><code>IFS=";"
str="a;b;c;d;e"
arr=($str)
echo ${arr[*]}  # a b c d e
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[compile ruby from source]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/07/compile-ruby-from-source/"/>
    <updated>2014-03-07T15:35:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/07/compile-ruby-from-source</id>
    <content type="html"><![CDATA[<h3>下载需要的软件包</h3>

<ul>
<li><a href="http://www.openssl.org/source/">openssl</a></li>
<li><a href="http://pyyaml.org/wiki/PyYAML">yaml</a></li>
<li><a href="https://www.ruby-lang.org">ruby</a></li>
<li><a href="http://sqlite.org/2014/sqlite-autoconf-3080301.tar.gz">sqlite3</a>(可选)</li>
</ul>


<!--more-->


<p>假设需要安装的ruby目录为<code>/ruby</code></p>

<h3>编译openssl</h3>

<pre><code>./config --prefix=/ruby  shared
make 
make install
</code></pre>

<h3>编译libyaml</h3>

<pre><code>./configure --prefix=/ruby
make
make install
</code></pre>

<h3>编译ruby</h3>

<p>先导入环境变量,否则ruby找不到ssl的链接目录</p>

<pre><code>export LD_LIBRARY_PATH=/ruby/lib
export C_INCLUDE_PATH=/ruby/include
</code></pre>

<p>开始编译ruby</p>

<pre><code>./configure --prefix=/ruby --with-opt-dir=/ruby
make
make install
</code></pre>

<h3>编译sqlite3(可选)</h3>

<h3>测试</h3>

<pre><code>/ruby/bin/ruby -v #打印版本号，说明安装成功
export PATH=$PATH:/ruby/bin
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[curl]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/05/curl/"/>
    <updated>2014-03-05T23:29:56+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/05/curl</id>
    <content type="html"><![CDATA[<h3>基本用法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl http://www.google.com
</span><span class='line'>curl --proxy http://proxy.com:8888 http://ww.google.com <span class="c">#使用代理</span>
</span><span class='line'>curl http://user:password@example.org/  <span class="c">#http验证</span>
</span><span class='line'>curl -u user:password http://example.org/ <span class="c">#http验证</span>
</span></code></pre></td></tr></table></div></figure>


<p>获取响应头</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -i http://example.com  <span class="c">#在返回结果中包含响应头 </span>
</span><span class='line'>curl -IL http://example.com  <span class="c">#仅返回响应头</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>REST请求</h3>

<p><strong>GET</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl http://www.google.com
</span></code></pre></td></tr></table></div></figure>


<p><strong>POST</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl --data <span class="s2">&quot;birthyear=1905&amp;press=%20OK%20&quot;</span>  http://www.example.com/when.cgi
</span><span class='line'><span class="c">#or</span>
</span><span class='line'>curl --data-urlencode <span class="s2">&quot;name=I am Daniel&quot;</span> http://www.example.com
</span></code></pre></td></tr></table></div></figure>


<p><strong>PUT</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl --upload-file uploadfile http://www.example.com/receive.cgi <span class="c">#upload a file</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>DELETE</strong></p>

<p>实际上，可以用<code>curl -X http_method</code>指定包括GET,POST,PUT内的任意方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X DELETE http://example.com
</span></code></pre></td></tr></table></div></figure>


<h3>header</h3>

<p>使用-H或&mdash;header指定请求头部</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -H <span class="s2">&quot;Content-Type: application/json&quot;</span> http:/example.com
</span></code></pre></td></tr></table></div></figure>


<h3>Cookie</h3>

<p><code>-b,--cookie</code>选项告诉<code>curl</code>使用已有的cookie，可以是键值对也可以是文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -b <span class="s2">&quot;name=value&quot;</span> http://host
</span><span class='line'>curl -b cookie.txt http://host.com
</span></code></pre></td></tr></table></div></figure>


<p><code>-c,--cookie-jar</code>选项告诉<code>curl</code>将新的cookie保存在文件中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -c new.txt http://example.com
</span></code></pre></td></tr></table></div></figure>


<h3>HTTPS</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl https://example.com
</span><span class='line'>curl --cert mycert.pem https://example.com
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[列出目录结构]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/27/lie-chu-mu-lu-jie-gou/"/>
    <updated>2014-02-27T20:52:50+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/27/lie-chu-mu-lu-jie-gou</id>
    <content type="html"><![CDATA[<h3>最简单美观的方法tree</h3>

<p>tree命令是专门用来罗列目录结构的，输出树形结果，很漂亮。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tree demo
</span><span class='line'>demo
</span><span class='line'>├── Gemfile
</span><span class='line'>├── boot.rb
</span><span class='line'>├── collectors
</span><span class='line'>├── config
</span><span class='line'>│   └── mail_config.rb
</span><span class='line'>├── controllers
</span><span class='line'>├── db
</span><span class='line'>│   ├── connection.rb
</span><span class='line'>│   ├── database.yml
</span><span class='line'>│   └── migrate
</span><span class='line'>├── helpers
</span><span class='line'>├── models
</span><span class='line'>├── rakefile
</span><span class='line'>└── views
</span><span class='line'>
</span><span class='line'>8 directories, 6 files
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>折衷的方法find</h3>

<p>如果没有权限在机器上安装tree命令，find命令也是一种折衷的选择。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>find demo -type f -o -type d
</span><span class='line'>demo
</span><span class='line'>demo/boot.rb
</span><span class='line'>demo/collectors
</span><span class='line'>demo/config
</span><span class='line'>demo/config/.gitkeep
</span><span class='line'>demo/config/mail_config.rb
</span><span class='line'>demo/controllers
</span><span class='line'>demo/db
</span><span class='line'>demo/db/connection.rb
</span><span class='line'>demo/db/database.yml
</span><span class='line'>demo/db/migrate
</span><span class='line'>demo/db/migrate/.gitkeep
</span><span class='line'>demo/Gemfile
</span><span class='line'>demo/helpers
</span><span class='line'>demo/helpers/.gitkeep
</span><span class='line'>demo/models
</span><span class='line'>demo/rakefile
</span><span class='line'>demo/views
</span></code></pre></td></tr></table></div></figure>


<p>虽然没有tree命令那么直观，但却有另一个好处，便于使用管道进一步操作。</p>

<h3>仅仅是一种选择ls</h3>

<p>ls命令也可以罗列出目录结构，但这个仅供娱乐了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls -R demo
</span><span class='line'>Gemfile       collectors  controllers helpers     rakefile
</span><span class='line'>boot.rb       config      db      models      views
</span><span class='line'>
</span><span class='line'>demo/collectors:
</span><span class='line'>
</span><span class='line'>demo/config:
</span><span class='line'>mail_config.rb
</span><span class='line'>
</span><span class='line'>demo/controllers:
</span><span class='line'>
</span><span class='line'>demo/db:
</span><span class='line'>connection.rb database.yml    migrate
</span><span class='line'>
</span><span class='line'>demo/db/migrate:
</span><span class='line'>
</span><span class='line'>demo/helpers:
</span><span class='line'>
</span><span class='line'>demo/models:
</span><span class='line'>
</span><span class='line'>demo/views:
</span></code></pre></td></tr></table></div></figure>


<h3>利用shell自己来实现</h3>

<p>在无法安装软件的情况下，自己写一个tree命令吧，至少基本的bash是可以用的。</p>

<figure class='code'><figcaption><span>tree.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>n_char<span class="o">(){</span>
</span><span class='line'>  <span class="nv">ch</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'>  <span class="nv">cnt</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'>  <span class="k">for</span><span class="o">((</span><span class="nv">i</span><span class="o">=</span>0;i&lt;<span class="nv">$cnt</span>;i++<span class="o">))</span>;<span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="nv">string</span><span class="o">=</span><span class="s2">&quot;${ch}____$string&quot;</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="nv">$string</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>dive_into<span class="o">(){</span>
</span><span class='line'>  <span class="nb">trap</span> <span class="s1">&#39;exit&#39;</span> INT
</span><span class='line'>  ls -1a <span class="s2">&quot;$1&quot;</span> | <span class="k">while </span><span class="nb">read </span>f
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'><span class="k">      if</span> <span class="o">[</span> <span class="s2">&quot;$f&quot;</span> <span class="o">==</span> <span class="s2">&quot;.&quot;</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="s2">&quot;$f&quot;</span> <span class="o">==</span> <span class="s2">&quot;..&quot;</span> <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">          continue</span>
</span><span class='line'><span class="k">      fi</span>
</span><span class='line'><span class="k">      if</span> <span class="o">[</span> <span class="s2">&quot;$4&quot;</span> <span class="o">=</span> <span class="s2">&quot;0&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">&quot;${f:0:1}&quot;</span> <span class="o">=</span> <span class="s2">&quot;.&quot;</span> <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">          continue</span>
</span><span class='line'><span class="k">      fi</span>
</span><span class='line'><span class="k">      </span><span class="nv">pre</span><span class="o">=</span><span class="k">$(</span>n_char <span class="s1">&#39;|&#39;</span> <span class="nv">$2</span><span class="k">)</span>
</span><span class='line'>      <span class="nv">line</span><span class="o">=</span><span class="s2">&quot;${pre//_/ }|-- ${f}&quot;</span>
</span><span class='line'>      <span class="o">[[</span> -L <span class="s2">&quot;$1/$f&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nv">line</span><span class="o">=</span><span class="s2">&quot;${line} -&gt; `readlink &quot;</span><span class="nv">$1</span>/<span class="nv">$f</span><span class="s2">&quot;`&quot;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$5&quot;</span> <span class="o">=</span> <span class="s2">&quot;1&quot;</span> <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">          </span><span class="nv">s</span><span class="o">=</span><span class="sb">`</span>du -sh <span class="s2">&quot;$1/$f&quot;</span>|awk <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
</span><span class='line'>          <span class="nv">line</span><span class="o">=</span><span class="s2">&quot;${line} [$s]&quot;</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;$line&quot;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;$1/${f}&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> ! -L <span class="s2">&quot;$1/$f&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="k">$((</span><span class="nv">$2</span><span class="o">+</span><span class="m">1</span><span class="k">))</span> -lt <span class="nv">$3</span> <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">          </span>dive_into <span class="s2">&quot;$1/$f&quot;</span> <span class="k">$((</span><span class="nv">$2</span><span class="o">+</span><span class="m">1</span><span class="k">))</span> <span class="nv">$3</span> <span class="nv">$4</span> <span class="nv">$5</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">  done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">while </span><span class="nb">getopts</span> <span class="s2">&quot;d:l:ahs&quot;</span> args
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  case</span> <span class="nv">$args</span> in
</span><span class='line'>  l<span class="o">)</span> <span class="nv">level</span><span class="o">=</span><span class="nv">$OPTARG</span>
</span><span class='line'>  ;;
</span><span class='line'>  d<span class="o">)</span> <span class="nv">dir</span><span class="o">=</span><span class="s2">&quot;$OPTARG&quot;</span>
</span><span class='line'>  ;;
</span><span class='line'>  a<span class="o">)</span> <span class="nv">all</span><span class="o">=</span>1
</span><span class='line'>  ;;
</span><span class='line'>  s<span class="o">)</span> <span class="nv">size</span><span class="o">=</span>1
</span><span class='line'>  ;;
</span><span class='line'>  h<span class="o">)</span> <span class="nb">echo</span> <span class="s2">&quot;Must specify directoy with -d&quot;</span>
</span><span class='line'>     <span class="nb">echo</span> <span class="s2">&quot;Usage: tree.sh -d directory &quot;</span>
</span><span class='line'>     <span class="nb">echo</span> <span class="s2">&quot;-l maxdepth, the tree depth&quot;</span>
</span><span class='line'>     <span class="nb">echo</span> <span class="s2">&quot;-s, print file size&quot;</span>
</span><span class='line'>     <span class="nb">echo</span> <span class="s2">&quot;-a, print with hidden files&quot;</span>
</span><span class='line'>     <span class="nb">exit </span>1
</span><span class='line'>  ;;
</span><span class='line'>  ?<span class="o">)</span> <span class="nb">echo</span> <span class="s2">&quot;No such argument&quot;</span>
</span><span class='line'>     <span class="nb">exit </span>1
</span><span class='line'>  ;;
</span><span class='line'>  <span class="k">esac</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="o">[[</span> -z <span class="s2">&quot;$dir&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Must specify directory with -d&quot;</span>
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">[[</span> -z <span class="s2">&quot;$level&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nv">level</span><span class="o">=</span>100
</span><span class='line'><span class="o">[[</span> -z <span class="s2">&quot;$all&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nv">all</span><span class="o">=</span>0
</span><span class='line'><span class="o">[[</span> -z <span class="s2">&quot;$size&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nv">size</span><span class="o">=</span>0
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$dir&quot;</span>
</span><span class='line'>dive_into <span class="s2">&quot;$dir&quot;</span>  0 <span class="nv">$level</span> <span class="nv">$all</span> <span class="nv">$size</span>
</span></code></pre></td></tr></table></div></figure>


<p>试试看好用不：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tree.sh -h
</span><span class='line'>Must specify directoy with -d
</span><span class='line'>Usage: tree.sh -d directory
</span><span class='line'>-l maxdepth, the tree depth
</span><span class='line'>-s, print file size
</span><span class='line'>-a, print with hidden files
</span><span class='line'>
</span><span class='line'>tree.sh -d .
</span><span class='line'>.
</span><span class='line'>|-- dir
</span><span class='line'>|    |-- file
</span><span class='line'>|    |-- g.css
</span><span class='line'>|    |-- sub
</span><span class='line'>|    |    |-- sfile
</span><span class='line'>|-- g -&gt; dir/g.css
</span><span class='line'>|-- ldir -&gt; dir/
</span><span class='line'>|-- m.html -&gt; o.html
</span><span class='line'>|-- o.html
</span><span class='line'>|-- s.html
</span><span class='line'>|-- tree.sh
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[find命令]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/27/findming-ling/"/>
    <updated>2014-02-27T20:10:37+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/27/findming-ling</id>
    <content type="html"><![CDATA[<h3>find的基本语法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find PATH OPTIONS <span class="o">[</span>-exec COMMANDD <span class="o">{}</span> <span class="se">\;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>find</code>命令可以使用多个OPTION，不同OPTION之间默认是<code>and</code>关系，除了<code>and</code>关系还有<code>not</code>和<code>or</code>关系，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find / -name <span class="s1">&#39;n1&#39;</span> -type f  <span class="c">#查找/目录下名称为n1且为普通文件的文件</span>
</span><span class='line'>find / -name <span class="s1">&#39;n1&#39;</span> -o -name <span class="s1">&#39;n2&#39;</span> <span class="c">#查找名称为n1或n2的文件</span>
</span><span class='line'>find / ! -name <span class="s1">&#39;n1&#39;</span>  <span class="c"># 查找名称不为n1的文件</span>
</span></code></pre></td></tr></table></div></figure>


<p>当使用的OPTION很多时，可以将OPTIONS括起来增加可读性，注意括号需要用<code>\</code>来转义，同时<code>\(</code>和<code>\)</code>两边都需要有空格：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find / <span class="se">\(</span> -name <span class="s1">&#39;n1&#39;</span> -o -name <span class="s1">&#39;n2&#39;</span> <span class="se">\)</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>find命令常用的OPTION</h3>

<ul>
<li>-name  按名称查找，支持通配符*,?,[]</li>
<li>-user  按用户名查找</li>
<li>-empty  查找空文件(目录)</li>
<li>-perm  查找对应权限的文件，权限表示的三位数字形式如777</li>
<li>-type 按类型查找，类型可为<code>b</code>块设备，<code>c</code>字符设备，<code>p</code>管道，<code>f</code>普通文件，<code>l</code>链接文件，<code>s</code>socket文件</li>
<li>-print  打印结果</li>
<li>-regex 按正则表达式查找，注意该正则匹配属于完全匹配，即如果要查找<code>dir</code>目录下的文件<code>file_23</code>应该用正则表达式<code>.*file_[0-9]+</code>，用<code>file_[0-9]+</code>是匹配不到的，<code>find dir -regex '.*file_[0-9]+</code>是用完整结果即<code>dir/file_23</code>来做和<code>-regex</code>完全匹配的</li>
<li>-maxdepth n  find的最大目录层级查找深度，最小为1</li>
<li>-mindepth n find的最小目录查找深度</li>
</ul>


<p>按时间查找的参数：</p>

<ul>
<li>-amin n  查找n分钟以前被访问（access）的文件</li>
<li>-atime n  查找n天前被访问的文件</li>
<li>-cmin n  查找n分钟前文件元信息被修改（change）的文件</li>
<li>-ctime n  查找n天前文件元信息被修改过的文件</li>
<li>-mmin n  查找n分钟前内容被修改的文件</li>
<li>-mtime n 查找n天前内容被修改的文件</li>
</ul>


<h3>exec</h3>

<p>find命令最后的exec表示对找到的文件执行什么命令，其中<code>{}</code>代表找到的文件，注意<code>{}</code>和<code>\;</code>间有空格。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用expect实现自动登录]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/25/shi-yong-expectshi-xian-zi-dong-deng-lu/"/>
    <updated>2014-02-25T20:13:57+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/25/shi-yong-expectshi-xian-zi-dong-deng-lu</id>
    <content type="html"><![CDATA[<p>网上有很多类似的文章，但很多都是先写expect脚本再从bash里调用expect脚本，
我希望直接在bash脚本里使用expect命令来实现自动登录。</p>

<h3>利用expect命令实现自动登录并执行命令</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>expect -c <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">spawn ssh USER@HOST &quot;commands&quot;</span>
</span><span class='line'><span class="s1">expect {</span>
</span><span class='line'><span class="s1">&quot;*(yes/no)?&quot; { send &quot;yes\r&quot;;exp_continue }</span>
</span><span class='line'><span class="s1">&quot;*assword:&quot; { send &quot;PASSWORD\r&quot; }</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'><span class="s1">expect eof</span>
</span><span class='line'><span class="s1">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于expect的命令在网上有很多资料，这里不在赘述。下面讲讲怎么在bash和expect传递变量。</p>

<!--more-->


<h3>获取登录名及登录密码</h3>

<p>从bash中获取变量无非就是获取登录主机及密码，提高代码移植性。这里利用bash的Here document实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">host</span><span class="o">=</span><span class="s2">&quot;USER@HOST&quot;</span>
</span><span class='line'><span class="nv">password</span><span class="o">=</span><span class="s2">&quot;PASSWORD&quot;</span>
</span><span class='line'><span class="nv">cmd</span><span class="o">=</span><span class="s2">&quot;command_list&quot;</span>
</span><span class='line'>
</span><span class='line'>expect <span class="s">&lt;&lt;EOF </span>
</span><span class='line'><span class="s">spawn ssh $host &quot;$cmd&quot;</span>
</span><span class='line'><span class="s">expect {</span>
</span><span class='line'><span class="s">&quot;*(yes/no)?&quot; { send &quot;yes\r&quot;;exp_continue }</span>
</span><span class='line'><span class="s">&quot;*assword:&quot; { send &quot;$password\r&quot; }</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">expect eof</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>bash会自动解析here document中的变量，个人认为这种方式比使用expect的set命令更简便。</p>

<h3>获取登录执行命令结果</h3>

<p>如果希望保持登录，去掉上面代码的<code>ssh</code>后的命令列表并且将<code>expect eof</code>改成<code>interact</code>即可。</p>

<p>但通常我们只是登录到某台机器并执行命令后就返回，同时希望获得命令执行的结果。但上面的代码会混合登录时的部分输出，所以这里可以使用管道过滤一下。</p>

<p>下面的代码展示的怎样获取并输出远程主机的真正命令输出，同时也是一个在here document后接管道操作的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">host</span><span class="o">=</span><span class="s2">&quot;USER@HOST&quot;</span>
</span><span class='line'><span class="nv">password</span><span class="o">=</span><span class="s2">&quot;PASSWORD&quot;</span>
</span><span class='line'><span class="nv">cmd</span><span class="o">=</span><span class="s2">&quot;command_list&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span>expect <span class="s">&lt;&lt;EOF </span>
</span><span class='line'><span class="s">spawn ssh $host &quot;$cmd&quot;</span>
</span><span class='line'><span class="s">expect {</span>
</span><span class='line'><span class="s">&quot;*(yes/no)?&quot; { send &quot;yes\r&quot;;exp_continue }</span>
</span><span class='line'><span class="s">&quot;*assword:&quot; { send &quot;$password\r&quot; }</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">expect eof</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="o">)</span> | awk <span class="s1">&#39;BEGIN{find=0}</span>
</span><span class='line'><span class="s1">{</span>
</span><span class='line'><span class="s1"> if(find){print $0;next}</span>
</span><span class='line'><span class="s1"> if($0 ~ /[pP]assword:/){ find=1 }</span>
</span><span class='line'><span class="s1">}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是在bash中调用expect自动登录的完整代码了。</p>

<p>P.S. 在here document后接管道操作的几种方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 1</span>
</span><span class='line'>cat <span class="s">&lt;&lt;EOF | sh</span>
</span><span class='line'><span class="s">echo 1</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="c"># 2</span>
</span><span class='line'><span class="o">(</span>cat <span class="s">&lt;&lt;EOF</span>
</span><span class='line'><span class="s">echo 1</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="o">)</span> | sh
</span><span class='line'><span class="c"># 3</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>cat<span class="s">&lt;&lt;EOF</span>
</span><span class='line'><span class="s">echo 1</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="o">}</span> | sh
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux日常维护]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/21/linuxri-chang-wei-hu/"/>
    <updated>2014-02-21T22:58:13+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/21/linuxri-chang-wei-hu</id>
    <content type="html"><![CDATA[<h3>某些用户cron任务失败</h3>

<p>有时某些普通用户的crontab任务会失败，这可能是由于crond执行普通用户的任务时，是以非登录shell的形式切换到普通用户来执行的，所以可能缺失了某些环境变量。</p>

<p>解决办法是在crontab任务前先执行<code>source /home/username/.bash_profile</code>，后面再接用户自己的任务命令即可。</p>

<p>ps.<code>/etc/profile</code>,<code>~/.bash_profile</code>,<code>~/.bashrc</code>三个脚本的区别：</p>

<ul>
<li>/etc/profile     #系统级初始化脚本，会被登录shell执行</li>
<li>~/.bash_profile  #用户配置，会被登录shell执行，非登录shell不执行</li>
<li>~/.bashrc        #非登录shell执行，但通常~/.bash_profile都会在代码里调用~/.bashrc，所以登录shell也执行它</li>
</ul>


<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sendmail发邮件中文乱码]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/19/sendmailfa-you-jian-zhong-wen-luan-ma/"/>
    <updated>2014-02-19T23:23:15+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/19/sendmailfa-you-jian-zhong-wen-luan-ma</id>
    <content type="html"><![CDATA[<p>如果这是要使用sendmail命令发送的邮件file内容：</p>

<pre><code>Subject:标题
TO:to@example.com
From:from@example
Content-Type:text/html
&lt;html&gt;
    &lt;body&gt;
        邮件内容
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3>解决内容乱码</h3>

<p>内容乱码比较好解决，首先内容先使用utf-8编码，然后在修改邮件的<code>Content-Type</code>为：</p>

<pre><code>Content-Type:text/html;charset=UTF-8
</code></pre>

<h3>解决标题乱码</h3>

<p>需要利用base64编码标题内容，例如，如果UTF-8编码的字符串<code>标题</code>进行base64编码后的内容为<code>5qCH6aKY</code>,则邮件标题为：</p>

<pre><code>Subject:=?UTF-8?B?5qCH6aKY?=
</code></pre>

<p>即邮件标题<code>Subject:</code>后字符串格式为：&#8221;<code>=?UTF-8?B?</code><em>base64编码的utf-8字串</em><code>?=</code>&#8221;</p>

<h3>发送邮件</h3>

<p>最后发送文件可以正确显示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat file | sendmail -t
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[axlsx报表工具(四)——条件格式化]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-si-tiao-jian-ge-shi-hua/"/>
    <updated>2014-02-15T00:47:04+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-si-tiao-jian-ge-shi-hua</id>
    <content type="html"><![CDATA[<h3>定义格式化操作</h3>

<p>条件格式化风格定义也是使用格式化定义语句add_style，不同的是必须将type指定为:dxf。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># define the style for conditional formatting</span>
</span><span class='line'><span class="n">profitable</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="n">styles</span><span class="o">.</span><span class="n">add_style</span><span class="p">(</span> <span class="ss">:fg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;FF428751&quot;</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:dxf</span> <span class="p">)</span>
</span><span class='line'><span class="n">unprofitable</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="n">styles</span><span class="o">.</span><span class="n">add_style</span><span class="p">(</span> <span class="ss">:fg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;FF0000&quot;</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:dxf</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>条件格式化有四种类型cellIs，colorScale，dataBar，iconSet。</p>

<!-- more -->


<h3>cellIs</h3>

<p>cellIs条件格式化使用得较为普遍，即对满足条件的单元格更改字体颜色，字体大小，背景色等等。</p>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=0cc20173b8a1cd1101b672258929b9c1/d000baa1cd11728bb30e6961cafcc3cec3fd2c56.jpg?referer=3c8b0130af4bd1135dda82028c4c&amp;x=.jpg" alt="image" /></p>

<p>对于B列，如果数值大于100000表示盈利，则更改字体颜色；对于亏损的，则在C列中将百分比小于100%的赤字显示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Cell Is&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ws</span><span class="o">|</span>
</span><span class='line'><span class="c1"># 产生20行数据</span>
</span><span class='line'><span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Previous Year Quarterly Profits (JPY)&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Quarter&quot;</span><span class="p">,</span> <span class="s2">&quot;Profit&quot;</span><span class="p">,</span> <span class="s2">&quot;% of Total&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">offset</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">rows</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="n">offset</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">rows</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'> <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Q</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="o">*</span><span class="p">((</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)),</span> <span class="s2">&quot;=100*B</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">/SUM(B3:B</span><span class="si">#{</span><span class="n">rows</span><span class="o">+</span><span class="n">offset</span><span class="si">}</span><span class="s2">)&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span><span class="o">=&gt;[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">money</span><span class="p">,</span> <span class="n">percent</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># 格式化条件&gt;100000</span>
</span><span class='line'><span class="n">ws</span><span class="o">.</span><span class="n">add_conditional_formatting</span><span class="p">(</span><span class="s2">&quot;B3:B100&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:cellIs</span><span class="p">,</span> <span class="ss">:operator</span> <span class="o">=&gt;</span> <span class="ss">:greaterThan</span><span class="p">,</span> <span class="ss">:formula</span> <span class="o">=&gt;</span> <span class="s2">&quot;100000&quot;</span><span class="p">,</span> <span class="ss">:dxfId</span> <span class="o">=&gt;</span> <span class="n">profitable</span><span class="p">,</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="c1"># 格式化条件0.00%&lt;x&lt;100%</span>
</span><span class='line'><span class="n">ws</span><span class="o">.</span><span class="n">add_conditional_formatting</span><span class="p">(</span><span class="s2">&quot;C3:C100&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:cellIs</span><span class="p">,</span> <span class="ss">:operator</span> <span class="o">=&gt;</span> <span class="ss">:between</span><span class="p">,</span> <span class="ss">:formula</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;0.00%&quot;</span><span class="p">,</span><span class="s2">&quot;100.00%&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:dxfId</span> <span class="o">=&gt;</span> <span class="n">unprofitable</span><span class="p">,</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>add_conditional_formatting方法指定条件格式化，类型type是cellIs，条件由operator和formula共同指定，dxfId就是我们上面定义的格式化操作，priority优先级数值越小，优先级越高。</p>

<h3>colorScale</h3>

<p><img src="http://h.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=3d1d3870938fa0ec7bc7640816ac28d3/f603918fa0ec08fa0ef0e9e45bee3d6d54fbda85.jpg?referer=6b56cc4859b5c9ea3be437d3269b&amp;x=.jpg" alt="image" /></p>

<p>colorScale是以颜色渐变的方式来格式化表格。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Color Scale&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ws</span><span class="o">|</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Previous Year Quarterly Profits (JPY)&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Quarter&quot;</span><span class="p">,</span> <span class="s2">&quot;Profit&quot;</span><span class="p">,</span> <span class="s2">&quot;% of Total&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">offset</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">rows</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>  <span class="n">offset</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">rows</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Q</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="o">*</span><span class="p">((</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)),</span> <span class="s2">&quot;=100*B</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">/SUM(B3:B</span><span class="si">#{</span><span class="n">rows</span><span class="o">+</span><span class="n">offset</span><span class="si">}</span><span class="s2">)&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span><span class="o">=&gt;[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">money</span><span class="p">,</span> <span class="n">percent</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">color_scale</span> <span class="o">=</span> <span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:ColorScale</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_conditional_formatting</span><span class="p">(</span><span class="s2">&quot;B3:B100&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:colorScale</span><span class="p">,</span> <span class="ss">:operator</span> <span class="o">=&gt;</span> <span class="ss">:greaterThan</span><span class="p">,</span> <span class="ss">:formula</span> <span class="o">=&gt;</span> <span class="s2">&quot;100000&quot;</span><span class="p">,</span> <span class="ss">:dxfId</span> <span class="o">=&gt;</span> <span class="n">profitable</span><span class="p">,</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:color_scale</span> <span class="o">=&gt;</span> <span class="n">color_scale</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>大于100000的单元格颜色越来越深，而小于的单元格越来越浅。</p>

<h3>dataBar</h3>

<p>dataBar格式化能够在单元格中同时显示数值和一个柱形图，非常直观漂亮。</p>

<p><img src="http://f.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=435a969d3f6d55fbc1c676235d193e77/58ee3d6d55fbb2fb26dba2514d4a20a44723dc85.jpg?referer=b0f4797338f33a87c77a342a1c9b&amp;x=.jpg" alt="image" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Data Bar&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ws</span><span class="o">|</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Previous Year Quarterly Profits (JPY)&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Quarter&quot;</span><span class="p">,</span> <span class="s2">&quot;Profit&quot;</span><span class="p">,</span> <span class="s2">&quot;% of Total&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">offset</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">rows</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>  <span class="n">offset</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">rows</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Q</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="o">*</span><span class="p">((</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)),</span> <span class="s2">&quot;=100*B</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">/SUM(B3:B</span><span class="si">#{</span><span class="n">rows</span><span class="o">+</span><span class="n">offset</span><span class="si">}</span><span class="s2">)&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span><span class="o">=&gt;[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">money</span><span class="p">,</span> <span class="n">percent</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data_bar</span> <span class="o">=</span> <span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:DataBar</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_conditional_formatting</span><span class="p">(</span><span class="s2">&quot;B3:B100&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:dataBar</span><span class="p">,</span> <span class="ss">:dxfId</span> <span class="o">=&gt;</span> <span class="n">profitable</span><span class="p">,</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:data_bar</span> <span class="o">=&gt;</span> <span class="n">data_bar</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>iconSet</h3>

<p>iconSet方式是对于满足条件和不满足条件的单元格分别使用不同的图标。</p>

<p><img src="http://d.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=c718e589e4cd7b89ed6c3a863f1f339a/34fae6cd7b899e511cacdf5740a7d933c8950d56.jpg?referer=a0046022fa1986181850dab46b4d&amp;x=.jpg" alt="image" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Icon Set&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ws</span><span class="o">|</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Previous Year Quarterly Profits (JPY)&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Quarter&quot;</span><span class="p">,</span> <span class="s2">&quot;Profit&quot;</span><span class="p">,</span> <span class="s2">&quot;% of Total&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">offset</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">rows</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>  <span class="n">offset</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">rows</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Q</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="o">*</span><span class="p">((</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)),</span> <span class="s2">&quot;=100*B</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">/SUM(B3:B</span><span class="si">#{</span><span class="n">rows</span><span class="o">+</span><span class="n">offset</span><span class="si">}</span><span class="s2">)&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span><span class="o">=&gt;[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">money</span><span class="p">,</span> <span class="n">percent</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">icon_set</span> <span class="o">=</span> <span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:IconSet</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_conditional_formatting</span><span class="p">(</span><span class="s2">&quot;B3:B100&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:iconSet</span><span class="p">,</span> <span class="ss">:dxfId</span> <span class="o">=&gt;</span> <span class="n">profitable</span><span class="p">,</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:icon_set</span> <span class="o">=&gt;</span> <span class="n">icon_set</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
