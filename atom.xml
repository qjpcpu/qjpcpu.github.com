<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jason's space]]></title>
  <link href="http://qjpcpu.github.io/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2015-06-02T00:49:37+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[分享你的Angular指令]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/05/27/fen-xiang-ni-de-angularzhi-ling/"/>
    <updated>2015-05-27T17:47:56+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/05/27/fen-xiang-ni-de-angularzhi-ling</id>
    <content type="html"><![CDATA[<h3>Angular directive on bower</h3>

<p>用Angular做web开发不但听起来是非常炫酷的事情，而且从我实际的开发体验来看，它确实是极大减轻了开发者的痛苦。我可以把精力都花在组织业务逻辑，创建更为流畅和漂亮的UI上，而完全不用去反复沦陷在事件绑定数据更新这些无趣的事情上。此外，angular框架本身依照设计模式上定义出了一套MVC漂亮的实现,了解其controller,server,directive后，写出大型web app已经不是难事了。</p>

<p>Angular中最漂亮的两个组件是service和directive，简单说来，service是逻辑代码的抽象和封装，它将应用中重复使用的逻辑代码抽象为公共服务，便于打造瘦controller；而directive则是对UI组件的抽象，其对directive的封装和接口设计简直刷新了我对前端的认识。</p>

<p>这里我就不准备详细介绍怎么写指令了，google的文档和我之前的博客都可供参考，这里说一下，如果你写出来非常cool的指令，怎么分享给大家呢？答案是bower。</p>

<!--more-->


<h3>Bower</h3>

<p><a href="http://bower.io/">Bower</a>是一个js的客户端管理工具，可以称之为客户端的npm，其作者是twitter的几个家伙(<a href="https://github.com/fat">@fat</a>,<a href="https://github.com/maccman">@maccman</a>)。根据你配置的<code>bower.json</code>文件，Bower可以自动查找、下载和安装js库，极大节约开发时间。</p>

<h4>简单介绍</h4>

<figure class='code'><figcaption><span>安装使用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install -g bower
</span><span class='line'><span class="c"># registered package</span>
</span><span class='line'>bower install jquery
</span><span class='line'><span class="c"># GitHub shorthand</span>
</span><span class='line'>bower install desandro/masonry
</span><span class='line'><span class="c"># Git endpoint</span>
</span><span class='line'>bower install git://github.com/user/package.git
</span><span class='line'><span class="c"># URL</span>
</span><span class='line'>bower install http://example.com/script.js
</span></code></pre></td></tr></table></div></figure>


<h3>创建一个基于bower的angular指令angular-dropzone</h3>

<p><a href="http://www.dropzonejs.com/">Dropzone</a>是一个漂亮的文件上传组件，下面就演示怎么把它集成为一个angular指令并分享到github。</p>

<h4>1.创建指令工程</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir angular-dropzone <span class="o">&amp;&amp;</span> <span class="nb">cd</span> <span class="nv">$_</span>
</span><span class='line'>touch angular-dropzone.js <span class="c">#  写入指令实现</span>
</span><span class='line'>bower init <span class="c"># 初始化bower工程</span>
</span></code></pre></td></tr></table></div></figure>


<p>回答完一系列问题后，生成的<code>bower.json</code>文件应该类似：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>
</span><span class='line'>  name: <span class="s1">&#39;angular-dropzone&#39;</span>,
</span><span class='line'>  main: <span class="s1">&#39;angular-dropzone.js&#39;</span>,
</span><span class='line'>  version: <span class="s1">&#39;0.0.0&#39;</span>,
</span><span class='line'>  authors: <span class="o">[</span>
</span><span class='line'>    <span class="s1">&#39;qujianping &lt;qjpcpu@gmail.com&gt;&#39;</span>
</span><span class='line'>  <span class="o">]</span>,
</span><span class='line'>  description: <span class="s1">&#39;dropzone for angular&#39;</span>,
</span><span class='line'>  keywords: <span class="o">[</span>
</span><span class='line'>    <span class="s1">&#39;angular&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;dropzone&#39;</span>
</span><span class='line'>  <span class="o">]</span>,
</span><span class='line'>  license: <span class="s1">&#39;MIT&#39;</span>,
</span><span class='line'>  ignore: <span class="o">[</span>
</span><span class='line'>    <span class="s1">&#39;**/.*&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;node_modules&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;bower_components&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;test&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;tests&#39;</span>
</span><span class='line'>  <span class="o">]</span>,
</span><span class='line'>  dependencies: <span class="o">{</span>
</span><span class='line'>    angular: <span class="s1">&#39;~1.3.0&#39;</span>,
</span><span class='line'>    dropzone: <span class="s1">&#39;~4.0.1&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.编辑指令代码</h4>

<p>现在开始编写指令的实现。指令代码最好遵守一定命名规范，如：以github名称作为命名空间。</p>

<figure class='code'><figcaption><span>angular-dropzone.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;qjpcpu.angular-dropzone&#39;</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'>  <span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;qjpDropzone&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// implementation goes here</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体代码实现可以参考<a href="https://github.com/qjpcpu/angular-dropzone">angular-dropzone</a></p>

<h4>3.发布指令</h4>

<p>编写完成后，就可以推送到github。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git init .
</span><span class='line'>git add bower.json angular-dropzone.js
</span><span class='line'>git commit -m <span class="s1">&#39;v0.0.0&#39;</span>
</span><span class='line'>git tag v0.0.0
</span><span class='line'>git remote add origin git@github.com:qjpcpu/angular-dropzone.git
</span><span class='line'>git push -u origin master
</span></code></pre></td></tr></table></div></figure>


<p>注意，bower使用git的tag确定版本号。</p>

<h4>4.在你的应用中使用该指令</h4>

<p>现在可以拉取使用你的angular指令了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower install qjpcpu/angular-dropzone
</span></code></pre></td></tr></table></div></figure>


<p>在<code>index.html</code>文件添加加载的文件:</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;bower_components/dropzone/dist/dropzone.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/dropzone/dist/dropzone.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-dropzone/angular-dropzone.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要添加模块依赖:</p>

<figure class='code'><figcaption><span>app.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">app = </span><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&quot;my-app&quot;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>  <span class="s">&#39;qjpcpu.angular-dropzone&#39;</span>
</span><span class='line'><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样在html片段里就可以使用指令了,关于该指令具体参数参考<a href="https://github.com/qjpcpu/angular-dropzone">angular-dropzone</a>:</p>

<figure class='code'><figcaption><span>p.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">qjp-dropzone</span> <span class="na">class=</span><span class="s">&quot;droppable-area&quot;</span> <span class="na">url=</span><span class="s">&quot;&#39;/url/to-upload&#39;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  Drop file here
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于后台任务]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/05/27/guan-yu-hou-tai-ren-wu/"/>
    <updated>2015-05-27T17:16:34+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/05/27/guan-yu-hou-tai-ren-wu</id>
    <content type="html"><![CDATA[<h3>关于sidekiq</h3>

<p>在做ruby开发时，通常会遇到耗时操作的处理，sidekiq由于其使用简单，性能强劲，所以常被用来作为Ruby应用的后台任务的执行引擎。不过sidekiq有个令人头疼的问题，就是任务提交到后台异步执行后，对于其状态的监测和管理就成为很大的问题。</p>

<!--more-->


<p>sidekiq的wiki上也贴出了很多相关执行管理工具，sidekiq-promise是个人最喜欢的一个，其异步回调的风格和js的风格非常像，使用起来非常友好。</p>

<h3>sidekiq-promise</h3>

<p>这里的例子直接来源于其github的readme:</p>

<figure class='code'><figcaption><span>demo.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ProcessWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Promise</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span> <span class="n">file_to_process</span>
</span><span class='line'>    <span class="no">UnzipWorker</span><span class="o">.</span><span class="n">as_promise</span><span class="p">(</span><span class="n">file_to_process</span><span class="p">)</span><span class="o">.</span><span class="n">then</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
</span><span class='line'>      <span class="no">MrDarcy</span><span class="o">.</span><span class="n">all_promises</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">dir</span><span class="o">.</span><span class="n">entries</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>          <span class="no">ImageThumbnailWorker</span><span class="o">.</span><span class="n">as_promise</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">then</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">UserNotificationMailer</span><span class="o">.</span><span class="n">all_images_processed</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>简述: UnzipWorker会解压文件，然后将解压得到的每个文件分发给ImageThumbnailWorker去创建压缩图，等待所有压缩完成后再发送通知邮件，非常简洁漂亮。</p>

<ul>
<li>将worker里的<code>include Sidekiq::Worker</code>替换成<code>include Sidekiq::Promise</code>即可。</li>
<li><p>如果要获取worker的输出，则调用<code>ProcessWorker.as_promise(arguments)</code>即可，在then block中获取执行结果，这个结果即<code>perform</code>方法的返回值。</p></li>
<li><p><code>sidekiq-promise</code>使用了<code>MrDarcy</code>，所以提供了一个很有意思的方法</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">MrDarcy</span><span class="o">.</span><span class="n">all_promises</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">[</span><span class="n">promise1</span><span class="p">,</span><span class="n">promise2</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>MrDarcy.all_promises</code>的块会等待其中列表的每一个promise完成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJs之Isolated Scope]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/05/25/angularjszhi-isolated-scope/"/>
    <updated>2015-05-25T14:12:42+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/05/25/angularjszhi-isolated-scope</id>
    <content type="html"><![CDATA[<h3>分离式scope（Isolated Scope）</h3>

<p>在angularjs指令中问什么需要使用分离式的scope,主要是为了分离指令和执行所在的&#8221;环境&#8221;,这个环境其实就是指controller的scope和指令自身的scope,使用分离式scope达到隔离各自scope变量，避免变量污染，从而最大程度上达到指令的重用。</p>

<!--more-->


<blockquote><p>注意，下面的示例为了突出重点，使用CoffeeScript展示代码</p></blockquote>

<figure class='code'><figcaption><span>script.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;docsIsolateScopeDirective&#39;</span><span class="p">,</span> <span class="p">[]).</span><span class="nx">controller</span><span class="p">(</span><span class="s">&#39;Controller&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;$scope&#39;</span><span class="p">,</span><span class="nf">($scope) -&gt;</span>
</span><span class='line'>  <span class="nv">$scope.naomi =</span>
</span><span class='line'>    <span class="nv">name: </span><span class="s">&#39;Naomi&#39;</span>
</span><span class='line'>    <span class="nv">address: </span><span class="s">&#39;1600 Amphitheatre&#39;</span>
</span><span class='line'>  <span class="nv">$scope.igor =</span>
</span><span class='line'>    <span class="nv">name: </span><span class="s">&#39;Igor&#39;</span>
</span><span class='line'>    <span class="nv">address: </span><span class="s">&#39;123 Somewhere&#39;</span>
</span><span class='line'><span class="p">]).</span><span class="nx">directive</span> <span class="s">&#39;myCustomer&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">restrict: </span><span class="s">&#39;E&#39;</span>
</span><span class='line'>  <span class="nv">scope: customerInfo: </span><span class="s">&#39;=info&#39;</span>
</span><span class='line'>  <span class="nv">template: </span><span class="s">&quot;Name: { {customerInfo.name} } Address: { {customerInfo.address} }&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;Controller&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;my</span><span class="na">-customer</span> <span class="na">info=</span><span class="s">&quot;naomi&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/my-customer&gt;
</span><span class='line'>  <span class="nt">&lt;hr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;my</span><span class="na">-customer</span> <span class="na">info=</span><span class="s">&quot;igor&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/my-customer&gt;
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>输出为</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Name: Naomi Address: 1600 Amphitheatre Name: Igor Address: 123 Somewhere
</span></code></pre></td></tr></table></div></figure>


<p>由输出可以看出，指令<code>my-customer</code>中的<code>info</code>属性被分别绑定到了外部scope的两个变量<code>naomi</code>和<code>igor</code>，虽然是同一指令，但相互之间没有干扰或污染。这样<code>my-customer</code>指令可以非常漂亮的被重用。</p>

<p>其实，如果不需要特意在指令间共享scope，最好都使用分离式scope来写指令。</p>

<p>另外，指令内属性名如果和绑定的外部属性相同，可以采用简写模式，如这里<code>my-customer</code>的<code>info</code>属性映射到内部也用<code>info</code>引用的化:</p>

<figure class='code'><figcaption><span>script.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">directive</span> <span class="s">&#39;myCustomer&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">restrict: </span><span class="s">&#39;E&#39;</span>
</span><span class='line'>  <span class="nv">scope: info: </span><span class="s">&#39;=&#39;</span>
</span><span class='line'>  <span class="nv">template: </span><span class="s">&#39;Name: { {customerInfo.name} } Address: { {customerInfo.address} }&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>@单向绑定</h3>

<p>对于仅仅需要在指令中反应外部scope变量变化的情况下，可以仅使用单向绑定，将controller的变量映射到指令中，一旦在controller中修改变量，指令中可以立即看到变化，然而反过来则不可，即外部scope中看不到指令内部对变量的修改。</p>

<figure class='code'><figcaption><span>script.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">.</span><span class="nx">directive</span> <span class="s">&#39;myDirective, -&gt;</span>
</span><span class='line'><span class="s">  scope: attributeFoo: &#39;</span><span class="nx">@</span><span class="s">&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;my</span><span class="na">-component</span> <span class="na">attribute-foo=</span><span class="s">&quot;{ {foo} }&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/my-component&gt;
</span></code></pre></td></tr></table></div></figure>


<p>即，在控制器里修改foo，在<code>my-directive</code>中可以感知到。通常单向绑定对于取字符串值很常见，所以这里的html中使用双花括号插值。因此，单向绑定的官方名称其实是叫属性绑定。</p>

<h3>=双向绑定</h3>

<p>看名称就知道用途了，双向绑定使用<code>=</code>定义，直接看例子:</p>

<figure class='code'><figcaption><span>script.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">.</span><span class="nx">directive</span> <span class="s">&#39;myDirective, -&gt;</span>
</span><span class='line'><span class="s">  scope: bindingFoo: &#39;</span><span class="o">=</span><span class="s">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>&amp;表达式绑定</h3>

<p>或者换个更human的名称，函数绑定，如果需要在指令内调用controler的函数，这就是说我们可以在指令内部定义接口，controller定义具体实现，这样指令就能够变得非常灵活，用在分离式scope中，既避免了变量污染又达到了灵活性，太cool了。</p>

<figure class='code'><figcaption><span>my-directive.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">.</span><span class="nx">directive</span> <span class="s">&#39;myDirective, -&gt;</span>
</span><span class='line'><span class="s">  scope: myHandler: &#39;</span><span class="o">&amp;</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">  template: &#39;</span><span class="o">&lt;</span><span class="nx">button</span> <span class="nx">type</span><span class="o">=</span><span class="s">&quot;button&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="s">&quot;myHandler({$count: 123})&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">button</span><span class="o">&gt;</span><span class="s">&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>my-controller.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">.</span><span class="nx">controller</span> <span class="s">&#39;MyCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;$scope&#39;</span><span class="p">,</span><span class="nf">($scope) -&gt;</span>
</span><span class='line'>    <span class="nv">$scope.getCounts = </span><span class="nf">(countNum) -&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;Button click count: </span><span class="si">#{</span><span class="nx">countNum</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;my</span><span class="na">-directive</span> <span class="na">my-handler=</span><span class="s">&quot;getCounts($count)&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/my-directive&gt;
</span></code></pre></td></tr></table></div></figure>


<h4>非常重要:函数传参</h4>

<p>对于无参函数的绑定，没什么好说的。但对应上例中的情况，需要把参数从指令中传到外部函数，则需要注意了。</p>

<ul>
<li>参数必须是hash类型的json对象，即参数是k-v类型的对象，如示例中的<code>{$count: 123}</code></li>
<li>html中使用指令的地方函数的参数必须和指令中函数传递的参数的key一一对应，即指令中传递的参数的key是<code>$count</code>，那么html中指令绑定的函数接受的参数必须是<code>$count</code>，否则无法接受正确的参数。但是在controller里的函数参数名不必和他们保持一致。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效读取excel]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/05/25/gao-xiao-du-qu-excel/"/>
    <updated>2015-05-25T11:11:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/05/25/gao-xiao-du-qu-excel</id>
    <content type="html"><![CDATA[<p>前面介绍ruby写excel文件的一个很cool的gem包<code>axlsx</code>,这里介绍另一个高效读取excel的包<code>creek</code>。</p>

<p>一个读一个写，ruby轻松搞定execel处理。</p>

<!-- more -->


<h4>安装</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install creek
</span></code></pre></td></tr></table></div></figure>


<h4>使用</h4>

<p><code>creek</code>本身的使用非常简单:</p>

<figure class='code'><figcaption><span>creek_demo.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;creek&#39;</span>
</span><span class='line'><span class="n">creek</span> <span class="o">=</span> <span class="ss">Creek</span><span class="p">:</span><span class="ss">:Book</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;specs/fixtures/sample.xlsx&quot;</span>
</span><span class='line'><span class="n">sheet</span><span class="o">=</span> <span class="n">creek</span><span class="o">.</span><span class="n">sheets</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 注:获取行数不能用size方法</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">sheet</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span> <span class="c1"># =&gt; 100</span>
</span><span class='line'>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">row</span> <span class="c1"># =&gt; {&quot;A1&quot;=&gt;&quot;Content 1&quot;, &quot;B1&quot;=&gt;nil, C1&quot;=&gt;nil, &quot;D1&quot;=&gt;&quot;Content 3&quot;}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="n">rows_with_meta_data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">row</span> <span class="c1"># =&gt; {&quot;collapsed&quot;=&gt;&quot;false&quot;, &quot;customFormat&quot;=&gt;&quot;false&quot;, &quot;customHeight&quot;=&gt;&quot;true&quot;, &quot;hidden&quot;=&gt;&quot;false&quot;, &quot;ht&quot;=&gt;&quot;12.1&quot;, &quot;outlineLevel&quot;=&gt;&quot;0&quot;, &quot;r&quot;=&gt;&quot;1&quot;, &quot;cells&quot;=&gt;{&quot;A1&quot;=&gt;&quot;Content 1&quot;, &quot;B1&quot;=&gt;nil, C1&quot;=&gt;nil, &quot;D1&quot;=&gt;&quot;Content 3&quot;}}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="n">state</span>   <span class="c1"># =&gt; &#39;visible&#39;</span>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="n">name</span>    <span class="c1"># =&gt; &#39;Sheet1&#39;</span>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="n">rid</span>     <span class="c1"># =&gt; &#39;rId2&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>性能</h4>

<p>读取并遍历一个16M左右17608行的xlsx文件，benchmark:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>--------------- total: 84.040000sec   ----------------
</span><span class='line'>  user     system      total        real
</span><span class='line'> 84.920000   0.680000  85.600000 <span class="o">(</span> 86.084133<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>P.S. 无法和其他读取excel的gem做对比，因为试着做对比测试时发现其他gem根本卡在读取操作那不动了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rvm和rbenv环境变量冲突导致无法安装gem包]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/01/05/rvmhe-rbenvhuan-jing-bian-liang-chong-tu-dao-zhi-wu-fa-an-zhuang-gembao/"/>
    <updated>2015-01-05T18:11:47+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/01/05/rvmhe-rbenvhuan-jing-bian-liang-chong-tu-dao-zhi-wu-fa-an-zhuang-gembao</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>root环境用rvm安装了ruby，但我需要在用户环境重装ruby，而且个人喜欢用rbenv，这就导致了我安装了rbenv的gem后，没有权限安装gem包。</p>

<!-- more -->


<h2>resolve</h2>

<p>这种情况是rvm强制设置了<code>GEM_HOME</code>导致的，可以<code>gem env</code>查看：</p>

<pre><code>jason@mac:~$ gem env
RubyGems Environment:
  - RUBYGEMS VERSION: 2.0.14
  - RUBY VERSION: 2.0.0 (2014-11-13 patchlevel 598) [x86_64-linux]
  - INSTALLATION DIRECTORY: /usr/local/rvm/gems/ruby-2.0.0-p353
  - RUBY EXECUTABLE: /home/jason/.rbenv/versions/2.0.0-p598/bin/ruby
  - EXECUTABLE DIRECTORY: /usr/local/rvm/gems/ruby-2.0.0-p353/bin
  - RUBYGEMS PLATFORMS:
    - ruby
    - x86_64-linux
  - GEM PATHS:
     - /usr/local/rvm/gems/ruby-2.0.0-p353
     - /home/jason/.rbenv/versions/2.0.0-p598/lib/ruby/gems/2.0.0/
  - GEM CONFIGURATION:
     - :update_sources =&gt; true
     - :verbose =&gt; true
     - :backtrace =&gt; false
     - :bulk_threshold =&gt; 1000
  - REMOTE SOURCES:
     - https://rubygems.org/
</code></pre>

<p>可见GEM PATHS里优先选择了rvm的gem路径，所以需要重设GEM_HOME</p>

<pre><code>export GEM_HOME=$HOME/.rbenv/versions/2.0.0-p598/lib/ruby/gems/2.0.0/
</code></pre>

<p>但是，最好的办法是在~/.bash_profile(centos,ubuntu中是.bashrc)中<code>eval "$(rbenv init -)"</code>前加上：</p>

<pre><code>unset GEM_PATH
unset GEM_HOME
</code></pre>

<p>这样也可以清除rvm的设置，使rbenv的变量被正确设置.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建递归菜单]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/01/02/chuang-jian-di-gui-cai-dan/"/>
    <updated>2015-01-02T12:44:07+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/01/02/chuang-jian-di-gui-cai-dan</id>
    <content type="html"><![CDATA[<p>如果菜单的数据模型是这样的,在angularjs中怎样比较漂亮地递归渲染出所有菜单项呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">menuItems</span> <span class="err">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;level1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;link&quot;</span><span class="p">:</span> <span class="s2">&quot;/A&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;menuItems&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;level2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;link&quot;</span><span class="p">:</span> <span class="s2">&quot;/A/a1&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;level1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;link&quot;</span><span class="p">:</span> <span class="s2">&quot;/B&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;menuItems&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;level2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;link&quot;</span><span class="p">:</span> <span class="s2">&quot;/B/b1&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>需要的ng指令</h2>

<h3>script</h3>

<p>将<code>&lt;script&gt;</code>的内容加载到$templateCache,这样就能够在ngInclude, ngView或指令中使用。<code>&lt;script&gt;</code>的类型必须是<code>text/ng-template</code>，并用<code>id</code>指定id。如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/ng-template&quot;</span> <span class="na">id=</span><span class="s">&quot;tpl-1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nx">Content</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">template</span><span class="p">.</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ngInit</h3>

<p>在当前scope内重命名某属性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>  <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;initExample&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ExampleController&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">list</span> <span class="o">=</span> <span class="p">[[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;ExampleController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-repeat=</span><span class="s">&quot;innerList in list&quot;</span> <span class="na">ng-init=</span><span class="s">&quot;outerIndex = $index&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">ng-repeat=</span><span class="s">&quot;value in innerList&quot;</span> <span class="na">ng-init=</span><span class="s">&quot;innerIndex = $index&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>       <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;example-init&quot;</span><span class="nt">&gt;</span>list[  ][  ] = ;<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<pre><code>list[ 0 ][ 0 ] = a;
list[ 0 ][ 1 ] = b;
list[ 1 ][ 0 ] = c;
list[ 1 ][ 1 ] = d; 
</code></pre>

<h2>示例</h2>

<p>下面的示例代码就利用这些指令，将递归的菜单分割成扁平的模板，避免html模板过深的层次。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/ng-template&quot;</span> <span class="na">id=</span><span class="s">&quot;menu-item-link-tpl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">span</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;title&quot;</span><span class="o">&gt;</span><span class="p"></span><span class="o">&lt;</span><span class="err">/span&gt;            </span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">ng</span><span class="o">-</span><span class="k">if</span><span class="o">=</span><span class="s2">&quot;item.label&quot;</span><span class="o">&gt;</span><span class="p"></span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/ng-template&quot;</span> <span class="na">id=</span><span class="s">&quot;menu-items-tpl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="o">=</span><span class="s2">&quot;item in menuItems&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">include</span><span class="o">=</span><span class="s2">&quot;&#39;menu-item-link-tpl&#39;&quot;</span><span class="o">&gt;&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">ng</span><span class="o">-</span><span class="k">if</span><span class="o">=</span><span class="s2">&quot;item.menuItems.length&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">init</span><span class="o">=</span><span class="s2">&quot;subItems = item.menuItems&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">include</span><span class="o">=</span><span class="s2">&quot;&#39;menu-items-recursive-tpl&#39;&quot;</span><span class="o">&gt;&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/ng-template&quot;</span> <span class="na">id=</span><span class="s">&quot;menu-items-recursive-tpl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="o">=</span><span class="s2">&quot;item in subItems&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">include</span><span class="o">=</span><span class="s2">&quot;&#39;menu-item-link-tpl&#39;&quot;</span><span class="o">&gt;&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">ng</span><span class="o">-</span><span class="k">if</span><span class="o">=</span><span class="s2">&quot;item.menuItems.length&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">init</span><span class="o">=</span><span class="s2">&quot;subItems = item.menuItems&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">include</span><span class="o">=</span><span class="s2">&quot;&#39;menu-items-recursive-tpl&#39;&quot;</span><span class="o">&gt;&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul</span> <span class="na">ng-include=</span><span class="s">&quot;&#39;menu-items-tpl&#39;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[angularJS路由框架ui-router]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/12/29/angularjslu-you-kuang-jia-ui-router/"/>
    <updated>2014-12-29T17:32:53+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/12/29/angularjslu-you-kuang-jia-ui-router</id>
    <content type="html"><![CDATA[<h1>简介</h1>

<p><a href="https://github.com/angular-ui/ui-router">AngularUI Router</a>是AngularJS的路由框架，和默认的<code>$route</code>不同，它将所有路由包装成可划分层级的状态机状态,路由路径在ui-router中不是必须的。由于ui-router的路由状态机是分层级的，所以使用ui-router可以非常方便地创建包含多个嵌入的子模板。</p>

<!-- more -->


<h1>Demo</h1>

<p>直接使用<code>ui-router</code>的方式可以参考其github文档，这里以yeoman为例简单展示下ui-router的使用。</p>

<p>在<code>bower.json</code>中加入ui-router依赖包,然后<code>bower install</code>执行安装</p>

<figure class='code'><figcaption><span>bower.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;learn-angular&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">/*省略其他*/</span>
</span><span class='line'>    <span class="nt">&quot;angular-ui-router&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.2.13&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'> <span class="err">/*省略其他*/</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<code>index.html</code>中添加引用：</p>

<figure class='code'><figcaption><span>app/index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-ui-router/release/angular-ui-router.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在app.coffee中设置路由：</p>

<figure class='code'><figcaption><span>app/scripts/app.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="s">&#39;use strict&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">angular</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;learnAngularApp&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>    <span class="s">&#39;ui.router&#39;</span>    <span class="c1"># 添加模块依赖</span>
</span><span class='line'>  <span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">run</span> <span class="p">[</span><span class="s">&#39;$rootScope&#39;</span><span class="p">,</span> <span class="s">&#39;$state&#39;</span><span class="p">,</span> <span class="s">&#39;$stateParams&#39;</span><span class="p">,</span> <span class="nf">($rootScope,   $state,   $stateParams) -&gt;</span>
</span><span class='line'>    <span class="nv">$rootScope.$state = </span><span class="nx">$state</span>
</span><span class='line'>    <span class="nv">$rootScope.$stateParams = </span><span class="nx">$stateParams</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">config</span> <span class="nf">($stateProvider,$urlRouterProvider) -&gt;</span>
</span><span class='line'>    <span class="nx">$urlRouterProvider</span><span class="p">.</span><span class="nx">otherwise</span> <span class="s">&quot;/&quot;</span>
</span><span class='line'>    <span class="nx">$stateProvider</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">state</span> <span class="s">&#39;home&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">url: </span><span class="s">&#39;/&#39;</span>                      <span class="c1"># 可见默认路由状态是home</span>
</span><span class='line'>        <span class="nv">templateUrl: </span><span class="s">&#39;views/home.html&#39;</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">state</span> <span class="s">&#39;state1&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">url: </span><span class="s">&#39;/state1&#39;</span>
</span><span class='line'>        <span class="nv">templateUrl: </span><span class="s">&#39;views/state1.html&#39;</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">state</span> <span class="s">&#39;state1.list&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">url: </span><span class="s">&#39;/list&#39;</span>
</span><span class='line'>        <span class="nv">templateUrl: </span><span class="s">&#39;views/state1.list.html&#39;</span>
</span><span class='line'>        <span class="nv">controller: </span><span class="nf">($scope) -&gt;</span>
</span><span class='line'>          <span class="nv">$scope.items = </span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="s">&quot;List&quot;</span><span class="p">,</span> <span class="s">&quot;Of&quot;</span><span class="p">,</span> <span class="s">&quot;Items&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">state</span> <span class="s">&#39;state2&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">url: </span><span class="s">&#39;/state2&#39;</span>
</span><span class='line'>        <span class="nv">templateUrl: </span><span class="s">&#39;views/state2.html&#39;</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">state</span> <span class="s">&#39;state2.list&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">url: </span><span class="s">&#39;/list&#39;</span>
</span><span class='line'>        <span class="nv">templateUrl: </span><span class="s">&#39;views/state2.list.html&#39;</span>
</span><span class='line'>        <span class="nv">controller: </span><span class="nf">($scope) -&gt;</span>
</span><span class='line'>          <span class="nv">$scope.things = </span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="s">&quot;Set&quot;</span><span class="p">,</span> <span class="s">&quot;Of&quot;</span><span class="p">,</span> <span class="s">&quot;Things&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>ui-router最重要的三个服务<code>$state</code>,<code>$stateProvider</code>,<code>$urlRouterProvider</code>。在<code>$stateProvider</code>上配置所有的状态，state方法的第一个参数是状态名，第二个参数是一个hash对象，里面可以配置<code>url</code>,<code>templateUrl</code>,<code>controller</code>等。</p>

<p>注意其中类似<code>state1.list</code>和<code>state1</code>的状态，<code>state1.list</code>是<code>state1</code>的子状态，所以触发<code>state1.list</code>的url是父子状态的联合，即<code>/state1</code>+<code>/list</code> => <code>/state1/list</code>,所以当浏览器导航到<code>/state1/list</code>（或手动触发<code>$state.go()</code>）时，<code>state1.list.html</code>才被插入父模板渲染。</p>

<p>下图非常清晰反映了ui-router的渲染逻辑：</p>

<ul>
<li>绿色 = 初始状态</li>
<li>黄色 = 即时渲染</li>
<li>蓝色 = 最终状态</li>
</ul>


<p><img src="https://camo.githubusercontent.com/15b1f1780e3a88cc1d6e0055dda298279d66fad7/68747470733a2f2f7261772e6769746875622e636f6d2f77696b692f616e67756c61722d75692f75692d726f757465722f5374617465476f4578616d706c65732e706e67" alt="渲染逻辑" /></p>

<p>主模板index.html:</p>

<figure class='code'><figcaption><span>app/index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">ui-sref-active=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;home&quot;</span><span class="nt">&gt;</span>home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">ui-sref-active=</span><span class="s">&quot;active&quot;</span> <span class="nt">&gt;&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;state1&quot;</span><span class="nt">&gt;</span>state1<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">ui-sref-active=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;state2&quot;</span><span class="nt">&gt;</span>state2<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ui-view</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里出现了两个ui-router的指令，<code>ui-sref</code>类似于angularjs的<code>ng-href</code>，只不过后面指定的是路由状态。</p>

<p>另一个指令就是<code>ui-view</code>，ui-router根据激活的状态向该指令中插入子模板。ui-router插入模板的规则是：<code>ui-router会将激活状态的模板插入父状态模板的ui-view处</code>。home状态是根状态，所以<code>app/index.html</code>的<code>ui-view</code>中插入的就是home状态的模板片段<code>app/views/home.html</code>。</p>

<p>其他模板：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- app/views/state1.html --&gt;</span>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>State 1<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;hr/&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;state1.list&quot;</span><span class="nt">&gt;</span>Show List<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ui-view</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="c">&lt;!-- app/views/state1.list.html --&gt;</span>
</span><span class='line'><span class="nt">&lt;h3&gt;</span>List of State 1 Items<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;item in items&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="c">&lt;!-- app/views/state2.html --&gt;</span>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>State 2<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;hr/&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;state2.list&quot;</span><span class="nt">&gt;</span>Show List<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ui-view</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="c">&lt;!-- app/views/state2.list.html --&gt;</span>
</span><span class='line'><span class="nt">&lt;h3&gt;</span>List of State 2 Things<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;thing in things&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>由上面的规则可以同理推出，当url为<code>/state1/list</code>时，会渲染主模板<code>state1.html</code>，并且会将子模板<code>state1.list.html</code>嵌入<code>state1.html</code>的<code>ui-view</code>中一起渲染出来。cool，路由渲染的灵活性非常高！</p>

<p>另外还有一个常用指令<code>ui-sref-active="classname"</code>,它通常和<code>ui-sref</code>一起使用，含义是当前状态被激活则会在所属html标签上class属性添加classname,如果不再是激活状态则去除classname。</p>

<p>另外，ui-router还支持多模板：</p>

<figure class='code'><figcaption><span>app/views/index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">ui-view=</span><span class="s">&quot;viewA&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">ui-view=</span><span class="s">&quot;viewB&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Also a way to navigate --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;route1&quot;</span><span class="nt">&gt;</span>Route 1<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;route2&quot;</span><span class="nt">&gt;</span>Route 2<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/scripts/app.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">config</span> <span class="nf">($stateProvider) -&gt;</span>
</span><span class='line'>  <span class="nx">$stateProvider</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s">&quot;index&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">url: </span><span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="nv">views:</span>
</span><span class='line'>      <span class="nv">viewA:</span>
</span><span class='line'>        <span class="nv">template: </span><span class="s">&quot;index.viewA&quot;</span>
</span><span class='line'>      <span class="nv">viewB:</span>
</span><span class='line'>        <span class="nv">template: </span><span class="s">&quot;index.viewB&quot;</span>
</span><span class='line'>  <span class="p">).</span><span class="nx">state</span><span class="p">(</span><span class="s">&quot;route1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">url: </span><span class="s">&quot;/route1&quot;</span>
</span><span class='line'>    <span class="nv">views:</span>
</span><span class='line'>      <span class="nv">viewA:</span>
</span><span class='line'>        <span class="nv">template: </span><span class="s">&quot;route1.viewA&quot;</span>
</span><span class='line'>      <span class="nv">viewB:</span>
</span><span class='line'>        <span class="nv">template: </span><span class="s">&quot;route1.viewB&quot;</span>
</span><span class='line'>  <span class="p">).</span><span class="nx">state</span> <span class="s">&quot;route2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">url: </span><span class="s">&quot;/route2&quot;</span>
</span><span class='line'>    <span class="nv">views:</span>
</span><span class='line'>      <span class="nv">viewA:</span>
</span><span class='line'>        <span class="nv">template: </span><span class="s">&quot;route2.viewA&quot;</span>
</span><span class='line'>      <span class="nv">viewB:</span>
</span><span class='line'>        <span class="nv">template: </span><span class="s">&quot;route2.viewB&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新建angular项目]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/11/25/xin-jian-angularxiang-mu/"/>
    <updated>2014-11-25T10:54:31+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/11/25/xin-jian-angularxiang-mu</id>
    <content type="html"><![CDATA[<h2>需要的工具</h2>

<ul>
<li><a href="http://bower.io/">bower</a> 前端包管理器</li>
<li><a href="http://gruntjs.com/">grunt</a> javascript的makefile工具</li>
<li><a href="http://yeoman.io/">yeoman</a>  webapp的流行脚手架</li>
<li><a href="http://karma-runner.github.io/0.12/index.html">karma</a> 测试套件</li>
</ul>


<p>这里我使用了yeoman的一个angularJS的生成器<a href="https://github.com/yeoman/generator-angular">yo</a>，方便生成需要的全部零部件</p>

<!-- more -->


<h2>新建工程</h2>

<p>我们要建立的angularjs工程的项目名称叫<code>MyAngularApp</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir MyAngularApp
</span><span class='line'><span class="nb">cd </span>MyAngularApp
</span><span class='line'><span class="c"># 这里我习惯用coffee来写代码，如果直接用javascript可以去掉后面的参数--coffee</span>
</span><span class='line'>yo angular --coffee
</span></code></pre></td></tr></table></div></figure>


<p>生成的目录结构如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>MyAngularApp
</span><span class='line'>├── Gruntfile.js
</span><span class='line'>├── README.md
</span><span class='line'>├── app
</span><span class='line'>│   ├── 404.html
</span><span class='line'>│   ├── favicon.ico
</span><span class='line'>│   ├── images
</span><span class='line'>│   ├── index.html
</span><span class='line'>│   ├── robots.txt
</span><span class='line'>│   ├── scripts
</span><span class='line'>│   ├── styles
</span><span class='line'>│   └── views
</span><span class='line'>├── bower.json
</span><span class='line'>├── bower_components
</span><span class='line'>│   ├── angular
</span><span class='line'>│   ├── angular-animate
</span><span class='line'>│   └── ......
</span><span class='line'>├── node_modules
</span><span class='line'>│   ├── coffee-script
</span><span class='line'>│   └── ......
</span><span class='line'>├── package.json
</span><span class='line'>└── <span class="nb">test</span>
</span><span class='line'>    ├── karma.conf.coffee
</span><span class='line'>    └── spec
</span></code></pre></td></tr></table></div></figure>


<p>其中，<code>Gruntfile.js</code>是grunt的makefile文件，里面定义了各种编译任务，如常用的<code>grunt serve</code>和<code>grunt build</code>。</p>

<p><code>app</code>目录是主要的工作目录，下面的<code>scripts</code>目录放置所有的controller，<code>styles</code>放置各种css文件，<code>views</code>放置视图模板；也可以在<code>app</code>下防止自己的资源文件夹如<code>vendor</code>目录，放置第三方库。</p>

<p><code>bower.json</code>中定义了需要安装的库，功能类似于ruby的Gemfile文件，在工程根目录执行<code>bower install</code>安装依赖。所有的依赖库都会被安装到<code>bower_components</code>目录中。</p>

<p><code>node_modules</code>是项目工具如coffee或者grunt的依赖工具。</p>

<p><code>package.json</code>是grunt的依赖工具。</p>

<p><code>test</code>是测试文件所在。</p>

<h2>index.html</h2>

<p>yo的常用操作可以参考其github文档。这里需要补充说一下的是<code>app/index.html</code>文件，该文件是angular项目的起始文件。注意其中类似下面这样的语句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- build:css({.tmp,app}) styles/main.css --&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;styles/main.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="c">&lt;!-- endbuild --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- build:js(.) scripts/vendor.js --&gt;</span>
</span><span class='line'><span class="c">&lt;!-- bower:js --&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular/angular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-animate/angular-animate.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-cookies/angular-cookies.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-resource/angular-resource.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-route/angular-route.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-sanitize/angular-sanitize.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-touch/angular-touch.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">&lt;!-- endbower --&gt;</span>
</span><span class='line'><span class="c">&lt;!-- endbuild --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>要注意的是<code>&lt;!-- build:css(DIRECTORY) OUT_FILE --&gt;</code>和<code>&lt;!-- build:js(DIRECTORY) OUTFILE --&gt;</code>，它们并不是普通的html注释，而是grunt的指令。</p>

<p>比如第一段，grunt会将<code>build:css</code>到<code>endbuild</code>之间的css文件找到，查找路径是<code>build:css(DIRECTORY)</code>中的目录加上<code>link</code>标签里的<code>href</code>指定的文件路径所在文件，即<code>.tmp/styles/main.css</code>和<code>app/styles/main.css</code>,然后grunt将它们合并压缩为一个css文件<code>styles/main.css</code>，这个文件被生成在输入目录，通常是<code>dist/styles/main.css</code>。</p>

<p>类似的，下面的js编译将当前目录<code>.</code>下指定的<code>bower_components</code>下的一些js合并压缩后变成<code>dist/scripts/vendor.js</code>。</p>

<p>所以，自己引入的一些第三方库怎么弄也就清楚了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- build:css(app) assets/css/vendor.css --&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;assets/css/animate.min.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;assets/plugins/gritter/css/jquery.gritter.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="c">&lt;!-- endbuild --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>grunt</h2>

<p>最后说一下grunt的任务，如果在app目录有个<code>assets/img</code>目录，里面放了一些图片，希望执行<code>grunt build</code>后将这些资源复制到输出目录，那么可以对<code>Gruntfile.js</code>做简单修改，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Copies remaining files to places other tasks can use</span>
</span><span class='line'><span class="nx">copy</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">files</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>      <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">dot</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;&lt;%= yeoman.app %&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;&lt;%= yeoman.dist %&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">src</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;*.{ico,png,txt}&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;.htaccess&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;*.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;views/{,*/}*.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;images/{,*/}*.{webp}&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;assets/{,img/*.*,fonts/*.*}&#39;</span><span class="p">,</span>   <span class="c1">//这里添加了一行,也可以直接复制整个文件夹 &#39;assets/**&#39;</span>
</span><span class='line'>        <span class="s1">&#39;fonts/{,*/}*.*&#39;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/09/08/tmux/"/>
    <updated>2014-09-08T00:37:23+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/09/08/tmux</id>
    <content type="html"><![CDATA[<h3>基本操作</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tmux new -s SESSION_NAME  <span class="c"># 新建会话</span>
</span><span class='line'>tmux new -s SESSION_NAME -d <span class="c"># 新建会话并放入后台</span>
</span><span class='line'>tmux ls <span class="c"># 列出所有会话</span>
</span><span class='line'>tmux attach -t SESSION_NAME <span class="c"># 进入某会话</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h3>命令列表</h3>

<p>默认情况下，tmux的前导命令开关是<code>Ctrl+b</code>，按了<code>Ctrl+b</code>后再按下面的命令，即执行相应操作：</p>

<h4>会话类</h4>

<table>
<thead>
<tr>
<th></th>
<th>键位</th>
<th>操作描述</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>?</td>
<td>显示所有快捷键，按q退出|</td>
</tr>
<tr>
<td></td>
<td><strong>d</strong> </td>
<td> <strong>脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话</strong> |</td>
</tr>
<tr>
<td></td>
<td>D</td>
<td>选择要脱离的会话；在同时开启了多个会话时使用|</td>
</tr>
<tr>
<td></td>
<td> <strong>s</strong></td>
<td> <strong>选择并切换会话；在同时开启了多个会话时使用</strong>|</td>
</tr>
<tr>
<td></td>
<td>:</td>
<td>进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器|</td>
</tr>
<tr>
<td></td>
<td>[</td>
<td>进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出|</td>
</tr>
</tbody>
</table>


<h4>窗口类</h4>

<table>
<thead>
<tr>
<th></th>
<th>键位</th>
<th>操作描述</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <strong>c</strong> </td>
<td> <strong>创建新窗口</strong> |</td>
</tr>
<tr>
<td></td>
<td> <strong>&amp;</strong> </td>
<td> <strong>关闭当前窗口</strong> |</td>
</tr>
<tr>
<td></td>
<td> <strong>数字键</strong> </td>
<td> <strong>切换至指定窗口</strong> |</td>
</tr>
<tr>
<td></td>
<td>p</td>
<td>切换至上一窗口|</td>
</tr>
<tr>
<td></td>
<td>n</td>
<td>切换至下一窗口|</td>
</tr>
<tr>
<td></td>
<td>l</td>
<td>在前后两个窗口间互相切换|</td>
</tr>
<tr>
<td></td>
<td> <strong>w</strong> </td>
<td> <strong>通过窗口列表切换窗口</strong> |</td>
</tr>
<tr>
<td></td>
<td> <strong>,</strong> </td>
<td> <strong>重命名当前窗口；这样便于识别</strong> |</td>
</tr>
<tr>
<td></td>
<td> <strong>.</strong> </td>
<td> <strong>修改当前窗口编号；相当于窗口重新排序</strong> |</td>
</tr>
<tr>
<td></td>
<td>!</td>
<td>将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板|</td>
</tr>
</tbody>
</table>


<h4>面板类</h4>

<table>
<thead>
<tr>
<th></th>
<th>键位</th>
<th>操作描述</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <strong>&ldquo;</strong> </td>
<td> <strong>将当前面板平分为上下两块</strong> |</td>
</tr>
<tr>
<td></td>
<td> <strong>%</strong> </td>
<td> <strong>将当前面板平分为左右两块</strong> |</td>
</tr>
<tr>
<td></td>
<td> <strong>x</strong> </td>
<td> <strong>关闭当前面板</strong> |</td>
</tr>
<tr>
<td></td>
<td> <strong>o</strong> </td>
<td> <strong>在当前窗口中选择下一面板</strong> |</td>
</tr>
<tr>
<td></td>
<td>q</td>
<td>显示面板编号|</td>
</tr>
</tbody>
</table>


<h3>其他</h3>

<p>如果不想使用默认tmux server，或者同一用户想起多个tmux实例，可以使用<code>-S</code>参数指定不同的unix socket：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tmux -S /path/to/another/unix/socket-file
</span></code></pre></td></tr></table></div></figure>


<p>在tmux里使用zsh有时会导致窗口名称会不断变化，这需要修改下<code>~/.zshrc</code>文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">DISABLE_AUTO_TITLE</span><span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<h4>可编程</h4>

<p>tmux最强大的地方还在于他的可编程性，用<code>tmux list-commands</code>可以看到tmux所有支持的命令。以我自己常执行的一个脚本为例，我开机后常常需要启动一系列服务便于开发, 但当我不开发时开电脑又不需要启动，所以放到开机自启动脚本里是不合适的，所以这里用tmux来批量起最合适了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/zsh</span>
</span><span class='line'><span class="c"># start tmux</span>
</span><span class='line'><span class="nv">session</span><span class="o">=</span>MAC
</span><span class='line'>tmux new -s <span class="s2">&quot;$session&quot;</span> -d
</span><span class='line'>tmux rename-window -t <span class="s2">&quot;$session:0&quot;</span> daemon
</span><span class='line'><span class="c"># start redis-server</span>
</span><span class='line'>tmux send -t <span class="s2">&quot;$session:daemon&quot;</span> <span class="s1">&#39;redis-server&#39;</span> Enter
</span><span class='line'>tmux split-window -h -t <span class="s2">&quot;$session:daemon&quot;</span>
</span><span class='line'><span class="c"># start mongo</span>
</span><span class='line'>tmux send -t <span class="s2">&quot;$session:daemon&quot;</span> <span class="s1">&#39;mongod --dbpath /Users/jason/local/var/mongodb-data&#39;</span> Enter
</span><span class='line'><span class="c"># start nginx</span>
</span><span class='line'>tmux split-window  -t <span class="s2">&quot;$session:daemon&quot;</span> <span class="s1">&#39;/Users/jason/local/nginx/sbin/nginx&#39;</span>
</span><span class='line'>tmux <span class="k">select</span>-pane -L -t <span class="s2">&quot;$session:daemon&quot;</span>
</span><span class='line'>tmux split-window -t <span class="s2">&quot;$session:daemon&quot;</span>
</span><span class='line'><span class="c"># start firefox with pentadactyl</span>
</span><span class='line'>tmux send -t <span class="s2">&quot;$session:daemon&quot;</span> <span class="s1">&#39;/Applications/Firefox.app/Contents/MacOS/firefox -pentadactyl +u NONE&#39;</span> Enter
</span><span class='line'>tmux <span class="k">select</span>-pane -R -t <span class="s2">&quot;$session:daemon&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># for develop project</span>
</span><span class='line'>tmux neww -a -n dev -t <span class="s2">&quot;$session&quot;</span>
</span><span class='line'>tmux send -t <span class="s2">&quot;$session:dev&quot;</span> <span class="s1">&#39;cd /Users/jason/repository/backend&#39;</span> Enter
</span><span class='line'>tmux split-window -t <span class="s2">&quot;$session:dev&quot;</span>
</span><span class='line'>tmux send -t <span class="s2">&quot;$session:dev&quot;</span> <span class="s1">&#39;cd /Users/jason/repository/frontend&#39;</span> Enter
</span></code></pre></td></tr></table></div></figure>


<p>这个脚本启动一个名为<code>MAC</code>的tmux session，并新建了两个窗口，在第一个窗口里开了4个面板，分别启动了nginx, redis, mongo， firefox。其中，开启窗口/面板时同时执行命令，该窗口/面板会在命令执行结束后自动关闭，所以第一个窗口最后实际只有3个面板；第二个窗口启动并切换到我正则开发的工程。</p>

<p>具体命令的使用可以参照该示例和man手册理解。</p>

<p>enjoy tmux!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识hadoop及map-reduce]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/09/03/chu-shi-hadoopji-map-reduce/"/>
    <updated>2014-09-03T20:40:36+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/09/03/chu-shi-hadoopji-map-reduce</id>
    <content type="html"><![CDATA[<h2>搭建hadoop环境</h2>

<p>hadoop环境搭建具体可以参考<a href="http://hadoop.apache.org/docs/r1.2.1/single_node_setup.html">官方文档</a>。</p>

<h2>搭建配置maven</h2>

<p>map-reduce任务支持多种语言，但对java支持是最好的，所以这里说一下怎么搭建java的编译环境。</p>

<p>首先编译安装maven，并将<code>MAVEN_HOME/bin</code>加入PATH环境变量，这样就可以直接使用<code>mvn</code>命令了。这里说一下怎么利用maven编译生成我们后续示例中的jar包。</p>

<h3>1. 使用maven新建一个工程</h3>

<p>下面的命令创建一个包含java类<code>org.myorg.WordCount</code>的工程<code>WordCount</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn archetype:create -DgroupId<span class="o">=</span>org.myorg -DartifactId<span class="o">=</span>WordCount
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>工程结构如图：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>WordCount
</span><span class='line'>├── pom.xml
</span><span class='line'>└── src
</span><span class='line'>    ├── main
</span><span class='line'>    │   └── java
</span><span class='line'>    │       └── org
</span><span class='line'>    │           └── myorg
</span><span class='line'>    │               └── App.java
</span><span class='line'>    └── <span class="nb">test</span>
</span><span class='line'>        └── java
</span><span class='line'>            └── org
</span><span class='line'>                └── myorg
</span><span class='line'>                    └── AppTest.java
</span></code></pre></td></tr></table></div></figure>


<p>将<code>WordCount/src/main/java/org/myorg/App.java</code>重命名为<code>WordCount/src/main/java/org/myorg/WordCount.java</code>，并将示例代码复制进去，代码的细节稍后再看。</p>

<p>由于java类中依赖于hadoop的java包，所以在maven的配置文件<code>pom.xml</code>标签对<code>&lt;dependencies/&gt;</code>内添加java类文件里引用的依赖：</p>

<figure class='code'><figcaption><span>WordCount/pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.apache.hadoop<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>hadoop-mapreduce-client-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>2.4.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.apache.hadoop<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>hadoop-common<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>2.4.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.apache.hadoop<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>hadoop-mapreduce-client-common<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>2.4.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.apache.hadoop<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>hadoop-mapreduce-client-jobclient<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>2.4.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.编译生成jar包</h3>

<p>在WordCount根目录下执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn package
</span></code></pre></td></tr></table></div></figure>


<p>就生成了我们需要的<code>WordCount/target/WordCount-1.0-SNAPSHOT.jar</code>文件。</p>

<h2>执行示例程序WordCount</h2>

<p>示例程序是一个单词计数程序，输入文件有两个：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">file01</span>
</span><span class='line'><span class="o">=======================</span>
</span><span class='line'>Hello World Bye World
</span><span class='line'>
</span><span class='line'><span class="nv">file02</span>
</span><span class='line'><span class="o">=======================</span>
</span><span class='line'>Hello Hadoop Goodbye Hadoop
</span></code></pre></td></tr></table></div></figure>


<h3>1.上传数据文件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#创建目录</span>
</span><span class='line'>hdfs dfs -mkdir /user
</span><span class='line'>hdfs dfs -mkdir /user/hadoop
</span><span class='line'><span class="c">#上传文件</span>
</span><span class='line'>hdfs dfs -put file01 /user/hadoop/input
</span><span class='line'>hdfs dfs -put file02 /user/hadoop/input
</span><span class='line'><span class="c">#查看文件是否上传上去了</span>
</span><span class='line'>hdfs dfs -ls /user/hadoop/input
</span></code></pre></td></tr></table></div></figure>


<h3>2.提交并执行map-reduce任务</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hadoop jar WordCount-1.0-SNAPSHOT.jar org.myorg.WordCount /user/hadoop/input /user/hadoop/output
</span></code></pre></td></tr></table></div></figure>


<h3>3.获取结果</h3>

<p>当任务执行完毕在输出目录会生成_SUCCESS文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hdfs dfs -ls /user/hadoop/output
</span><span class='line'><span class="c">#输出是：</span>
</span><span class='line'>-rw-r--r--   1 hadoop supergroup          0 2014-09-03 20:20 /user/hadoop/output/_SUCCESS
</span><span class='line'>-rw-r--r--   1 hadoop supergroup         41 2014-09-03 20:20 /user/hadoop/output/part-00000
</span></code></pre></td></tr></table></div></figure>


<p>查看结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hdfs dfs -cat /user/hadoop/output/part-00000
</span><span class='line'><span class="c">#输出：</span>
</span><span class='line'>Bye   1
</span><span class='line'>Goodbye   1
</span><span class='line'>Hadoop    2
</span><span class='line'>Hello 2
</span><span class='line'>World 2
</span></code></pre></td></tr></table></div></figure>


<h2>Map-Reduce</h2>

<p>回过头来再看执行map-reduce的这个java类<code>WordCount.java</code>，该类包含了两个静态内部类<code>Map</code>和<code>Reduce</code>，都继承了<code>MapReduceBase</code>基类，并各自实现了<code>Mapper</code>和<code>Reducer</code>接口。</p>

<figure class='code'><figcaption><span>WordCount/src/main/java/org/myorg/WordCount.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">myorg</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.conf.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapred.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.util.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WordCount</span> <span class="o">{</span>
</span><span class='line'><span class="c1">//执行map操作的静态类</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Map</span> <span class="kd">extends</span> <span class="n">MapReduceBase</span> <span class="kd">implements</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">LongWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">IntWritable</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Text</span> <span class="n">word</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Text</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">map</span><span class="o">(</span><span class="n">LongWritable</span> <span class="n">key</span><span class="o">,</span> <span class="n">Text</span> <span class="n">value</span><span class="o">,</span> <span class="n">OutputCollector</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="n">output</span><span class="o">,</span> <span class="n">Reporter</span> <span class="n">reporter</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>      <span class="n">StringTokenizer</span> <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">word</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
</span><span class='line'>      <span class="c1">//OutputCollector以单词本身为键，出现次数为键值进行计数，这里每出现一次计数1</span>
</span><span class='line'>      <span class="n">output</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">one</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="c1">//执行reduce操作的静态类</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Reduce</span> <span class="kd">extends</span> <span class="n">MapReduceBase</span> <span class="kd">implements</span> <span class="n">Reducer</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">reduce</span><span class="o">(</span><span class="n">Text</span> <span class="n">key</span><span class="o">,</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">IntWritable</span><span class="o">&gt;</span> <span class="n">values</span><span class="o">,</span> <span class="n">OutputCollector</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="n">output</span><span class="o">,</span> <span class="n">Reporter</span> <span class="n">reporter</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//map后的结果是同一个key对应一个value的列表，所以这里遍历values迭代器，累加所有值，即得到每个单词计数值</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">values</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">+=</span> <span class="n">values</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">output</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="n">sum</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">JobConf</span> <span class="n">conf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JobConf</span><span class="o">(</span><span class="n">WordCount</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">setJobName</span><span class="o">(</span><span class="s">&quot;wordcount&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">setOutputKeyClass</span><span class="o">(</span><span class="n">Text</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">setOutputValueClass</span><span class="o">(</span><span class="n">IntWritable</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">setMapperClass</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">setCombinerClass</span><span class="o">(</span><span class="n">Reduce</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">setReducerClass</span><span class="o">(</span><span class="n">Reduce</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">setInputFormat</span><span class="o">(</span><span class="n">TextInputFormat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">setOutputFormat</span><span class="o">(</span><span class="n">TextOutputFormat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">FileInputFormat</span><span class="o">.</span><span class="na">setInputPaths</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class='line'>  <span class="n">FileOutputFormat</span><span class="o">.</span><span class="na">setOutputPath</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">JobClient</span><span class="o">.</span><span class="na">runJob</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Mapper</code>接口是一个泛型接口,该接口4个参数分别指定了map方法的<code>输入键值，输入值，输出键值，输出值</code>类型。 类似的<code>Reducer</code>接口也是个泛型接口，它的前两个参数和map的后两个参数类型对应，从而也间接决定了后两个参数的类型。</p>

<p>简而言之，map的过程是把一行行的输入变成：</p>

<p>key1 => val1</p>

<p>key2 => val2</p>

<p>key3 => val1</p>

<p>而reduce的输入是排序过后map的输出：</p>

<p>key1 => [val1,val&hellip;..]</p>

<p>key2 => [val2,val&hellip;..]</p>

<p>&hellip;</p>

<p>reduce的操作就是把这个输入合并成我们想要的东西。</p>

<p>最后，<code>WordCount</code>类的<code>main</code>方法里设置输入输出，然后执行任务。</p>

<h2>以streaming方式执行map-reduce任务</h2>

<p>通常来说，简单的map-reduce任务还是用脚本来写比较快，比如ruby,python或者linux shell，这里使用bash来重写一次这个单词计数。</p>

<h3>1. map程序</h3>

<p>hadoop的streaming是流式处理，即上一操作的输入作为下一操作的输出，基本可以等价用管道来看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat data-file | mapper.sh | sort | reducer.sh
</span></code></pre></td></tr></table></div></figure>


<p>输入输出都是走的标准输入输出，所以改写的map程序非常简单：</p>

<figure class='code'><figcaption><span>map.sh map操作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>awk <span class="s1">&#39;{for(i=1;i&lt;=NF;i++) print $i&quot; 1&quot;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. reduce程序</h3>

<p>类似的重写reduce：</p>

<figure class='code'><figcaption><span>reduce.sh  reduce操作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>awk <span class="s1">&#39;{arr[$1]+=1}END{for(k in arr) print k&quot; &quot;arr[k]}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 提交streaming任务</h3>

<p>提交streaming类型的任务需要指定一个额外的jar包<code>$HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-2.4.1.jar</code>，还要在命令里指出map和recude的脚本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hadoop jar <span class="nv">$HADOOP_HOME</span>/share/hadoop/tools/lib/hadoop-streaming-2.4.1.jar  -input <span class="s1">&#39;/user/hadoop/input/*&#39;</span> -output <span class="s1">&#39;/user/hadoop/output1&#39;</span> -mapper map.sh -reducer reduce.sh
</span></code></pre></td></tr></table></div></figure>


<p>任务执行的结果和之前是一致的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hdfs dfs -cat /user/hadoop/output1/part-00000
</span><span class='line'><span class="c">#输出:</span>
</span><span class='line'>Hadoop 2
</span><span class='line'>Goodbye 1
</span><span class='line'>Bye 1
</span><span class='line'>Hello 2
</span><span class='line'>World 2
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用octopress搭建github pages]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/08/31/shi-yong-octopressda-jian-github-pages/"/>
    <updated>2014-08-31T17:36:06+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/08/31/shi-yong-octopressda-jian-github-pages</id>
    <content type="html"><![CDATA[<h2>安装git,ruby</h2>

<p>略</p>

<h2>安装octopress并搭建博客</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nb">cd </span>octopress
</span><span class='line'>bundle install
</span><span class='line'>rake install
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>初始化博客</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>编辑<code>_config.yml</code>写入博客名和其他信息</p>

<p>开始书写博客：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_page<span class="o">[</span><span class="s2">&quot;About&quot;</span><span class="o">]</span>    <span class="c"># 添加博客页</span>
</span><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;First Post!&quot;</span><span class="o">]</span>  <span class="c"># 新建一篇文章</span>
</span></code></pre></td></tr></table></div></figure>


<p>发布到github</p>

<figure class='code'><figcaption><span>deploy.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate      <span class="c"># 生成页面</span>
</span><span class='line'><span class="c">#rake preview       # 如果需要在本地预览生成的结果，预览页http://localhost:4000</span>
</span><span class='line'>rake deploy        <span class="c">#发布到github</span>
</span><span class='line'><span class="c"># 发布到github的pages在master分支，还要保存源的source分支</span>
</span><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s1">&#39;Added About page and first post!&#39;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<h2>在另外机器编辑博客</h2>

<p>如果更换了电脑，在新机器上编辑写博客，不需要重新搭建一遍：</p>

<figure class='code'><figcaption><span>get_my_blog.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:username/username.github.com.git
</span><span class='line'><span class="nb">cd </span>username.github.com
</span><span class='line'>git checkout <span class="nb">source</span>
</span><span class='line'>mkdir _deploy
</span><span class='line'><span class="nb">cd </span>_deploy
</span><span class='line'>git init
</span><span class='line'>git remote add origin git@github.com:username/username.github.com.git
</span><span class='line'>git pull origin master
</span><span class='line'><span class="nb">cd</span> ..
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql常用命令]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/08/21/mysqlchang-yong-ming-ling/"/>
    <updated>2014-08-21T11:05:13+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/08/21/mysqlchang-yong-ming-ling</id>
    <content type="html"><![CDATA[<h3>1.远程链接mysql</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql -h主机地址 -u用户名 －p用户密码 －P 端口号
</span><span class='line'>grant all on *.* to ‘用户名’@’主机地址’ identified by ‘密码’
</span><span class='line'>grant select on 数据库.* to 用户名@登录主机 identified by \"密码\"</span></code></pre></td></tr></table></div></figure>


<h3>2.修改密码</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysqladmin -u用户名 -p旧密码 password 新密码</span></code></pre></td></tr></table></div></figure>


<h3>3.显示数据库列表。</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show databases</span></code></pre></td></tr></table></div></figure>


<h3>4.显示库中的数据表</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show tables</span></code></pre></td></tr></table></div></figure>


<h3>5.显示数据表的结构</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe 表名</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h3>6.建库</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create database 库名</span></code></pre></td></tr></table></div></figure>


<h3>7.建表</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create table 表名 (字段设定列表)
</span><span class='line'>CREATE TABLE MYTABLE (name VARCHAR(20), sex CHAR(1))</span></code></pre></td></tr></table></div></figure>


<h3>8.删库和删表</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>drop database 库名
</span><span class='line'>drop table 表名</span></code></pre></td></tr></table></div></figure>


<h3>9.将表中记录清空</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>delete from 表名
</span><span class='line'>truncate table 表名</span></code></pre></td></tr></table></div></figure>


<h3>10.显示表中的记录</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select * from 表名
</span><span class='line'>select * from 表名</span></code></pre></td></tr></table></div></figure>


<h3>11.插入表</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Insert into 表名 values（字段各值）</span></code></pre></td></tr></table></div></figure>


<h3>12.更新表</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Update 表名 set 字段 = 值 where </span></code></pre></td></tr></table></div></figure>


<h3>13.导入</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>数据传入命令 load data local infile "文件名" into table 表名
</span><span class='line'>Source sql文件
</span><span class='line'>./mysqlimport -u root -p123456 &lt; sql文件</span></code></pre></td></tr></table></div></figure>


<h3>14.导出</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Select * from 表名 into outfile ‘文件名’
</span><span class='line'>./mysqldump –opt –database 库名 &gt; sql文件
</span><span class='line'>./mysqldump –opt 库名 表名 &gt; sql文件</span></code></pre></td></tr></table></div></figure>


<h3>15.改名</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Alter table 表名 rename 新表名
</span><span class='line'>Alter database 库名 rename 新库名</span></code></pre></td></tr></table></div></figure>


<h3>16.查看服务器运行状态</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show status</span></code></pre></td></tr></table></div></figure>


<p>该命令将显示出一长列状态变量及其对应的值，其中包括：被中止访问的用户数量，被中止的连接数量，尝试连接的次数，并发连接数量最大值，以及其他许多有用的信息。</p>

<h3>17.显示一个用户的权限，显示结果类似于grant 命令</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show grants for user_name</span></code></pre></td></tr></table></div></figure>


<h3>18.显示表的索引</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show index from table_name</span></code></pre></td></tr></table></div></figure>


<h3>19.显示一些系统特定资源的信息，例如，正在运行的线程数量</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show status</span></code></pre></td></tr></table></div></figure>


<h3>20.显示系统变量的名称和值</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show variables</span></code></pre></td></tr></table></div></figure>


<h3>21.显示系统中正在运行的所有进程，也就是当前正在执行的查询。大多数用户可以查看</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show processlist</span></code></pre></td></tr></table></div></figure>


<p>他们自己的进程，但是如果他们拥有process权限，就可以查看所有人的进程，包括密码</p>

<h3>22.显示当前使用或者指定的database中的每个表的信息。信息包括表类型和表的最新更新时间</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show table status</span></code></pre></td></tr></table></div></figure>


<h3>23.显示服务器所支持的不同权限</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show privileges</span></code></pre></td></tr></table></div></figure>


<h3>24.显示create database 语句是否能够创建指定的数据库</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show create database database_name</span></code></pre></td></tr></table></div></figure>


<h3>25.显示create database 语句是否能够创建指定的数据库</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show create table table_name</span></code></pre></td></tr></table></div></figure>


<h3>26.显示innoDB存储引擎的状态</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show innodb status</span></code></pre></td></tr></table></div></figure>


<h3>27.显示BDB存储引擎的日志</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show logs</span></code></pre></td></tr></table></div></figure>


<h3>28.显示最后一个执行的语句所产生的错误、警告和通知</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show warnings</span></code></pre></td></tr></table></div></figure>


<h3>29.只显示最后一个执行语句所产生的错误</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show errors</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golang远程调用]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/08/15/golangyuan-cheng-diao-yong/"/>
    <updated>2014-08-15T20:22:34+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/08/15/golangyuan-cheng-diao-yong</id>
    <content type="html"><![CDATA[<p>go语言的远程调用包<code>net/rpc</code>非常简单，而且由于go不支持动态链接，如果想要获得程序的动态性，那么就只好依赖于远程调用。</p>

<!-- more -->


<h3>服务端</h3>

<p>首先定义服务契约：</p>

<figure class='code'><figcaption><span>contract.go  服务契约定义</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">contract</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Args</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Name</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">Age</span>  <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Sign</span> <span class="kt">int</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">Sign</span><span class="p">)</span> <span class="nx">Content</span><span class="p">(</span><span class="nx">args</span> <span class="o">*</span><span class="nx">Args</span><span class="p">,</span> <span class="nx">reply</span> <span class="o">*</span><span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="nx">reply</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;%s is %v years old.&quot;</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Age</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>契约的定义规则很简单：服务函数必须满足 <code>func (t *T) MethodName(argType T1, replyType *T2) error</code>的形式，方法的第一个参数是服务接收的传入参数，第二个引用参数是返回值。契约服务的接收者可以随意定义，如此处的<code>Sign</code>，没有特别的用处。</p>

<p>然后看看服务端怎么注册服务：</p>

<figure class='code'><figcaption><span>main.go 服务端</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;contract&quot;</span>
</span><span class='line'>    <span class="s">&quot;log&quot;</span>
</span><span class='line'>    <span class="s">&quot;net&quot;</span>
</span><span class='line'>    <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>    <span class="s">&quot;net/rpc&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ct</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">contract</span><span class="p">.</span><span class="nx">Sign</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">rpc</span><span class="p">.</span><span class="nx">Register</span><span class="p">(</span><span class="nx">ct</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">rpc</span><span class="p">.</span><span class="nx">HandleHTTP</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">l</span><span class="p">,</span> <span class="nx">e</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="s">&quot;:8843&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">e</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="s">&quot;listen error:&quot;</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">Serve</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>客户端</h3>

<p>在很多其他语言中，实现远程调用的契约，必须共享一套契约代码，比如android的远程调用，必须将服务端定义的契约编译成<code>.class</code>文件然后提供给客户端使用，否则同一个服务类是无法在客户端和服务端对应起来的。</p>

<p>但是，go是不需要的，至于为什么后面再讲。</p>

<p>回头想想也是，既然不支持动态链接，客户端怎么使用契约文件编译结果呢？</p>

<figure class='code'><figcaption><span>main.go 客户端</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;log&quot;</span>
</span><span class='line'>    <span class="s">&quot;net/rpc&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">sync_invoke</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rpc</span><span class="p">.</span><span class="nx">DialHTTP</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="s">&quot;127.0.0.1:8843&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="s">&quot;dialing:&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">args</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Name</span> <span class="kt">string</span>
</span><span class='line'>        <span class="nx">Age</span>  <span class="kt">int</span>
</span><span class='line'>    <span class="p">}{</span><span class="s">&quot;jack&quot;</span><span class="p">,</span> <span class="mi">23</span><span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">reply</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">err</span> <span class="p">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Call</span><span class="p">(</span><span class="s">&quot;Sign.Content&quot;</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">reply</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="s">&quot;error:&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">reply</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">async_invoke</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rpc</span><span class="p">.</span><span class="nx">DialHTTP</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="s">&quot;127.0.0.1:8843&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="s">&quot;dialing:&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">args</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Name</span> <span class="kt">string</span>
</span><span class='line'>        <span class="nx">Age</span>  <span class="kt">int</span>
</span><span class='line'>        <span class="nx">Sex</span> <span class="kt">string</span>
</span><span class='line'>    <span class="p">}{</span><span class="s">&quot;jack&quot;</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span><span class="s">&quot;male&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">reply</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">future</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Go</span><span class="p">(</span><span class="s">&quot;Sign.Content&quot;</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">reply</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// wait for call end</span>
</span><span class='line'>    <span class="nx">futureResult</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">future</span><span class="p">.</span><span class="nx">Done</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">futureResult</span><span class="p">.</span><span class="nx">Error</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="s">&quot;error:&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">c</span> <span class="o">:=</span> <span class="nx">futureResult</span><span class="p">.</span><span class="nx">Reply</span><span class="p">.(</span><span class="o">*</span><span class="kt">string</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="nx">c</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">c</span> <span class="o">:=</span> <span class="nx">sync_invoke</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;get sync result:&quot;</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">c</span> <span class="p">=</span> <span class="nx">async_invoke</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;get async result:&quot;</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果：</p>

<figure class='code'><figcaption><span>main.go 客户端</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">get</span> <span class="nx">sync</span> <span class="nx">result</span><span class="p">:</span> <span class="nx">jack</span> <span class="nx">is</span> <span class="mi">23</span> <span class="nx">years</span> <span class="nx">old</span><span class="p">.</span>
</span><span class='line'><span class="nx">get</span> <span class="nx">async</span> <span class="nx">result</span><span class="p">:</span> <span class="nx">jack</span> <span class="nx">is</span> <span class="mi">23</span> <span class="nx">years</span> <span class="nx">old</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>go同时提供了同步和异步调用远程服务两种选择。代码自解释性很强，故无须赘述了。</p>

<p><strong>注意</strong>细节的同学可能发现了，上面异步调用部分的代码传递的参数结构体args和服务端定义的参数Args并不一致，那是因为go的远程调用默认采用encoding/gob编码和解码，它是一种类似与json的数据分享方式，但更加结构化，关于gob的详情可以google，这里不细说。由于使用gob，使得go的rpc可以接受<code>相似</code>结构，而不强求服务端和客户端服务参数完全一致。</p>

<p>简单来说，两个结构的<strong>导出成员</strong>完全一致，或者其中一个缺失一部分，或者其中一个多出一部分都算是相似结构。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[js异步回调与闭包]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/08/14/jsyi-bu-hui-diao-yu-bi-bao/"/>
    <updated>2014-08-14T00:20:20+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/08/14/jsyi-bu-hui-diao-yu-bi-bao</id>
    <content type="html"><![CDATA[<p>很多地方讲解<code>CoffeeScript/JavaScript</code>都用了这么一个例子：</p>

<figure class='code'><figcaption><span>example.coffee  异步回调中的陷阱</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffee-script'><span class='line'><span class="nv">chars = </span><span class="p">[</span><span class="s">&#39;A&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="s">&#39;C&#39;</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="nx">ch</span> <span class="k">in</span> <span class="nx">chars</span>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">ch</span>
</span><span class='line'>  <span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>这个结果会输出<code>C C C</code>而不是<code>A B C</code>，为什么会这样是因为js的异步机制，在普通代码执行完毕后才会处理事件，而在处理时间打印console时<code>ch</code>已经是<code>C</code>了，所以三个回调都会打印<code>C</code>。</p>

<p>给出的改进版本也很直观：</p>

<figure class='code'><figcaption><span>example-v2.coffee 恰当控制闭包环境中的变量</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffee-script'><span class='line'><span class="nv">chars = </span><span class="p">[</span><span class="s">&#39;A&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="s">&#39;C&#39;</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="nx">ch</span> <span class="k">in</span> <span class="nx">chars</span>
</span><span class='line'>  <span class="nx">do</span> <span class="nf">(ch) -&gt;</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">ch</span>
</span><span class='line'>    <span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>为啥这样改呢，其实原因严格来说和闭包有关系。</p>

<p>在第一个版本里，我们用了一个匿名函数把变量ch作为环境放入闭包，但是注意这个变量的作用域在for循环所在的整个范围内可见，闭包复制了这个变量的引用，所以当匿名函数实际调用时，变量的值已经被改变，导致得不到想要的输出。</p>

<p>而第二个版本将ch以函数参数的形式复制到了闭包内，这个匿名函数里的ch作用域仅在这个闭包匿名函数小环境内，外部for循环仅改变外部的ch，所以复制到闭包内的ch是不变的；不信可以把do后面函数改成无参的，结果肯定还是打印三个C。</p>

<p>这个问题其实在别的语言同样存在，只不过其他语言很大部分都同步执行闭包，导致看不出差别，实际上是一样的，看下面的go语言示例：</p>

<figure class='code'><figcaption><span>example.go golang的闭包示例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">example</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>  <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">example</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">5</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出会是1而不是0.</p>

<p>所以记住一句话，使用闭包，要注意它包裹起来的环境。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[struct tags]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/07/12/struct-tags/"/>
    <updated>2014-07-12T00:07:11+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/07/12/struct-tags</id>
    <content type="html"><![CDATA[<h3>结构体标签</h3>

<p>在定义结构时，可以为struct定义一个标签，这个标签是作为结构体字段的一个附加属性，主要是反射包会使用到这个属性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;reflect&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">type</span> <span class="nx">S</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">F</span> <span class="kt">string</span> <span class="s">`species:&quot;gopher&quot; color:&quot;blue&quot;`</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">s</span> <span class="o">:=</span> <span class="nx">S</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">st</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">TypeOf</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">field</span> <span class="o">:=</span> <span class="nx">st</span><span class="p">.</span><span class="nx">Field</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">field</span><span class="p">.</span><span class="nx">Tag</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="s">&quot;color&quot;</span><span class="p">),</span> <span class="nx">field</span><span class="p">.</span><span class="nx">Tag</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="s">&quot;species&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>blue gopher
</span></code></pre></td></tr></table></div></figure>


<p>结构体<code>S</code>的<code>F</code>成员具有两个属性<code>species</code>和<code>color</code>，其属性的值分别为<code>blue</code>和<code>gopher</code>。如果不使用反射去取这个属性，在定义时写不写属性都是无所谓的。</p>

<!--more-->


<p>在go中，tag的定义是有规定的：</p>

<blockquote><p>By convention, tag strings are a concatenation of optionally space-separated key:&ldquo;value&rdquo; pairs. Each key is a non-empty string consisting of non-control characters other than space (U+0020 &lsquo; &rsquo;), quote (U+0022 &lsquo;&ldquo;&rsquo;), and colon (U+003A &lsquo;:&rsquo;). Each value is quoted using U+0022 &lsquo;&rdquo;&rsquo; characters and Go string literal syntax.</p></blockquote>

<p>即：按照go的默认约定，tag以<code>key:value</code>的形式定义，多个<code>key:value</code>以空格分割，<code>key</code>不能是控制字符单引号、双引号和冒号，<code>value</code>需要用引号引起来。</p>

<p>当然，也可以不遵守这个约定，因为具体怎么使用tag还是按照开发者自己的意愿来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你不知道的Go]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/06/23/ni-bu-zhi-dao-de-go/"/>
    <updated>2014-06-23T14:37:47+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/06/23/ni-bu-zhi-dao-de-go</id>
    <content type="html"><![CDATA[<h3>1.匿名结构</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>      <span class="kt">string</span>
</span><span class='line'>    <span class="nx">age</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">=</span><span class="s">&quot;jack&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>声明时初始化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">st</span> <span class="o">:=</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">age</span>  <span class="kt">int</span>
</span><span class='line'><span class="p">}{</span>
</span><span class='line'>  <span class="s">&quot;Jack&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">12</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">st</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>2.抢占式调度器</h3>

<blockquote><p>In prior releases, a goroutine that was looping forever could starve out other goroutines on the same thread, a serious problem when GOMAXPROCS provided only one user thread. In Go 1.2, this is partially addressed: The scheduler is invoked occasionally upon entry to a function. This means that any loop that includes a (non-inlined) function call can be pre-empted, allowing other goroutines to run on the same thread.</p></blockquote>

<p>从golang1.2起，携程调度器为抢占式的，但抢占发生在每次进入函数前，所以，如果循环内的函数被编译器优化成了inline function，那么自然不会发生调度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[信任关系建立]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/05/21/xin-ren-guan-xi-jian-li/"/>
    <updated>2014-05-21T14:58:28+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/05/21/xin-ren-guan-xi-jian-li</id>
    <content type="html"><![CDATA[<h3>建立host1到host2的信任关系</h3>

<h4>如果A的rsa文件不存在可以这样建立</h4>

<p>首先在<code>host1</code>上：</p>

<figure class='code'><figcaption><span>create_rsa.sh   </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-keygen -t rsa -N <span class="s2">&quot;&quot;</span> -f ~/.ssh/id_rsa
</span></code></pre></td></tr></table></div></figure>


<h4>添加信任关系</h4>

<p>在<code>host2</code>上，将<code>host1</code>的<code>~/.ssh/id_rsa.pub</code>文件内容<code>追加</code>到<code>host2</code>的<code>authorized_keys</code>文件中</p>

<h4>避免第一次连接出现添加fingerprint的询问</h4>

<p>在<code>host1</code>上执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-keyscan host2 &gt;&gt; ~/.ssh/known_hosts
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>下面是一个示例脚本，在一个中控机上（能同时访问a和b）建立a到b的信任关系：</p>

<figure class='code'><figcaption><span>relation_a2b</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$#&quot;</span> -lt 2 <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;Usage: relation_a2b host1 host2&quot;</span>
</span><span class='line'>        <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nv">from</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="nv">to</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'><span class="nv">key</span><span class="o">=</span><span class="sb">`</span>ssh <span class="nv">$from</span> <span class="s2">&quot;ssh-keyscan -t rsa $to &gt;&gt; ~/.ssh/known_hosts 2&gt;/dev/null &amp;&amp; cat ~/.ssh/id_rsa.pub&quot;</span><span class="sb">`</span>
</span><span class='line'>ssh <span class="nv">$to</span> <span class="s2">&quot;echo $key &gt;&gt; ~/.ssh/authorized_keys&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$from --&gt; $to [OK]&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>relation_a2b host1 host2
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[命令行参数]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/05/02/ming-ling-xing-can-shu/"/>
    <updated>2014-05-02T01:14:33+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/05/02/ming-ling-xing-can-shu</id>
    <content type="html"><![CDATA[<p>阅读docker源码第一个文件<code>DOCKER/docker/docker.go</code>，这是docker的主函数所在的地方。简单来说，这个文件的代码就做了一件事：解析命令行参数，然后根据命令行参数再分流到各种子过程的调用。</p>

<!-- more -->


<h3>flag</h3>

<p>go语言默认使用flag包来做命令行参数解析，对于这个包的使用可以参考官方文档的说明。但归结起来，使用这个包大概有三个步骤：</p>

<ol>
<li>使用<code>flag.XXX</code>函数定义参数名及保存参数的变量</li>
<li>调用<code>flag.Parse()</code>进行参数的解析，解析结果被保存在定义的各个变量里</li>
<li>读取这些变量值</li>
</ol>


<p>但docker里定义参数的函数和标准库不太一样，docker的flag可以使用参数名数组来定义参数。比如在标准flag库里定义一个显示版本号的参数：</p>

<pre><code>flVersion = flag.Bool("v", false, "Print version information and quit")
</code></pre>

<p>但在docker里是这样定义的：</p>

<figure class='code'><figcaption><span>docker/docker.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">flVersion</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">Bool</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;v&quot;</span><span class="p">,</span> <span class="s">&quot;-version&quot;</span><span class="p">},</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&quot;Print version information and quit&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以即可以使用<code>docker -v</code>也可以使用<code>docker --version</code>来显示版本号。</p>

<h3>docker的实现</h3>

<p>docker在这里玩了个小trick，首先它重写了标准库的flag，并将包名由<code>flag</code>改成<code>mflag</code>，然后这样导入包：</p>

<pre><code>import flag "github.com/dotcloud/docker/pkg/mflag"
</code></pre>

<p>所以在docker里造成直接使用flag的假象。</p>

<p>那么，docker是怎样实现多多参数名的支持的？</p>

<p>首先，mflag将<code>Flag</code>的结构体定义参数名<code>Name</code>修改成数组形式<code>Names</code>：</p>

<figure class='code'><figcaption><span>pkg/mflag/flag.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Flag</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Names</span>    <span class="p">[]</span><span class="kt">string</span> <span class="c1">// name as it appears on command line</span>
</span><span class='line'>    <span class="nx">Usage</span>    <span class="kt">string</span>   <span class="c1">// help message</span>
</span><span class='line'>    <span class="nx">Value</span>    <span class="nx">Value</span>    <span class="c1">// value as set</span>
</span><span class='line'>    <span class="nx">DefValue</span> <span class="kt">string</span>   <span class="c1">// default value (as text); for usage message</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后还利用了flag标准库本身的特性，在同一个变量上可以绑定多个参数名:</p>

<pre><code>var de string
flag.String(&amp;de,"a","","argument")
flag.String(&amp;de,"b","","argument")
</code></pre>

<p>即可以用<code>cmd -a val</code>也可以用<code>cmd -b val</code>来调用，变量de的值都会被绑定为<code>val</code>。</p>

<p>除此之外，docker的<code>mflag</code>包还多定义了一种“隐藏参数”：以<code>#</code>开头来定义参数名：</p>

<pre><code>flag.Bool([]string{"#iptables", "-iptables"}, true, "Enable Docker's addition of iptables rules")
</code></pre>

<p>即，使用<code>-iptables</code>和<code>--iptables</code>都是有效的，但是在显示<code>Usage</code>时仅显示<code>--iptables</code>参数的使用说明，这是docker在不断升级更新时，所采用的一种兼容策略吧，允许旧参数的使用并给出警告，但以无帮助信息的方式不推荐旧参数。</p>

<p>实际实现也很简单，就是在帮助函数里去除对旧参数的说明：</p>

<figure class='code'><figcaption><span>pkg/mflag/flag.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">FlagSet</span><span class="p">)</span> <span class="nx">PrintDefaults</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">f</span><span class="p">.</span><span class="nx">VisitAll</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">flag</span> <span class="o">*</span><span class="nx">Flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">format</span> <span class="o">:=</span> <span class="s">&quot;  -%s=%s: %s\n&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">Value</span><span class="p">.(</span><span class="o">*</span><span class="nx">stringValue</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// put quotes on the value</span>
</span><span class='line'>            <span class="nx">format</span> <span class="p">=</span> <span class="s">&quot;  -%s=%q: %s\n&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">names</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{}</span>
</span><span class='line'>        <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">name</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">Names</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="nx">name</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;#&#39;</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">names</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">names</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">names</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">out</span><span class="p">(),</span> <span class="nx">format</span><span class="p">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">Join</span><span class="p">(</span><span class="nx">names</span><span class="p">,</span> <span class="s">&quot;, -&quot;</span><span class="p">),</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">DefValue</span><span class="p">,</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">Usage</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在10-12行，如果参数名定义时以<code>#</code>开头则不打印参数帮助。</p>

<p>好吧，参数解析源码其实和标准库大部分都是一样的，看到不一样的地方就行了，今天就到这里吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sort]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/04/15/sort/"/>
    <updated>2014-04-15T20:57:34+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/04/15/sort</id>
    <content type="html"><![CDATA[<h3>sort排序常用参数</h3>

<p>-n : 按照数值排序</p>

<p>-u : 过滤重复的行</p>

<p>-r : 降序排序，默认升序</p>

<p>-t : 指定分段符号</p>

<p>-k : 按照第几个字段(1&hellip;)排序</p>

<p>默认sort是按照字符排序的。</p>

<h3>sort临时目录</h3>

<p>默认情况下sort使用<code>/tmp</code>作为临时文件存放目录，如果根分区很小，可能造成分区磁盘飙升，为避免这种情况可以使用<code>-T</code>参数来指定sort的临时目录：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sort -T /path/to/tmp_directory
</span></code></pre></td></tr></table></div></figure>


<h3>sort不为人知的一个深坑</h3>

<p>默认情况下，sort将排序对象作为字符串进行排序，并且声称按照ANSII字母顺序进行排序，实际上，如果系统的<code>LC_ALL</code>环境变量为空的话，sort的排序并不一定是按字母顺序进行排序的，这会导致sort的下游依赖程序运行得不稳定，所以，如果要确保sort正确排序，需要正确设置环境变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>C
</span></code></pre></td></tr></table></div></figure>


<p>为什么这样设置，可以<code>man sort</code>看一下它的warning部分的说明。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[server load]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/27/server-load/"/>
    <updated>2014-03-27T09:39:14+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/27/server-load</id>
    <content type="html"><![CDATA[<h3>先看几个处理器</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grep -c <span class="s1">&#39;model name&#39;</span> /proc/cpuinfo
</span></code></pre></td></tr></table></div></figure>


<p>比如结果是4</p>

<h3>top查看系统整体情况</h3>

<p>执行<code>top</code>命令查看系统负载情况：
1. 关注<code>load average</code>系统负载的当前，5分钟前，15分钟前负载，最好小于cpu个数
2. 第二行显示系统进程概况
3. 第四行us用户占用cpu，sy系统占用cpu，ni，id空闲比例，wa io等待，hi，si swap交换
4. 最后是内存情况和交换分区</p>

<h3>iostat检查io情况</h3>

<p><code>iostat -x</code>，需要关注await即io等待时间，单位ms，一般要小于5ms； %util是io处理时间除以总时间，代表io繁忙度，大于70%需要注意。</p>

<!--more-->


<h3>vmstat查看系统概况</h3>

<pre><code>procs -----------memory---------- ---swap-- -----io---- --system-- ----cpu----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in    cs us sy id wa
 1  0 409548 3317764  56864 39709176    0    0    12    29    0     0  4  1 96  0
</code></pre>

<p> 主要看r和b，代表当前执行进程和阻塞进程，当r长期大于cpu个数需要注意，还有阻塞进程过多也需要注意</p>

<h3>ps和pstree查看进程</h3>

<p>查看线程个数可以用<code>cat /proc/PID/status|grep Threads</code>，另外对于ps，可以这样查看具体线程</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ps -mp PID -o THREAD,tid,time
</span></code></pre></td></tr></table></div></figure>


<p>如：</p>

<pre><code>USER     %CPU PRI SCNT WCHAN  USER SYSTEM   TID     TIME
work      1.8   -    - -         -      -     - 15:08:33
work      0.0  14    - -         -      - 11750 00:00:00
work      0.0  23    - -         -      - 11751 00:00:14
work      0.0  23    - -         -      - 11760 00:03:36
</code></pre>

<p>关注%CPU占用cpu情况，TID是线程id，TIME是占用cpu的时间长。</p>

<p>对于java进程可以用来调试程序：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># tid 转为16进制</span>
</span><span class='line'><span class="nb">printf</span> <span class="s2">&quot;%x\n&quot;</span> tid
</span><span class='line'>jstack PID | grep tid -A 50
</span></code></pre></td></tr></table></div></figure>


<h3>怎么启动这个程序的</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pmap PID
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
