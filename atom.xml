<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jason's space]]></title>
  <link href="http://qjpcpu.github.io/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2018-02-08T09:40:15+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[深入ethereum源码-whisper协议解读]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/02/07/shen-ru-ethereumyuan-ma-whisperxie-yi-jie-du/"/>
    <updated>2018-02-07T16:13:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/02/07/shen-ru-ethereumyuan-ma-whisperxie-yi-jie-du</id>
    <content type="html"><![CDATA[<p>whisper协议是以太坊DApps之间的通信协议。</p>

<!-- more -->

<h1 id="section">概述</h1>

<p>whisper是完全基于<code>ID</code>的消息系统,它的设计目的是形成一套p2p节点间的异步广播系统。whisper网络上的消息是加密传送的,完全可以暴露在公网进行传输;此外,为了防范<code>DDos</code>攻击,whisper使用了<code>proof-of-work(PoW)</code>工作量证明提高消息发送门槛。</p>

<h1 id="whisper">whisper基础构件</h1>

<p>whisper协议对上层暴露出一套类似于<code>订阅-发布</code>的API模型,节点可以申请自己感兴趣的<code>topic</code>，那么就只会接收到这些<code>topic</code>的消息,无关主题的消息将被丢弃。在这套体系内，有几个基础构件需要说明下:</p>

<h2 id="envelope">Envelope信封</h2>

<p><code>envelope即信封</code>是whisper网络节点传输数据的基本形式。信封包含了加密的数据体和明文的元数据,元数据主要用于基本的消息校验和消息体的解密。</p>

<p>信封是以RLP编码的格式传输:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[ Version, Expiry, TTL, Topic, AESNonce, Data, EnvNonce ]</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>Version</code>:最多4字节(目前仅使用了1字节)，如果信封的<code>Version</code>比本节点当前值高,将无法解密,仅做转发</li>
  <li><code>Expiry</code>:4字节（unix时间戳秒数）,过期时间</li>
  <li><code>TTL</code>:4字节,剩余存活时间秒数</li>
  <li><code>Topic</code>:4字节,信封主题</li>
  <li><code>AESNonce</code>:12字节随机数据,仅在对称加密时有效</li>
  <li><code>Data</code>:消息体</li>
  <li><code>EnvNonce</code>:8字节任意数据(用于PoW计算)</li>
</ul>

<p>如果节点无法解密信封，那么节点对信封内的消息内容一无所知，单这并不影响节点将消息进行转发扩散。</p>

<h2 id="message">Message消息</h2>

<p>信封内的消息体解密后即得到消息内容。</p>

<h2 id="topic">Topic主题</h2>

<p>每个信封上都有一个主题,注意主题可以仅使用部分前缀</p>

<h2 id="filter">Filter过滤器</h2>

<p><code>filter</code>即<code>订阅-发布</code>模型中的订阅者</p>

<h2 id="pow">PoW工作量证明</h2>

<p><code>PoW</code>的存在是为了反垃圾信息以及降低网络负担。计算PoW所付出的代价可以理解为抵扣节点为传播和存储信息锁花费的资源.</p>

<p>在<code>whisperv5</code>中,<code>PoW</code>定义为:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">PoW = (2^BestBit) / (size * TTL)</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>BestBit</code>是hash计算值的前导0个数</li>
  <li><code>size</code>是消息大小</li>
  <li><code>TTL</code></li>
</ul>

<p>具有高<code>PoW</code>的消息具有优先处理权。</p>

<h1 id="section-1">通信流程</h1>

<p>whisper协议的实现位于包<code>github.com/ethereum/go-ethereum/whisper</code>，该包下面有多个版本实现,目前最新协议包是<code>whisperv6</code>.</p>

<h2 id="whisper-main-loop">whisper main loop</h2>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/whisper-main-loop.png" alt="whisper-main-loop" /></p>

<p>whisper节点启动后产生两个分支:</p>

<ul>
  <li>一个分支负责清理<code>shh.envelopes</code>中的过期消息</li>
  <li>另一个分支(proccessQueue)从两个队列取出新接收到的消息,根据消息对应topic投放(Trigger)到对应接收者(filter),从而交付给上层应用进行处理</li>
</ul>

<p>补充说下whisper里两个队列<code>messageQueue,p2pMsgQueue</code>的不同作用,<code>messageQueue</code>接收普通的广播消息,<code>p2pMsgQueue</code>接收点对点的直接消息,可绕过<code>pow</code>和<code>ttl</code>限制.</p>

<h2 id="whisper-protocol">whisper protocol</h2>

<p>whisper协议的具体实现里,代码流程也非常清晰:</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/whisper-peer-loop.png" alt="whisper-peer-loop" /></p>

<p>每个peer连接成功后,产生两个goroutine,进行消息接收和广播:</p>

<ul>
  <li>接收消息协程不断从连接中读取新消息,并且将消息暂存到<code>shh.envelopes</code>中,如果发现是一条未接收过的新消息,则将消息转发到对应的队列<code>(messageQueue,p2pMsgQueue)</code></li>
  <li>广播协程负责将该peer未接收过的消息(本节点认为该peer未接收过,并非peer一定没接收过,p2p网络其他节点可能已经将消息广播到该节点了)投递到该peer</li>
</ul>

<h1 id="section-2">消息收发</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入ethereum源码-p2p模块节点发现机制]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/01/30/shen-ru-ethereumyuan-ma-p2pmo-kuai-jie-dian-fa-xian-ji-zhi/"/>
    <updated>2018-01-30T11:40:37+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/01/30/shen-ru-ethereumyuan-ma-p2pmo-kuai-jie-dian-fa-xian-ji-zhi</id>
    <content type="html"><![CDATA[<p>ethereum是基于kademlia协议实现其节点自动发现机制,完整整个网络拓扑关系的构建刷新。
<!-- more --></p>

<ul id="markdown-toc">
  <li><a href="#kademlia">Kademlia协议</a></li>
  <li><a href="#kademlia-like">以太坊Kademlia-like协议</a></li>
  <li><a href="#section">源码跟踪以太坊节点发现机制</a>    <ul>
      <li><a href="#refreshloop">1. <code>refreshLoop()</code></a></li>
      <li><a href="#loopreadloop">2. <code>loop()</code>和<code>readLoop()</code></a></li>
    </ul>
  </li>
  <li><a href="#section-1">内网穿透</a></li>
  <li><a href="#section-2">参考文献</a></li>
</ul>

<h1 id="kademlia">Kademlia协议</h1>

<blockquote>
  <p>以下内容摘自维基百科,全文查看参考文献Kademlia</p>
</blockquote>

<p>Kademlia是一种通过分散式杂凑表实现的协议算法，它是由Petar和David为非集中式P2P计算机网络而设计的。Kademlia规定了网络的结构，也规定了通过节点查询进行信息交换的方式。Kademlia网络节点之间使用UDP进行通讯。参与通讯的所有节点形成一张虚拟网（或者叫做覆盖网）。这些节点通过一组数字（或称为节点ID）来进行身份标识。节点ID不仅可以用来做身份标识，还可以用来进行值定位。</p>

<p>Kademlia路由表由多个列表组成，每个列表对应节点ID的一位（例如：假如节点ID共有128位，则节点的路由表将包含128个列表），包含多个条目，条目中包含定位其他节点所必要的一些数据。列表条目中的这些数据通常是由其他节点的IP地址，端口和节点ID组成。每个列表对应于与节点相距特定范围距离的一些节点，节点的第n个列表中所找到的节点的第n位与该节点的第n位肯定不同，而前n-1位相同，这就意味着很容易使用网络中远离该节点的一半节点来填充第一个列表（第一位不同的节点最多有一半），而用网络中四分之一的节点来填充第二个列表（比第一个列表中的那些节点离该节点更近一位），依次类推。如果ID有128个二进制位，则网络中的每个节点按照不同的异或距离把其他所有的节点分成了128类，ID的每一位对应于其中的一类。随着网络中的节点被某节点发现，它们被逐步加入到该节点的相应的列表中，这个过程中包括向节点列表中存信息和从节点列表中取信息的操作，甚至还包括当时协助其他节点寻找相应键对应值的操作。这个过程中发现的所有节点都将被加入到节点的列表之中，因此节点对整个网络的感知是动态的，这使得网络一直保持着频繁地更新，增强了抵御错误和攻击的能力。</p>

<p>在Kademlia相关的论文中，列表也称为K桶，其中K是一个系统变量，如20，每一个K桶是一个最多包含K个条目的列表，也就是说，网络中所有节点的一个列表（对应于某一位，与该节点相距一个特定的距离）最多包含20个节点。随着对应的bit位变低（即对应的异或距离越来越短），K桶包含的可能节点数迅速下降（这是由于K桶对应的异或距离越近，节点数越少），因此，对应于更低bit位的K桶显然包含网络中所有相关部分的节点。由于网络中节点的实际数量远远小于可能ID号的数量，所以对应那些短距离的某些K桶可能一直是空的（如果异或距离只有1，可能的数量就最大只能为1，这个异或距离为1的节点如果没有发现，则对应于异或距离为1的K桶则是空的）。</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/6/63/Dht_example_SVG.svg" alt="kademlia example" /></p>

<p>让我们看上面的那个简单网络，该网络最大可有2^3，即8个关键字和节点，目前共有7个节点加入，每个节点用一个小圈表示（在树的底部）。我们考虑那个用黑圈标注的节点6，它共有3个K桶，节点0，1和2（二进制表示为000，001和010）是第一个K桶的候选节点，节点3目前（二进制表示为011）还没有加入网络，节点4和节点5（二进制表示分别为100和101）是第二个K桶的候选节点，只有节点7（二进制表示为111）是第3个K桶的候选节点。图中，3个K桶都用灰色圈表示，假如K桶的大小（即K值）是2，那么第一个K桶只能包含3个节点中的2个。众所周知，那些长时间在线连接的节点未来长时间在线的可能性更大，基于这种静态统计分布的规律，Kademlia选择把那些长时间在线的节点存入K桶，这一方法增长了未来某一时刻有效节点的数量，同时也提供了更为稳定的网络。当某个K桶已满，而又发现了相应于该桶的新节点的时候，那么，就首先检查K桶中最早访问的节点，假如该节点仍然存活，那么新节点就被安排到一个附属列表中（作为一个替代缓存）.只有当K桶中的某个节点停止响应的时候，替代cache才被使用。换句话说，新发现的节点只有在老的节点消失后才被使用。</p>

<h1 id="kademlia-like">以太坊Kademlia-like协议</h1>

<p>以太坊的kademlia网(简称kad)和标准kad网有部分差异.</p>

<p>下面对照以太坊源码,阐述下kad网里几个概念:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/p2p/discover/table.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">const</span> <span class="p">(</span>
</span><span class="line">    <span class="nx">alpha</span>      <span class="p">=</span> <span class="mi">3</span>                      <span class="c1">// Kademlia并发参数</span>
</span><span class="line">    <span class="nx">bucketSize</span> <span class="p">=</span> <span class="mi">16</span>                     <span class="c1">// Kademlia K桶大小(可容纳节点数)</span>
</span><span class="line">    <span class="nx">hashBits</span>   <span class="p">=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span><span class="p">{})</span> <span class="o">*</span> <span class="mi">8</span> <span class="c1">// 每个节点ID长度,32*8=256, 32位16进制</span>
</span><span class="line">    <span class="nx">nBuckets</span>   <span class="p">=</span> <span class="nx">hashBits</span> <span class="o">+</span> <span class="mi">1</span>           <span class="c1">// K桶个数</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>α</code>即代码里的<code>alpha</code>,是系统内一个优化参数,控制每次从K桶最多取出节点个数,ethereum取值3</li>
  <li><code>bucketSize</code>,K桶大小,ethereum取16</li>
  <li><code>hashBits</code>,节点长度256位</li>
  <li><code>nBuckets</code>,K桶个数,目前取257</li>
</ul>

<p>以太坊Kad网总共定义了4种消息类型:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/p2p/discover/udp.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">const</span> <span class="p">(</span>
</span><span class="line">    <span class="nx">pingPacket</span> <span class="p">=</span> <span class="kc">iota</span> <span class="o">+</span> <span class="mi">1</span> <span class="c1">// ping操作</span>
</span><span class="line">    <span class="nx">pongPacket</span>            <span class="c1">// pong操作</span>
</span><span class="line">
</span><span class="line">    <span class="nx">findnodePacket</span>        <span class="c1">// find node节点查询</span>
</span><span class="line">    <span class="nx">neighborsPacket</span>       <span class="c1">// neighbors邻居回应</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>ping</code>和<code>pong</code>是一对操作,用于检测节点活性,节点收到<code>ping</code>消息后立即回复<code>pong</code>响应:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// 收到ping消息的响应函数</span>
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">ping</span><span class="p">)</span> <span class="nx">handle</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">udp</span><span class="p">,</span> <span class="nx">from</span> <span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">,</span> <span class="nx">fromID</span> <span class="nx">NodeID</span><span class="p">,</span> <span class="nx">mac</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 向ping消息发送方回复pong</span>
</span><span class="line">    <span class="nx">t</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">pongPacket</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">pong</span><span class="p">{</span>
</span><span class="line">        <span class="nx">To</span><span class="p">:</span>         <span class="nx">makeEndpoint</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">From</span><span class="p">.</span><span class="nx">TCP</span><span class="p">),</span>
</span><span class="line">        <span class="nx">ReplyTok</span><span class="p">:</span>   <span class="nx">mac</span><span class="p">,</span>
</span><span class="line">        <span class="nx">Expiration</span><span class="p">:</span> <span class="nb">uint64</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">Add</span><span class="p">(</span><span class="nx">expiration</span><span class="p">).</span><span class="nx">Unix</span><span class="p">()),</span>
</span><span class="line">    <span class="p">})</span>
</span><span class="line">    <span class="k">if</span> <span class="p">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">handleReply</span><span class="p">(</span><span class="nx">fromID</span><span class="p">,</span> <span class="nx">pingPacket</span><span class="p">,</span> <span class="nx">req</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// 成功完成一次ping-pong,更新K桶节点信息</span>
</span><span class="line">        <span class="k">go</span> <span class="nx">t</span><span class="p">.</span><span class="nx">bond</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="nx">fromID</span><span class="p">,</span> <span class="nx">from</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">From</span><span class="p">.</span><span class="nx">TCP</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>findnode</code>和<code>neighbors</code>是一对操作.</p>

<p><code>findnode</code>用于查找与某节点相距最近的节点,查找到后以<code>neighbors</code>类型消息回复查找发起者</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// 收到findnode消息的响应函数</span>
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">findnode</span><span class="p">)</span> <span class="nx">handle</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">udp</span><span class="p">,</span> <span class="nx">from</span> <span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">,</span> <span class="nx">fromID</span> <span class="nx">NodeID</span><span class="p">,</span> <span class="nx">mac</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="nx">target</span> <span class="o">:=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">Keccak256Hash</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">Target</span><span class="p">[:])</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 从本节点路由表里查找于target节点相距最近的bucketSize的节点</span>
</span><span class="line">    <span class="nx">closest</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">closest</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">bucketSize</span><span class="p">).</span><span class="nx">entries</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">
</span><span class="line">    <span class="nx">p</span> <span class="o">:=</span> <span class="nx">neighbors</span><span class="p">{</span><span class="nx">Expiration</span><span class="p">:</span> <span class="nb">uint64</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">Add</span><span class="p">(</span><span class="nx">expiration</span><span class="p">).</span><span class="nx">Unix</span><span class="p">())}</span>
</span><span class="line">    <span class="c1">// 回复查询发起方</span>
</span><span class="line">    <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">n</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">closest</span> <span class="p">{</span>
</span><span class="line">        <span class="o">...</span>
</span><span class="line">        <span class="nx">t</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">neighborsPacket</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">p</span><span class="p">)</span>
</span><span class="line">        <span class="o">...</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section">源码跟踪以太坊节点发现机制</h1>

<p>了解了以太坊的4种基本操作以及kad网络概念,我们就可以来看看节点发现机制怎么流转起来的:</p>

<p>节点发现的代码位于<code>github.com/ethereum/go-ethereum/p2p/discover</code>包。</p>

<p>首先,在节点启动时启动UDP”端口监听”:<code>server.Start() ==&gt; discover.ListenUDP ==&gt; newUDP()</code></p>

<p><code>newUDP()</code>分叉出去三个流程,三个流程均是无限循环:</p>

<ul>
  <li><code>func (tab *Table) refreshLoop()</code></li>
  <li><code>func (t *udp) loop()</code></li>
  <li><code>func (t *udp) readLoop(unhandled chan ReadPacket)</code></li>
</ul>

<h4 id="refreshloop">1. <code>refreshLoop()</code></h4>

<p>该流程每隔1小时或按需刷新K桶,核心逻辑实现位于<code>doRefresh</code>函数:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>github.com/ethereum/go-ethereum/p2p/discover/table.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">tab</span> <span class="o">*</span><span class="nx">Table</span><span class="p">)</span> <span class="nx">doRefresh</span><span class="p">(</span><span class="nx">done</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 和标准Kademlia协议选取最旧的K桶进行刷新不同，以太坊选取一个随机节点ID作为刷新基点</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">target</span> <span class="nx">NodeID</span>
</span><span class="line">    <span class="nx">rand</span><span class="p">.</span><span class="nx">Read</span><span class="p">(</span><span class="nx">target</span><span class="p">[:])</span>
</span><span class="line">    <span class="c1">// lookup函数是最kad网最核心函数,查询离target最近一批节点</span>
</span><span class="line">    <span class="nx">result</span> <span class="o">:=</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 如果没找到,则从本地节点数据库加载预配置的种子节点到对应K桶</span>
</span><span class="line">    <span class="nx">seeds</span> <span class="o">:=</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">querySeeds</span><span class="p">(</span><span class="nx">seedCount</span><span class="p">,</span> <span class="nx">seedMaxAge</span><span class="p">)</span>
</span><span class="line">    <span class="nx">seeds</span> <span class="p">=</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">bondall</span><span class="p">(</span><span class="nb">append</span><span class="p">(</span><span class="nx">seeds</span><span class="p">,</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">nursery</span><span class="o">...</span><span class="p">))</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 最后,以自身作为目标节点,刷新K桶</span>
</span><span class="line">    <span class="nx">tab</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="nx">tab</span><span class="p">.</span><span class="nx">self</span><span class="p">.</span><span class="nx">ID</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>tab.lookup</code>函数虽然关键,然而其逻辑其实是很简单的:</p>

<p>a. 查询离target最近一批节点,距离计算即对kad网络XOR(异或)距离计算的实现</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">tab</span> <span class="o">*</span><span class="nx">Table</span><span class="p">)</span> <span class="nx">closest</span><span class="p">(</span><span class="nx">target</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span><span class="p">,</span> <span class="nx">nresults</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="nx">nodesByDistance</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 遍历本地路由节点表</span>
</span><span class="line">    <span class="nx">close</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">nodesByDistance</span><span class="p">{</span><span class="nx">target</span><span class="p">:</span> <span class="nx">target</span><span class="p">}</span>
</span><span class="line">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">b</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">buckets</span> <span class="p">{</span>
</span><span class="line">        <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">n</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">b</span><span class="p">.</span><span class="nx">entries</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">close</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">nresults</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">close</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="c1">// close.push最终调用distcmp进行异或计算</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">distcmp</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Hash</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class="line">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">target</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">da</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">^</span> <span class="nx">target</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class="line">        <span class="nx">db</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">^</span> <span class="nx">target</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">da</span> <span class="p">&gt;</span> <span class="nx">db</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">da</span> <span class="p">&lt;</span> <span class="nx">db</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>b. 迭代上一步查到的所有节点,向这些节点发起<code>findnode</code>操作查询离target节点最近的节点列表,将查询得到的节点进行<code>ping-pong</code>测试,将测试通过的节点落库保存</p>

<p>经过这个流程后,节点的K桶就能够比较均匀地将不同网络节点更新到本地K桶中。</p>

<h4 id="loopreadloop">2. <code>loop()</code>和<code>readLoop()</code></h4>

<p>这两个循环流程放在一起说,它们主要是一个工程实现,将异步调用代码通过channel串接成同步。业务上主要是负责处理<code>ping,pong,findnode,neighbors</code>四个消息类型的收发。</p>

<p>唯一值得稍加阐述的可能只有<code>pending</code>结构:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="c1">// pending实现了一种延迟处理逻辑</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">// 它主要有两个作用:</span>
</span><span class="line"><span class="c1">// 1. 提供回调机制,当某一个操作发起异步请求时,就使用pending结构封装一个闭包,当收到异步回复后从pending列表取出这个闭包,执行回调,因此在这个回调里可以完成数据包校验等后处理</span>
</span><span class="line"><span class="c1">// 如findnode操作将更新k桶的操作暂存,再获取到异步回复后执行这个闭包完成k桶更新</span>
</span><span class="line"><span class="c1">// 2. 提供多个回复接收功能,一个RPC请求可能会对应多个回复包,比如findnode对应多个neigbours回复包,此时可以提供多个pending进行逐个包校验</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">pending</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 来源节点</span>
</span><span class="line">    <span class="nx">from</span>  <span class="nx">NodeID</span>
</span><span class="line">    <span class="nx">ptype</span> <span class="kt">byte</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 调用超时丢弃pending结构</span>
</span><span class="line">    <span class="nx">deadline</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 回调函数,简单而强大</span>
</span><span class="line">    <span class="nx">callback</span> <span class="kd">func</span><span class="p">(</span><span class="nx">resp</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">(</span><span class="nx">done</span> <span class="kt">bool</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="nx">errc</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">error</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>综述,邻居节点发现流程:</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/eth_kad.jpeg" alt="kademlia" /></p>

<p>节点第一次启动读取公共种子节点信息,已本节点ID作为target更新本地K桶,然后每隔一段时间进行节点更新, 刷新K桶流程如下:</p>

<p>a. 随机生成目标节点Id，记为TargetId，从1开始记录发现次数和刷新时间。</p>

<p>b. 在当前节点的K桶里查找与目标节点最近的16个节点</p>

<p>c. 向b中得到的每个节点发送findnode命令,接收到每个节点传回的neighbours节点</p>

<p>d. 对c返回的每个节点进行ping-pong测试然后更新到本地k桶</p>

<h1 id="section-1">内网穿透</h1>

<p>ethereum是基于p2p通信的,所有的操作都有可能涉及到内网穿透,而目前内网穿透最常用的方法是udp打洞,这也是kad网络使用udp作为基础通信协议的原因。</p>

<p>一个简单的udp打通进行p2p通信的例子讲解可以参考<a href="http://qjpcpu.github.io/blog/2018/01/29/shen-ru-ethereumyuan-ma-p2pmo-kuai-ji-chu-jie-gou/">深入ethereum源码-p2p模块基础结构</a>。</p>

<p>然而以太坊里将这部分逻辑全部隐藏,可以在节点初始化函数里看出一点痕迹:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">srv</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nx">Start</span><span class="p">()</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">addr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">ResolveUDPAddr</span><span class="p">(</span><span class="s">&quot;udp&quot;</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">ListenAddr</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="nx">err</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">ListenUDP</span><span class="p">(</span><span class="s">&quot;udp&quot;</span><span class="p">,</span> <span class="nx">addr</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="nx">err</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="nx">realaddr</span> <span class="p">=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">LocalAddr</span><span class="p">().(</span><span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">NAT</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">!</span><span class="nx">realaddr</span><span class="p">.</span><span class="nx">IP</span><span class="p">.</span><span class="nx">IsLoopback</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">                <span class="c1">// 进行内网网端口映射</span>
</span><span class="line">                <span class="k">go</span> <span class="nx">nat</span><span class="p">.</span><span class="nx">Map</span><span class="p">(</span><span class="nx">srv</span><span class="p">.</span><span class="nx">NAT</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">quit</span><span class="p">,</span> <span class="s">&quot;udp&quot;</span><span class="p">,</span> <span class="nx">realaddr</span><span class="p">.</span><span class="nx">Port</span><span class="p">,</span> <span class="nx">realaddr</span><span class="p">.</span><span class="nx">Port</span><span class="p">,</span> <span class="s">&quot;ethereum discovery&quot;</span><span class="p">)</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="c1">// TODO: react to external IP changes over time.</span>
</span><span class="line">            <span class="k">if</span> <span class="nx">ext</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">NAT</span><span class="p">.</span><span class="nx">ExternalIP</span><span class="p">();</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">                <span class="nx">realaddr</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">{</span><span class="nx">IP</span><span class="p">:</span> <span class="nx">ext</span><span class="p">,</span> <span class="nx">Port</span><span class="p">:</span> <span class="nx">realaddr</span><span class="p">.</span><span class="nx">Port</span><span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>首先，以太坊tcp/udp共用了一个端口,然后使用uPnp协议簇进行内外网端口映射,完成链路打通,从而穿透内网.</p>

<p>具体封装位于<code>nat</code>模块,但具体实现也是使用了三方库<a href="https://github.com/huin/goupnp">goupnp</a>.具体实现是关于uPnP的一个大话题,就不在这里分叉出去了。</p>

<h1 id="section-2">参考文献</h1>

<ul>
  <li><a href="https://zh.wikipedia.org/wiki/Kademlia">Kademlia</a></li>
  <li><a href="http://www.yeolar.com/note/2010/03/21/kademlia/">Kademlia协议原理简介</a></li>
  <li><a href="https://github.com/ethereum/wiki/wiki/Node-discovery-protocol">Node discovery protocol</a></li>
  <li><a href="http://www.8btc.com/etc-p2p">P2P网络及节点发现机制</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入ethereum源码-p2p模块基础结构]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/01/29/shen-ru-ethereumyuan-ma-p2pmo-kuai-ji-chu-jie-gou/"/>
    <updated>2018-01-29T11:19:23+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/01/29/shen-ru-ethereumyuan-ma-p2pmo-kuai-ji-chu-jie-gou</id>
    <content type="html"><![CDATA[<p>(go-ethereum/p2p)包允许您快速方便地将对等网络添加到任何类型的应用程序。p2p包采用模块化结构,包含p2p网络节点通信维护及新节点发现,将网络结构的基础细节封装并向上层屏蔽,并且暴露了简单接口让上层实现子协议,上层应用使用自己的附加子协议扩展p2p非常简单直接.</p>

<p>如果将以太坊的p2p类比做tcp协议,那么p2p暴露出来的子协议就类似http,使得以太坊能够在基础p2p基础上构建出whisper网络。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#peer-to-peer">Peer to peer</a></li>
  <li><a href="#peer">peer接入</a></li>
  <li><a href="#rlp">数据传输格式RLP</a></li>
  <li><a href="#section">总述</a></li>
  <li><a href="#section-1">参考文献</a></li>
</ul>

<h1 id="peer-to-peer">Peer to peer</h1>

<p>在深入了解前,最好先看看基于p2p包怎么实现一个自己子协议,建立对其的直观印象</p>

<blockquote>
  <p>下面示例来基于官方[Peer to peer]wiki文档(官方文档有个小bug, ^_^),详细参考文献</p>
</blockquote>

<p>启动一个p2p节点仅需要对<code>p2p.Server</code>做一些简单配置:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">nodekey</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">GenerateKey</span><span class="p">()</span>
</span><span class="line"><span class="nx">srv</span> <span class="o">:=</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span>
</span><span class="line">    <span class="nx">Config</span><span class="p">:</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span><span class="line">        <span class="nx">MaxPeers</span><span class="p">:</span>   <span class="mi">10</span><span class="p">,</span>
</span><span class="line">        <span class="nx">PrivateKey</span><span class="p">:</span> <span class="nx">nodekey</span><span class="p">,</span>
</span><span class="line">        <span class="nx">Name</span><span class="p">:</span>       <span class="s">&quot;my node name&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="nx">ListenAddr</span><span class="p">:</span> <span class="s">&quot;:30300&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="nx">Protocols</span><span class="p">:</span>  <span class="p">[]</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">{},</span>
</span><span class="line">        <span class="nx">NAT</span><span class="p">:</span>        <span class="nx">nat</span><span class="p">.</span><span class="nx">Any</span><span class="p">(),</span>   <span class="c1">// 支持内网穿透</span>
</span><span class="line">        <span class="nx">Logger</span><span class="p">:</span>     <span class="nx">log</span><span class="p">.</span><span class="nx">New</span><span class="p">(),</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样启动的节点仅包含了以太坊自身的基础协议:</p>

<p>要实现自己的子协议,就需要拓展<code>Protocols:  []p2p.Protocol{}</code>,实现自己的<code>p2p.Protocol</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">MyProtocol</span><span class="p">()</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">{</span>                                                          <span class="c1">// 1.</span>
</span><span class="line">		<span class="nx">Name</span><span class="p">:</span>    <span class="s">&quot;MyProtocol&quot;</span><span class="p">,</span>                                                    <span class="c1">// 2.</span>
</span><span class="line">		<span class="nx">Version</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>                                                               <span class="c1">// 3.</span>
</span><span class="line">		<span class="nx">Length</span><span class="p">:</span>  <span class="mi">1</span><span class="p">,</span>                                                               <span class="c1">// 4.</span>
</span><span class="line">		<span class="nx">Run</span><span class="p">:</span>     <span class="kd">func</span><span class="p">(</span><span class="nx">peer</span> <span class="o">*</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Peer</span><span class="p">,</span> <span class="nx">ws</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">MsgReadWriter</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">},</span> <span class="c1">// 5.</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>一个子协议即一个<code>p2p.Protocol</code></li>
  <li>子协议名,需要唯一标识该子协议</li>
  <li>协议版本号,当一个子协议有多个版本时,采纳最高版本的协议</li>
  <li>该协议拥有的消息类型个数,因为p2p网络是可扩展的，因此其需要具有能够发送随意个数的信息的能力（需要携带type，在下文中我们能够看到说明）,p2p的handler需要知道应该预留多少空间以用来服务你的协议。这是也是共识信息能够通过message ID到达各个peer并实现协商的保障。我们的协议仅仅支持一种类型</li>
  <li>在你的协议主要的handler中，我们现在故意将其留空。这个peer变量是指代连接到当前节点，其携带了一些peer本身的信息。其ws变量是reader和writer允许你同该peer进行通信，如果信息能够发送到当前节点，则反之也能够从本节点发送到对端peer节点</li>
</ol>

<p>现在让我们将前面留空的handler代码实现，以让它能够同别的peer通信:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">const</span> <span class="nx">messageId</span> <span class="p">=</span> <span class="mi">0</span>   <span class="c1">// 1.</span>
</span><span class="line"><span class="kd">type</span> <span class="nx">Message</span> <span class="kt">string</span>   <span class="c1">// 2.</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">msgHandler</span><span class="p">(</span><span class="nx">peer</span> <span class="o">*</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Peer</span><span class="p">,</span> <span class="nx">ws</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">MsgReadWriter</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="k">for</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">msg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ws</span><span class="p">.</span><span class="nx">ReadMsg</span><span class="p">()</span>   <span class="c1">// 3.</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>            <span class="c1">// 4.</span>
</span><span class="line">            <span class="k">return</span> <span class="nx">err</span> <span class="c1">// if reading fails return err which will disconnect the peer.</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">var</span> <span class="nx">myMessage</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="nx">Message</span>
</span><span class="line">        <span class="nx">err</span> <span class="p">=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">myMessage</span><span class="p">)</span> <span class="c1">// 5.</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">            <span class="c1">// handle decode error</span>
</span><span class="line">            <span class="k">continue</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">switch</span> <span class="nx">myMessage</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">{</span>
</span><span class="line">        <span class="k">case</span> <span class="s">&quot;foo&quot;</span><span class="p">:</span>
</span><span class="line">            <span class="nx">err</span> <span class="o">:=</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">SendItems</span><span class="p">(</span><span class="nx">ws</span><span class="p">,</span> <span class="nx">messageId</span><span class="p">,</span> <span class="s">&quot;bar&quot;</span><span class="p">)</span>  <span class="c1">// 6.</span>
</span><span class="line">            <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">                <span class="k">return</span> <span class="nx">err</span> <span class="c1">// return (and disconnect) error if writing fails.</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">         <span class="k">default</span><span class="p">:</span>
</span><span class="line">             <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;recv:&quot;</span><span class="p">,</span> <span class="nx">myMessage</span><span class="p">)</span>
</span><span class="line">         <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>其中有且唯一的已知信息ID；</li>
  <li>将Messages alias 为string类型；</li>
  <li>ReadMsg将一直阻塞等待，直到其收到了一条新的信息，一个错误或者EOF；</li>
  <li>如果在读取流信息的过程当中收到了一个错误，最好的解决实践是将其返回给p2p server进行处理。这种错误通常是对端节点已经断开连接；</li>
  <li>msg包括两个属性和一个decode方法
    <ol>
      <li>Code 包括了信息ID，Code == messageId (i.e.0)</li>
      <li>Payload 是信息的内容</li>
      <li>Decode(<ptr>) 是一个工具方法：取得 msg.Payload并将其解码，并将其内容设置到传入的message指针中，如果失败了则返回一个error</ptr></li>
    </ol>
  </li>
  <li>如果解码出来的信息是foo将发回一个NewMessage并用messageId标记信息类型，信息内容是bar；而bar信息在被对端收到之后将被defaultcase捕获。</li>
</ol>

<p>现在，我们将上述的所有部分整合起来，得到下面的p2p样例代码:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/crypto&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/log&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/p2p&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/p2p/discover&quot;</span>
</span><span class="line">	<span class="s">&quot;github.com/ethereum/go-ethereum/p2p/nat&quot;</span>
</span><span class="line">	<span class="s">&quot;net&quot;</span>
</span><span class="line">	<span class="s">&quot;os&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">const</span> <span class="nx">messageId</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">Message</span> <span class="kt">string</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">MyProtocol</span><span class="p">()</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">{</span>
</span><span class="line">		<span class="nx">Name</span><span class="p">:</span>    <span class="s">&quot;MyProtocol&quot;</span><span class="p">,</span>
</span><span class="line">		<span class="nx">Version</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class="line">		<span class="nx">Length</span><span class="p">:</span>  <span class="mi">1</span><span class="p">,</span>
</span><span class="line">		<span class="nx">Run</span><span class="p">:</span>     <span class="nx">msgHandler</span><span class="p">,</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">nodekey</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">GenerateKey</span><span class="p">()</span>
</span><span class="line">	<span class="nx">logger</span> <span class="o">:=</span> <span class="nx">log</span><span class="p">.</span><span class="nx">New</span><span class="p">()</span>
</span><span class="line">	<span class="nx">logger</span><span class="p">.</span><span class="nx">SetHandler</span><span class="p">(</span><span class="nx">log</span><span class="p">.</span><span class="nx">StderrHandler</span><span class="p">)</span>
</span><span class="line">	<span class="nx">srv</span> <span class="o">:=</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span>
</span><span class="line">		<span class="nx">Config</span><span class="p">:</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span><span class="line">			<span class="nx">MaxPeers</span><span class="p">:</span>   <span class="mi">10</span><span class="p">,</span>
</span><span class="line">			<span class="nx">PrivateKey</span><span class="p">:</span> <span class="nx">nodekey</span><span class="p">,</span>
</span><span class="line">			<span class="nx">Name</span><span class="p">:</span>       <span class="s">&quot;my node name&quot;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">ListenAddr</span><span class="p">:</span> <span class="s">&quot;:30300&quot;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">Protocols</span><span class="p">:</span>  <span class="p">[]</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">{</span><span class="nx">MyProtocol</span><span class="p">()},</span>
</span><span class="line">			<span class="nx">NAT</span><span class="p">:</span>        <span class="nx">nat</span><span class="p">.</span><span class="nx">Any</span><span class="p">(),</span>
</span><span class="line">			<span class="nx">Logger</span><span class="p">:</span>     <span class="nx">logger</span><span class="p">,</span>
</span><span class="line">		<span class="p">},</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">Start</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;started..&quot;</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">())</span>
</span><span class="line">	<span class="k">select</span> <span class="p">{}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">msgHandler</span><span class="p">(</span><span class="nx">peer</span> <span class="o">*</span><span class="nx">p2p</span><span class="p">.</span><span class="nx">Peer</span><span class="p">,</span> <span class="nx">ws</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">MsgReadWriter</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">	<span class="k">for</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">msg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ws</span><span class="p">.</span><span class="nx">ReadMsg</span><span class="p">()</span>
</span><span class="line">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">			<span class="k">return</span> <span class="nx">err</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">
</span><span class="line">		<span class="kd">var</span> <span class="nx">myMessage</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="nx">Message</span>
</span><span class="line">		<span class="nx">err</span> <span class="p">=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">myMessage</span><span class="p">)</span>
</span><span class="line">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">			<span class="c1">// handle decode error</span>
</span><span class="line">			<span class="k">continue</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;code:&quot;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">Code</span><span class="p">,</span> <span class="s">&quot;receiver at:&quot;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">ReceivedAt</span><span class="p">,</span> <span class="s">&quot;msg:&quot;</span><span class="p">,</span> <span class="nx">myMessage</span><span class="p">)</span>
</span><span class="line">		<span class="k">switch</span> <span class="nx">myMessage</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">{</span>
</span><span class="line">		<span class="k">case</span> <span class="s">&quot;foo&quot;</span><span class="p">:</span>
</span><span class="line">			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">p2p</span><span class="p">.</span><span class="nx">SendItems</span><span class="p">(</span><span class="nx">ws</span><span class="p">,</span> <span class="nx">messageId</span><span class="p">,</span> <span class="s">&quot;bar&quot;</span><span class="p">)</span>
</span><span class="line">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">				<span class="k">return</span> <span class="nx">err</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">		<span class="k">default</span><span class="p">:</span>
</span><span class="line">			<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;recv:&quot;</span><span class="p">,</span> <span class="nx">myMessage</span><span class="p">)</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="peer">peer接入</h1>

<p>从上面的例子,我们可以看出来实现ethereum是非常便利的,那么下一步,我们可以看看一个节点是怎么处理新peer的接入的?梳理出这个接入过程,也就明白了节点间基本的数据流通方式.</p>

<p>首先,每个节点启动入口都在<code>func (srv *Server) Start() (err error)</code>.该函数调用<code>srv.startListening()</code>在传入的ip地址监听tcp连接:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">srv</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nx">startListening</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Launch the TCP listener.</span>
</span><span class="line">    <span class="nx">listener</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">ListenAddr</span><span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="k">go</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">listenLoop</span><span class="p">()</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 主执行逻辑</span>
</span><span class="line">    <span class="k">go</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">dialer</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当接收到一个新的tcp连接,节点开始检查并初始化peer</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">srv</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nx">setupConn</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">conn</span><span class="p">,</span> <span class="nx">flags</span> <span class="nx">connFlag</span><span class="p">,</span> <span class="nx">dialDest</span> <span class="o">*</span><span class="nx">discover</span><span class="p">.</span><span class="nx">Node</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 从这里开始,其实已经开始了ethereum的自有协议,doEncHandshake是RLPX协议的握手方法</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">doEncHandshake</span><span class="p">(</span><span class="nx">srv</span><span class="p">.</span><span class="nx">PrivateKey</span><span class="p">,</span> <span class="nx">dialDest</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">srv</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">Trace</span><span class="p">(</span><span class="s">&quot;Failed RLPx handshake&quot;</span><span class="p">,</span> <span class="s">&quot;addr&quot;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">fd</span><span class="p">.</span><span class="nx">RemoteAddr</span><span class="p">(),</span> <span class="s">&quot;conn&quot;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">flags</span><span class="p">,</span> <span class="s">&quot;err&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">err</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 两次握手消息代码(handshakeMsg = 0x00)和(discMsg = 0x01)</span>
</span><span class="line">    <span class="nx">phs</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">doProtoHandshake</span><span class="p">(</span><span class="nx">srv</span><span class="p">.</span><span class="nx">ourHandshake</span><span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// 握手完毕,将新连接对象*p2p.conn压入server.addpeer</span>
</span><span class="line">    <span class="nx">err</span> <span class="p">=</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">checkpoint</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">addpeer</span><span class="p">)</span>
</span><span class="line">    <span class="c1">// If the checks completed successfully, runPeer has now been</span>
</span><span class="line">    <span class="c1">// launched by run.</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面开始看<code>Start()</code>函数里的节点主逻辑,主逻辑位于<code>Start()</code>末尾的<code>srv.run()</code>,该函数逻辑较复杂,我们现在主要看新peer接入的代码:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">srv</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nx">run</span><span class="p">(</span><span class="nx">dialstate</span> <span class="nx">dialer</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="o">...</span>
</span><span class="line">      <span class="k">select</span><span class="p">{</span>
</span><span class="line">          <span class="o">...</span>
</span><span class="line">          <span class="k">case</span> <span class="nx">c</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">srv</span><span class="p">.</span><span class="nx">addpeer</span><span class="p">:</span>  <span class="c1">// 在这里取出之前压入addpeer的连接对象conn</span>
</span><span class="line">          <span class="c1">// 执行到这里表明握手完成,并且通过了节点验证</span>
</span><span class="line">          <span class="nx">err</span> <span class="o">:=</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">protoHandshakeChecks</span><span class="p">(</span><span class="nx">peers</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
</span><span class="line">          <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">              <span class="c1">// 创建节点peer对象,传入所有子协议实现,自己实现的子协议就是在这里传入peer的,传入的所以协议通过matchProtocols函数格式化组织</span>
</span><span class="line">              <span class="nx">p</span> <span class="o">:=</span> <span class="nx">newPeer</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">Protocols</span><span class="p">)</span>
</span><span class="line">              <span class="o">...</span>
</span><span class="line">              <span class="k">go</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">runPeer</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
</span><span class="line">          <span class="p">}</span>
</span><span class="line">          <span class="o">...</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="o">...</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里补充说一下<code>newPeer()</code>对子协议的一个组织方式:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">matchProtocols</span><span class="p">(</span><span class="nx">protocols</span> <span class="p">[]</span><span class="nx">Protocol</span><span class="p">,</span> <span class="nx">caps</span> <span class="p">[]</span><span class="nx">Cap</span><span class="p">,</span> <span class="nx">rw</span> <span class="nx">MsgReadWriter</span><span class="p">)</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">protoRW</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 按协议(name asc,version asc)排序子协议</span>
</span><span class="line">    <span class="nx">sort</span><span class="p">.</span><span class="nx">Sort</span><span class="p">(</span><span class="nx">capsByNameAndVersion</span><span class="p">(</span><span class="nx">caps</span><span class="p">))</span>
</span><span class="line">    <span class="c1">// 自定义协议偏移</span>
</span><span class="line">    <span class="nx">offset</span> <span class="o">:=</span> <span class="nx">baseProtocolLength</span>
</span><span class="line">    <span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">protoRW</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nx">outer</span><span class="p">:</span>
</span><span class="line">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">cap</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">caps</span> <span class="p">{</span>
</span><span class="line">        <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">proto</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">protocols</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="nx">proto</span><span class="p">.</span><span class="nx">Name</span> <span class="o">==</span> <span class="nx">cap</span><span class="p">.</span><span class="nx">Name</span> <span class="o">&amp;&amp;</span> <span class="nx">proto</span><span class="p">.</span><span class="nx">Version</span> <span class="o">==</span> <span class="nx">cap</span><span class="p">.</span><span class="nx">Version</span> <span class="p">{</span>
</span><span class="line">                <span class="c1">// If an old protocol version matched, revert it</span>
</span><span class="line">                <span class="k">if</span> <span class="nx">old</span> <span class="o">:=</span> <span class="nx">result</span><span class="p">[</span><span class="nx">cap</span><span class="p">.</span><span class="nx">Name</span><span class="p">];</span> <span class="nx">old</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">                    <span class="nx">offset</span> <span class="o">-=</span> <span class="nx">old</span><span class="p">.</span><span class="nx">Length</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">                <span class="c1">// Assign the new match</span>
</span><span class="line">                <span class="nx">result</span><span class="p">[</span><span class="nx">cap</span><span class="p">.</span><span class="nx">Name</span><span class="p">]</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">protoRW</span><span class="p">{</span><span class="nx">Protocol</span><span class="p">:</span> <span class="nx">proto</span><span class="p">,</span> <span class="nx">offset</span><span class="p">:</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">in</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">Msg</span><span class="p">),</span> <span class="nx">w</span><span class="p">:</span> <span class="nx">rw</span><span class="p">}</span>
</span><span class="line">                <span class="nx">offset</span> <span class="o">+=</span> <span class="nx">proto</span><span class="p">.</span><span class="nx">Length</span>
</span><span class="line">
</span><span class="line">                <span class="k">continue</span> <span class="nx">outer</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">result</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最终每个子协议以<code>name=&gt;protocol</code>的map格式组织起来,然后每个协议根据自身支持消息类型数量<code>Protocol.Length</code>在整个以太坊消息类型轴上占据了<code>[proto.offset,proto.offset+proto.Length)</code>的左闭右开消息类型段,理解这个结构,才好理解最终根据消息类型<code>Msg.Code</code>去找handler的逻辑(<code>func (p *Peer) getProto(code uint64) (*protoRW, error)</code>)。</p>

<p>下面继续看最终peer处理逻辑<code>srv.runPeer</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Peer</span><span class="p">)</span> <span class="nx">run</span><span class="p">()</span> <span class="p">(</span><span class="nx">remoteRequested</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c1">// peer逻辑里最重要两个循环逻辑</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 收取消息循环,核心逻辑是根据消息的代号proto, err := p.getProto(msg.Code),</span>
</span><span class="line">    <span class="c1">// 取得对应的子协议,然后投放到对应协议的读队列proto.in &lt;- msg</span>
</span><span class="line">    <span class="k">go</span> <span class="nx">p</span><span class="p">.</span><span class="nx">readLoop</span><span class="p">(</span><span class="nx">readErr</span><span class="p">)</span>
</span><span class="line">    <span class="c1">// 不停发送ping心跳包到远端peer</span>
</span><span class="line">    <span class="k">go</span> <span class="nx">p</span><span class="p">.</span><span class="nx">pingLoop</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 在startProtocols里最终调用我们自定义子协议的Run方法proto.Run(p, rw)</span>
</span><span class="line">    <span class="nx">p</span><span class="p">.</span><span class="nx">startProtocols</span><span class="p">(</span><span class="nx">writeStart</span><span class="p">,</span> <span class="nx">writeErr</span><span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="rlp">数据传输格式RLP</h1>

<p>以太坊数据传输都是基于RLP编码,下面文字摘自<a href="http://ethfans.org/posts/415">RLP编码原理</a></p>

<blockquote>
  <p>RLP(Recursive Length Prefix，递归长度前缀)是一种编码算法，用于编码任意的嵌套结构的二进制数据，它是以太坊中数据序列化/反序列化的主要方法，区块、交易等数据结构在持久化时会先经过RLP编码后再存储到数据库中</p>
</blockquote>

<p>定义</p>

<blockquote>
  <p>RLP编码的定义只处理两类数据：一类是字符串（例如字节数组），一类是列表。字符串指的是一串二进制数据，列表是一个嵌套递归的结构，里面可以包含字符串和列表，例如<code>["cat",["puppy","cow"],"horse",[[]],"pig",[""],"sheep"]</code>就是一个复杂的列表。其他类型的数据需要转成以上的两类，转换的规则不是RLP编码定义的，可以根据自己的规则转换，例如struct可以转成列表，int可以转成二进制（属于字符串一类），以太坊中整数都以大端形式存储。</p>
</blockquote>

<p>这部分代码均位于<code>github.com/ethereum/go-ethereum/rlp</code>包中,代码相对独立,我也没深入研究改算法,就不详细说明了。</p>

<h1 id="section">总述</h1>

<p>本文主要梳理了以太坊p2p模块的主流程,描述了核心的peer间数据读写的来龙去脉,从代码里也能够比较容易理解以太坊子协议的概念,理清这个主干流程,以后也就能够从每个细节发散开来,深入细节。</p>

<h1 id="section-1">参考文献</h1>

<ul>
  <li><a href="https://github.com/ethereum/go-ethereum">go-ethereum github地址</a></li>
  <li><a href="https://github.com/ethereum/go-ethereum/wiki/Peer-to-Peer">Peer to Peer</a></li>
  <li><a href="http://blog.csdn.net/teaspring/article/details/78455046">基于p2p的底层通信</a></li>
  <li><a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-RLP">RLP</a></li>
  <li><a href="http://ethfans.org/posts/415">RLP编码原理</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[p2p之UDP打洞]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/01/26/p2pzhi-udpda-dong/"/>
    <updated>2018-01-26T22:03:15+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/01/26/p2pzhi-udpda-dong</id>
    <content type="html"><![CDATA[<p>当今互联网到处存在着一些中间件(MIddleBoxes)，如NAT和防火墙，导致两个(不在同一内网)中的客户端无法直接通信。 这些问题即便是到了IPV6时代也会存在，因为即使不需要NAT，但还有其他中间件如防火墙阻挡了链接的建立。 目前部署的中间件多都是在C/S架构上设计的，其中相对隐匿的客户机主动向周知的服务端(拥有静态IP地址和DNS名称)发起链接请求。 大多数中间件实现了一种非对称的通讯模型，即内网中的主机可以初始化对外的链接，而外网的主机却不能初始化对内网的链接， 除非经过中间件管理员特殊配置。</p>

<p>在中间件为常见的NAPT的情况下（也是本文主要讨论的），内网中的客户端没有单独的公网IP地址， 而是通过NAPT转换，和其他同一内网用户共享一个公网IP。这种内网主机隐藏在中间件后的不可访问性对于一些客户端软件如浏览器来说 并不是一个问题，因为其只需要初始化对外的链接，从某方面来看反而还对隐私保护有好处。然而在P2P应用中， 内网主机（客户端）需要对另外的终端（Peer）直接建立链接，但是发起者和响应者可能在不同的中间件后面， 两者都没有公网IP地址。而外部对NAT公网IP和端口主动的链接或数据都会因内网未请求被丢弃掉。本文讨论的就是如何跨越NAT实现内网主机直接通讯的问题。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">网络模型</a></li>
  <li><a href="#section-1">打洞流程</a></li>
  <li><a href="#section-2">先决条件</a></li>
  <li><a href="#section-3">源码示例</a></li>
  <li><a href="#udptcp">udp打洞转tcp通信</a></li>
  <li><a href="#section-4">参考文献</a></li>
</ul>

<h1 id="section">网络模型</h1>

<p>假设客户端A和客户端B的地址都是内网地址，且在不同的NAT后面。A、B上运行的P2P应用程序和服务器S都使用了UDP端口9982，A和B分别初始化了 与Server的UDP通信，地址映射如图所示:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">                        Server S
</span><span class="line">                    207.148.70.129:9981
</span><span class="line">                           |
</span><span class="line">                           |
</span><span class="line">    +----------------------|----------------------+
</span><span class="line">    |                                             |
</span><span class="line">  NAT A                                         NAT B
</span><span class="line">120.27.209.161:6000                            120.26.10.118:3000
</span><span class="line">    |                                             |
</span><span class="line">    |                                             |
</span><span class="line"> Client A                                      Client B
</span><span class="line">  10.0.0.1:9982                                 192.168.0.1:9982</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在假设客户端A打算与客户端B直接建立一个UDP通信会话。如果A直接给B的公网地址120.26.10.118:3000发送UDP数据，NAT B将很可能会无视进入的 数据（除非是Full Cone NAT），因为源地址和端口与S不匹配，而最初只与S建立过会话。B往A直接发信息也类似。</p>

<p>假设A开始给B的公网地址发送UDP数据的同时，给服务器S发送一个中继请求，要求B开始给A的公网地址发送UDP信息。A往B的输出信息会导致NAT A打开 一个A的内网地址与与B的外网地址之间的新通讯会话，B往A亦然。一旦新的UDP会话在两个方向都打开之后，客户端A和客户端B就能直接通讯， 而无须再通过引导服务器S了。</p>

<p>UDP打洞技术有许多有用的性质。一旦一个的P2P链接建立，链接的双方都能反过来作为“引导服务器”来帮助其他中间件后的客户端进行打洞， 极大减少了服务器的负载。应用程序不需要知道中间件具体是什么（如果有的话），因为以上的过程在没有中间件或者有多个中间件的情况下 也一样能建立通信链路。</p>

<h1 id="section-1">打洞流程</h1>

<p>假设A现在希望建立一条到B的udp会话，那么这个建立基本流程是:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">1. A,B分别建立到Server S的udp会话,那么Server S此时是知道A,B各自的外网ip+端口
</span><span class="line">2. Server S在和B的udp会话里告诉A的地址(外网ip+端口: 120.27.209.161:6000),同理把B的地址(120.26.10.118:3000)告诉A
</span><span class="line">3. B向A地址(120.27.209.161:6000)发送一个"握手"udp包,打通A-&gt;B的udp链路
</span><span class="line">4. 此时A可以向B(120.26.10.118:3000)发送udp包,A-&gt;B的会话建立成功</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-2">先决条件</h1>

<p>能够完成打洞有几个先决条件:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">1. A,B所在的nat网络类型(Full cone, Restricted cone, Port-restricted cone, Symmetric NAT)
</span><span class="line">2. 在一次udp会话期间,nat设备(路由器)会保持内网进程 inner_ip:inner_port &lt;-&gt; share_public_ip:share_port的映射关系,一般根据具体路由器实现,这个映射关系可以维持几分钟到几个小时不等
</span><span class="line">3. 流程中第3步,nat A收到这个握手包后并不会转发给A,因为它发现自己的没有保存过B的地址,认为这是一个来历不明的包而直接丢弃,然而这个包的作用在于在nat B留下了A的记录,使得nat B认为A是可达或者说可通过了,这样当A-&gt;B再发送udp包时就可以真正到达B了。所以这个"握手"包的作用是可以打通A-&gt;B的通路,是必要的</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-3">源码示例</h1>

<p>使用三台设备模拟,外网设备207.148.70.129模拟Server S,执行server.go代码:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>server.go </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;log&quot;</span>
</span><span class="line">	<span class="s">&quot;net&quot;</span>
</span><span class="line">	<span class="s">&quot;time&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">listener</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">ListenUDP</span><span class="p">(</span><span class="s">&quot;udp&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">{</span><span class="nx">IP</span><span class="p">:</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IPv4zero</span><span class="p">,</span> <span class="nx">Port</span><span class="p">:</span> <span class="mi">9981</span><span class="p">})</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="k">return</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;本地地址: &lt;%s&gt; \n&quot;</span><span class="p">,</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">LocalAddr</span><span class="p">().</span><span class="nx">String</span><span class="p">())</span>
</span><span class="line">	<span class="nx">peers</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">	<span class="nx">data</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span><span class="line">	<span class="k">for</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">n</span><span class="p">,</span> <span class="nx">remoteAddr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ReadFromUDP</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class="line">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;error during read: %s&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">		<span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;&lt;%s&gt; %s\n&quot;</span><span class="p">,</span> <span class="nx">remoteAddr</span><span class="p">.</span><span class="nx">String</span><span class="p">(),</span> <span class="nx">data</span><span class="p">[:</span><span class="nx">n</span><span class="p">])</span>
</span><span class="line">		<span class="nx">peers</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">peers</span><span class="p">,</span> <span class="o">*</span><span class="nx">remoteAddr</span><span class="p">)</span>
</span><span class="line">		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">peers</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">			<span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;进行UDP打洞,建立 %s &lt;--&gt; %s 的连接\n&quot;</span><span class="p">,</span> <span class="nx">peers</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">String</span><span class="p">(),</span> <span class="nx">peers</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">String</span><span class="p">())</span>
</span><span class="line">			<span class="nx">listener</span><span class="p">.</span><span class="nx">WriteToUDP</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">peers</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">String</span><span class="p">()),</span> <span class="o">&amp;</span><span class="nx">peers</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class="line">			<span class="nx">listener</span><span class="p">.</span><span class="nx">WriteToUDP</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">peers</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">String</span><span class="p">()),</span> <span class="o">&amp;</span><span class="nx">peers</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">			<span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">8</span><span class="p">)</span>
</span><span class="line">			<span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;中转服务器退出,仍不影响peers间通信&quot;</span><span class="p">)</span>
</span><span class="line">			<span class="k">return</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>另外两台分别位于不同内网后的设备,均运行相同代码peer.go:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>peer.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;log&quot;</span>
</span><span class="line">	<span class="s">&quot;net&quot;</span>
</span><span class="line">	<span class="s">&quot;os&quot;</span>
</span><span class="line">	<span class="s">&quot;strconv&quot;</span>
</span><span class="line">	<span class="s">&quot;strings&quot;</span>
</span><span class="line">	<span class="s">&quot;time&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">tag</span> <span class="kt">string</span>
</span><span class="line">
</span><span class="line"><span class="kd">const</span> <span class="nx">HAND_SHAKE_MSG</span> <span class="p">=</span> <span class="s">&quot;我是打洞消息&quot;</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">// 当前进程标记字符串,便于显示</span>
</span><span class="line">	<span class="nx">tag</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">	<span class="nx">srcAddr</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">{</span><span class="nx">IP</span><span class="p">:</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IPv4zero</span><span class="p">,</span> <span class="nx">Port</span><span class="p">:</span> <span class="mi">9982</span><span class="p">}</span> <span class="c1">// 注意端口必须固定</span>
</span><span class="line">	<span class="nx">dstAddr</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">{</span><span class="nx">IP</span><span class="p">:</span> <span class="nx">net</span><span class="p">.</span><span class="nx">ParseIP</span><span class="p">(</span><span class="s">&quot;207.148.70.129&quot;</span><span class="p">),</span> <span class="nx">Port</span><span class="p">:</span> <span class="mi">9981</span><span class="p">}</span>
</span><span class="line">	<span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">DialUDP</span><span class="p">(</span><span class="s">&quot;udp&quot;</span><span class="p">,</span> <span class="nx">srcAddr</span><span class="p">,</span> <span class="nx">dstAddr</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;hello, I&#39;m new peer:&quot;</span> <span class="o">+</span> <span class="nx">tag</span><span class="p">));</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">log</span><span class="p">.</span><span class="nx">Panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">data</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span><span class="line">	<span class="nx">n</span><span class="p">,</span> <span class="nx">remoteAddr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">ReadFromUDP</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;error during read: %s&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">conn</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class="line">	<span class="nx">anotherPeer</span> <span class="o">:=</span> <span class="nx">parseAddr</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">data</span><span class="p">[:</span><span class="nx">n</span><span class="p">]))</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;local:%s server:%s another:%s\n&quot;</span><span class="p">,</span> <span class="nx">srcAddr</span><span class="p">,</span> <span class="nx">remoteAddr</span><span class="p">,</span> <span class="nx">anotherPeer</span><span class="p">.</span><span class="nx">String</span><span class="p">())</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// 开始打洞</span>
</span><span class="line">	<span class="nx">bidirectionHole</span><span class="p">(</span><span class="nx">srcAddr</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">anotherPeer</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">parseAddr</span><span class="p">(</span><span class="nx">addr</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">t</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">Split</span><span class="p">(</span><span class="nx">addr</span><span class="p">,</span> <span class="s">&quot;:&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="nx">port</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Atoi</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">{</span>
</span><span class="line">		<span class="nx">IP</span><span class="p">:</span>   <span class="nx">net</span><span class="p">.</span><span class="nx">ParseIP</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class="line">		<span class="nx">Port</span><span class="p">:</span> <span class="nx">port</span><span class="p">,</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">bidirectionHole</span><span class="p">(</span><span class="nx">srcAddr</span> <span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">,</span> <span class="nx">anotherAddr</span> <span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">UDPAddr</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">DialUDP</span><span class="p">(</span><span class="s">&quot;udp&quot;</span><span class="p">,</span> <span class="nx">srcAddr</span><span class="p">,</span> <span class="nx">anotherAddr</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">defer</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class="line">	<span class="c1">// 向另一个peer发送一条udp消息(对方peer的nat设备会丢弃该消息,非法来源),用意是在自身的nat设备打开一条可进入的通道,这样对方peer就可以发过来udp消息</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">HAND_SHAKE_MSG</span><span class="p">));</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;send handshake:&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">for</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">10</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class="line">			<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;from [&quot;</span> <span class="o">+</span> <span class="nx">tag</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="p">));</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">				<span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;send msg fail&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">}()</span>
</span><span class="line">	<span class="k">for</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">data</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span><span class="line">		<span class="nx">n</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">ReadFromUDP</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class="line">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;error during read: %s\n&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;收到数据:%s\n&quot;</span><span class="p">,</span> <span class="nx">data</span><span class="p">[:</span><span class="nx">n</span><span class="p">])</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意代码仅模拟打洞基础流程,如果读者测试网络情况较差发生udp丢包,可能看不到预期结果,此时简单重启server,peer即可.</p>

<p>完整代码参考<a href="https://github.com/qjpcpu/p2pbyudp">github</a></p>

<h1 id="udptcp">udp打洞转tcp通信</h1>

<p>通常,由于udp打洞实现简单,p2p的实现采用udp打洞较多,然而当通路建立起来后使用tcp进行节点间通信可以获取更好的通信效果。因为udp打洞完成后形成的nat映射是和tcp/udp无关的,所以此时可以转为使用tcp建立连接,达到最终的p2p的tcp通信.由于代码较简单,这里就不给出示例了。</p>

<h1 id="section-4">参考文献</h1>

<ul>
  <li><a href="https://yq.aliyun.com/articles/227421">UDP用打洞技术穿透NAT的原理与实现</a></li>
  <li><a href="https://zhuanlan.zhihu.com/p/26796476">P2P通信原理与实现</a></li>
  <li><a href="https://github.com/jtriley/pystun">NAT类型检测工具</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅谈元编程]]></title>
    <link href="http://qjpcpu.github.io/blog/2017/08/02/qian-tan-yuan-bian-cheng/"/>
    <updated>2017-08-02T17:54:41+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2017/08/02/qian-tan-yuan-bian-cheng</id>
    <content type="html"><![CDATA[<p>为什么会突然想到写这篇文章呢？其实是因为我曾经向一位朋友推荐学习一下ruby/lisp这类支持元编程的语言,尽管可能永远不会在生产环境中用到,但是可以让人学习用另一种思路思考问题,然后友人就要求我解释我学了之后思考问题的角度有何不同,当时确实把我难住了,因为这个问题的确不好描述。</p>

<p>对于这个问题,我思前想后好几周后,我还是决定从理性和感性两个方面,稍微描述一下,什么是元编程?学习了元编程之后你的思考到底可能在什么地方和别人产生差异?</p>

<p>P.S. 鉴于ruby在元编程领域的强大能力,本文将用ruby来辅助我的描述,即便是没有ruby基础,我也会尽量描述清楚不影响理解;至于为什么不用lisp,那是因为它在这行当走得太彻底了,彻底到我觉得自己现阶段没有能力描述清楚
<!-- more --></p>

<h2 id="section">结论放在前面</h2>
<p>虽然我将要尝试向你描述下元编程,但还是有几条规则要写在前面,如果你觉得无法接受这几条规则,那么提早关闭页面比较明智。</p>

<h5 id="section-1">1. 心态放谦卑,无论何时,先尝试去理解而不是拒绝</h5>
<p>##### 2. 元编程并不是黑魔法, 元编程也是编程
##### 3. 和学习游泳一样,如果不亲身去尝试,永远也无法真正理解
##### 4. 即便你花时间精力取弄懂了一两门元编程语言,但你的工作环境可能永远都用不到,冷静两秒钟,确认自己并不是那么功利主义
##### 5. 再次深呼吸,确认自己还是有兴趣了解下去</p>

<h2 id="section-2">元编程的魔力</h2>
<p>元编程的学院解释是:运行时操作程序构件的能力。这个类似于物理公理定义的说法比较令人费解,其实他的意思是这样的,通常,我们的程序写完进行编译链接后,它的运行规则就固定了,很难在运行时再去做任何修改。比如对于C语言来说,一个方法或者函数要执行的逻辑已经固定下来了,无法在不改动代码的情况下修改这个方法的逻辑;或者对于java这种语言也是一样的,一个类拥有的方法和属性是固定的,虽然java拥有了反射的能力(这可以看做已经具备了初步元编程能力),可以在运行时进行自省,但是也无法进一步拓展自身的逻辑和功能。可以看出,这些编程语言里,”程序逻辑”和”数据”是完全分割开来的,数据可以修改变动,而逻辑是冰冷凝固的,它们之间泾渭分明,区分十分明显。 而所谓元编程,就是抹除这种界限的能力。</p>

<h3 id="section-3">改变宇宙公理</h3>
<p>假设我们所处的世界真的是被AI控制,整个人类文明作为一枚电池被<code>Matrix</code>控制(电影《黑客帝国》),而AI构建的<code>Matrix</code>系统也的确是基于人类的数学公理构建起来的,而我们最基础的数学公理不外乎就是<code>1 + 1 = 2</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">puts</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span>  <span class="c1"># =&gt; 显而易见输出2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>假如AI的上帝<code>建筑师</code>某一天想更改这个系统升级为<code>Matruix2</code>,这次升级仅仅是想看看更改最简单的宇宙公理让<code>1 + 1 = 3</code>,他想看看这会对人类社会造成什么影响;试想如果<code>建筑师</code>不懂得元编程的能力,那么意味着<code>Matrix2</code>是一次彻底的重构:他必须重建所有数学公理,并且基于这些公理重新构建<code>Matrix</code>,这个工作量想想都觉得可怕。</p>

<p>那如果<code>建筑师</code>懂得元编程,他要做的事情就是给<code>Matrix</code>打个系统补丁,补丁文件内容只有简单几行代码:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Patch</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">+</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span><span class="o">.</span><span class="n">succ</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="no">Fixnum</span><span class="o">.</span><span class="n">prepend</span> <span class="no">Patch</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这段代码的含义是对所有整数加法添加了一个补丁,每个加法运算都多加1,所以基于加法的公理均自动采纳这项变更。</p>

<p>当<code>Matrix</code>应用这个补丁后,所有系统中加法都会多加1</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">puts</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">4</span> <span class="c1"># =&gt; 输出为6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这就是元编程,你可以运用他修改程序逻辑,漆黑的运行时在你面前变得明朗起来了。</p>

<h3 id="section-4">调用链</h3>
<p>如果你觉得改变宇宙公理这个场景太过虚幻,并且你碰巧也没看过黑客帝国(oops,真是不幸,在学习各种编程技巧前我建议您真应该去看下这部电影),那么你肯定会质疑:好像我永远遇不到元编程的应用场景。那么好吧,我来举一个真实世界可能真会遇到的场景:</p>

<p>在当前分布式系统大行其道的今天,可能我们需要将系统每个函数调用时间记录下来,即<code>函数A--&gt;函数B--&gt;函数C--&gt;函数n</code>我们想在每个函数入口和出口打点,这样我们就能够将这个调用栈串联起来</p>

<p>假设说我们的原系统是这样的:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="n">to</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;Hello </span><span class="si">#{</span><span class="n">to</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="nb">self</span><span class="o">.</span><span class="n">talk</span> <span class="n">to</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">talk</span><span class="p">(</span><span class="n">to</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;Talk to </span><span class="si">#{</span><span class="n">to</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">MyClass</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hello</span> <span class="s2">&quot;jason&quot;</span>
</span><span class="line"><span class="c1"># 输出为:</span>
</span><span class="line"><span class="c1"># Hello jason</span>
</span><span class="line"><span class="c1"># Talk to jason</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>很简单,我们也可以利用元编程的技术,用打点进出逻辑将所有函数包裹起来即可,也打这么一个补丁:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">MyClass</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class="line">  <span class="nb">self</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">mtd</span><span class="o">|</span>
</span><span class="line">   <span class="n">alias_method</span> <span class="s2">&quot;old_</span><span class="si">#{</span><span class="n">mtd</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span><span class="n">mtd</span>
</span><span class="line">   <span class="n">define_method</span> <span class="n">mtd</span> <span class="k">do</span> <span class="o">|*</span><span class="n">args</span><span class="o">|</span>
</span><span class="line">     <span class="nb">puts</span> <span class="s2">&quot;==========Enter </span><span class="si">#{</span><span class="n">mtd</span><span class="si">}</span><span class="s2">@</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">==========&quot;</span>
</span><span class="line">     <span class="nb">send</span> <span class="s2">&quot;old_</span><span class="si">#{</span><span class="n">mtd</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span><span class="o">*</span><span class="n">args</span>
</span><span class="line">     <span class="nb">puts</span> <span class="s2">&quot;==========Leave </span><span class="si">#{</span><span class="n">mtd</span><span class="si">}</span><span class="s2">@</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">==========&quot;</span>
</span><span class="line">   <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>再次运行原程序,输出则变成:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">==========</span><span class="no">Enter</span> <span class="n">hello</span><span class="err">@</span><span class="mi">2017</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mo">02</span> <span class="mi">23</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mi">25</span> <span class="o">+</span><span class="mi">0800</span><span class="o">==========</span>
</span><span class="line"><span class="no">Hello</span> <span class="n">jason</span>
</span><span class="line"><span class="o">==========</span><span class="no">Enter</span> <span class="n">talk</span><span class="err">@</span><span class="mi">2017</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mo">02</span> <span class="mi">23</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mi">25</span> <span class="o">+</span><span class="mi">0800</span><span class="o">==========</span>
</span><span class="line"><span class="no">Talk</span> <span class="n">to</span> <span class="n">jason</span>
</span><span class="line"><span class="o">==========</span><span class="no">Leave</span> <span class="n">talk</span><span class="err">@</span><span class="mi">2017</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mo">02</span> <span class="mi">23</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mi">25</span> <span class="o">+</span><span class="mi">0800</span><span class="o">==========</span>
</span><span class="line"><span class="o">==========</span><span class="no">Leave</span> <span class="n">hello</span><span class="err">@</span><span class="mi">2017</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mo">02</span> <span class="mi">23</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mi">25</span> <span class="o">+</span><span class="mi">0800</span><span class="o">==========</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>毫无疑问,不借助元编程的能力,也有各种解决这个问题的办法,但是如果你懂得这项技术,那么你会发现问题可以被解决得如此优雅,不用侵入到原代码的任何逻辑,就可以修改代码逻辑。试想下如果你想修改的逻辑是第三方库的代码, 而你甚至没有他们的源码,此时如果没有元编程的能力,是很难做出逻辑调整的。</p>

<h2 id="section-5">元编程改变了什么</h2>
<p>回到感性的部分,为什么向没有接触过元编程的人那么难以解释这个概念呢?其实正是因为这个概念本身就处于受众知识网络之外,所以当试图使用类比推导来描述时很容易使得这个概念越发让人迷惑。</p>

<p>那么了解这个概念之后,它到底改变了我什么思考角度呢?其实是看问题不再那么理所当然,面临一个问题时亦或者是已经拿到解决方案了,还会反向质疑自己,是否存在一种可能性,这种可能性甚至是超越自身知识范畴的,或者是和自己思维习惯相悖离的,而这种可能性很可能就是更优雅的解决方案。</p>

<p>除了思考的角度,对编码工作本身有什么实质性的作用吗?很遗憾,可能并没有。生产环境中的C,java,golang等等开发,很难用到这项技术,甚至于即便你处在某个非常极客的公司,使用了ruby/lisp作为生产语言,泛滥使用元编程也会直接导致项目的不可维护,导致最终项目leader将元编程作为禁术封印起来。但这些都不应该成为阻碍你了解它的理由,拓宽自身的视野,这更重要。</p>

<h2 id="section-6">写在最后</h2>
<p>最后,我还是以元编程界一个禅语论道结束吧:</p>

<p>编程弟子在跟随元编程大师一年后,终于掌握了所有的元编程能力。秋意微凉,师徒二人于树下盘坐,弟子回想所学,愈发迷惑,问道: 师傅, 我还是不明白,到底什么是元编程?</p>

<p>树上飘落最后一片秋叶,老禅师睁开眼,轻声一叹:孩子,这世上哪有什么元编程,就是编程啊。</p>

<p>弟子顿悟,乃成…</p>

<p>P.S. 你真的不觉得人工智能的基础之一就是元编程吗? 机器学习总结规律,元编程再将这些规律内化,自身改变自身逻辑,这不就是AI进化的基础吗。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[http原理]]></title>
    <link href="http://qjpcpu.github.io/blog/2016/03/15/httpyuan-li/"/>
    <updated>2016-03-15T14:10:51+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2016/03/15/httpyuan-li</id>
    <content type="html"><![CDATA[<p>Go语言中处理http请求主要涉及两个对象: <a href="https://golang.org/pkg/net/http/#ServeMux">ServeMux</a>和<a href="https://golang.org/pkg/net/http/#Handler">http.Handler接口</a>。</p>

<p>ServeMux即http请求路由，将http请求分发到注册的对应路由处理方法中。http.Handler及http的路由处理接口，该接口实际上仅包含一个方法<strong>ServeHTTP</strong>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>src/net/http/server.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">Handler</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="o">*</span><span class="nx">Request</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!-- more -->

<h3 id="section">基本原理</h3>

<p>下面我们创建一个简单的HTTP服务，该服务仅返回一个文本页面:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;net/http&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">TextHandler</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">word</span> <span class="kt">string</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">th</span> <span class="o">*</span><span class="nx">TextHandler</span><span class="p">)</span> <span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">w</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;I wanna say: &quot;</span> <span class="o">+</span> <span class="nx">th</span><span class="p">.</span><span class="nx">word</span><span class="p">))</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewServeMux</span><span class="p">()</span>
</span><span class="line">	<span class="nx">th</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">TextHandler</span><span class="p">{</span><span class="nx">word</span><span class="p">:</span> <span class="s">&quot;cool&quot;</span><span class="p">}</span>
</span><span class="line">	<span class="nx">mux</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">th</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Server started...&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">	<span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="nx">mux</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>访问<a href="http://localhost:3000">http://localhost:3000</a>，页面返回<code>I wanna say: cool</code>。</p>

<p><code>http.NewServeMux</code>创建出新的路由容器，<code>http.NewServeMux#Handle</code>方法将路由及其处理函数注册到路由容器，ServeMux内部包含一个map结构，用来存取http URL对应的处理器。</p>

<p>而<code>http.ListenAndServe</code>需要指定服务监听地址和一个Handler对象，及方法签名如下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>src/net/http/server.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">ListenAndServe</span><span class="p">(</span><span class="nx">addr</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handler</span> <span class="nx">Handler</span><span class="p">)</span> <span class="kt">error</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而ServeMux对象其实也定义了一个ServeHTTP的对象方法，所以ServeMux is a Handler，能够传入ListenAndServe方法启动服务。</p>

<p><strong>综上，使用ServeMux组装路由,再将它作为一个Handler交给http启动服务。当服务接收到一个http请求后，就根据路由中配置的规则选择对应的handler进行处理，实际的处理逻辑则由该handler的ServeHTTP方法实现。</strong></p>

<blockquote>
  <p>路由分发的逻辑具体实现可以查看<a href="https://golang.org/src/net/http/server.go">http包源码</a></p>
</blockquote>

<h3 id="section-1">标准用法</h3>

<h4 id="section-2">1.简化代码</h4>

<p>基本原理中的例子足以展示出golang的http处理原理，由于自定义的handler均必须实现http.Handler接口,这样会导致多余声明代码的产生。所以http包提供了一个帮助方法<code>http.HandlerFunc</code>将方法参数和<code>ServeHTTP</code>相同的方法转换为<code>http.Handler</code>。 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;net/http&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">saySomething</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">word</span> <span class="o">:=</span> <span class="s">&quot;cool&quot;</span>
</span><span class="line">	<span class="nx">w</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;I wanna say: &quot;</span> <span class="o">+</span> <span class="nx">word</span><span class="p">))</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewServeMux</span><span class="p">()</span>
</span><span class="line">	<span class="nx">th</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="nx">saySomething</span><span class="p">)</span>
</span><span class="line">	<span class="nx">mux</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">th</span><span class="p">)</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Server started...&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="nx">mux</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>实际上，<code>http.HandlerFunc</code>不是一个方法调用，仅仅是一个类型转换。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>源码src/net/http/server.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">HandlerFunc</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="o">*</span><span class="nx">Request</span><span class="p">)</span>
</span><span class="line"><span class="c1">// ServeHTTP calls f(w, r).</span>
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span> <span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">f</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所以，自定义的请求处理函数(<code>saySomething</code>)仅需要保持参数定义和<code>http.Handler</code>接口相同即可，将该自定义函数做类型转换为<code>HandlerFunc</code>即可。另外，由源码可以看出，函数类型<code>HandlerFunc</code>同时也实现了<code>http.Handler</code>，所以能够注册到<code>ServeMux</code>中。</p>

<h4 id="section-3">2.保持封装</h4>

<p>代码看起来缺失简单了一些，然而这样却破坏了逻辑的封装性：<code>saySomething</code>中包含了硬编码的参数<code>word</code>。这可以使用闭包来解决:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">	<span class="s">&quot;fmt&quot;</span>
</span><span class="line">	<span class="s">&quot;net/http&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">saySomething</span><span class="p">(</span><span class="nx">word</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 闭包装入变量word</span>
</span><span class="line">	<span class="nx">f</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">w</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;I wanna say: &quot;</span> <span class="o">+</span> <span class="nx">word</span><span class="p">))</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewServeMux</span><span class="p">()</span>
</span><span class="line">	<span class="nx">th</span> <span class="o">:=</span> <span class="nx">saySomething</span><span class="p">(</span><span class="s">&quot;cool&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="nx">mux</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">th</span><span class="p">)</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Server started...&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="nx">mux</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>http服务中出现了很多名称，命名比较相近，这里汇总解释下:</strong></p>

<ul>
  <li><strong>ServeMux</strong>，路由容器，http服务中的路由规则统一在这里定义，启动服务后路由的分发自然也由其处理</li>
  <li><strong>http.Handler</strong>,请求处理器，每个处理http请求的处理器均需要实现该接口<code>ServeHTTP</code></li>
  <li><strong>http.HandlerFunc</strong>,帮助”方法”(实际是一个函数类型声明),将参数和<code>ServeHTTP</code>相同的普通函数转换为一个<code>http.Handler</code></li>
</ul>

<h3 id="http">http中间件</h3>

<p>golang中http处理流程是这样的:</p>

<pre><code>ServeMux ==&gt;  Middleware Handler ==&gt; Application Handler
</code></pre>

<p><strong>中间件</strong>:</p>

<ul>
  <li>中间件也是一个http.Handler，所以必须实现<code>ServeHTTP</code></li>
  <li>构建完整的中间件调用链，保证覆盖上图的中间件调用关系，并作为handler注册到<code>http.ServeMux</code></li>
</ul>

<p>一个中间件示例:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">exampleMiddleware</span><span class="p">(</span><span class="nx">next</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 中间件逻辑在这里实现</span>
</span><span class="line">    <span class="nx">next</span><span class="p">.</span><span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class="line">  <span class="p">})</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>由这个中间件定义可以看出中间件链的构建方式: 函数嵌套。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">http</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">middlewareOne</span><span class="p">(</span><span class="nx">middlewareTwo</span><span class="p">(</span><span class="nx">finalHandler</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看一个实际的例子:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">  <span class="s">&quot;log&quot;</span>
</span><span class="line">  <span class="s">&quot;net/http&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">middlewareOne</span><span class="p">(</span><span class="nx">next</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Executing middlewareOne&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="nx">next</span><span class="p">.</span><span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class="line">    <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Executing middlewareOne again&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">})</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">middlewareTwo</span><span class="p">(</span><span class="nx">next</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Executing middlewareTwo&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span> <span class="o">!=</span> <span class="s">&quot;/&quot;</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="nx">next</span><span class="p">.</span><span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class="line">    <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Executing middlewareTwo again&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">})</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">final</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Executing finalHandler&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="nx">w</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;OK&quot;</span><span class="p">))</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">finalHandler</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="nx">final</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="nx">http</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">middlewareOne</span><span class="p">(</span><span class="nx">middlewareTwo</span><span class="p">(</span><span class="nx">finalHandler</span><span class="p">)))</span>
</span><span class="line">  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>访问<a href="http://localhost:3000">http://localhost:3000</a>可以从日志看出中间件调用顺序:</p>

<pre><code>$ go run main.go
2014/10/13 20:27:36 Executing middlewareOne
2014/10/13 20:27:36 Executing middlewareTwo
2014/10/13 20:27:36 Executing finalHandler
2014/10/13 20:27:36 Executing middlewareTwo again
2014/10/13 20:27:36 Executing middlewareOne again
</code></pre>

<h4 id="section-4">中间件链构造方式</h4>

<p>上面例子的中间件链是比较常见的构造方式，然而多少有些可怕。而<a href="https://github.com/justinas/alice">Alice</a>将中间件链的构造简化了许多:</p>

<pre><code>Middleware1(Middleware2(Middleware3(App)))
</code></pre>

<p>转化为</p>

<pre><code>alice.New(Middleware1, Middleware2, Middleware3).Then(AppHandler)
// or 
alice.New(Middleware1, Middleware2, Middleware3).ThenFunc(AppFunc)
</code></pre>

<h3 id="section-5">参考文献</h3>

<p>文中主要内容来自参考文献第一、二条</p>

<ul>
  <li><a href="http://www.alexedwards.net/blog/a-recap-of-request-handling">A Recap of Request Handling in Go</a></li>
  <li><a href="http://www.alexedwards.net/blog/making-and-using-middleware">Making and Using HTTP Middleware</a></li>
  <li><a href="https://golang.org/src/net/http/server.go">net/http</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[task tracer -- 实时任务追踪系统]]></title>
    <link href="http://qjpcpu.github.io/blog/2016/02/18/task-tracer/"/>
    <updated>2016-02-18T14:43:27+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2016/02/18/task-tracer</id>
    <content type="html"><![CDATA[<h2 id="section">产生背景</h2>

<p><strong>Task Tracer(以下简称tt)</strong>的产生原因其实是为了解决一个用户体验的缺憾。由于在生产环境中，我们一直使用salt-stack作为任务的发布和执行机构，然而salt使用的Pub/Sub这种模式下有一个遗留缺陷: 就是任务一旦发出，直到它执行结束退出，任务的发起者无法知道任务当前的执行状态,唯一能做的仅仅能够判断该任务是否在running,而不能实时获取其进程输出；其次，当该salt任务执行完成后，需要独立获取其任务标准输出和进程退出状态(exit code)，无法一次性获取其输出和退出状态。salt社区也意识到这个问题，在逐步开发VT模块以求解决，不过这个特性截止到目前仍在实验阶段。</p>

<p>所以，为了消除salt任务执行阶段的黑洞焦虑，我决定开发tt。 虽然tt是为了解决salt的一个问题，但在开发时，我决定将其和salt分离开来，使得tt其实是能够解决这样一类问题: <strong>如果需要实时获取命令执行输出，就可以将命令包裹到tt中执行,从而利用tt Server实时获取其执行输出及结果</strong></p>

<!-- more -->

<p><img src="https://raw.githubusercontent.com/qjpcpu/task-tracer-server/master/snapshots/tt-preview.png" alt="tt preview" /></p>

<h2 id="section-1">工作原理</h2>

<p>tt其实是一个shell命令包裹器，它将要执行的命令以子进程的方式执行起来，实时地将该子进程的输出发送到tt Server，这样用户(api client)就能够从tt Server实时读取到该进程的输出；使用到的技术其实也很简单，就是nodejs+socket.io。
<img src="https://raw.githubusercontent.com/qjpcpu/task-tracer-server/master/snapshots/data-flow.png" alt="tt" /></p>

<p>从这张原理图可以看到，tt的数据流是单向的，也就是说这里的任务发起需要第三方来做，比如salt-stack甚至手动的shell登录后发起。当任务发起后，tt client会吐出一个输出结果查看的url，使用你的浏览器访问该url就可以实时查看任务的输出，另外，相同任务名下执行的所有tt client都会将输出发布出来，均可以查看。</p>

<p>另外，tt是一个实时输出查看跟踪系统，所以不会持久化任务的输出。</p>

<h2 id="try-our-live-demo">Try our live demo</h2>

<h3 id="section-2">1. 配置客户端</h3>

<p>根据你的系统类型(osx/linux)下载客户端可执行文件tt</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># for osx
</span><span class="line">wget https://raw.githubusercontent.com/qjpcpu/task-tracer-client/master/dist/tt.darwin -O tt
</span><span class="line"># for linux
</span><span class="line">wget https://raw.githubusercontent.com/qjpcpu/task-tracer-client/master/dist/tt.linux -O tt</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>客户端会读取配置文件<code>$HOME/.tt.conf</code>，将其内容配置为:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">id = natasha
</span><span class="line">token = eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiY2xpZW50X3Rva2VuIiwibnMiOiJ0ZXN0IiwiaWF0IjoxNDU1NzgwNDU0LCJleHAiOjE0ODczMzgwNTR9.hk96PzocFTSGogl1evyWa4UGjDpQ4nAWppIMCl6lnlo
</span><span class="line">url = http://tt.single-bit.org</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同样的方法再配置一台客户端，注意其配置文件中id和另一台不同（可以根据需要配置任意多台客户端,注意其配置文件中id需要各不相同）。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">id = tanya
</span><span class="line">token = eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiY2xpZW50X3Rva2VuIiwibnMiOiJ0ZXN0IiwiaWF0IjoxNDU1NzgwNDU0LCJleHAiOjE0ODczMzgwNTR9.hk96PzocFTSGogl1evyWa4UGjDpQ4nAWppIMCl6lnlo
</span><span class="line">url = http://tt.single-bit.org</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-3">2. 访问任务追踪页面</h3>

<p>打开浏览器访问<a href="http://tt.single-bit.org/?accessToken=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYnJvd3Nlcl90b2tlbiIsIm5zIjoidGVzdCIsImlhdCI6MTQ1NTc4MDQ1NCwiZXhwIjoxNDg3MzM4MDU0fQ.AuhXIVNxk5LYoamU2ziSBqvn0tEqyrszAvsCom3OmgI">tt Server live demo</a></p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/task-tracer-server/master/snapshots/live-demo-index.png" alt="live demo index page" /></p>

<p>填入我们需要追踪的任务名称，如: <strong>demo</strong>并确定，进入到任务监听状态。</p>

<h3 id="section-4">3. 执行任务</h3>

<p>在配置好的两台客户端上同时执行命令:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tt -n demo 'echo "from `head -1 ~/.tt.conf`";sleep 2;echo "sleep for a while";sleep 5;echo done'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在浏览器上可以看到实时输出: 在<code>tanya</code>和<code>natasha</code>分别输出各自的id，然后等待一会儿后进程执行结束.</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/task-tracer-server/master/snapshots/live-demo-output.png" alt="live demo output page" /></p>

<p>你也可以在执行过程中在某个客户端上执行<code>kill</code>命令或<code>Ctrl+C</code>终止进程，并查看浏览器实时反馈的结果。</p>

<h2 id="as-a-sevice----tt-server">As a sevice – 搭建自己的tt Server</h2>

<p>如果tt仅仅是作为一个web页面查看机器上的进程输出，那其实也没多大存在意义，关键是对于一个devops来说，它需要能够比较容易地嵌入你的系统工具里。</p>

<h3 id="section-5">1. 系统接口</h3>

<p>ttServer对外提供了若干<a href="http://socket.io/">socket.io</a>事件接口，基于你的需求，可以非常容易地接入到你自己的系统中，这样一来，怎样在UI上展示就完全取决于自己的实现。至于socket.io也有很多语言已经实现了该规范，所以使用起来应该也很简单。</p>

<p>详细接口定义及实现方式请查看<a href="https://github.com/qjpcpu/task-tracer-server">tt Server github文档</a></p>

<h3 id="section-6">2. 客户端安装配置</h3>

<p>tt的客户端安装配置非常简单，仅仅包含一个可执行文件tt和一份简单的ini格式的配置文件,令人愉悦的是该客户端没有环境依赖，不需要安装node等执行环境。</p>

<p>如果下载的二进制文件无法执行，请从源码编译。</p>

<p>具体的客户端安装配置可以查看<a href="https://github.com/qjpcpu/task-tracer-client">tt Client github文档</a></p>

<h2 id="logio">相关系统: log.io</h2>

<p><a href="http://logio.org/">log.io</a>是一个实时日志监控系统，其系统架构和实现方式都和tt非常相似。不过其应用场景是实时的日志采集监控，另外，logio的客户端有node环境依赖，个人觉得有点部署不完美。</p>

<p><img src="http://logio.org/screenshot3.png" alt="log.io" /></p>

<h2 id="github">附录: github地址</h2>

<p><a href="https://github.com/qjpcpu/task-tracer-server">tt Server</a></p>

<p><a href="https://github.com/qjpcpu/task-tracer-client">tt Client</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gulp js的构建工具]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/09/16/gulp-nodejs-cool-makefile/"/>
    <updated>2015-09-16T21:56:17+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/09/16/gulp-nodejs-cool-makefile</id>
    <content type="html"><![CDATA[<h3 id="section">0. 简介</h3>
<p>gulp是javascript世界的构建工具，它并不是js世界第一个构建工具，但由于它小而快的特点，一出现就快速赶超它的前辈grunt，在npm的下载榜上一直高居前列。</p>

<!-- more -->
<p><img src="https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png" alt="gulp logo" /></p>

<h3 id="gulp">1. gulp的特性</h3>
<p><strong><code>小</code></strong></p>

<p>gulp的第一个特点应该是小，不仅仅是源码小，更重要的是gulp编写的出的构建代码非常短小明了。这是因为gulp基本上完全是基于流式的构建处理，可以理解为由源码文件流经过一系列的中间加工处理直接将结果灌入到输出文件，没有了中间的临时文件读写，自然就减少了处理代码，出来的构建workflow同样也就十分清理简捷。</p>

<p>gulp构建流程的小固然有使用了流式处理的原因，但更重要的一种设计思路的不同。这里我想聊一下工程上的设计理念，通常我们设计程序的时候，遵守<code>配置优于代码</code>的原则。就是说，一些程序依赖的外置参数，尽量不要硬编码进代码文件里，而是将这些参数放在配置文件中。遵循这条原则可以极大增加工程的可维护性，比如java语言的某些著名框架就严格践行了这条原则，所以工程中就可能出现描述工程信息的各种xml配置文件。然后很多时候宣扬这条规律的书籍都没有将他的缺点，虽然缺点和优点相比有点微不足道，那就是一旦大量抽离程序的配置参数，将导致配置的碎片化，反面教材仍然是java框架里的xml配置泛滥。</p>

<p>所以后来的编程框架如rails开始强调<code>约定优于配置</code>的概念，就是如果大家经验约定这样做(放置配置的方式，命名的方式，搜索的方式等），那么程序工程里就不必显式声明这些规则，即不必要用一大堆配置文件去描述我们大家都约定遵守的东西。这样出来的结果工程上非常干净同时也满足了约定内高维护性。</p>

<p>那么在这里为什么要说这个呢，因为grunt其实可以说是一个基于<code>配置优于代码</code>的构建工具，而且很多其他编程语言的构建工具都是基于这个理念的。这类构建工具在执行大工程的构建时，配置的碎片化非常严重，为了描述构建需要在构建代码里编写大量的元信息片段，甚至于需要分立诸多构建小文件来描述子构建单元，那么维护构建流程本身也变成一件令人头疼的事情。</p>

<p>而gulp可以说某种程度上的回归，将更多的东西又返回到了原始的地方——-代码。gulp的构建文件里配置信息非常少，一个构建task包含的所有信息都在这个task里，你不需要跳到其他文件里查阅这个task的配置信息。是的，程序员喜欢代码，把构建所有的东西都在task这块代码里完成，这样的构建流程自然就很清晰了。所以，gulp非常适合中小型程序的构建，我私自揣度这也是gulp快速流行起来的原因。</p>

<p><strong><code>快</code></strong></p>

<p>gulp的快主要是因为它的核心是<code>流</code>,从源文件的读取到构建结束，整个加工过程都在内存流里完成，上一道工序和下一道加工工序间完全是流与流之间的管道连接，类似shell管道命令的流式操作，免去了大量中间文件的读写，少了文件io，自然快了很多。不过我并没有专门对这个做过benchmark，直观的感受是我重构某个包含数百个coffee文件的构建流程时，从grunt迁移为gulp后整个构建流程节省了大概一半的时间。</p>

<p><strong><code>简单</code></strong></p>

<p>在阅读了gulp的一些资料后，我本来打算花一个下午的时间来学习的，结果10分钟左右就读完了gulp的文档，因为它实在太简单了，总共只有<strong>4个</strong>API.</p>

<h3 id="gulp-1">2. gulp入门</h3>

<p>对于gulp的基础，我不打算在这里讲，因为它的<a href="https://github.com/gulpjs/gulp/tree/master/docs">官方文档</a>非常简单易读，如果想读中文，这里也有<a href="https://github.com/lisposter/gulp-docs-zh-cn">gulp中文文档</a>。花个10分钟读一下，你就可以向身边的小伙伴炫耀： Hi，让我给你展示下一种很cool的构建工具。</p>

<h3 id="gulp-2">3. gulp流</h3>

<p><code>流</code>是gulp重中之重的概念，理解了流才可以玩转gulp。可以看下<a href="https://github.com/substack/stream-handbook">nodejs流</a>深入理解下nodejs流的概念。这里仅简单介绍下gulp中广泛使用的<code>pipe()</code>函数。</p>

<p><code>src.pipe(dest)</code>函数是nodejs的流的一个函数，它的作用非常简单，就是将流进行管道连接，将src可读流和dest可写流连接起来，使得数据从src流入dest。</p>

<p>同时<code>src.pipe(dest)</code>的返回对象也是<code>dest</code>，所以在nodejs很容易看到这种链式编程风格。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这段代码等价于</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
</span><span class="line"><span class="nx">b</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
</span><span class="line"><span class="nx">c</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个操作和shell编程的管道非常相似: <code>a | b | c | d</code></p>

<h3 id="gulp-3">4. gulp任务的编写准则</h3>

<p>gulp的核心是流，构建单元是一个个<code>task</code>，那么编写这些task的时候需要注意什么呢？</p>

<p>gulp的task做到了最大限度的并发，那么这些task间的同步就成了问题，怎么样判断一个task完成了以便于可以安全执行另一个依赖task呢,为了正确调度任务，gulp的task设计有三个原则:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="mi">1</span><span class="p">.</span> <span class="err">在任务定义的</span><span class="kd">function</span><span class="err">中返回一个数据流，当该数据流的</span><span class="nx">end</span><span class="err">事件触发时，任务结束</span>
</span><span class="line"><span class="mi">2</span><span class="p">.</span> <span class="err">在任务定义的</span><span class="kd">function</span><span class="err">中返回一个</span><span class="nx">promise</span><span class="err">对象，当该</span><span class="nx">promise</span><span class="err">对象</span><span class="nx">resolve</span><span class="err">时，任务结束</span>
</span><span class="line"><span class="mi">3</span><span class="p">.</span> <span class="err">在任务定义的</span><span class="kd">function</span><span class="err">中传入</span><span class="nx">callback</span><span class="err">变量，当</span><span class="nx">callback</span><span class="p">()</span><span class="err">执行时，任务结束</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当发现task没有按预期执行时，就需要仔细检查是否每个task都遵循了这3条规则。</p>

<p>此外，当需要写出一些高阶的gulp玩法时，不理解并执行这几条规则，就很难办到。另外，可以思考个额外的问题，为什么gulp的task需要有这三条规则? 根据这3条规则，是否都可以猜测出gulp的实现机制呢?</p>

<p>在这里我顺便申明我对学习新东西的一个观点，就是<code>seize the key</code>，学习一种新东西就要理解她的核心。有的人秉持一种观念是说，语言只是工具，学习了一种其他都差不多，当有切换需求要学习新语言or新工具，就草草将以前的经验套上去，完成任务后还以为学会了新语言。所以有时候会看到一些四不像的代码，比如长得像shell的ruby代码，长得像java的python代码，一脸C长相的golang…</p>

<p>那么，怎样一学习新东西就能抓住其核心呢，很简单，多想想<code>why</code>。实际操作起来就几点经验：</p>

<ul>
  <li>如果有作者对这个语言/工具的创作初衷的相关文章，一定要看！</li>
  <li>看这个新东西是为了解决什么问题</li>
  <li>这个语言解决的是什么问题，更重要的是解决的思路或方式是什么！</li>
  <li>如果涉及新的概念或思路，一定要看足够多的文档直到理解这个概念</li>
  <li>如果学习的是新语言，必须<strong>理解</strong>这个语言的<strong>key feature</strong>，了解语言的生态圈，语言的编码规范、构建工具、测试工具、包管理工具，该语言里著名的库/框架，这些框架的设计理念，如果有余力可以看下这些库/框架的源码，告诉自己用这种语言写出的代码也应该是这个水平</li>
</ul>

<p>比如对于gulp:</p>

<ul>
  <li><strong>创作初衷</strong>: 看文档FAQ,作者twitter</li>
  <li><strong>需要解决的问题</strong>: grunt复杂庞大的插件配置</li>
  <li><strong>解决思路</strong>: nodejs流式处理=&gt;什么是nodejs流=&gt;解决什么问题，带来什么问题</li>
</ul>

<p>方方面面的东西了解了之后，你就能真正把控你的新玩意儿，有时候你甚至能预测这个语言或工具的未来动向。</p>

<h3 id="gulp-4">5. 常用gulp插件</h3>

<p>关于gulp的插件，需要的时候去github上找一下基本都能找到，这里提几个可能是通用构建流程里很可能用到的。</p>

<h4 id="run-sequencehttpswwwnpmjscompackagerun-sequence"><a href="https://www.npmjs.com/package/run-sequence">run-sequence</a></h4>

<p>鉴于流程控制对javascript这种纯异步编程的重要性，gulp的异步任务控制需求同样强烈，run-sequence就是为了解决这个问题。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">runSequence</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;run-sequence&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">clean</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-clean&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// This will run in this order: </span>
</span><span class="line"><span class="c1">// * build-clean </span>
</span><span class="line"><span class="c1">// * build-scripts and build-styles in parallel </span>
</span><span class="line"><span class="c1">// * build-html </span>
</span><span class="line"><span class="c1">// * Finally call the callback function </span>
</span><span class="line"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">runSequence</span><span class="p">(</span><span class="s1">&#39;build-clean&#39;</span><span class="p">,</span>
</span><span class="line">              <span class="p">[</span><span class="s1">&#39;build-scripts&#39;</span><span class="p">,</span> <span class="s1">&#39;build-styles&#39;</span><span class="p">],</span>
</span><span class="line">              <span class="s1">&#39;build-html&#39;</span><span class="p">,</span>
</span><span class="line">              <span class="nx">callback</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="c1">// configure build-clean, build-scripts, build-styles, build-html as you </span>
</span><span class="line"><span class="c1">// wish, but make sure they either return a stream or handle the callback </span>
</span><span class="line"><span class="c1">// Example: </span>
</span><span class="line">
</span><span class="line"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build-clean&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">BUILD_DIRECTORY</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">clean</span><span class="p">());</span>
</span><span class="line"><span class="c1">//  ^^^^^^ </span>
</span><span class="line"><span class="c1">//   This is the key here, to make sure tasks run asynchronously! </span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build-scripts&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">SCRIPTS_SRC</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(...)...</span>
</span><span class="line"><span class="c1">//  ^^^^^^ </span>
</span><span class="line"><span class="c1">//   This is the key here, to make sure tasks run asynchronously! </span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="delhttpswwwnpmjscompackagedel"><a href="https://www.npmjs.com/package/del">del</a></h4>

<p>删除文件，这是个再频繁不过的需求了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">del</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;del&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">del</span><span class="p">([</span><span class="s1">&#39;tmp/*.js&#39;</span><span class="p">,</span> <span class="s1">&#39;!tmp/unicorn.js&#39;</span><span class="p">]).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">paths</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Deleted files/folders:\n&#39;</span><span class="p">,</span> <span class="nx">paths</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">));</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>主要，del函数返回的是一个promise对象。</p>

<h4 id="merge-streamhttpswwwnpmjscompackagemerge-stream"><a href="https://www.npmjs.com/package/merge-stream">merge-stream</a></h4>

<p>当一个task里有多条流时，怎么办? merge-stream就是为了解决流的合并问题的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">merge</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;merge-stream&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">bootstrap</span> <span class="o">=</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;bootstrap/js/*.js&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;public/bootstrap&#39;</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">jquery</span> <span class="o">=</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;jquery.cookie/jquery.cookie.js&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;public/jquery&#39;</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">bootstrap</span><span class="p">,</span> <span class="nx">jquery</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当<code>bootstrap</code>和<code>jquery</code>这两条流都完成时，合并后的流才算完成。</p>

<h4 id="section-1">用户代码</h4>

<p>还有一种情况，如果task的流处理完成时，我希望执行一些用户代码，比如仅仅打印一些信息，这要怎么做呢? 使用task依赖固然可以完成，但是仅仅因为这个需求就增加一个<code>空</code>task是不是有点杀鸡用牛刀了，如果真正理解了nodejs流和gulp的task规则，其实也很好办:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;cli&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;coffee&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;*.coffee&#39;</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">coffee</span><span class="p">()).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;js/&#39;</span><span class="p">)).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">doSomething</span><span class="p">();</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">cb</span><span class="p">();</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line">  <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意task的返回值及task回调cb。</p>

<h3 id="section-2">6. 结束</h3>

<p>gulp是一个很cool的构建工具，学习她，在合适的时候使用她。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分享你的Angular指令]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/05/27/fen-xiang-ni-de-angularzhi-ling/"/>
    <updated>2015-05-27T17:47:56+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/05/27/fen-xiang-ni-de-angularzhi-ling</id>
    <content type="html"><![CDATA[<h3 id="angular-directive-on-bower">Angular directive on bower</h3>
<p>用Angular做web开发不但听起来是非常炫酷的事情，而且从我实际的开发体验来看，它确实是极大减轻了开发者的痛苦。我可以把精力都花在组织业务逻辑，创建更为流畅和漂亮的UI上，而完全不用去反复沦陷在事件绑定数据更新这些无趣的事情上。此外，angular框架本身依照设计模式上定义出了一套MVC漂亮的实现,了解其controller,server,directive后，写出大型web app已经不是难事了。</p>

<p>Angular中最漂亮的两个组件是service和directive，简单说来，service是逻辑代码的抽象和封装，它将应用中重复使用的逻辑代码抽象为公共服务，便于打造瘦controller；而directive则是对UI组件的抽象，其对directive的封装和接口设计简直刷新了我对前端的认识。</p>

<p>这里我就不准备详细介绍怎么写指令了，google的文档和我之前的博客都可供参考，这里说一下，如果你写出来非常cool的指令，怎么分享给大家呢？答案是bower。</p>

<!--more-->

<h3 id="bower">Bower</h3>
<p><a href="http://bower.io/">Bower</a>是一个js的客户端管理工具，可以称之为客户端的npm，其作者是twitter的几个家伙(<a href="https://github.com/fat">@fat</a>,<a href="https://github.com/maccman">@maccman</a>)。根据你配置的<code>bower.json</code>文件，Bower可以自动查找、下载和安装js库，极大节约开发时间。</p>

<h4 id="section">简单介绍</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装使用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">npm install -g bower
</span><span class="line"><span class="c"># registered package</span>
</span><span class="line">bower install jquery
</span><span class="line"><span class="c"># GitHub shorthand</span>
</span><span class="line">bower install desandro/masonry
</span><span class="line"><span class="c"># Git endpoint</span>
</span><span class="line">bower install git://github.com/user/package.git
</span><span class="line"><span class="c"># URL</span>
</span><span class="line">bower install http://example.com/script.js
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>### 创建一个基于bower的angular指令angular-dropzone
<a href="http://www.dropzonejs.com/">Dropzone</a>是一个漂亮的文件上传组件，下面就演示怎么把它集成为一个angular指令并分享到github。</p>

<h4 id="section-1">1.创建指令工程</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mkdir angular-dropzone <span class="o">&amp;&amp;</span> <span class="nb">cd</span> <span class="nv">$_</span>
</span><span class="line">touch angular-dropzone.js <span class="c">#  写入指令实现</span>
</span><span class="line">bower init <span class="c"># 初始化bower工程</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>回答完一系列问题后，生成的<code>bower.json</code>文件应该类似：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">{</span>
</span><span class="line">  name: <span class="s1">&#39;angular-dropzone&#39;</span>,
</span><span class="line">  main: <span class="s1">&#39;angular-dropzone.js&#39;</span>,
</span><span class="line">  version: <span class="s1">&#39;0.0.0&#39;</span>,
</span><span class="line">  authors: <span class="o">[</span>
</span><span class="line">    <span class="s1">&#39;qujianping &lt;qjpcpu@gmail.com&gt;&#39;</span>
</span><span class="line">  <span class="o">]</span>,
</span><span class="line">  description: <span class="s1">&#39;dropzone for angular&#39;</span>,
</span><span class="line">  keywords: <span class="o">[</span>
</span><span class="line">    <span class="s1">&#39;angular&#39;</span>,
</span><span class="line">    <span class="s1">&#39;dropzone&#39;</span>
</span><span class="line">  <span class="o">]</span>,
</span><span class="line">  license: <span class="s1">&#39;MIT&#39;</span>,
</span><span class="line">  ignore: <span class="o">[</span>
</span><span class="line">    <span class="s1">&#39;**/.*&#39;</span>,
</span><span class="line">    <span class="s1">&#39;node_modules&#39;</span>,
</span><span class="line">    <span class="s1">&#39;bower_components&#39;</span>,
</span><span class="line">    <span class="s1">&#39;test&#39;</span>,
</span><span class="line">    <span class="s1">&#39;tests&#39;</span>
</span><span class="line">  <span class="o">]</span>,
</span><span class="line">  dependencies: <span class="o">{</span>
</span><span class="line">    angular: <span class="s1">&#39;~1.3.0&#39;</span>,
</span><span class="line">    dropzone: <span class="s1">&#39;~4.0.1&#39;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-2">2.编辑指令代码</h4>
<p>现在开始编写指令的实现。指令代码最好遵守一定命名规范，如：以github名称作为命名空间。
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span>angular-dropzone.js</span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;qjpcpu.angular-dropzone&#39;</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class="line">  <span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;qjpDropzone&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// implementation goes here</span>
</span><span class="line">  <span class="p">});</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
具体代码实现可以参考<a href="https://github.com/qjpcpu/angular-dropzone">angular-dropzone</a></p>

<h4 id="section-3">3.发布指令</h4>
<p>编写完成后，就可以推送到github。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git init .
</span><span class="line">git add bower.json angular-dropzone.js
</span><span class="line">git commit -m <span class="s1">&#39;v0.0.0&#39;</span>
</span><span class="line">git tag v0.0.0
</span><span class="line">git remote add origin git@github.com:qjpcpu/angular-dropzone.git
</span><span class="line">git push -u origin master
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意，bower使用git的tag确定版本号。</p>

<h4 id="section-4">4.在你的应用中使用该指令</h4>
<p>现在可以拉取使用你的angular指令了：
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="bash"><span class="line">bower install qjpcpu/angular-dropzone
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>在<code>index.html</code>文件添加加载的文件:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;bower_components/dropzone/dist/dropzone.css&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/dropzone/dist/dropzone.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-dropzone/angular-dropzone.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>需要添加模块依赖:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span>app.coffee</span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="coffeescript"><span class="line"><span class="nv">app = </span><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&quot;my-app&quot;</span><span class="p">,</span> <span class="p">[</span>
</span><span class="line">  <span class="s">&#39;qjpcpu.angular-dropzone&#39;</span>
</span><span class="line"><span class="p">])</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
这样在html片段里就可以使用指令了,关于该指令具体参数参考<a href="https://github.com/qjpcpu/angular-dropzone">angular-dropzone</a>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>p.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;div</span> <span class="na">qjp-dropzone</span> <span class="na">class=</span><span class="s">&quot;droppable-area&quot;</span> <span class="na">url=</span><span class="s">&quot;&#39;/url/to-upload&#39;&quot;</span><span class="nt">&gt;</span>
</span><span class="line">	Drop file here
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于后台任务]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/05/27/guan-yu-hou-tai-ren-wu/"/>
    <updated>2015-05-27T17:16:34+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/05/27/guan-yu-hou-tai-ren-wu</id>
    <content type="html"><![CDATA[<h3 id="sidekiq">关于sidekiq</h3>
<p>在做ruby开发时，通常会遇到耗时操作的处理，sidekiq由于其使用简单，性能强劲，所以常被用来作为Ruby应用的后台任务的执行引擎。不过sidekiq有个令人头疼的问题，就是任务提交到后台异步执行后，对于其状态的监测和管理就成为很大的问题。</p>

<!--more-->

<p>sidekiq的wiki上也贴出了很多相关执行管理工具，sidekiq-promise是个人最喜欢的一个，其异步回调的风格和js的风格非常像，使用起来非常友好。</p>

<h3 id="sidekiq-promise">sidekiq-promise</h3>
<p>这里的例子直接来源于其github的readme:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>demo.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ProcessWorker</span>
</span><span class="line">  <span class="kp">include</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Promise</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">perform</span> <span class="n">file_to_process</span>
</span><span class="line">    <span class="no">UnzipWorker</span><span class="o">.</span><span class="n">as_promise</span><span class="p">(</span><span class="n">file_to_process</span><span class="p">)</span><span class="o">.</span><span class="n">then</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
</span><span class="line">      <span class="no">MrDarcy</span><span class="o">.</span><span class="n">all_promises</span> <span class="k">do</span>
</span><span class="line">        <span class="n">dir</span><span class="o">.</span><span class="n">entries</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class="line">          <span class="no">ImageThumbnailWorker</span><span class="o">.</span><span class="n">as_promise</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span><span class="o">.</span><span class="n">then</span> <span class="k">do</span>
</span><span class="line">      <span class="no">UserNotificationMailer</span><span class="o">.</span><span class="n">all_images_processed</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>简述: UnzipWorker会解压文件，然后将解压得到的每个文件分发给ImageThumbnailWorker去创建压缩图，等待所有压缩完成后再发送通知邮件，非常简洁漂亮。</p>

<ul>
  <li>将worker里的<code>include Sidekiq::Worker</code>替换成<code>include Sidekiq::Promise</code>即可。</li>
  <li>
    <p>如果要获取worker的输出，则调用<code>ProcessWorker.as_promise(arguments)</code>即可，在then block中获取执行结果，这个结果即<code>perform</code>方法的返回值。</p>
  </li>
  <li><code>sidekiq-promise</code>使用了<code>MrDarcy</code>，所以提供了一个很有意思的方法</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">MrDarcy</span><span class="o">.</span><span class="n">all_promises</span> <span class="k">do</span>
</span><span class="line">  <span class="o">[</span><span class="n">promise1</span><span class="p">,</span><span class="n">promise2</span><span class="o">]</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>MrDarcy.all_promises</code>的块会等待其中列表的每一个promise完成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJs之Isolated Scope]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/05/25/angularjszhi-isolated-scope/"/>
    <updated>2015-05-25T14:12:42+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/05/25/angularjszhi-isolated-scope</id>
    <content type="html"><![CDATA[<h3 id="scopeisolated-scope">分离式scope（Isolated Scope）</h3>
<p>在angularjs指令中问什么需要使用分离式的scope,主要是为了分离指令和执行所在的”环境”,这个环境其实就是指controller的scope和指令自身的scope,使用分离式scope达到隔离各自scope变量，避免变量污染，从而最大程度上达到指令的重用。</p>

<!--more-->

<blockquote>
  <p>注意，下面的示例为了突出重点，使用CoffeeScript展示代码</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>script.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;docsIsolateScopeDirective&#39;</span><span class="p">,</span> <span class="p">[]).</span><span class="nx">controller</span><span class="p">(</span><span class="s">&#39;Controller&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;$scope&#39;</span><span class="p">,</span><span class="nf">($scope) -&gt;</span>
</span><span class="line">  <span class="nv">$scope.naomi =</span>
</span><span class="line">    <span class="nv">name: </span><span class="s">&#39;Naomi&#39;</span>
</span><span class="line">    <span class="nv">address: </span><span class="s">&#39;1600 Amphitheatre&#39;</span>
</span><span class="line">  <span class="nv">$scope.igor =</span>
</span><span class="line">    <span class="nv">name: </span><span class="s">&#39;Igor&#39;</span>
</span><span class="line">    <span class="nv">address: </span><span class="s">&#39;123 Somewhere&#39;</span>
</span><span class="line"><span class="p">]).</span><span class="nx">directive</span> <span class="s">&#39;myCustomer&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class="line">  <span class="nv">restrict: </span><span class="s">&#39;E&#39;</span>
</span><span class="line">  <span class="nv">scope: customerInfo: </span><span class="s">&#39;=info&#39;</span>
</span><span class="line">  <span class="nv">template: </span><span class="s">&quot;Name: { {customerInfo.name} } Address: { {customerInfo.address} }&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;Controller&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;my</span><span class="na">-customer</span> <span class="na">info=</span><span class="s">&quot;naomi&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/my-customer&gt;
</span><span class="line">  <span class="nt">&lt;hr&gt;</span>
</span><span class="line">  <span class="nt">&lt;my</span><span class="na">-customer</span> <span class="na">info=</span><span class="s">&quot;igor&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/my-customer&gt;
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>输出为</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Name: Naomi Address: 1600 Amphitheatre Name: Igor Address: 123 Somewhere
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>由输出可以看出，指令<code>my-customer</code>中的<code>info</code>属性被分别绑定到了外部scope的两个变量<code>naomi</code>和<code>igor</code>，虽然是同一指令，但相互之间没有干扰或污染。这样<code>my-customer</code>指令可以非常漂亮的被重用。</p>

<p>其实，如果不需要特意在指令间共享scope，最好都使用分离式scope来写指令。</p>

<p>另外，指令内属性名如果和绑定的外部属性相同，可以采用简写模式，如这里<code>my-customer</code>的<code>info</code>属性映射到内部也用<code>info</code>引用的化:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>script.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nx">directive</span> <span class="s">&#39;myCustomer&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class="line">  <span class="nv">restrict: </span><span class="s">&#39;E&#39;</span>
</span><span class="line">  <span class="nv">scope: info: </span><span class="s">&#39;=&#39;</span>
</span><span class="line">  <span class="nv">template: </span><span class="s">&#39;Name: { {customerInfo.name} } Address: { {customerInfo.address} }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section">@单向绑定</h3>
<p>对于仅仅需要在指令中反应外部scope变量变化的情况下，可以仅使用单向绑定，将controller的变量映射到指令中，一旦在controller中修改变量，指令中可以立即看到变化，然而反过来则不可，即外部scope中看不到指令内部对变量的修改。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>script.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="p">.</span><span class="nx">directive</span> <span class="s">&#39;myDirective, -&gt;</span>
</span><span class="line"><span class="s">  scope: attributeFoo: &#39;</span><span class="nx">@</span><span class="s">&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;my</span><span class="na">-component</span> <span class="na">attribute-foo=</span><span class="s">&quot;{ {foo} }&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/my-component&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>即，在控制器里修改foo，在<code>my-directive</code>中可以感知到。通常单向绑定对于取字符串值很常见，所以这里的html中使用双花括号插值。因此，单向绑定的官方名称其实是叫属性绑定。</p>

<h3 id="section-1">=双向绑定</h3>
<p>看名称就知道用途了，双向绑定使用<code>=</code>定义，直接看例子:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>script.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="p">.</span><span class="nx">directive</span> <span class="s">&#39;myDirective, -&gt;</span>
</span><span class="line"><span class="s">  scope: bindingFoo: &#39;</span><span class="o">=</span><span class="s">&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">&amp;表达式绑定</h3>
<p>或者换个更human的名称，函数绑定，如果需要在指令内调用controler的函数，这就是说我们可以在指令内部定义接口，controller定义具体实现，这样指令就能够变得非常灵活，用在分离式scope中，既避免了变量污染又达到了灵活性，太cool了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>my-directive.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="p">.</span><span class="nx">directive</span> <span class="s">&#39;myDirective, -&gt;</span>
</span><span class="line"><span class="s">  scope: myHandler: &#39;</span><span class="o">&amp;</span><span class="s">&#39;</span>
</span><span class="line"><span class="s">  template: &#39;</span><span class="o">&lt;</span><span class="nx">button</span> <span class="nx">type</span><span class="o">=</span><span class="s">&quot;button&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="s">&quot;myHandler({$count: 123})&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">button</span><span class="o">&gt;</span><span class="s">&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>my-controller.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="p">.</span><span class="nx">controller</span> <span class="s">&#39;MyCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;$scope&#39;</span><span class="p">,</span><span class="nf">($scope) -&gt;</span>
</span><span class="line">    <span class="nv">$scope.getCounts = </span><span class="nf">(countNum) -&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;Button click count: </span><span class="si">#{</span><span class="nx">countNum</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class="line"><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;my</span><span class="na">-directive</span> <span class="na">my-handler=</span><span class="s">&quot;getCounts($count)&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/my-directive&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-3">非常重要:函数传参</h4>
<p>对于无参函数的绑定，没什么好说的。但对应上例中的情况，需要把参数从指令中传到外部函数，则需要注意了。</p>

<ul>
  <li>参数必须是hash类型的json对象，即参数是k-v类型的对象，如示例中的<code>{$count: 123}</code></li>
  <li>html中使用指令的地方函数的参数必须和指令中函数传递的参数的key一一对应，即指令中传递的参数的key是<code>$count</code>，那么html中指令绑定的函数接受的参数必须是<code>$count</code>，否则无法接受正确的参数。但是在controller里的函数参数名不必和他们保持一致。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效读取excel]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/05/25/gao-xiao-du-qu-excel/"/>
    <updated>2015-05-25T11:11:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/05/25/gao-xiao-du-qu-excel</id>
    <content type="html"><![CDATA[<p>前面介绍ruby写excel文件的一个很cool的gem包<code>axlsx</code>,这里介绍另一个高效读取excel的包<code>creek</code>。</p>

<p>一个读一个写，ruby轻松搞定execel处理。
<!-- more --></p>

<h4 id="section">安装</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">gem install creek
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-1">使用</h4>
<p><code>creek</code>本身的使用非常简单:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>creek_demo.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;creek&#39;</span>
</span><span class="line"><span class="n">creek</span> <span class="o">=</span> <span class="ss">Creek</span><span class="p">:</span><span class="ss">:Book</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;specs/fixtures/sample.xlsx&quot;</span>
</span><span class="line"><span class="n">sheet</span><span class="o">=</span> <span class="n">creek</span><span class="o">.</span><span class="n">sheets</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 注:获取行数不能用size方法</span>
</span><span class="line"><span class="nb">puts</span> <span class="n">sheet</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span> <span class="c1"># =&gt; 100</span>
</span><span class="line">
</span><span class="line"><span class="n">sheet</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class="line">  <span class="nb">puts</span> <span class="n">row</span> <span class="c1"># =&gt; {&quot;A1&quot;=&gt;&quot;Content 1&quot;, &quot;B1&quot;=&gt;nil, C1&quot;=&gt;nil, &quot;D1&quot;=&gt;&quot;Content 3&quot;}</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">sheet</span><span class="o">.</span><span class="n">rows_with_meta_data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class="line">  <span class="nb">puts</span> <span class="n">row</span> <span class="c1"># =&gt; {&quot;collapsed&quot;=&gt;&quot;false&quot;, &quot;customFormat&quot;=&gt;&quot;false&quot;, &quot;customHeight&quot;=&gt;&quot;true&quot;, &quot;hidden&quot;=&gt;&quot;false&quot;, &quot;ht&quot;=&gt;&quot;12.1&quot;, &quot;outlineLevel&quot;=&gt;&quot;0&quot;, &quot;r&quot;=&gt;&quot;1&quot;, &quot;cells&quot;=&gt;{&quot;A1&quot;=&gt;&quot;Content 1&quot;, &quot;B1&quot;=&gt;nil, C1&quot;=&gt;nil, &quot;D1&quot;=&gt;&quot;Content 3&quot;}}</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">sheet</span><span class="o">.</span><span class="n">state</span>   <span class="c1"># =&gt; &#39;visible&#39;</span>
</span><span class="line"><span class="n">sheet</span><span class="o">.</span><span class="n">name</span>    <span class="c1"># =&gt; &#39;Sheet1&#39;</span>
</span><span class="line"><span class="n">sheet</span><span class="o">.</span><span class="n">rid</span>     <span class="c1"># =&gt; &#39;rId2&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### 性能
读取并遍历一个16M左右17608行的xlsx文件，benchmark:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">--------------- total: 84.040000sec   ----------------
</span><span class="line">  user     system      total        real
</span><span class="line"> 84.920000   0.680000  85.600000 <span class="o">(</span> 86.084133<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>P.S. 无法和其他读取excel的gem做对比，因为试着做对比测试时发现其他gem根本卡在读取操作那不动了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[脚下的路]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/02/16/jiao-xia-de-lu/"/>
    <updated>2015-02-16T09:22:38+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/02/16/jiao-xia-de-lu</id>
    <content type="html"><![CDATA[<p>本来之前就想写写关于2014年的经历，但一直心里都是满满的负能量，所以一直没有下笔。今天其实也是，和家人闹得不开心，然后愤懑地来公司上班，没想到在路上反而突然想明白了，所以就回顾一下过去的2014，还有现在心里的想法吧。</p>

<p>在<code>life</code>分类下，之前的两篇文字都是非常积极的，我之前耕耘多年，凭着自己的努力进入了百度，我自己其实是非常自豪的。即便进入了百度后，能力也被非常认可。所以在2014上半年，其实我是感觉意气风发的，在工作中，也做出了一些很cool的事情。那时候的我，感觉自己离梦想只有一步之遥，仿佛站在天梯之巅，拨开云层再踏一步，可能我就能出去，去Google朝圣。那是在朋友们眼中，我就是个疯子，什么都可以不要。那时，我是幸福的，虽然在别人眼里，那时的我是一个不负责任，狂热的人。</p>

<p>但是在下半年，我逐渐感受到狂热背后的东西，尽管在百度，也要做很多机械重复的事情，此外更重要的是，我发现自己很孤独，除开工作，我一无所有，独自在上海漂泊，心里非常寂寞。再加上后来家人生病，我选择了离开，回到成都。</p>

<p>在离开百度的那段日子，我的情绪非常低落，每天只吃一点东西。真的，人有时候在失去时才知道珍惜。回到成都小半年里，我常常回忆起临走前一天，在食堂吃过饭后翠姐问我:你不是想去Google吗，你怎么办？ 那时我心里如遭重锤，是啊，有路吗？我沉默了下，算是安慰自己回答她：走一步看一步吧。这种答案，我自己都觉得好难过……</p>

<p><code>people must pay for their choices</code>，每个人必须为他的选择付出代价。</p>

<!-- more -->

<p>回来的好长日子里，我无法适应。逐渐地，我开始怀念在百度的那段日子。这时我才体会到，百度真正优秀的地方，不在于她的大公司地位和光环，在于百度的人，在于那些身上深深烙上了百度刻印而不自知的优秀同学。不论懂的多少，总是怀着一种谦逊求知的态度，对技术和知识的真正渴望，塑造了百度人自己的气质。</p>

<p><code>怀疑和迷茫</code>，占据了我。我不知道自己要干什么，不知道下一步的路在哪里。每天回到家，和家人在一起，其实也挺开心的，上班也能尽情雕琢自己的代码，这不是我以前想要的吗？曾经有人问我毕业后想要什么样的工作，我说能写代码就行。但现在我发现，其实我远远不能满足于这些，我需要舞台，需要一个大的舞台展示自己，希望被听到。</p>

<p>我告诉自己：我是优秀的人，到哪里我都必须要优秀!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rvm和rbenv环境变量冲突导致无法安装gem包]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/01/05/rvmhe-rbenvhuan-jing-bian-liang-chong-tu-dao-zhi-wu-fa-an-zhuang-gembao/"/>
    <updated>2015-01-05T18:11:47+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/01/05/rvmhe-rbenvhuan-jing-bian-liang-chong-tu-dao-zhi-wu-fa-an-zhuang-gembao</id>
    <content type="html"><![CDATA[<h2 id="section">背景</h2>
<p>root环境用rvm安装了ruby，但我需要在用户环境重装ruby，而且个人喜欢用rbenv，这就导致了我安装了rbenv的gem后，没有权限安装gem包。</p>

<!-- more -->

<h2 id="resolve">resolve</h2>
<p>这种情况是rvm强制设置了<code>GEM_HOME</code>导致的，可以<code>gem env</code>查看：</p>

<pre><code>jason@mac:~$ gem env
RubyGems Environment:
  - RUBYGEMS VERSION: 2.0.14
  - RUBY VERSION: 2.0.0 (2014-11-13 patchlevel 598) [x86_64-linux]
  - INSTALLATION DIRECTORY: /usr/local/rvm/gems/ruby-2.0.0-p353
  - RUBY EXECUTABLE: /home/jason/.rbenv/versions/2.0.0-p598/bin/ruby
  - EXECUTABLE DIRECTORY: /usr/local/rvm/gems/ruby-2.0.0-p353/bin
  - RUBYGEMS PLATFORMS:
    - ruby
    - x86_64-linux
  - GEM PATHS:
     - /usr/local/rvm/gems/ruby-2.0.0-p353
     - /home/jason/.rbenv/versions/2.0.0-p598/lib/ruby/gems/2.0.0/
  - GEM CONFIGURATION:
     - :update_sources =&gt; true
     - :verbose =&gt; true
     - :backtrace =&gt; false
     - :bulk_threshold =&gt; 1000
  - REMOTE SOURCES:
     - https://rubygems.org/
</code></pre>

<p>可见GEM PATHS里优先选择了rvm的gem路径，所以需要重设GEM_HOME</p>

<pre><code>export GEM_HOME=$HOME/.rbenv/versions/2.0.0-p598/lib/ruby/gems/2.0.0/
</code></pre>

<p>但是，最好的办法是在~/.bash_profile(centos,ubuntu中是.bashrc)中<code>eval "$(rbenv init -)"</code>前加上：</p>

<pre><code>unset GEM_PATH
unset GEM_HOME
</code></pre>

<p>这样也可以清除rvm的设置，使rbenv的变量被正确设置.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建递归菜单]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/01/02/chuang-jian-di-gui-cai-dan/"/>
    <updated>2015-01-02T12:44:07+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/01/02/chuang-jian-di-gui-cai-dan</id>
    <content type="html"><![CDATA[<p>如果菜单的数据模型是这样的,在angularjs中怎样比较漂亮地递归渲染出所有菜单项呢？</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="err">menuItems</span> <span class="err">=</span> <span class="p">[</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;level1&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="nt">&quot;link&quot;</span><span class="p">:</span> <span class="s2">&quot;/A&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="nt">&quot;menuItems&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class="line">      <span class="p">{</span>
</span><span class="line">        <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;level2&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="nt">&quot;link&quot;</span><span class="p">:</span> <span class="s2">&quot;/A/a1&quot;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">]</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;level1&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="nt">&quot;link&quot;</span><span class="p">:</span> <span class="s2">&quot;/B&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="nt">&quot;menuItems&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class="line">      <span class="p">{</span>
</span><span class="line">        <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;level2&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="nt">&quot;link&quot;</span><span class="p">:</span> <span class="s2">&quot;/B/b1&quot;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">]</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<h2 id="ng">需要的ng指令</h2>

<h3 id="script">script</h3>

<p>将<code>&lt;script&gt;</code>的内容加载到$templateCache,这样就能够在ngInclude, ngView或指令中使用。<code>&lt;script&gt;</code>的类型必须是<code>text/ng-template</code>，并用<code>id</code>指定id。如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/ng-template&quot;</span> <span class="na">id=</span><span class="s">&quot;tpl-1&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nx">Content</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">template</span><span class="p">.</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="nginit">ngInit</h3>
<p>在当前scope内重命名某属性</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;script&gt;</span>
</span><span class="line">  <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;initExample&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class="line">    <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ExampleController&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">$scope</span><span class="p">.</span><span class="nx">list</span> <span class="o">=</span> <span class="p">[[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">]];</span>
</span><span class="line">    <span class="p">}]);</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;ExampleController&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;div</span> <span class="na">ng-repeat=</span><span class="s">&quot;innerList in list&quot;</span> <span class="na">ng-init=</span><span class="s">&quot;outerIndex = $index&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">ng-repeat=</span><span class="s">&quot;value in innerList&quot;</span> <span class="na">ng-init=</span><span class="s">&quot;innerIndex = $index&quot;</span><span class="nt">&gt;</span>
</span><span class="line">       <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;example-init&quot;</span><span class="nt">&gt;</span>list[  ][  ] = ;<span class="nt">&lt;/span&gt;</span>
</span><span class="line">    <span class="nt">&lt;/div&gt;</span>
</span><span class="line">  <span class="nt">&lt;/div&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出：</p>

<pre><code>list[ 0 ][ 0 ] = a;
list[ 0 ][ 1 ] = b;
list[ 1 ][ 0 ] = c;
list[ 1 ][ 1 ] = d; 
</code></pre>

<h2 id="section">示例</h2>
<p>下面的示例代码就利用这些指令，将递归的菜单分割成扁平的模板，避免html模板过深的层次。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/ng-template&quot;</span> <span class="na">id=</span><span class="s">&quot;menu-item-link-tpl&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">span</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;title&quot;</span><span class="o">&gt;</span><span class="p"></span><span class="o">&lt;</span><span class="err">/span&gt;			</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">ng</span><span class="o">-</span><span class="k">if</span><span class="o">=</span><span class="s2">&quot;item.label&quot;</span><span class="o">&gt;</span><span class="p"></span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/ng-template&quot;</span> <span class="na">id=</span><span class="s">&quot;menu-items-tpl&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="o">=</span><span class="s2">&quot;item in menuItems&quot;</span><span class="o">&gt;</span>
</span><span class="line">	<span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">include</span><span class="o">=</span><span class="s2">&quot;&#39;menu-item-link-tpl&#39;&quot;</span><span class="o">&gt;&lt;</span><span class="err">/a&gt;</span>
</span><span class="line">	<span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">ng</span><span class="o">-</span><span class="k">if</span><span class="o">=</span><span class="s2">&quot;item.menuItems.length&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">init</span><span class="o">=</span><span class="s2">&quot;subItems = item.menuItems&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">include</span><span class="o">=</span><span class="s2">&quot;&#39;menu-items-recursive-tpl&#39;&quot;</span><span class="o">&gt;&lt;</span><span class="err">/ul&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/ng-template&quot;</span> <span class="na">id=</span><span class="s">&quot;menu-items-recursive-tpl&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="o">=</span><span class="s2">&quot;item in subItems&quot;</span><span class="o">&gt;</span>
</span><span class="line">	<span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">include</span><span class="o">=</span><span class="s2">&quot;&#39;menu-item-link-tpl&#39;&quot;</span><span class="o">&gt;&lt;</span><span class="err">/a&gt;</span>
</span><span class="line">	<span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">ng</span><span class="o">-</span><span class="k">if</span><span class="o">=</span><span class="s2">&quot;item.menuItems.length&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">init</span><span class="o">=</span><span class="s2">&quot;subItems = item.menuItems&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">include</span><span class="o">=</span><span class="s2">&quot;&#39;menu-items-recursive-tpl&#39;&quot;</span><span class="o">&gt;&lt;</span><span class="err">/ul&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;ul</span> <span class="na">ng-include=</span><span class="s">&quot;&#39;menu-items-tpl&#39;&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[angularJS路由框架ui-router]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/12/29/angularjslu-you-kuang-jia-ui-router/"/>
    <updated>2014-12-29T17:32:53+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/12/29/angularjslu-you-kuang-jia-ui-router</id>
    <content type="html"><![CDATA[<h1 id="section">简介</h1>
<p><a href="https://github.com/angular-ui/ui-router">AngularUI Router</a>是AngularJS的路由框架，和默认的<code>$route</code>不同，它将所有路由包装成可划分层级的状态机状态,路由路径在ui-router中不是必须的。由于ui-router的路由状态机是分层级的，所以使用ui-router可以非常方便地创建包含多个嵌入的子模板。</p>

<!-- more -->

<h1 id="demo">Demo</h1>
<p>直接使用<code>ui-router</code>的方式可以参考其github文档，这里以yeoman为例简单展示下ui-router的使用。</p>

<p>在<code>bower.json</code>中加入ui-router依赖包,然后<code>bower install</code>执行安装</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>bower.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;learn-angular&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.0&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">    <span class="err">/*省略其他*/</span>
</span><span class="line">    <span class="nt">&quot;angular-ui-router&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.2.13&quot;</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line"> <span class="err">/*省略其他*/</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在<code>index.html</code>中添加引用：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-ui-router/release/angular-ui-router.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在app.coffee中设置路由：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/scripts/app.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="s">&#39;use strict&#39;</span>
</span><span class="line">
</span><span class="line"><span class="nx">angular</span>
</span><span class="line">  <span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;learnAngularApp&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class="line">    <span class="s">&#39;ui.router&#39;</span>    <span class="c1"># 添加模块依赖</span>
</span><span class="line">  <span class="p">])</span>
</span><span class="line">  <span class="p">.</span><span class="nx">run</span> <span class="p">[</span><span class="s">&#39;$rootScope&#39;</span><span class="p">,</span> <span class="s">&#39;$state&#39;</span><span class="p">,</span> <span class="s">&#39;$stateParams&#39;</span><span class="p">,</span> <span class="nf">($rootScope,   $state,   $stateParams) -&gt;</span>
</span><span class="line">    <span class="nv">$rootScope.$state = </span><span class="nx">$state</span>
</span><span class="line">    <span class="nv">$rootScope.$stateParams = </span><span class="nx">$stateParams</span>
</span><span class="line">    <span class="p">]</span>
</span><span class="line">  <span class="p">.</span><span class="nx">config</span> <span class="nf">($stateProvider,$urlRouterProvider) -&gt;</span>
</span><span class="line">    <span class="nx">$urlRouterProvider</span><span class="p">.</span><span class="nx">otherwise</span> <span class="s">&quot;/&quot;</span>
</span><span class="line">    <span class="nx">$stateProvider</span>
</span><span class="line">      <span class="p">.</span><span class="nx">state</span> <span class="s">&#39;home&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="nv">url: </span><span class="s">&#39;/&#39;</span>                      <span class="c1"># 可见默认路由状态是home</span>
</span><span class="line">        <span class="nv">templateUrl: </span><span class="s">&#39;views/home.html&#39;</span>
</span><span class="line">      <span class="p">.</span><span class="nx">state</span> <span class="s">&#39;state1&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="nv">url: </span><span class="s">&#39;/state1&#39;</span>
</span><span class="line">        <span class="nv">templateUrl: </span><span class="s">&#39;views/state1.html&#39;</span>
</span><span class="line">      <span class="p">.</span><span class="nx">state</span> <span class="s">&#39;state1.list&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="nv">url: </span><span class="s">&#39;/list&#39;</span>
</span><span class="line">        <span class="nv">templateUrl: </span><span class="s">&#39;views/state1.list.html&#39;</span>
</span><span class="line">        <span class="nv">controller: </span><span class="nf">($scope) -&gt;</span>
</span><span class="line">          <span class="nv">$scope.items = </span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="s">&quot;List&quot;</span><span class="p">,</span> <span class="s">&quot;Of&quot;</span><span class="p">,</span> <span class="s">&quot;Items&quot;</span><span class="p">]</span>
</span><span class="line">      <span class="p">.</span><span class="nx">state</span> <span class="s">&#39;state2&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="nv">url: </span><span class="s">&#39;/state2&#39;</span>
</span><span class="line">        <span class="nv">templateUrl: </span><span class="s">&#39;views/state2.html&#39;</span>
</span><span class="line">      <span class="p">.</span><span class="nx">state</span> <span class="s">&#39;state2.list&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="nv">url: </span><span class="s">&#39;/list&#39;</span>
</span><span class="line">        <span class="nv">templateUrl: </span><span class="s">&#39;views/state2.list.html&#39;</span>
</span><span class="line">        <span class="nv">controller: </span><span class="nf">($scope) -&gt;</span>
</span><span class="line">          <span class="nv">$scope.things = </span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="s">&quot;Set&quot;</span><span class="p">,</span> <span class="s">&quot;Of&quot;</span><span class="p">,</span> <span class="s">&quot;Things&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ui-router最重要的三个服务<code>$state</code>,<code>$stateProvider</code>,<code>$urlRouterProvider</code>。在<code>$stateProvider</code>上配置所有的状态，state方法的第一个参数是状态名，第二个参数是一个hash对象，里面可以配置<code>url</code>,<code>templateUrl</code>,<code>controller</code>等。</p>

<p>注意其中类似<code>state1.list</code>和<code>state1</code>的状态，<code>state1.list</code>是<code>state1</code>的子状态，所以触发<code>state1.list</code>的url是父子状态的联合，即<code>/state1</code>+<code>/list</code> =&gt; <code>/state1/list</code>,所以当浏览器导航到<code>/state1/list</code>（或手动触发<code>$state.go()</code>）时，<code>state1.list.html</code>才被插入父模板渲染。</p>

<p>下图非常清晰反映了ui-router的渲染逻辑：</p>

<ul>
  <li>绿色 = 初始状态</li>
  <li>黄色 = 即时渲染</li>
  <li>蓝色 = 最终状态</li>
</ul>

<p><img src="https://camo.githubusercontent.com/15b1f1780e3a88cc1d6e0055dda298279d66fad7/68747470733a2f2f7261772e6769746875622e636f6d2f77696b692f616e67756c61722d75692f75692d726f757465722f5374617465476f4578616d706c65732e706e67" alt="渲染逻辑" /></p>

<p>主模板index.html:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;div&gt;</span>
</span><span class="line">    <span class="nt">&lt;ul&gt;</span>
</span><span class="line">      <span class="nt">&lt;li</span> <span class="na">ui-sref-active=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;home&quot;</span><span class="nt">&gt;</span>home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class="line">      <span class="nt">&lt;li</span> <span class="na">ui-sref-active=</span><span class="s">&quot;active&quot;</span> <span class="nt">&gt;&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;state1&quot;</span><span class="nt">&gt;</span>state1<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class="line">      <span class="nt">&lt;li</span> <span class="na">ui-sref-active=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;state2&quot;</span><span class="nt">&gt;</span>state2<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class="line">    <span class="nt">&lt;/ul&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span><span class="line"><span class="nt">&lt;div</span> <span class="na">ui-view</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里出现了两个ui-router的指令，<code>ui-sref</code>类似于angularjs的<code>ng-href</code>，只不过后面指定的是路由状态。</p>

<p>另一个指令就是<code>ui-view</code>，ui-router根据激活的状态向该指令中插入子模板。ui-router插入模板的规则是：<code>ui-router会将激活状态的模板插入父状态模板的ui-view处</code>。home状态是根状态，所以<code>app/index.html</code>的<code>ui-view</code>中插入的就是home状态的模板片段<code>app/views/home.html</code>。</p>

<p>其他模板：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="c">&lt;!-- app/views/state1.html --&gt;</span>
</span><span class="line"><span class="nt">&lt;h1&gt;</span>State 1<span class="nt">&lt;/h1&gt;</span>
</span><span class="line"><span class="nt">&lt;hr/&gt;</span>
</span><span class="line"><span class="nt">&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;state1.list&quot;</span><span class="nt">&gt;</span>Show List<span class="nt">&lt;/a&gt;</span>
</span><span class="line"><span class="nt">&lt;div</span> <span class="na">ui-view</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class="line"><span class="c">&lt;!-- app/views/state1.list.html --&gt;</span>
</span><span class="line"><span class="nt">&lt;h3&gt;</span>List of State 1 Items<span class="nt">&lt;/h3&gt;</span>
</span><span class="line"><span class="nt">&lt;ul&gt;</span>
</span><span class="line">  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;item in items&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/li&gt;</span>
</span><span class="line"><span class="nt">&lt;/ul&gt;</span>
</span><span class="line"><span class="c">&lt;!-- app/views/state2.html --&gt;</span>
</span><span class="line"><span class="nt">&lt;h1&gt;</span>State 2<span class="nt">&lt;/h1&gt;</span>
</span><span class="line"><span class="nt">&lt;hr/&gt;</span>
</span><span class="line"><span class="nt">&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;state2.list&quot;</span><span class="nt">&gt;</span>Show List<span class="nt">&lt;/a&gt;</span>
</span><span class="line"><span class="nt">&lt;div</span> <span class="na">ui-view</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class="line"><span class="c">&lt;!-- app/views/state2.list.html --&gt;</span>
</span><span class="line"><span class="nt">&lt;h3&gt;</span>List of State 2 Things<span class="nt">&lt;/h3&gt;</span>
</span><span class="line"><span class="nt">&lt;ul&gt;</span>
</span><span class="line">  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;thing in things&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/li&gt;</span>
</span><span class="line"><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>由上面的规则可以同理推出，当url为<code>/state1/list</code>时，会渲染主模板<code>state1.html</code>，并且会将子模板<code>state1.list.html</code>嵌入<code>state1.html</code>的<code>ui-view</code>中一起渲染出来。cool，路由渲染的灵活性非常高！</p>

<p>另外还有一个常用指令<code>ui-sref-active="classname"</code>,它通常和<code>ui-sref</code>一起使用，含义是当前状态被激活则会在所属html标签上class属性添加classname,如果不再是激活状态则去除classname。</p>

<p>另外，ui-router还支持多模板：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/views/index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;body&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">ui-view=</span><span class="s">&quot;viewA&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">ui-view=</span><span class="s">&quot;viewB&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- Also a way to navigate --&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;route1&quot;</span><span class="nt">&gt;</span>Route 1<span class="nt">&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;route2&quot;</span><span class="nt">&gt;</span>Route 2<span class="nt">&lt;/a&gt;</span>
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/scripts/app.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nx">myApp</span><span class="p">.</span><span class="nx">config</span> <span class="nf">($stateProvider) -&gt;</span>
</span><span class="line">  <span class="nx">$stateProvider</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s">&quot;index&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="nv">url: </span><span class="s">&quot;&quot;</span>
</span><span class="line">    <span class="nv">views:</span>
</span><span class="line">      <span class="nv">viewA:</span>
</span><span class="line">        <span class="nv">template: </span><span class="s">&quot;index.viewA&quot;</span>
</span><span class="line">      <span class="nv">viewB:</span>
</span><span class="line">        <span class="nv">template: </span><span class="s">&quot;index.viewB&quot;</span>
</span><span class="line">  <span class="p">).</span><span class="nx">state</span><span class="p">(</span><span class="s">&quot;route1&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="nv">url: </span><span class="s">&quot;/route1&quot;</span>
</span><span class="line">    <span class="nv">views:</span>
</span><span class="line">      <span class="nv">viewA:</span>
</span><span class="line">        <span class="nv">template: </span><span class="s">&quot;route1.viewA&quot;</span>
</span><span class="line">      <span class="nv">viewB:</span>
</span><span class="line">        <span class="nv">template: </span><span class="s">&quot;route1.viewB&quot;</span>
</span><span class="line">  <span class="p">).</span><span class="nx">state</span> <span class="s">&quot;route2&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="nv">url: </span><span class="s">&quot;/route2&quot;</span>
</span><span class="line">    <span class="nv">views:</span>
</span><span class="line">      <span class="nv">viewA:</span>
</span><span class="line">        <span class="nv">template: </span><span class="s">&quot;route2.viewA&quot;</span>
</span><span class="line">      <span class="nv">viewB:</span>
</span><span class="line">        <span class="nv">template: </span><span class="s">&quot;route2.viewB&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的简历]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/12/15/resume/"/>
    <updated>2014-12-15T20:20:58+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/12/15/resume</id>
    <content type="html"><![CDATA[<h4 id="section">联系方式</h4>

<ul>
  <li>
    <p>姓名: JasonQu</p>
  </li>
  <li>
    <p>邮箱: qjpcpu@gmail.com</p>
  </li>
  <li>
    <p>电话: 终端执行<code>(uname -a |grep -i linux &gt;/dev/null) &amp;&amp; (echo MTU4ODQ1NDIyMzgK | base64 -d) || (echo MTU4ODQ1NDIyMzgK | base64 -D)</code></p>
  </li>
  <li>
    <p>微信: </p>
  </li>
</ul>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/wechat.jpg" alt="qrcode" /></p>

<!-- more -->

<h3 id="section-1">教育经历</h3>

<table>
  <thead>
    <tr>
      <th>时间</th>
      <th>学校</th>
      <th>学位</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2011.9~2014.3</td>
      <td>同济大学</td>
      <td>硕士研究生</td>
      <td>-</td>
    </tr>
    <tr>
      <td>2007.9~2011.7</td>
      <td>同济大学</td>
      <td>本科学士学位</td>
      <td>-</td>
    </tr>
  </tbody>
</table>

<h3 id="section-2">工作履历</h3>

<h4 id="section-3">2014.12 - 2016.03</h4>

<ul>
  <li>
    <p>Company: tap4fun</p>
  </li>
  <li>
    <p>Location: 成都</p>
  </li>
  <li>
    <p>Position: 运维开发</p>
  </li>
</ul>

<h4 id="section-4">2013.12 - 2014.12</h4>

<ul>
  <li>
    <p>Company: 百度</p>
  </li>
  <li>
    <p>Location: 上海</p>
  </li>
  <li>
    <p>Position: 运维开发</p>
  </li>
</ul>

<h4 id="section-5">2013.1 - 2013.8</h4>

<ul>
  <li>
    <p>Company: 惠普(中国)</p>
  </li>
  <li>
    <p>Location: 上海</p>
  </li>
  <li>
    <p>Position: 打印机app开发(实习)</p>
  </li>
</ul>

<h3 id="section-6">项目经验</h3>

<h4 id="ioptap4fun">1. 智能运维系统iOP(tap4fun)</h4>

<p><strong>环境及工具:</strong> linux, ruby on rails, mongodb, angularJs, coffee-script</p>

<p><strong>项目描述:</strong>  系统为了完成运维自动化，提升运维效率，主要包含了以下几大功能:</p>

<ol>
  <li>自动部署: 运维同学在iOP中编辑部署模板，配置好部署针对的目标机器，需要执行的命令及每个命令脚本的执行顺序，提交后iOP按照配置自动完成代码从产品库到线上的发布变更</li>
  <li>流程管理: iOP内部抽象完成出一套工作流引擎<a href="https://github.com/qjpcpu/taskflow-mongoid">TaskFlow</a>，该引擎的执行步骤可重用可配置，驱动整个iOP的工单数据流</li>
  <li>机器操作: 底层封装aws及阿里云，屏蔽其细节，统一对运维提供开服/关服/开关机等机器操作</li>
  <li>镜像备份: 根据配置自动备份机器实例，完成灾备</li>
  <li>权限管理: 所有用户根据自己角色决定了资源的可见性和可操作性，同时和线上机器登录权限保持同步</li>
  <li>配置: 其他运维元数据的配置管理</li>
</ol>

<h4 id="tap4fungithubhttpsgithubcomqjpcpuwechatnotifier">2. 微信消息平台(tap4fun)<a href="https://github.com/qjpcpu/WeChatNotifier">github地址</a></h4>

<p><strong>环境及工具:</strong> linux, nodejs, requirejs, gulp, coffee-script, leveldb</p>

<p><strong>项目描述:</strong> 为企业内部提供消息推送服务及单点登录</p>

<ol>
  <li>消息推送: 利用该平台，企业各内部系统可以利用微信向员工推送消息</li>
  <li>消息响应: 内部系统可以被动响应消息，从而达到将微信作为交互平台的目的</li>
  <li>单点登录: 企业内部系统可以利用微信消息平台作为单点登录,有效解决中小型企业的登录安全性及便利性</li>
</ol>

<h4 id="tap4fun">3. 统一认证系统(tap4fun)</h4>

<p><strong>环境及工具:</strong> linux, ruby on rails, mongodb</p>

<p><strong>项目描述:</strong> 使用google Oauth2完成内部员工单点登录认证</p>

<h4 id="section-7">4. 流式监控系统(百度)</h4>

<p><strong>环境及工具:</strong> linux, ruby, mysql, emacs, sinatra</p>

<p><strong>项目描述:</strong> 监控流式计算系统当前的任务处理情况,并能自动定位故障。前端使用sinatra框架完成,使用了ajax和coffeescript等技术,后端任务用ruby+bash完成,数据存储在项目前期后期分别选用了mongodb和mysql</p>

<h4 id="section-8">5. 机器管理系统(百度)</h4>

<p><strong>环境及工具:</strong> linux, ruby, mysql, emacs</p>

<p><strong>项目描述:</strong> 管理机器池的机器自动安装,环境自动初始化,机器数量千台以上。首先,自动检测机器是否故障,如果有故障则自动完成送修,送修完成自动挂回。如无故障则进行机器重装,安装各种初始化环境等 。系统前端采用rails编写,后端混合ruby和bash,数据交互使用mysql数据库,自动操作利用状态机设计完成</p>

<h4 id="githubhttpsgithubcomqjpcpujreport">6. 快速报表开发框架(百度)<a href="https://github.com/qjpcpu/jreport">github地址</a></h4>

<p><strong>环境及工具:</strong> linux, ruby , emacs</p>

<p><strong>项目描述:</strong>  一套快速报表开发框架,基于该框架最快可以在10分钟内开发出一套邮件报表,是一套针对报表专门设计开发的类rails框架</p>

<h4 id="golanggithubhttpsgithubcomqjpcpusexy-ssh">7. 基于golang的批量工具(百度)<a href="https://github.com/qjpcpu/sexy-ssh">github地址</a></h4>

<p><strong>环境及工具:</strong> linux, golang</p>

<p><strong>项目描述:</strong> 基于ssh协议的批量操作工具,功能强大部署简单。 能完成批量任务执行及文件复制,任务执行能力强,使用go语言开发完成</p>

<h4 id="app">8. 打印机app(惠普中国)</h4>

<p><strong>环境及工具:</strong> windows, java, serverlet, jsp</p>

<p><strong>项目描述:</strong> 惠普打印机无线打印app。无须电脑,打印机上直接浏览网盘文件进行预览及打印</p>

<h3 id="section-9">技能概览</h3>

<h4 id="section-10">编程语言</h4>

<ul>
  <li>ruby; 精通ruby,5年+经验</li>
  <li>coffee-script; 熟悉coffee，能熟练用来开发前端页面或后端node程序</li>
  <li>golang; 熟悉go语言，有小型项目经验</li>
  <li>shell; 2年以上linux运维，能熟练使用shell管理linux</li>
  <li>java/C#/C/Python; 基本了解</li>
</ul>

<h4 id="section-11">操作系统</h4>

<ul>
  <li>2年以上linux运维经验, 长期linux使用经验</li>
  <li>自己编译过linux系统，并翻译过LFS，译本见<a href="https://github.com/qjpcpu/LFS">Linux from scratch</a></li>
</ul>

<h4 id="section-12">数据库</h4>

<ul>
  <li>有基于mongodb, mysql开发经验</li>
</ul>

<h4 id="web">web开发</h4>

<ul>
  <li>熟悉ruby及js的web开发技术</li>
  <li>熟悉前端新技术angularJS</li>
</ul>

<h4 id="section-13">服务器开发</h4>

<ul>
  <li>熟练利用ruby/golang进行服务端开发</li>
</ul>

<h3 id="section-14">自我评价</h3>

<ul>
  <li>好奇心，对新技术有极强的热情和好奇心，热爱拥抱新的技术动向</li>
  <li>自我激励，一旦认定目标，会投入100%精力完成</li>
  <li>崇拜Google</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新建angular项目]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/11/25/xin-jian-angularxiang-mu/"/>
    <updated>2014-11-25T10:54:31+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/11/25/xin-jian-angularxiang-mu</id>
    <content type="html"><![CDATA[<h2 id="section">需要的工具</h2>

<ul>
  <li><a href="http://bower.io/">bower</a> 前端包管理器</li>
  <li><a href="http://gruntjs.com/">grunt</a> javascript的makefile工具</li>
  <li><a href="http://yeoman.io/">yeoman</a>  webapp的流行脚手架</li>
  <li><a href="http://karma-runner.github.io/0.12/index.html">karma</a> 测试套件</li>
</ul>

<p>这里我使用了yeoman的一个angularJS的生成器<a href="https://github.com/yeoman/generator-angular">yo</a>，方便生成需要的全部零部件</p>

<!-- more -->

<h2 id="section-1">新建工程</h2>

<p>我们要建立的angularjs工程的项目名称叫<code>MyAngularApp</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mkdir MyAngularApp
</span><span class="line"><span class="nb">cd </span>MyAngularApp
</span><span class="line"><span class="c"># 这里我习惯用coffee来写代码，如果直接用javascript可以去掉后面的参数--coffee</span>
</span><span class="line">yo angular --coffee
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>生成的目录结构如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">MyAngularApp
</span><span class="line">├── Gruntfile.js
</span><span class="line">├── README.md
</span><span class="line">├── app
</span><span class="line">│   ├── 404.html
</span><span class="line">│   ├── favicon.ico
</span><span class="line">│   ├── images
</span><span class="line">│   ├── index.html
</span><span class="line">│   ├── robots.txt
</span><span class="line">│   ├── scripts
</span><span class="line">│   ├── styles
</span><span class="line">│   └── views
</span><span class="line">├── bower.json
</span><span class="line">├── bower_components
</span><span class="line">│   ├── angular
</span><span class="line">│   ├── angular-animate
</span><span class="line">│   └── ......
</span><span class="line">├── node_modules
</span><span class="line">│   ├── coffee-script
</span><span class="line">│   └── ......
</span><span class="line">├── package.json
</span><span class="line">└── <span class="nb">test</span>
</span><span class="line">    ├── karma.conf.coffee
</span><span class="line">    └── spec
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中，<code>Gruntfile.js</code>是grunt的makefile文件，里面定义了各种编译任务，如常用的<code>grunt serve</code>和<code>grunt build</code>。</p>

<p><code>app</code>目录是主要的工作目录，下面的<code>scripts</code>目录放置所有的controller，<code>styles</code>放置各种css文件，<code>views</code>放置视图模板；也可以在<code>app</code>下防止自己的资源文件夹如<code>vendor</code>目录，放置第三方库。</p>

<p><code>bower.json</code>中定义了需要安装的库，功能类似于ruby的Gemfile文件，在工程根目录执行<code>bower install</code>安装依赖。所有的依赖库都会被安装到<code>bower_components</code>目录中。</p>

<p><code>node_modules</code>是项目工具如coffee或者grunt的依赖工具。</p>

<p><code>package.json</code>是grunt的依赖工具。</p>

<p><code>test</code>是测试文件所在。</p>

<h2 id="indexhtml">index.html</h2>

<p>yo的常用操作可以参考其github文档。这里需要补充说一下的是<code>app/index.html</code>文件，该文件是angular项目的起始文件。注意其中类似下面这样的语句：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="c">&lt;!-- build:css({.tmp,app}) styles/main.css --&gt;</span>
</span><span class="line"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;styles/main.css&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="c">&lt;!-- endbuild --&gt;</span>
</span><span class="line">
</span><span class="line"><span class="c">&lt;!-- build:js(.) scripts/vendor.js --&gt;</span>
</span><span class="line"><span class="c">&lt;!-- bower:js --&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular/angular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-animate/angular-animate.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-cookies/angular-cookies.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-resource/angular-resource.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-route/angular-route.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-sanitize/angular-sanitize.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-touch/angular-touch.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="c">&lt;!-- endbower --&gt;</span>
</span><span class="line"><span class="c">&lt;!-- endbuild --&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>要注意的是<code>&lt;!-- build:css(DIRECTORY) OUT_FILE --&gt;</code>和<code>&lt;!-- build:js(DIRECTORY) OUTFILE --&gt;</code>，它们并不是普通的html注释，而是grunt的指令。</p>

<p>比如第一段，grunt会将<code>build:css</code>到<code>endbuild</code>之间的css文件找到，查找路径是<code>build:css(DIRECTORY)</code>中的目录加上<code>link</code>标签里的<code>href</code>指定的文件路径所在文件，即<code>.tmp/styles/main.css</code>和<code>app/styles/main.css</code>,然后grunt将它们合并压缩为一个css文件<code>styles/main.css</code>，这个文件被生成在输入目录，通常是<code>dist/styles/main.css</code>。</p>

<p>类似的，下面的js编译将当前目录<code>.</code>下指定的<code>bower_components</code>下的一些js合并压缩后变成<code>dist/scripts/vendor.js</code>。</p>

<p>所以，自己引入的一些第三方库怎么弄也就清楚了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="c">&lt;!-- build:css(app) assets/css/vendor.css --&gt;</span>
</span><span class="line"><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;assets/css/animate.min.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="nt">/&gt;</span>
</span><span class="line"><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;assets/plugins/gritter/css/jquery.gritter.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="nt">/&gt;</span>
</span><span class="line"><span class="c">&lt;!-- endbuild --&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="grunt">grunt</h2>

<p>最后说一下grunt的任务，如果在app目录有个<code>assets/img</code>目录，里面放了一些图片，希望执行<code>grunt build</code>后将这些资源复制到输出目录，那么可以对<code>Gruntfile.js</code>做简单修改，如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// Copies remaining files to places other tasks can use</span>
</span><span class="line"><span class="nx">copy</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">files</span><span class="o">:</span> <span class="p">[{</span>
</span><span class="line">      <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">      <span class="nx">dot</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">      <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;&lt;%= yeoman.app %&gt;&#39;</span><span class="p">,</span>
</span><span class="line">      <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;&lt;%= yeoman.dist %&gt;&#39;</span><span class="p">,</span>
</span><span class="line">      <span class="nx">src</span><span class="o">:</span> <span class="p">[</span>
</span><span class="line">        <span class="s1">&#39;*.{ico,png,txt}&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s1">&#39;.htaccess&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s1">&#39;*.html&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s1">&#39;views/{,*/}*.html&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s1">&#39;images/{,*/}*.{webp}&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s1">&#39;assets/{,img/*.*,fonts/*.*}&#39;</span><span class="p">,</span>   <span class="c1">//这里添加了一行,也可以直接复制整个文件夹 &#39;assets/**&#39;</span>
</span><span class="line">        <span class="s1">&#39;fonts/{,*/}*.*&#39;</span>
</span><span class="line">      <span class="p">]</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/09/08/tmux/"/>
    <updated>2014-09-08T00:37:23+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/09/08/tmux</id>
    <content type="html"><![CDATA[<h3 id="section">基本操作</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">tmux new -s SESSION_NAME  <span class="c"># 新建会话</span>
</span><span class="line">tmux new -s SESSION_NAME -d <span class="c"># 新建会话并放入后台</span>
</span><span class="line">tmux ls <span class="c"># 列出所有会话</span>
</span><span class="line">tmux attach -t SESSION_NAME <span class="c"># 进入某会话</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<h3 id="section-1">命令列表</h3>

<p>默认情况下，tmux的前导命令开关是<code>Ctrl+b</code>，按了<code>Ctrl+b</code>后再按下面的命令，即执行相应操作：</p>

<h4 id="section-2">会话类</h4>

<table>
  <thead>
    <tr>
      <th>键位</th>
      <th>操作描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>?</td>
      <td>显示所有快捷键，按q退出</td>
    </tr>
    <tr>
      <td><strong>d</strong></td>
      <td><strong>脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话</strong></td>
    </tr>
    <tr>
      <td>D</td>
      <td>选择要脱离的会话；在同时开启了多个会话时使用</td>
    </tr>
    <tr>
      <td><strong>s</strong></td>
      <td><strong>选择并切换会话；在同时开启了多个会话时使用</strong></td>
    </tr>
    <tr>
      <td>:</td>
      <td>进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器</td>
    </tr>
    <tr>
      <td>[</td>
      <td>进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出</td>
    </tr>
  </tbody>
</table>

<h4 id="section-3">窗口类</h4>

<table>
  <thead>
    <tr>
      <th>键位</th>
      <th>操作描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>c</strong></td>
      <td><strong>创建新窗口</strong></td>
    </tr>
    <tr>
      <td><strong>&amp;</strong></td>
      <td><strong>关闭当前窗口</strong></td>
    </tr>
    <tr>
      <td><strong>数字键</strong></td>
      <td><strong>切换至指定窗口</strong></td>
    </tr>
    <tr>
      <td>p</td>
      <td>切换至上一窗口</td>
    </tr>
    <tr>
      <td>n</td>
      <td>切换至下一窗口</td>
    </tr>
    <tr>
      <td>l</td>
      <td>在前后两个窗口间互相切换</td>
    </tr>
    <tr>
      <td><strong>w</strong></td>
      <td><strong>通过窗口列表切换窗口</strong></td>
    </tr>
    <tr>
      <td><strong>,</strong></td>
      <td><strong>重命名当前窗口；这样便于识别</strong></td>
    </tr>
    <tr>
      <td><strong>.</strong></td>
      <td><strong>修改当前窗口编号；相当于窗口重新排序</strong></td>
    </tr>
    <tr>
      <td>!</td>
      <td>将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板</td>
    </tr>
  </tbody>
</table>

<h4 id="section-4">面板类</h4>

<table>
  <thead>
    <tr>
      <th>键位</th>
      <th>操作描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>”</strong></td>
      <td><strong>将当前面板平分为上下两块</strong></td>
    </tr>
    <tr>
      <td><strong>%</strong></td>
      <td><strong>将当前面板平分为左右两块</strong></td>
    </tr>
    <tr>
      <td><strong>x</strong></td>
      <td><strong>关闭当前面板</strong></td>
    </tr>
    <tr>
      <td><strong>o</strong></td>
      <td><strong>在当前窗口中选择下一面板</strong></td>
    </tr>
    <tr>
      <td>q</td>
      <td>显示面板编号</td>
    </tr>
  </tbody>
</table>

<h3 id="section-5">其他</h3>

<p>如果不想使用默认tmux server，或者同一用户想起多个tmux实例，可以使用<code>-S</code>参数指定不同的unix socket：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">tmux -S /path/to/another/unix/socket-file
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在tmux里使用zsh有时会导致窗口名称会不断变化，这需要修改下<code>~/.zshrc</code>文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">DISABLE_AUTO_TITLE</span><span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-6">可编程</h4>

<p>tmux最强大的地方还在于他的可编程性，用<code>tmux list-commands</code>可以看到tmux所有支持的命令。以我自己常执行的一个脚本为例，我开机后常常需要启动一系列服务便于开发, 但当我不开发时开电脑又不需要启动，所以放到开机自启动脚本里是不合适的，所以这里用tmux来批量起最合适了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/zsh</span>
</span><span class="line"><span class="c"># start tmux</span>
</span><span class="line"><span class="nv">session</span><span class="o">=</span>MAC
</span><span class="line">tmux new -s <span class="s2">&quot;$session&quot;</span> -d
</span><span class="line">tmux rename-window -t <span class="s2">&quot;$session:0&quot;</span> daemon
</span><span class="line"><span class="c"># start redis-server</span>
</span><span class="line">tmux send -t <span class="s2">&quot;$session:daemon&quot;</span> <span class="s1">&#39;redis-server&#39;</span> Enter
</span><span class="line">tmux split-window -h -t <span class="s2">&quot;$session:daemon&quot;</span>
</span><span class="line"><span class="c"># start mongo</span>
</span><span class="line">tmux send -t <span class="s2">&quot;$session:daemon&quot;</span> <span class="s1">&#39;mongod --dbpath /Users/jason/local/var/mongodb-data&#39;</span> Enter
</span><span class="line"><span class="c"># start nginx</span>
</span><span class="line">tmux split-window  -t <span class="s2">&quot;$session:daemon&quot;</span> <span class="s1">&#39;/Users/jason/local/nginx/sbin/nginx&#39;</span>
</span><span class="line">tmux <span class="k">select</span>-pane -L -t <span class="s2">&quot;$session:daemon&quot;</span>
</span><span class="line">tmux split-window -t <span class="s2">&quot;$session:daemon&quot;</span>
</span><span class="line"><span class="c"># start firefox with pentadactyl</span>
</span><span class="line">tmux send -t <span class="s2">&quot;$session:daemon&quot;</span> <span class="s1">&#39;/Applications/Firefox.app/Contents/MacOS/firefox -pentadactyl +u NONE&#39;</span> Enter
</span><span class="line">tmux <span class="k">select</span>-pane -R -t <span class="s2">&quot;$session:daemon&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># for develop project</span>
</span><span class="line">tmux neww -a -n dev -t <span class="s2">&quot;$session&quot;</span>
</span><span class="line">tmux send -t <span class="s2">&quot;$session:dev&quot;</span> <span class="s1">&#39;cd /Users/jason/repository/backend&#39;</span> Enter
</span><span class="line">tmux split-window -t <span class="s2">&quot;$session:dev&quot;</span>
</span><span class="line">tmux send -t <span class="s2">&quot;$session:dev&quot;</span> <span class="s1">&#39;cd /Users/jason/repository/frontend&#39;</span> Enter
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个脚本启动一个名为<code>MAC</code>的tmux session，并新建了两个窗口，在第一个窗口里开了4个面板，分别启动了nginx, redis, mongo， firefox。其中，开启窗口/面板时同时执行命令，该窗口/面板会在命令执行结束后自动关闭，所以第一个窗口最后实际只有3个面板；第二个窗口启动并切换到我正则开发的工程。</p>

<p>具体命令的使用可以参照该示例和man手册理解。</p>

<p>enjoy tmux!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识hadoop及map-reduce]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/09/03/chu-shi-hadoopji-map-reduce/"/>
    <updated>2014-09-03T20:40:36+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/09/03/chu-shi-hadoopji-map-reduce</id>
    <content type="html"><![CDATA[<h2 id="hadoop">搭建hadoop环境</h2>

<p>hadoop环境搭建具体可以参考<a href="http://hadoop.apache.org/docs/r1.2.1/single_node_setup.html">官方文档</a>。</p>

<h2 id="maven">搭建配置maven</h2>

<p>map-reduce任务支持多种语言，但对java支持是最好的，所以这里说一下怎么搭建java的编译环境。</p>

<p>首先编译安装maven，并将<code>MAVEN_HOME/bin</code>加入PATH环境变量，这样就可以直接使用<code>mvn</code>命令了。这里说一下怎么利用maven编译生成我们后续示例中的jar包。</p>

<h3 id="maven-1">1. 使用maven新建一个工程</h3>

<p>下面的命令创建一个包含java类<code>org.myorg.WordCount</code>的工程<code>WordCount</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mvn archetype:create -DgroupId<span class="o">=</span>org.myorg -DartifactId<span class="o">=</span>WordCount
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!--more-->

<p>工程结构如图：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">WordCount
</span><span class="line">├── pom.xml
</span><span class="line">└── src
</span><span class="line">    ├── main
</span><span class="line">    │   └── java
</span><span class="line">    │       └── org
</span><span class="line">    │           └── myorg
</span><span class="line">    │               └── App.java
</span><span class="line">    └── <span class="nb">test</span>
</span><span class="line">        └── java
</span><span class="line">            └── org
</span><span class="line">                └── myorg
</span><span class="line">                    └── AppTest.java
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将<code>WordCount/src/main/java/org/myorg/App.java</code>重命名为<code>WordCount/src/main/java/org/myorg/WordCount.java</code>，并将示例代码复制进去，代码的细节稍后再看。</p>

<p>由于java类中依赖于hadoop的java包，所以在maven的配置文件<code>pom.xml</code>标签对<code>&lt;dependencies/&gt;</code>内添加java类文件里引用的依赖：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>WordCount/pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;dependency&gt;</span>
</span><span class="line">  <span class="nt">&lt;groupId&gt;</span>org.apache.hadoop<span class="nt">&lt;/groupId&gt;</span>
</span><span class="line">  <span class="nt">&lt;artifactId&gt;</span>hadoop-mapreduce-client-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class="line">  <span class="nt">&lt;version&gt;</span>2.4.1<span class="nt">&lt;/version&gt;</span>
</span><span class="line"><span class="nt">&lt;/dependency&gt;</span>
</span><span class="line"><span class="nt">&lt;dependency&gt;</span>
</span><span class="line">  <span class="nt">&lt;groupId&gt;</span>org.apache.hadoop<span class="nt">&lt;/groupId&gt;</span>
</span><span class="line">  <span class="nt">&lt;artifactId&gt;</span>hadoop-common<span class="nt">&lt;/artifactId&gt;</span>
</span><span class="line">  <span class="nt">&lt;version&gt;</span>2.4.1<span class="nt">&lt;/version&gt;</span>
</span><span class="line"><span class="nt">&lt;/dependency&gt;</span>
</span><span class="line"><span class="nt">&lt;dependency&gt;</span>
</span><span class="line">  <span class="nt">&lt;groupId&gt;</span>org.apache.hadoop<span class="nt">&lt;/groupId&gt;</span>
</span><span class="line">  <span class="nt">&lt;artifactId&gt;</span>hadoop-mapreduce-client-common<span class="nt">&lt;/artifactId&gt;</span>
</span><span class="line">  <span class="nt">&lt;version&gt;</span>2.4.1<span class="nt">&lt;/version&gt;</span>
</span><span class="line"><span class="nt">&lt;/dependency&gt;</span>
</span><span class="line"><span class="nt">&lt;dependency&gt;</span>
</span><span class="line">  <span class="nt">&lt;groupId&gt;</span>org.apache.hadoop<span class="nt">&lt;/groupId&gt;</span>
</span><span class="line">  <span class="nt">&lt;artifactId&gt;</span>hadoop-mapreduce-client-jobclient<span class="nt">&lt;/artifactId&gt;</span>
</span><span class="line">  <span class="nt">&lt;version&gt;</span>2.4.1<span class="nt">&lt;/version&gt;</span>
</span><span class="line"><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="jar">2.编译生成jar包</h3>

<p>在WordCount根目录下执行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mvn package
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>就生成了我们需要的<code>WordCount/target/WordCount-1.0-SNAPSHOT.jar</code>文件。</p>

<h2 id="wordcount">执行示例程序WordCount</h2>

<p>示例程序是一个单词计数程序，输入文件有两个：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">file01</span>
</span><span class="line"><span class="o">=======================</span>
</span><span class="line">Hello World Bye World
</span><span class="line">
</span><span class="line"><span class="nv">file02</span>
</span><span class="line"><span class="o">=======================</span>
</span><span class="line">Hello Hadoop Goodbye Hadoop
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>### 1.上传数据文件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#创建目录</span>
</span><span class="line">hdfs dfs -mkdir /user
</span><span class="line">hdfs dfs -mkdir /user/hadoop
</span><span class="line"><span class="c">#上传文件</span>
</span><span class="line">hdfs dfs -put file01 /user/hadoop/input
</span><span class="line">hdfs dfs -put file02 /user/hadoop/input
</span><span class="line"><span class="c">#查看文件是否上传上去了</span>
</span><span class="line">hdfs dfs -ls /user/hadoop/input
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="map-reduce">2.提交并执行map-reduce任务</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">hadoop jar WordCount-1.0-SNAPSHOT.jar org.myorg.WordCount /user/hadoop/input /user/hadoop/output
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section">3.获取结果</h3>

<p>当任务执行完毕在输出目录会生成_SUCCESS文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">hdfs dfs -ls /user/hadoop/output
</span><span class="line"><span class="c">#输出是：</span>
</span><span class="line">-rw-r--r--   1 hadoop supergroup          0 2014-09-03 20:20 /user/hadoop/output/_SUCCESS
</span><span class="line">-rw-r--r--   1 hadoop supergroup         41 2014-09-03 20:20 /user/hadoop/output/part-00000
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>查看结果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">hdfs dfs -cat /user/hadoop/output/part-00000
</span><span class="line"><span class="c">#输出：</span>
</span><span class="line">Bye	1
</span><span class="line">Goodbye	1
</span><span class="line">Hadoop	2
</span><span class="line">Hello	2
</span><span class="line">World	2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="map-reduce-1">Map-Reduce</h2>

<p>回过头来再看执行map-reduce的这个java类<code>WordCount.java</code>，该类包含了两个静态内部类<code>Map</code>和<code>Reduce</code>，都继承了<code>MapReduceBase</code>基类，并各自实现了<code>Mapper</code>和<code>Reducer</code>接口。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>WordCount/src/main/java/org/myorg/WordCount.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">myorg</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.conf.*</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.*</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapred.*</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.util.*</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WordCount</span> <span class="o">{</span>
</span><span class="line"><span class="c1">//执行map操作的静态类</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Map</span> <span class="kd">extends</span> <span class="n">MapReduceBase</span> <span class="kd">implements</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">LongWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">	<span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">IntWritable</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">	<span class="kd">private</span> <span class="n">Text</span> <span class="n">word</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Text</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">map</span><span class="o">(</span><span class="n">LongWritable</span> <span class="n">key</span><span class="o">,</span> <span class="n">Text</span> <span class="n">value</span><span class="o">,</span> <span class="n">OutputCollector</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="n">output</span><span class="o">,</span> <span class="n">Reporter</span> <span class="n">reporter</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">	    <span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class="line">	    <span class="n">StringTokenizer</span> <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span><span class="line">	    <span class="k">while</span> <span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">		<span class="n">word</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
</span><span class="line">		<span class="c1">//OutputCollector以单词本身为键，出现次数为键值进行计数，这里每出现一次计数1</span>
</span><span class="line">		<span class="n">output</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">one</span><span class="o">);</span>
</span><span class="line">	    <span class="o">}</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="c1">//执行reduce操作的静态类</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Reduce</span> <span class="kd">extends</span> <span class="n">MapReduceBase</span> <span class="kd">implements</span> <span class="n">Reducer</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">reduce</span><span class="o">(</span><span class="n">Text</span> <span class="n">key</span><span class="o">,</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">IntWritable</span><span class="o">&gt;</span> <span class="n">values</span><span class="o">,</span> <span class="n">OutputCollector</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="n">output</span><span class="o">,</span> <span class="n">Reporter</span> <span class="n">reporter</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">	    <span class="c1">//map后的结果是同一个key对应一个value的列表，所以这里遍历values迭代器，累加所有值，即得到每个单词计数值</span>
</span><span class="line">	    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">	    <span class="k">while</span> <span class="o">(</span><span class="n">values</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">		<span class="n">sum</span> <span class="o">+=</span> <span class="n">values</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">get</span><span class="o">();</span>
</span><span class="line">	    <span class="o">}</span>
</span><span class="line">	    <span class="n">output</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="n">sum</span><span class="o">));</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">	<span class="n">JobConf</span> <span class="n">conf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JobConf</span><span class="o">(</span><span class="n">WordCount</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">	<span class="n">conf</span><span class="o">.</span><span class="na">setJobName</span><span class="o">(</span><span class="s">&quot;wordcount&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">	<span class="n">conf</span><span class="o">.</span><span class="na">setOutputKeyClass</span><span class="o">(</span><span class="n">Text</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">	<span class="n">conf</span><span class="o">.</span><span class="na">setOutputValueClass</span><span class="o">(</span><span class="n">IntWritable</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">	<span class="n">conf</span><span class="o">.</span><span class="na">setMapperClass</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">	<span class="n">conf</span><span class="o">.</span><span class="na">setCombinerClass</span><span class="o">(</span><span class="n">Reduce</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">	<span class="n">conf</span><span class="o">.</span><span class="na">setReducerClass</span><span class="o">(</span><span class="n">Reduce</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">	<span class="n">conf</span><span class="o">.</span><span class="na">setInputFormat</span><span class="o">(</span><span class="n">TextInputFormat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">	<span class="n">conf</span><span class="o">.</span><span class="na">setOutputFormat</span><span class="o">(</span><span class="n">TextOutputFormat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">	<span class="n">FileInputFormat</span><span class="o">.</span><span class="na">setInputPaths</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class="line">	<span class="n">FileOutputFormat</span><span class="o">.</span><span class="na">setOutputPath</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
</span><span class="line">
</span><span class="line">	<span class="n">JobClient</span><span class="o">.</span><span class="na">runJob</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>Mapper</code>接口是一个泛型接口,该接口4个参数分别指定了map方法的<code>输入键值，输入值，输出键值，输出值</code>类型。 类似的<code>Reducer</code>接口也是个泛型接口，它的前两个参数和map的后两个参数类型对应，从而也间接决定了后两个参数的类型。</p>

<p>简而言之，map的过程是把一行行的输入变成：</p>

<p>key1 =&gt; val1</p>

<p>key2 =&gt; val2</p>

<p>key3 =&gt; val1</p>

<p>而reduce的输入是排序过后map的输出：</p>

<p>key1 =&gt; [val1,val…..]</p>

<p>key2 =&gt; [val2,val…..]</p>

<p>…</p>

<p>reduce的操作就是把这个输入合并成我们想要的东西。</p>

<p>最后，<code>WordCount</code>类的<code>main</code>方法里设置输入输出，然后执行任务。</p>

<h2 id="streamingmap-reduce">以streaming方式执行map-reduce任务</h2>

<p>通常来说，简单的map-reduce任务还是用脚本来写比较快，比如ruby,python或者linux shell，这里使用bash来重写一次这个单词计数。</p>

<h3 id="map">1. map程序</h3>

<p>hadoop的streaming是流式处理，即上一操作的输入作为下一操作的输出，基本可以等价用管道来看：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">cat data-file | mapper.sh | sort | reducer.sh
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>输入输出都是走的标准输入输出，所以改写的map程序非常简单：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>map.sh map操作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line">awk <span class="s1">&#39;{for(i=1;i&lt;=NF;i++) print $i&quot; 1&quot;}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="reduce">2. reduce程序</h3>

<p>类似的重写reduce：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>reduce.sh  reduce操作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line">awk <span class="s1">&#39;{arr[$1]+=1}END{for(k in arr) print k&quot; &quot;arr[k]}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="streaming">3. 提交streaming任务</h3>

<p>提交streaming类型的任务需要指定一个额外的jar包<code>$HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-2.4.1.jar</code>，还要在命令里指出map和recude的脚本</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">hadoop jar <span class="nv">$HADOOP_HOME</span>/share/hadoop/tools/lib/hadoop-streaming-2.4.1.jar  -input <span class="s1">&#39;/user/hadoop/input/*&#39;</span> -output <span class="s1">&#39;/user/hadoop/output1&#39;</span> -mapper map.sh -reducer reduce.sh
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>任务执行的结果和之前是一致的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">hdfs dfs -cat /user/hadoop/output1/part-00000
</span><span class="line"><span class="c">#输出:</span>
</span><span class="line">Hadoop 2
</span><span class="line">Goodbye 1
</span><span class="line">Bye 1
</span><span class="line">Hello 2
</span><span class="line">World 2
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
</feed>
