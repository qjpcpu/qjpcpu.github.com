<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jason's space]]></title>
  <link href="http://qjpcpu.github.io/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2015-12-15T22:04:27+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[gulp js的构建工具]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2015/09/16/gulp-nodejs-cool-makefile/"/>
    <updated>2015-09-16T21:56:17+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/09/16/gulp-nodejs-cool-makefile</id>
    <content type="html"><![CDATA[<h3>0. 简介</h3>

<p>gulp是javascript世界的构建工具，它并不是js世界第一个构建工具，但由于它小而快的特点，一出现就快速赶超它的前辈grunt，在npm的下载榜上一直高居前列。</p>

<!-- more -->


<p><img src="https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png" alt="gulp logo" /></p>

<h3>1. gulp的特性</h3>

<p><strong><code>小</code></strong></p>

<p>gulp的第一个特点应该是小，不仅仅是源码小，更重要的是gulp编写的出的构建代码非常短小明了。这是因为gulp基本上完全是基于流式的构建处理，可以理解为由源码文件流经过一系列的中间加工处理直接将结果灌入到输出文件，没有了中间的临时文件读写，自然就减少了处理代码，出来的构建workflow同样也就十分清理简捷。</p>

<p>gulp构建流程的小固然有使用了流式处理的原因，但更重要的一种设计思路的不同。这里我想聊一下工程上的设计理念，通常我们设计程序的时候，遵守<code>配置优于代码</code>的原则。就是说，一些程序依赖的外置参数，尽量不要硬编码进代码文件里，而是将这些参数放在配置文件中。遵循这条原则可以极大增加工程的可维护性，比如java语言的某些著名框架就严格践行了这条原则，所以工程中就可能出现描述工程信息的各种xml配置文件。然后很多时候宣扬这条规律的书籍都没有将他的缺点，虽然缺点和优点相比有点微不足道，那就是一旦大量抽离程序的配置参数，将导致配置的碎片化，反面教材仍然是java框架里的xml配置泛滥。</p>

<p>所以后来的编程框架如rails开始强调<code>约定优于配置</code>的概念，就是如果大家经验约定这样做(放置配置的方式，命名的方式，搜索的方式等），那么程序工程里就不必显式声明这些规则，即不必要用一大堆配置文件去描述我们大家都约定遵守的东西。这样出来的结果工程上非常干净同时也满足了约定内高维护性。</p>

<p>那么在这里为什么要说这个呢，因为grunt其实可以说是一个基于<code>配置优于代码</code>的构建工具，而且很多其他编程语言的构建工具都是基于这个理念的。这类构建工具在执行大工程的构建时，配置的碎片化非常严重，为了描述构建需要在构建代码里编写大量的元信息片段，甚至于需要分立诸多构建小文件来描述子构建单元，那么维护构建流程本身也变成一件令人头疼的事情。</p>

<p>而gulp可以说某种程度上的回归，将更多的东西又返回到了原始的地方&mdash;&mdash;&mdash;-代码。gulp的构建文件里配置信息非常少，一个构建task包含的所有信息都在这个task里，你不需要跳到其他文件里查阅这个task的配置信息。是的，程序员喜欢代码，把构建所有的东西都在task这块代码里完成，这样的构建流程自然就很清晰了。所以，gulp非常适合中小型程序的构建，我私自揣度这也是gulp快速流行起来的原因。</p>

<p><strong><code>快</code></strong></p>

<p>gulp的快主要是因为它的核心是<code>流</code>,从源文件的读取到构建结束，整个加工过程都在内存流里完成，上一道工序和下一道加工工序间完全是流与流之间的管道连接，类似shell管道命令的流式操作，免去了大量中间文件的读写，少了文件io，自然快了很多。不过我并没有专门对这个做过benchmark，直观的感受是我重构某个包含数百个coffee文件的构建流程时，从grunt迁移为gulp后整个构建流程节省了大概一半的时间。</p>

<p><strong><code>简单</code></strong></p>

<p>在阅读了gulp的一些资料后，我本来打算花一个下午的时间来学习的，结果10分钟左右就读完了gulp的文档，因为它实在太简单了，总共只有<strong>4个</strong>API.</p>

<h3>2. gulp入门</h3>

<p>对于gulp的基础，我不打算在这里讲，因为它的<a href="https://github.com/gulpjs/gulp/tree/master/docs">官方文档</a>非常简单易读，如果想读中文，这里也有<a href="https://github.com/lisposter/gulp-docs-zh-cn">gulp中文文档</a>。花个10分钟读一下，你就可以向身边的小伙伴炫耀： Hi，让我给你展示下一种很cool的构建工具。</p>

<h3>3. gulp流</h3>

<p><code>流</code>是gulp重中之重的概念，理解了流才可以玩转gulp。可以看下<a href="https://github.com/substack/stream-handbook">nodejs流</a>深入理解下nodejs流的概念。这里仅简单介绍下gulp中广泛使用的<code>pipe()</code>函数。</p>

<p><code>src.pipe(dest)</code>函数是nodejs的流的一个函数，它的作用非常简单，就是将流进行管道连接，将src可读流和dest可写流连接起来，使得数据从src流入dest。</p>

<p>同时<code>src.pipe(dest)</code>的返回对象也是<code>dest</code>，所以在nodejs很容易看到这种链式编程风格。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">a</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码等价于</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">a</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
</span><span class='line'><span class="nx">b</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个操作和shell编程的管道非常相似: <code>a | b | c | d</code></p>

<h3>4. gulp任务的编写准则</h3>

<p>gulp的核心是流，构建单元是一个个<code>task</code>，那么编写这些task的时候需要注意什么呢？</p>

<p>gulp的task做到了最大限度的并发，那么这些task间的同步就成了问题，怎么样判断一个task完成了以便于可以安全执行另一个依赖task呢,为了正确调度任务，gulp的task设计有三个原则:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="mi">1</span><span class="p">.</span> <span class="err">在任务定义的</span><span class="kd">function</span><span class="err">中返回一个数据流，当该数据流的</span><span class="nx">end</span><span class="err">事件触发时，任务结束</span>
</span><span class='line'><span class="mi">2</span><span class="p">.</span> <span class="err">在任务定义的</span><span class="kd">function</span><span class="err">中返回一个</span><span class="nx">promise</span><span class="err">对象，当该</span><span class="nx">promise</span><span class="err">对象</span><span class="nx">resolve</span><span class="err">时，任务结束</span>
</span><span class='line'><span class="mi">3</span><span class="p">.</span> <span class="err">在任务定义的</span><span class="kd">function</span><span class="err">中传入</span><span class="nx">callback</span><span class="err">变量，当</span><span class="nx">callback</span><span class="p">()</span><span class="err">执行时，任务结束</span>
</span></code></pre></td></tr></table></div></figure>


<p>当发现task没有按预期执行时，就需要仔细检查是否每个task都遵循了这3条规则。</p>

<p>此外，当需要写出一些高阶的gulp玩法时，不理解并执行这几条规则，就很难办到。另外，可以思考个额外的问题，为什么gulp的task需要有这三条规则? 根据这3条规则，是否都可以猜测出gulp的实现机制呢?</p>

<p>在这里我顺便申明我对学习新东西的一个观点，就是<code>seize the key</code>，学习一种新东西就要理解她的核心。有的人秉持一种观念是说，语言只是工具，学习了一种其他都差不多，当有切换需求要学习新语言or新工具，就草草将以前的经验套上去，完成任务后还以为学会了新语言。所以有时候会看到一些四不像的代码，比如长得像shell的ruby代码，长得像java的python代码，一脸C长相的golang&hellip;</p>

<p>那么，怎样一学习新东西就能抓住其核心呢，很简单，多想想<code>why</code>。实际操作起来就几点经验：</p>

<ul>
<li>如果有作者对这个语言/工具的创作初衷的相关文章，一定要看！</li>
<li>看这个新东西是为了解决什么问题</li>
<li>这个语言解决的是什么问题，更重要的是解决的思路或方式是什么！</li>
<li>如果涉及新的概念或思路，一定要看足够多的文档直到理解这个概念</li>
<li>如果学习的是新语言，必须<strong>理解</strong>这个语言的<strong>key feature</strong>，了解语言的生态圈，语言的编码规范、构建工具、测试工具、包管理工具，该语言里著名的库/框架，这些框架的设计理念，如果有余力可以看下这些库/框架的源码，告诉自己用这种语言写出的代码也应该是这个水平</li>
</ul>


<p>比如对于gulp:</p>

<ul>
<li><strong>创作初衷</strong>: 看文档FAQ,作者twitter</li>
<li><strong>需要解决的问题</strong>: grunt复杂庞大的插件配置</li>
<li><strong>解决思路</strong>: nodejs流式处理=>什么是nodejs流=>解决什么问题，带来什么问题</li>
</ul>


<p>方方面面的东西了解了之后，你就能真正把控你的新玩意儿，有时候你甚至能预测这个语言或工具的未来动向。</p>

<h3>5. 常用gulp插件</h3>

<p>关于gulp的插件，需要的时候去github上找一下基本都能找到，这里提几个可能是通用构建流程里很可能用到的。</p>

<h4><a href="https://www.npmjs.com/package/run-sequence">run-sequence</a></h4>

<p>鉴于流程控制对javascript这种纯异步编程的重要性，gulp的异步任务控制需求同样强烈，run-sequence就是为了解决这个问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">runSequence</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;run-sequence&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">clean</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-clean&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This will run in this order: </span>
</span><span class='line'><span class="c1">// * build-clean </span>
</span><span class='line'><span class="c1">// * build-scripts and build-styles in parallel </span>
</span><span class='line'><span class="c1">// * build-html </span>
</span><span class='line'><span class="c1">// * Finally call the callback function </span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runSequence</span><span class="p">(</span><span class="s1">&#39;build-clean&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="p">[</span><span class="s1">&#39;build-scripts&#39;</span><span class="p">,</span> <span class="s1">&#39;build-styles&#39;</span><span class="p">],</span>
</span><span class='line'>              <span class="s1">&#39;build-html&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// configure build-clean, build-scripts, build-styles, build-html as you </span>
</span><span class='line'><span class="c1">// wish, but make sure they either return a stream or handle the callback </span>
</span><span class='line'><span class="c1">// Example: </span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build-clean&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">BUILD_DIRECTORY</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">clean</span><span class="p">());</span>
</span><span class='line'><span class="c1">//  ^^^^^^ </span>
</span><span class='line'><span class="c1">//   This is the key here, to make sure tasks run asynchronously! </span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build-scripts&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">SCRIPTS_SRC</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(...)...</span>
</span><span class='line'><span class="c1">//  ^^^^^^ </span>
</span><span class='line'><span class="c1">//   This is the key here, to make sure tasks run asynchronously! </span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a href="https://www.npmjs.com/package/del">del</a></h4>

<p>删除文件，这是个再频繁不过的需求了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">del</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;del&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">del</span><span class="p">([</span><span class="s1">&#39;tmp/*.js&#39;</span><span class="p">,</span> <span class="s1">&#39;!tmp/unicorn.js&#39;</span><span class="p">]).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">paths</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Deleted files/folders:\n&#39;</span><span class="p">,</span> <span class="nx">paths</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>主要，del函数返回的是一个promise对象。</p>

<h4><a href="https://www.npmjs.com/package/merge-stream">merge-stream</a></h4>

<p>当一个task里有多条流时，怎么办? merge-stream就是为了解决流的合并问题的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">merge</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;merge-stream&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">bootstrap</span> <span class="o">=</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;bootstrap/js/*.js&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;public/bootstrap&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">jquery</span> <span class="o">=</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;jquery.cookie/jquery.cookie.js&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;public/jquery&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">bootstrap</span><span class="p">,</span> <span class="nx">jquery</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>当<code>bootstrap</code>和<code>jquery</code>这两条流都完成时，合并后的流才算完成。</p>

<h4>用户代码</h4>

<p>还有一种情况，如果task的流处理完成时，我希望执行一些用户代码，比如仅仅打印一些信息，这要怎么做呢? 使用task依赖固然可以完成，但是仅仅因为这个需求就增加一个<code>空</code>task是不是有点杀鸡用牛刀了，如果真正理解了nodejs流和gulp的task规则，其实也很好办:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;cli&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;coffee&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;*.coffee&#39;</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">coffee</span><span class="p">()).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;js/&#39;</span><span class="p">)).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">doSomething</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">cb</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意task的返回值及task回调cb。</p>

<h3>6. 结束</h3>

<p>gulp是一个很cool的构建工具，学习她，在合适的时候使用她。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分享你的Angular指令]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2015/05/27/fen-xiang-ni-de-angularzhi-ling/"/>
    <updated>2015-05-27T17:47:56+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/05/27/fen-xiang-ni-de-angularzhi-ling</id>
    <content type="html"><![CDATA[<h3>Angular directive on bower</h3>

<p>用Angular做web开发不但听起来是非常炫酷的事情，而且从我实际的开发体验来看，它确实是极大减轻了开发者的痛苦。我可以把精力都花在组织业务逻辑，创建更为流畅和漂亮的UI上，而完全不用去反复沦陷在事件绑定数据更新这些无趣的事情上。此外，angular框架本身依照设计模式上定义出了一套MVC漂亮的实现,了解其controller,server,directive后，写出大型web app已经不是难事了。</p>

<p>Angular中最漂亮的两个组件是service和directive，简单说来，service是逻辑代码的抽象和封装，它将应用中重复使用的逻辑代码抽象为公共服务，便于打造瘦controller；而directive则是对UI组件的抽象，其对directive的封装和接口设计简直刷新了我对前端的认识。</p>

<p>这里我就不准备详细介绍怎么写指令了，google的文档和我之前的博客都可供参考，这里说一下，如果你写出来非常cool的指令，怎么分享给大家呢？答案是bower。</p>

<!--more-->


<h3>Bower</h3>

<p><a href="http://bower.io/">Bower</a>是一个js的客户端管理工具，可以称之为客户端的npm，其作者是twitter的几个家伙(<a href="https://github.com/fat">@fat</a>,<a href="https://github.com/maccman">@maccman</a>)。根据你配置的<code>bower.json</code>文件，Bower可以自动查找、下载和安装js库，极大节约开发时间。</p>

<h4>简单介绍</h4>

<figure class='code'><figcaption><span>安装使用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install -g bower
</span><span class='line'><span class="c"># registered package</span>
</span><span class='line'>bower install jquery
</span><span class='line'><span class="c"># GitHub shorthand</span>
</span><span class='line'>bower install desandro/masonry
</span><span class='line'><span class="c"># Git endpoint</span>
</span><span class='line'>bower install git://github.com/user/package.git
</span><span class='line'><span class="c"># URL</span>
</span><span class='line'>bower install http://example.com/script.js
</span></code></pre></td></tr></table></div></figure>


<h3>创建一个基于bower的angular指令angular-dropzone</h3>

<p><a href="http://www.dropzonejs.com/">Dropzone</a>是一个漂亮的文件上传组件，下面就演示怎么把它集成为一个angular指令并分享到github。</p>

<h4>1.创建指令工程</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir angular-dropzone <span class="o">&amp;&amp;</span> <span class="nb">cd</span> <span class="nv">$_</span>
</span><span class='line'>touch angular-dropzone.js <span class="c">#  写入指令实现</span>
</span><span class='line'>bower init <span class="c"># 初始化bower工程</span>
</span></code></pre></td></tr></table></div></figure>


<p>回答完一系列问题后，生成的<code>bower.json</code>文件应该类似：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>
</span><span class='line'>  name: <span class="s1">&#39;angular-dropzone&#39;</span>,
</span><span class='line'>  main: <span class="s1">&#39;angular-dropzone.js&#39;</span>,
</span><span class='line'>  version: <span class="s1">&#39;0.0.0&#39;</span>,
</span><span class='line'>  authors: <span class="o">[</span>
</span><span class='line'>    <span class="s1">&#39;qujianping &lt;qjpcpu@gmail.com&gt;&#39;</span>
</span><span class='line'>  <span class="o">]</span>,
</span><span class='line'>  description: <span class="s1">&#39;dropzone for angular&#39;</span>,
</span><span class='line'>  keywords: <span class="o">[</span>
</span><span class='line'>    <span class="s1">&#39;angular&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;dropzone&#39;</span>
</span><span class='line'>  <span class="o">]</span>,
</span><span class='line'>  license: <span class="s1">&#39;MIT&#39;</span>,
</span><span class='line'>  ignore: <span class="o">[</span>
</span><span class='line'>    <span class="s1">&#39;**/.*&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;node_modules&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;bower_components&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;test&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;tests&#39;</span>
</span><span class='line'>  <span class="o">]</span>,
</span><span class='line'>  dependencies: <span class="o">{</span>
</span><span class='line'>    angular: <span class="s1">&#39;~1.3.0&#39;</span>,
</span><span class='line'>    dropzone: <span class="s1">&#39;~4.0.1&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.编辑指令代码</h4>

<p>现在开始编写指令的实现。指令代码最好遵守一定命名规范，如：以github名称作为命名空间。</p>

<figure class='code'><figcaption><span>angular-dropzone.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;qjpcpu.angular-dropzone&#39;</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'>  <span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;qjpDropzone&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// implementation goes here</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体代码实现可以参考<a href="https://github.com/qjpcpu/angular-dropzone">angular-dropzone</a></p>

<h4>3.发布指令</h4>

<p>编写完成后，就可以推送到github。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git init .
</span><span class='line'>git add bower.json angular-dropzone.js
</span><span class='line'>git commit -m <span class="s1">&#39;v0.0.0&#39;</span>
</span><span class='line'>git tag v0.0.0
</span><span class='line'>git remote add origin git@github.com:qjpcpu/angular-dropzone.git
</span><span class='line'>git push -u origin master
</span></code></pre></td></tr></table></div></figure>


<p>注意，bower使用git的tag确定版本号。</p>

<h4>4.在你的应用中使用该指令</h4>

<p>现在可以拉取使用你的angular指令了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower install qjpcpu/angular-dropzone
</span></code></pre></td></tr></table></div></figure>


<p>在<code>index.html</code>文件添加加载的文件:</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;bower_components/dropzone/dist/dropzone.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/dropzone/dist/dropzone.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-dropzone/angular-dropzone.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要添加模块依赖:</p>

<figure class='code'><figcaption><span>app.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">app = </span><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&quot;my-app&quot;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>  <span class="s">&#39;qjpcpu.angular-dropzone&#39;</span>
</span><span class='line'><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样在html片段里就可以使用指令了,关于该指令具体参数参考<a href="https://github.com/qjpcpu/angular-dropzone">angular-dropzone</a>:</p>

<figure class='code'><figcaption><span>p.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">qjp-dropzone</span> <span class="na">class=</span><span class="s">&quot;droppable-area&quot;</span> <span class="na">url=</span><span class="s">&quot;&#39;/url/to-upload&#39;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  Drop file here
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于后台任务]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2015/05/27/guan-yu-hou-tai-ren-wu/"/>
    <updated>2015-05-27T17:16:34+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/05/27/guan-yu-hou-tai-ren-wu</id>
    <content type="html"><![CDATA[<h3>关于sidekiq</h3>

<p>在做ruby开发时，通常会遇到耗时操作的处理，sidekiq由于其使用简单，性能强劲，所以常被用来作为Ruby应用的后台任务的执行引擎。不过sidekiq有个令人头疼的问题，就是任务提交到后台异步执行后，对于其状态的监测和管理就成为很大的问题。</p>

<!--more-->


<p>sidekiq的wiki上也贴出了很多相关执行管理工具，sidekiq-promise是个人最喜欢的一个，其异步回调的风格和js的风格非常像，使用起来非常友好。</p>

<h3>sidekiq-promise</h3>

<p>这里的例子直接来源于其github的readme:</p>

<figure class='code'><figcaption><span>demo.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ProcessWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Promise</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span> <span class="n">file_to_process</span>
</span><span class='line'>    <span class="no">UnzipWorker</span><span class="o">.</span><span class="n">as_promise</span><span class="p">(</span><span class="n">file_to_process</span><span class="p">)</span><span class="o">.</span><span class="n">then</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
</span><span class='line'>      <span class="no">MrDarcy</span><span class="o">.</span><span class="n">all_promises</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">dir</span><span class="o">.</span><span class="n">entries</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>          <span class="no">ImageThumbnailWorker</span><span class="o">.</span><span class="n">as_promise</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">then</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">UserNotificationMailer</span><span class="o">.</span><span class="n">all_images_processed</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>简述: UnzipWorker会解压文件，然后将解压得到的每个文件分发给ImageThumbnailWorker去创建压缩图，等待所有压缩完成后再发送通知邮件，非常简洁漂亮。</p>

<ul>
<li>将worker里的<code>include Sidekiq::Worker</code>替换成<code>include Sidekiq::Promise</code>即可。</li>
<li><p>如果要获取worker的输出，则调用<code>ProcessWorker.as_promise(arguments)</code>即可，在then block中获取执行结果，这个结果即<code>perform</code>方法的返回值。</p></li>
<li><p><code>sidekiq-promise</code>使用了<code>MrDarcy</code>，所以提供了一个很有意思的方法</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">MrDarcy</span><span class="o">.</span><span class="n">all_promises</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">[</span><span class="n">promise1</span><span class="p">,</span><span class="n">promise2</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>MrDarcy.all_promises</code>的块会等待其中列表的每一个promise完成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJs之Isolated Scope]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2015/05/25/angularjszhi-isolated-scope/"/>
    <updated>2015-05-25T14:12:42+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/05/25/angularjszhi-isolated-scope</id>
    <content type="html"><![CDATA[<h3>分离式scope（Isolated Scope）</h3>

<p>在angularjs指令中问什么需要使用分离式的scope,主要是为了分离指令和执行所在的&#8221;环境&#8221;,这个环境其实就是指controller的scope和指令自身的scope,使用分离式scope达到隔离各自scope变量，避免变量污染，从而最大程度上达到指令的重用。</p>

<!--more-->


<blockquote><p>注意，下面的示例为了突出重点，使用CoffeeScript展示代码</p></blockquote>

<figure class='code'><figcaption><span>script.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;docsIsolateScopeDirective&#39;</span><span class="p">,</span> <span class="p">[]).</span><span class="nx">controller</span><span class="p">(</span><span class="s">&#39;Controller&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;$scope&#39;</span><span class="p">,</span><span class="nf">($scope) -&gt;</span>
</span><span class='line'>  <span class="nv">$scope.naomi =</span>
</span><span class='line'>    <span class="nv">name: </span><span class="s">&#39;Naomi&#39;</span>
</span><span class='line'>    <span class="nv">address: </span><span class="s">&#39;1600 Amphitheatre&#39;</span>
</span><span class='line'>  <span class="nv">$scope.igor =</span>
</span><span class='line'>    <span class="nv">name: </span><span class="s">&#39;Igor&#39;</span>
</span><span class='line'>    <span class="nv">address: </span><span class="s">&#39;123 Somewhere&#39;</span>
</span><span class='line'><span class="p">]).</span><span class="nx">directive</span> <span class="s">&#39;myCustomer&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">restrict: </span><span class="s">&#39;E&#39;</span>
</span><span class='line'>  <span class="nv">scope: customerInfo: </span><span class="s">&#39;=info&#39;</span>
</span><span class='line'>  <span class="nv">template: </span><span class="s">&quot;Name: { {customerInfo.name} } Address: { {customerInfo.address} }&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;Controller&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;my</span><span class="na">-customer</span> <span class="na">info=</span><span class="s">&quot;naomi&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/my-customer&gt;
</span><span class='line'>  <span class="nt">&lt;hr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;my</span><span class="na">-customer</span> <span class="na">info=</span><span class="s">&quot;igor&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/my-customer&gt;
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>输出为</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Name: Naomi Address: 1600 Amphitheatre Name: Igor Address: 123 Somewhere
</span></code></pre></td></tr></table></div></figure>


<p>由输出可以看出，指令<code>my-customer</code>中的<code>info</code>属性被分别绑定到了外部scope的两个变量<code>naomi</code>和<code>igor</code>，虽然是同一指令，但相互之间没有干扰或污染。这样<code>my-customer</code>指令可以非常漂亮的被重用。</p>

<p>其实，如果不需要特意在指令间共享scope，最好都使用分离式scope来写指令。</p>

<p>另外，指令内属性名如果和绑定的外部属性相同，可以采用简写模式，如这里<code>my-customer</code>的<code>info</code>属性映射到内部也用<code>info</code>引用的化:</p>

<figure class='code'><figcaption><span>script.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">directive</span> <span class="s">&#39;myCustomer&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">restrict: </span><span class="s">&#39;E&#39;</span>
</span><span class='line'>  <span class="nv">scope: info: </span><span class="s">&#39;=&#39;</span>
</span><span class='line'>  <span class="nv">template: </span><span class="s">&#39;Name: { {customerInfo.name} } Address: { {customerInfo.address} }&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>@单向绑定</h3>

<p>对于仅仅需要在指令中反应外部scope变量变化的情况下，可以仅使用单向绑定，将controller的变量映射到指令中，一旦在controller中修改变量，指令中可以立即看到变化，然而反过来则不可，即外部scope中看不到指令内部对变量的修改。</p>

<figure class='code'><figcaption><span>script.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">.</span><span class="nx">directive</span> <span class="s">&#39;myDirective, -&gt;</span>
</span><span class='line'><span class="s">  scope: attributeFoo: &#39;</span><span class="nx">@</span><span class="s">&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;my</span><span class="na">-component</span> <span class="na">attribute-foo=</span><span class="s">&quot;{ {foo} }&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/my-component&gt;
</span></code></pre></td></tr></table></div></figure>


<p>即，在控制器里修改foo，在<code>my-directive</code>中可以感知到。通常单向绑定对于取字符串值很常见，所以这里的html中使用双花括号插值。因此，单向绑定的官方名称其实是叫属性绑定。</p>

<h3>=双向绑定</h3>

<p>看名称就知道用途了，双向绑定使用<code>=</code>定义，直接看例子:</p>

<figure class='code'><figcaption><span>script.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">.</span><span class="nx">directive</span> <span class="s">&#39;myDirective, -&gt;</span>
</span><span class='line'><span class="s">  scope: bindingFoo: &#39;</span><span class="o">=</span><span class="s">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>&amp;表达式绑定</h3>

<p>或者换个更human的名称，函数绑定，如果需要在指令内调用controler的函数，这就是说我们可以在指令内部定义接口，controller定义具体实现，这样指令就能够变得非常灵活，用在分离式scope中，既避免了变量污染又达到了灵活性，太cool了。</p>

<figure class='code'><figcaption><span>my-directive.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">.</span><span class="nx">directive</span> <span class="s">&#39;myDirective, -&gt;</span>
</span><span class='line'><span class="s">  scope: myHandler: &#39;</span><span class="o">&amp;</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">  template: &#39;</span><span class="o">&lt;</span><span class="nx">button</span> <span class="nx">type</span><span class="o">=</span><span class="s">&quot;button&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="s">&quot;myHandler({$count: 123})&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">button</span><span class="o">&gt;</span><span class="s">&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>my-controller.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">.</span><span class="nx">controller</span> <span class="s">&#39;MyCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;$scope&#39;</span><span class="p">,</span><span class="nf">($scope) -&gt;</span>
</span><span class='line'>    <span class="nv">$scope.getCounts = </span><span class="nf">(countNum) -&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;Button click count: </span><span class="si">#{</span><span class="nx">countNum</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;my</span><span class="na">-directive</span> <span class="na">my-handler=</span><span class="s">&quot;getCounts($count)&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/my-directive&gt;
</span></code></pre></td></tr></table></div></figure>


<h4>非常重要:函数传参</h4>

<p>对于无参函数的绑定，没什么好说的。但对应上例中的情况，需要把参数从指令中传到外部函数，则需要注意了。</p>

<ul>
<li>参数必须是hash类型的json对象，即参数是k-v类型的对象，如示例中的<code>{$count: 123}</code></li>
<li>html中使用指令的地方函数的参数必须和指令中函数传递的参数的key一一对应，即指令中传递的参数的key是<code>$count</code>，那么html中指令绑定的函数接受的参数必须是<code>$count</code>，否则无法接受正确的参数。但是在controller里的函数参数名不必和他们保持一致。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效读取excel]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2015/05/25/gao-xiao-du-qu-excel/"/>
    <updated>2015-05-25T11:11:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/05/25/gao-xiao-du-qu-excel</id>
    <content type="html"><![CDATA[<p>前面介绍ruby写excel文件的一个很cool的gem包<code>axlsx</code>,这里介绍另一个高效读取excel的包<code>creek</code>。</p>

<p>一个读一个写，ruby轻松搞定execel处理。</p>

<!-- more -->


<h4>安装</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install creek
</span></code></pre></td></tr></table></div></figure>


<h4>使用</h4>

<p><code>creek</code>本身的使用非常简单:</p>

<figure class='code'><figcaption><span>creek_demo.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;creek&#39;</span>
</span><span class='line'><span class="n">creek</span> <span class="o">=</span> <span class="ss">Creek</span><span class="p">:</span><span class="ss">:Book</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;specs/fixtures/sample.xlsx&quot;</span>
</span><span class='line'><span class="n">sheet</span><span class="o">=</span> <span class="n">creek</span><span class="o">.</span><span class="n">sheets</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 注:获取行数不能用size方法</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">sheet</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span> <span class="c1"># =&gt; 100</span>
</span><span class='line'>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">row</span> <span class="c1"># =&gt; {&quot;A1&quot;=&gt;&quot;Content 1&quot;, &quot;B1&quot;=&gt;nil, C1&quot;=&gt;nil, &quot;D1&quot;=&gt;&quot;Content 3&quot;}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="n">rows_with_meta_data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">row</span> <span class="c1"># =&gt; {&quot;collapsed&quot;=&gt;&quot;false&quot;, &quot;customFormat&quot;=&gt;&quot;false&quot;, &quot;customHeight&quot;=&gt;&quot;true&quot;, &quot;hidden&quot;=&gt;&quot;false&quot;, &quot;ht&quot;=&gt;&quot;12.1&quot;, &quot;outlineLevel&quot;=&gt;&quot;0&quot;, &quot;r&quot;=&gt;&quot;1&quot;, &quot;cells&quot;=&gt;{&quot;A1&quot;=&gt;&quot;Content 1&quot;, &quot;B1&quot;=&gt;nil, C1&quot;=&gt;nil, &quot;D1&quot;=&gt;&quot;Content 3&quot;}}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="n">state</span>   <span class="c1"># =&gt; &#39;visible&#39;</span>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="n">name</span>    <span class="c1"># =&gt; &#39;Sheet1&#39;</span>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="n">rid</span>     <span class="c1"># =&gt; &#39;rId2&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>性能</h4>

<p>读取并遍历一个16M左右17608行的xlsx文件，benchmark:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>--------------- total: 84.040000sec   ----------------
</span><span class='line'>  user     system      total        real
</span><span class='line'> 84.920000   0.680000  85.600000 <span class="o">(</span> 86.084133<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>P.S. 无法和其他读取excel的gem做对比，因为试着做对比测试时发现其他gem根本卡在读取操作那不动了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[脚下的路]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2015/02/16/jiao-xia-de-lu/"/>
    <updated>2015-02-16T09:22:38+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/02/16/jiao-xia-de-lu</id>
    <content type="html"><![CDATA[<p>本来之前就想写写关于2014年的经历，但一直心里都是满满的负能量，所以一直没有下笔。今天其实也是，和家人闹得不开心，然后愤懑地来公司上班，没想到在路上反而突然想明白了，所以就回顾一下过去的2014，还有现在心里的想法吧。</p>

<p>在<code>life</code>分类下，之前的两篇文字都是非常积极的，我之前耕耘多年，凭着自己的努力进入了百度，我自己其实是非常自豪的。即便进入了百度后，能力也被非常认可。所以在2014上半年，其实我是感觉意气风发的，在工作中，也做出了一些很cool的事情。那时候的我，感觉自己离梦想只有一步之遥，仿佛站在天梯之巅，拨开云层再踏一步，可能我就能出去，去Google朝圣。那是在朋友们眼中，我就是个疯子，什么都可以不要。那时，我是幸福的，虽然在别人眼里，那时的我是一个不负责任，狂热的人。</p>

<p>但是在下半年，我逐渐感受到狂热背后的东西，尽管在百度，也要做很多机械重复的事情，此外更重要的是，我发现自己很孤独，除开工作，我一无所有，独自在上海漂泊，心里非常寂寞。再加上后来家人生病，我选择了离开，回到成都。</p>

<p>在离开百度的那段日子，我的情绪非常低落，每天只吃一点东西。真的，人有时候在失去时才知道珍惜。回到成都小半年里，我常常回忆起临走前一天，在食堂吃过饭后翠姐问我:你不是想去Google吗，你怎么办？ 那时我心里如遭重锤，是啊，有路吗？我沉默了下，算是安慰自己回答她：走一步看一步吧。这种答案，我自己都觉得好难过&hellip;&hellip;</p>

<p><code>people must pay for their choices</code>，每个人必须为他的选择付出代价。</p>

<!-- more -->


<p>回来的好长日子里，我无法适应。逐渐地，我开始怀念在百度的那段日子。这时我才体会到，百度真正优秀的地方，不在于她的大公司地位和光环，在于百度的人，在于那些身上深深烙上了百度刻印而不自知的优秀同学。不论懂的多少，总是怀着一种谦逊求知的态度，对技术和知识的真正渴望，塑造了百度人自己的气质。</p>

<p><code>怀疑和迷茫</code>，占据了我。我不知道自己要干什么，不知道下一步的路在哪里。每天回到家，和家人在一起，其实也挺开心的，上班也能尽情雕琢自己的代码，这不是我以前想要的吗？曾经有人问我毕业后想要什么样的工作，我说能写代码就行。但现在我发现，其实我远远不能满足于这些，我需要舞台，需要一个大的舞台展示自己，希望被听到。</p>

<p>我告诉自己：我是优秀的人，到哪里我都必须要优秀!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rvm和rbenv环境变量冲突导致无法安装gem包]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2015/01/05/rvmhe-rbenvhuan-jing-bian-liang-chong-tu-dao-zhi-wu-fa-an-zhuang-gembao/"/>
    <updated>2015-01-05T18:11:47+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/01/05/rvmhe-rbenvhuan-jing-bian-liang-chong-tu-dao-zhi-wu-fa-an-zhuang-gembao</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>root环境用rvm安装了ruby，但我需要在用户环境重装ruby，而且个人喜欢用rbenv，这就导致了我安装了rbenv的gem后，没有权限安装gem包。</p>

<!-- more -->


<h2>resolve</h2>

<p>这种情况是rvm强制设置了<code>GEM_HOME</code>导致的，可以<code>gem env</code>查看：</p>

<pre><code>jason@mac:~$ gem env
RubyGems Environment:
  - RUBYGEMS VERSION: 2.0.14
  - RUBY VERSION: 2.0.0 (2014-11-13 patchlevel 598) [x86_64-linux]
  - INSTALLATION DIRECTORY: /usr/local/rvm/gems/ruby-2.0.0-p353
  - RUBY EXECUTABLE: /home/jason/.rbenv/versions/2.0.0-p598/bin/ruby
  - EXECUTABLE DIRECTORY: /usr/local/rvm/gems/ruby-2.0.0-p353/bin
  - RUBYGEMS PLATFORMS:
    - ruby
    - x86_64-linux
  - GEM PATHS:
     - /usr/local/rvm/gems/ruby-2.0.0-p353
     - /home/jason/.rbenv/versions/2.0.0-p598/lib/ruby/gems/2.0.0/
  - GEM CONFIGURATION:
     - :update_sources =&gt; true
     - :verbose =&gt; true
     - :backtrace =&gt; false
     - :bulk_threshold =&gt; 1000
  - REMOTE SOURCES:
     - https://rubygems.org/
</code></pre>

<p>可见GEM PATHS里优先选择了rvm的gem路径，所以需要重设GEM_HOME</p>

<pre><code>export GEM_HOME=$HOME/.rbenv/versions/2.0.0-p598/lib/ruby/gems/2.0.0/
</code></pre>

<p>但是，最好的办法是在~/.bash_profile(centos,ubuntu中是.bashrc)中<code>eval "$(rbenv init -)"</code>前加上：</p>

<pre><code>unset GEM_PATH
unset GEM_HOME
</code></pre>

<p>这样也可以清除rvm的设置，使rbenv的变量被正确设置.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建递归菜单]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2015/01/02/chuang-jian-di-gui-cai-dan/"/>
    <updated>2015-01-02T12:44:07+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/01/02/chuang-jian-di-gui-cai-dan</id>
    <content type="html"><![CDATA[<p>如果菜单的数据模型是这样的,在angularjs中怎样比较漂亮地递归渲染出所有菜单项呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">menuItems</span> <span class="err">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;level1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;link&quot;</span><span class="p">:</span> <span class="s2">&quot;/A&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;menuItems&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;level2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;link&quot;</span><span class="p">:</span> <span class="s2">&quot;/A/a1&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;level1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;link&quot;</span><span class="p">:</span> <span class="s2">&quot;/B&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;menuItems&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;level2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;link&quot;</span><span class="p">:</span> <span class="s2">&quot;/B/b1&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>需要的ng指令</h2>

<h3>script</h3>

<p>将<code>&lt;script&gt;</code>的内容加载到$templateCache,这样就能够在ngInclude, ngView或指令中使用。<code>&lt;script&gt;</code>的类型必须是<code>text/ng-template</code>，并用<code>id</code>指定id。如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/ng-template&quot;</span> <span class="na">id=</span><span class="s">&quot;tpl-1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nx">Content</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">template</span><span class="p">.</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ngInit</h3>

<p>在当前scope内重命名某属性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>  <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;initExample&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ExampleController&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">list</span> <span class="o">=</span> <span class="p">[[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;ExampleController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-repeat=</span><span class="s">&quot;innerList in list&quot;</span> <span class="na">ng-init=</span><span class="s">&quot;outerIndex = $index&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">ng-repeat=</span><span class="s">&quot;value in innerList&quot;</span> <span class="na">ng-init=</span><span class="s">&quot;innerIndex = $index&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>       <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;example-init&quot;</span><span class="nt">&gt;</span>list[  ][  ] = ;<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<pre><code>list[ 0 ][ 0 ] = a;
list[ 0 ][ 1 ] = b;
list[ 1 ][ 0 ] = c;
list[ 1 ][ 1 ] = d; 
</code></pre>

<h2>示例</h2>

<p>下面的示例代码就利用这些指令，将递归的菜单分割成扁平的模板，避免html模板过深的层次。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/ng-template&quot;</span> <span class="na">id=</span><span class="s">&quot;menu-item-link-tpl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">span</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;title&quot;</span><span class="o">&gt;</span><span class="p"></span><span class="o">&lt;</span><span class="err">/span&gt;            </span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">ng</span><span class="o">-</span><span class="k">if</span><span class="o">=</span><span class="s2">&quot;item.label&quot;</span><span class="o">&gt;</span><span class="p"></span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/ng-template&quot;</span> <span class="na">id=</span><span class="s">&quot;menu-items-tpl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="o">=</span><span class="s2">&quot;item in menuItems&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">include</span><span class="o">=</span><span class="s2">&quot;&#39;menu-item-link-tpl&#39;&quot;</span><span class="o">&gt;&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">ng</span><span class="o">-</span><span class="k">if</span><span class="o">=</span><span class="s2">&quot;item.menuItems.length&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">init</span><span class="o">=</span><span class="s2">&quot;subItems = item.menuItems&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">include</span><span class="o">=</span><span class="s2">&quot;&#39;menu-items-recursive-tpl&#39;&quot;</span><span class="o">&gt;&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/ng-template&quot;</span> <span class="na">id=</span><span class="s">&quot;menu-items-recursive-tpl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="o">=</span><span class="s2">&quot;item in subItems&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">include</span><span class="o">=</span><span class="s2">&quot;&#39;menu-item-link-tpl&#39;&quot;</span><span class="o">&gt;&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">ng</span><span class="o">-</span><span class="k">if</span><span class="o">=</span><span class="s2">&quot;item.menuItems.length&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">init</span><span class="o">=</span><span class="s2">&quot;subItems = item.menuItems&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">include</span><span class="o">=</span><span class="s2">&quot;&#39;menu-items-recursive-tpl&#39;&quot;</span><span class="o">&gt;&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul</span> <span class="na">ng-include=</span><span class="s">&quot;&#39;menu-items-tpl&#39;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[angularJS路由框架ui-router]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/12/29/angularjslu-you-kuang-jia-ui-router/"/>
    <updated>2014-12-29T17:32:53+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/12/29/angularjslu-you-kuang-jia-ui-router</id>
    <content type="html"><![CDATA[<h1>简介</h1>

<p><a href="https://github.com/angular-ui/ui-router">AngularUI Router</a>是AngularJS的路由框架，和默认的<code>$route</code>不同，它将所有路由包装成可划分层级的状态机状态,路由路径在ui-router中不是必须的。由于ui-router的路由状态机是分层级的，所以使用ui-router可以非常方便地创建包含多个嵌入的子模板。</p>

<!-- more -->


<h1>Demo</h1>

<p>直接使用<code>ui-router</code>的方式可以参考其github文档，这里以yeoman为例简单展示下ui-router的使用。</p>

<p>在<code>bower.json</code>中加入ui-router依赖包,然后<code>bower install</code>执行安装</p>

<figure class='code'><figcaption><span>bower.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;learn-angular&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">/*省略其他*/</span>
</span><span class='line'>    <span class="nt">&quot;angular-ui-router&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.2.13&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'> <span class="err">/*省略其他*/</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<code>index.html</code>中添加引用：</p>

<figure class='code'><figcaption><span>app/index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-ui-router/release/angular-ui-router.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在app.coffee中设置路由：</p>

<figure class='code'><figcaption><span>app/scripts/app.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="s">&#39;use strict&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">angular</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;learnAngularApp&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>    <span class="s">&#39;ui.router&#39;</span>    <span class="c1"># 添加模块依赖</span>
</span><span class='line'>  <span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">run</span> <span class="p">[</span><span class="s">&#39;$rootScope&#39;</span><span class="p">,</span> <span class="s">&#39;$state&#39;</span><span class="p">,</span> <span class="s">&#39;$stateParams&#39;</span><span class="p">,</span> <span class="nf">($rootScope,   $state,   $stateParams) -&gt;</span>
</span><span class='line'>    <span class="nv">$rootScope.$state = </span><span class="nx">$state</span>
</span><span class='line'>    <span class="nv">$rootScope.$stateParams = </span><span class="nx">$stateParams</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">config</span> <span class="nf">($stateProvider,$urlRouterProvider) -&gt;</span>
</span><span class='line'>    <span class="nx">$urlRouterProvider</span><span class="p">.</span><span class="nx">otherwise</span> <span class="s">&quot;/&quot;</span>
</span><span class='line'>    <span class="nx">$stateProvider</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">state</span> <span class="s">&#39;home&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">url: </span><span class="s">&#39;/&#39;</span>                      <span class="c1"># 可见默认路由状态是home</span>
</span><span class='line'>        <span class="nv">templateUrl: </span><span class="s">&#39;views/home.html&#39;</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">state</span> <span class="s">&#39;state1&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">url: </span><span class="s">&#39;/state1&#39;</span>
</span><span class='line'>        <span class="nv">templateUrl: </span><span class="s">&#39;views/state1.html&#39;</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">state</span> <span class="s">&#39;state1.list&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">url: </span><span class="s">&#39;/list&#39;</span>
</span><span class='line'>        <span class="nv">templateUrl: </span><span class="s">&#39;views/state1.list.html&#39;</span>
</span><span class='line'>        <span class="nv">controller: </span><span class="nf">($scope) -&gt;</span>
</span><span class='line'>          <span class="nv">$scope.items = </span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="s">&quot;List&quot;</span><span class="p">,</span> <span class="s">&quot;Of&quot;</span><span class="p">,</span> <span class="s">&quot;Items&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">state</span> <span class="s">&#39;state2&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">url: </span><span class="s">&#39;/state2&#39;</span>
</span><span class='line'>        <span class="nv">templateUrl: </span><span class="s">&#39;views/state2.html&#39;</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">state</span> <span class="s">&#39;state2.list&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">url: </span><span class="s">&#39;/list&#39;</span>
</span><span class='line'>        <span class="nv">templateUrl: </span><span class="s">&#39;views/state2.list.html&#39;</span>
</span><span class='line'>        <span class="nv">controller: </span><span class="nf">($scope) -&gt;</span>
</span><span class='line'>          <span class="nv">$scope.things = </span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="s">&quot;Set&quot;</span><span class="p">,</span> <span class="s">&quot;Of&quot;</span><span class="p">,</span> <span class="s">&quot;Things&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>ui-router最重要的三个服务<code>$state</code>,<code>$stateProvider</code>,<code>$urlRouterProvider</code>。在<code>$stateProvider</code>上配置所有的状态，state方法的第一个参数是状态名，第二个参数是一个hash对象，里面可以配置<code>url</code>,<code>templateUrl</code>,<code>controller</code>等。</p>

<p>注意其中类似<code>state1.list</code>和<code>state1</code>的状态，<code>state1.list</code>是<code>state1</code>的子状态，所以触发<code>state1.list</code>的url是父子状态的联合，即<code>/state1</code>+<code>/list</code> => <code>/state1/list</code>,所以当浏览器导航到<code>/state1/list</code>（或手动触发<code>$state.go()</code>）时，<code>state1.list.html</code>才被插入父模板渲染。</p>

<p>下图非常清晰反映了ui-router的渲染逻辑：</p>

<ul>
<li>绿色 = 初始状态</li>
<li>黄色 = 即时渲染</li>
<li>蓝色 = 最终状态</li>
</ul>


<p><img src="https://camo.githubusercontent.com/15b1f1780e3a88cc1d6e0055dda298279d66fad7/68747470733a2f2f7261772e6769746875622e636f6d2f77696b692f616e67756c61722d75692f75692d726f757465722f5374617465476f4578616d706c65732e706e67" alt="渲染逻辑" /></p>

<p>主模板index.html:</p>

<figure class='code'><figcaption><span>app/index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">ui-sref-active=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;home&quot;</span><span class="nt">&gt;</span>home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">ui-sref-active=</span><span class="s">&quot;active&quot;</span> <span class="nt">&gt;&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;state1&quot;</span><span class="nt">&gt;</span>state1<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">ui-sref-active=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;state2&quot;</span><span class="nt">&gt;</span>state2<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ui-view</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里出现了两个ui-router的指令，<code>ui-sref</code>类似于angularjs的<code>ng-href</code>，只不过后面指定的是路由状态。</p>

<p>另一个指令就是<code>ui-view</code>，ui-router根据激活的状态向该指令中插入子模板。ui-router插入模板的规则是：<code>ui-router会将激活状态的模板插入父状态模板的ui-view处</code>。home状态是根状态，所以<code>app/index.html</code>的<code>ui-view</code>中插入的就是home状态的模板片段<code>app/views/home.html</code>。</p>

<p>其他模板：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- app/views/state1.html --&gt;</span>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>State 1<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;hr/&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;state1.list&quot;</span><span class="nt">&gt;</span>Show List<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ui-view</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="c">&lt;!-- app/views/state1.list.html --&gt;</span>
</span><span class='line'><span class="nt">&lt;h3&gt;</span>List of State 1 Items<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;item in items&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="c">&lt;!-- app/views/state2.html --&gt;</span>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>State 2<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;hr/&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;state2.list&quot;</span><span class="nt">&gt;</span>Show List<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ui-view</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="c">&lt;!-- app/views/state2.list.html --&gt;</span>
</span><span class='line'><span class="nt">&lt;h3&gt;</span>List of State 2 Things<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;thing in things&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>由上面的规则可以同理推出，当url为<code>/state1/list</code>时，会渲染主模板<code>state1.html</code>，并且会将子模板<code>state1.list.html</code>嵌入<code>state1.html</code>的<code>ui-view</code>中一起渲染出来。cool，路由渲染的灵活性非常高！</p>

<p>另外还有一个常用指令<code>ui-sref-active="classname"</code>,它通常和<code>ui-sref</code>一起使用，含义是当前状态被激活则会在所属html标签上class属性添加classname,如果不再是激活状态则去除classname。</p>

<p>另外，ui-router还支持多模板：</p>

<figure class='code'><figcaption><span>app/views/index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">ui-view=</span><span class="s">&quot;viewA&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">ui-view=</span><span class="s">&quot;viewB&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Also a way to navigate --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;route1&quot;</span><span class="nt">&gt;</span>Route 1<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">ui-sref=</span><span class="s">&quot;route2&quot;</span><span class="nt">&gt;</span>Route 2<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/scripts/app.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">config</span> <span class="nf">($stateProvider) -&gt;</span>
</span><span class='line'>  <span class="nx">$stateProvider</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s">&quot;index&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">url: </span><span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="nv">views:</span>
</span><span class='line'>      <span class="nv">viewA:</span>
</span><span class='line'>        <span class="nv">template: </span><span class="s">&quot;index.viewA&quot;</span>
</span><span class='line'>      <span class="nv">viewB:</span>
</span><span class='line'>        <span class="nv">template: </span><span class="s">&quot;index.viewB&quot;</span>
</span><span class='line'>  <span class="p">).</span><span class="nx">state</span><span class="p">(</span><span class="s">&quot;route1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">url: </span><span class="s">&quot;/route1&quot;</span>
</span><span class='line'>    <span class="nv">views:</span>
</span><span class='line'>      <span class="nv">viewA:</span>
</span><span class='line'>        <span class="nv">template: </span><span class="s">&quot;route1.viewA&quot;</span>
</span><span class='line'>      <span class="nv">viewB:</span>
</span><span class='line'>        <span class="nv">template: </span><span class="s">&quot;route1.viewB&quot;</span>
</span><span class='line'>  <span class="p">).</span><span class="nx">state</span> <span class="s">&quot;route2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">url: </span><span class="s">&quot;/route2&quot;</span>
</span><span class='line'>    <span class="nv">views:</span>
</span><span class='line'>      <span class="nv">viewA:</span>
</span><span class='line'>        <span class="nv">template: </span><span class="s">&quot;route2.viewA&quot;</span>
</span><span class='line'>      <span class="nv">viewB:</span>
</span><span class='line'>        <span class="nv">template: </span><span class="s">&quot;route2.viewB&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的简历]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/12/15/resume/"/>
    <updated>2014-12-15T20:20:58+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/12/15/resume</id>
    <content type="html"><![CDATA[<h4>联系方式</h4>

<ul>
<li><p>姓名: 屈剑平</p></li>
<li><p>邮箱: <a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#111;&#58;&#x6e;&#x69;&#x6c;&#113;&#117;&#106;&#x69;&#97;&#110;&#112;&#x69;&#x6e;&#x67;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;">&#110;&#105;&#x6c;&#x71;&#117;&#106;&#x69;&#97;&#x6e;&#112;&#x69;&#x6e;&#x67;&#64;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#111;&#x6d;</a></p></li>
<li><p>微信:</p></li>
</ul>


<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/wechat.jpg" alt="qrcode" /></p>

<!-- more -->


<h3>教育经历</h3>

<table>
<thead>
<tr>
<th></th>
<th>时间</th>
<th>学校</th>
<th>学位</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>2011.9~2014.3</td>
<td>同济大学</td>
<td>硕士研究生</td>
<td>&ndash;</td>
</tr>
<tr>
<td></td>
<td>2007.9~2011.7</td>
<td>同济大学</td>
<td>本科学士学位</td>
<td>&ndash;</td>
</tr>
</tbody>
</table>


<h3>工作履历</h3>

<h4>2014.12 &ndash; 至今</h4>

<ul>
<li><p>Company: tap4fun</p></li>
<li><p>Location: 成都</p></li>
<li><p>Position: 运维开发</p></li>
</ul>


<h4>2013.12 &ndash; 2014.12</h4>

<ul>
<li><p>Company: 百度</p></li>
<li><p>Location: 上海</p></li>
<li><p>Position: 运维开发</p></li>
</ul>


<h4>2013.1 &ndash; 2013.8</h4>

<ul>
<li><p>Company: 惠普(中国)</p></li>
<li><p>Location: 上海</p></li>
<li><p>Position: 打印机app开发(实习)</p></li>
</ul>


<h3>项目经验</h3>

<h4>1. 智能运维系统iOP(tap4fun)</h4>

<p><strong>环境及工具:</strong> linux, ruby on rails, mongodb, angularJs, coffee-script</p>

<p><strong>项目描述:</strong>  系统为了完成运维自动化，提升运维效率，主要包含了以下几大功能:</p>

<ol>
<li>自动部署: 运维同学在iOP中编辑部署模板，配置好部署针对的目标机器，需要执行的命令及每个命令脚本的执行顺序，提交后iOP按照配置自动完成代码从产品库到线上的发布变更</li>
<li>流程管理: iOP内部抽象完成出一套工作流引擎<a href="https://github.com/qjpcpu/taskflow-mongoid">TaskFlow</a>，该引擎的执行步骤可重用可配置，驱动整个iOP的工单数据流</li>
<li>机器操作: 底层封装aws及阿里云，屏蔽其细节，统一对运维提供开服/关服/开关机等机器操作</li>
<li>镜像备份: 根据配置自动备份机器实例，完成灾备</li>
<li>权限管理: 所有用户根据自己角色决定了资源的可见性和可操作性，同时和线上机器登录权限保持同步</li>
<li>配置: 其他运维元数据的配置管理</li>
</ol>


<h4>2. 微信消息平台(tap4fun)<a href="https://github.com/qjpcpu/WeChatNotifier">github地址</a></h4>

<p><strong>环境及工具:</strong> linux, nodejs, requirejs, gulp, coffee-script, leveldb</p>

<p><strong>项目描述:</strong> 为企业内部提供消息推送服务及单点登录</p>

<ol>
<li>消息推送: 利用该平台，企业各内部系统可以利用微信向员工推送消息</li>
<li>消息响应: 内部系统可以被动响应消息，从而达到将微信作为交互平台的目的</li>
<li>单点登录: 企业内部系统可以利用微信消息平台作为单点登录,有效解决中小型企业的登录安全性及便利性</li>
</ol>


<h4>3. 统一认证系统(tap4fun)</h4>

<p><strong>环境及工具:</strong> linux, ruby on rails, mongodb</p>

<p><strong>项目描述:</strong> 使用google Oauth2完成内部员工单点登录认证</p>

<h4>4. 流式监控系统(百度)</h4>

<p><strong>环境及工具:</strong> linux, ruby, mysql, emacs, sinatra</p>

<p><strong>项目描述:</strong> 监控流式计算系统当前的任务处理情况,并能自动定位故障。前端使用sinatra框架完成,使用了ajax和coffeescript等技术,后端任务用ruby+bash完成,数据存储在项目前期后期分别选用了mongodb和mysql</p>

<h4>5. 机器管理系统(百度)</h4>

<p><strong>环境及工具:</strong> linux, ruby, mysql, emacs</p>

<p><strong>项目描述:</strong> 管理机器池的机器自动安装,环境自动初始化,机器数量千台以上。首先,自动检测机器是否故障,如果有故障则自动完成送修,送修完成自动挂回。如无故障则进行机器重装,安装各种初始化环境等 。系统前端采用rails编写,后端混合ruby和bash,数据交互使用mysql数据库,自动操作利用状态机设计完成</p>

<h4>6. 快速报表开发框架(百度)<a href="https://github.com/qjpcpu/jreport">github地址</a></h4>

<p><strong>环境及工具:</strong> linux, ruby , emacs</p>

<p><strong>项目描述:</strong>  一套快速报表开发框架,基于该框架最快可以在10分钟内开发出一套邮件报表,是一套针对报表专门设计开发的类rails框架</p>

<h4>7. 基于golang的批量工具(百度)<a href="https://github.com/qjpcpu/sexy-ssh">github地址</a></h4>

<p><strong>环境及工具:</strong> linux, golang</p>

<p><strong>项目描述:</strong> 基于ssh协议的批量操作工具,功能强大部署简单。 能完成批量任务执行及文件复制,任务执行能力强,使用go语言开发完成</p>

<h4>8. 打印机app(惠普中国)</h4>

<p><strong>环境及工具:</strong> windows, java, serverlet, jsp</p>

<p><strong>项目描述:</strong> 惠普打印机无线打印app。无须电脑,打印机上直接浏览网盘文件进行预览及打印</p>

<h3>技能概览</h3>

<h4>编程语言</h4>

<ul>
<li>ruby; 精通ruby,5年+经验</li>
<li>coffee-script; 熟悉coffee，能熟练用来开发前端页面或后端node程序</li>
<li>golang; 熟悉go语言，有小型项目经验</li>
<li>shell; 2年以上linux运维，能熟练使用shell管理linux</li>
<li>java/C#/C/Python; 基本了解</li>
</ul>


<h3>操作系统</h3>

<ul>
<li>2年以上linux运维经验, 长期linux使用经验</li>
<li>自己编译过linux系统，并翻译过，译本见<a href="https://github.com/qjpcpu/LFS">Linux from scratch</a></li>
</ul>


<h4>数据库</h4>

<ul>
<li>有基于mongodb, mysql开发经验</li>
</ul>


<h4>web开发</h4>

<ul>
<li>熟悉ruby及js的web开发技术</li>
<li>熟悉前端新技术angularJS</li>
</ul>


<h3>自我评价</h3>

<ul>
<li>好奇心，对新技术有极强的热情和好奇心，热爱拥抱新的技术动向</li>
<li>自我激励，一旦认定目标，会投入100%精力完成</li>
<li>崇拜Google</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新建angular项目]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/11/25/xin-jian-angularxiang-mu/"/>
    <updated>2014-11-25T10:54:31+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/11/25/xin-jian-angularxiang-mu</id>
    <content type="html"><![CDATA[<h2>需要的工具</h2>

<ul>
<li><a href="http://bower.io/">bower</a> 前端包管理器</li>
<li><a href="http://gruntjs.com/">grunt</a> javascript的makefile工具</li>
<li><a href="http://yeoman.io/">yeoman</a>  webapp的流行脚手架</li>
<li><a href="http://karma-runner.github.io/0.12/index.html">karma</a> 测试套件</li>
</ul>


<p>这里我使用了yeoman的一个angularJS的生成器<a href="https://github.com/yeoman/generator-angular">yo</a>，方便生成需要的全部零部件</p>

<!-- more -->


<h2>新建工程</h2>

<p>我们要建立的angularjs工程的项目名称叫<code>MyAngularApp</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir MyAngularApp
</span><span class='line'><span class="nb">cd </span>MyAngularApp
</span><span class='line'><span class="c"># 这里我习惯用coffee来写代码，如果直接用javascript可以去掉后面的参数--coffee</span>
</span><span class='line'>yo angular --coffee
</span></code></pre></td></tr></table></div></figure>


<p>生成的目录结构如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>MyAngularApp
</span><span class='line'>├── Gruntfile.js
</span><span class='line'>├── README.md
</span><span class='line'>├── app
</span><span class='line'>│   ├── 404.html
</span><span class='line'>│   ├── favicon.ico
</span><span class='line'>│   ├── images
</span><span class='line'>│   ├── index.html
</span><span class='line'>│   ├── robots.txt
</span><span class='line'>│   ├── scripts
</span><span class='line'>│   ├── styles
</span><span class='line'>│   └── views
</span><span class='line'>├── bower.json
</span><span class='line'>├── bower_components
</span><span class='line'>│   ├── angular
</span><span class='line'>│   ├── angular-animate
</span><span class='line'>│   └── ......
</span><span class='line'>├── node_modules
</span><span class='line'>│   ├── coffee-script
</span><span class='line'>│   └── ......
</span><span class='line'>├── package.json
</span><span class='line'>└── <span class="nb">test</span>
</span><span class='line'>    ├── karma.conf.coffee
</span><span class='line'>    └── spec
</span></code></pre></td></tr></table></div></figure>


<p>其中，<code>Gruntfile.js</code>是grunt的makefile文件，里面定义了各种编译任务，如常用的<code>grunt serve</code>和<code>grunt build</code>。</p>

<p><code>app</code>目录是主要的工作目录，下面的<code>scripts</code>目录放置所有的controller，<code>styles</code>放置各种css文件，<code>views</code>放置视图模板；也可以在<code>app</code>下防止自己的资源文件夹如<code>vendor</code>目录，放置第三方库。</p>

<p><code>bower.json</code>中定义了需要安装的库，功能类似于ruby的Gemfile文件，在工程根目录执行<code>bower install</code>安装依赖。所有的依赖库都会被安装到<code>bower_components</code>目录中。</p>

<p><code>node_modules</code>是项目工具如coffee或者grunt的依赖工具。</p>

<p><code>package.json</code>是grunt的依赖工具。</p>

<p><code>test</code>是测试文件所在。</p>

<h2>index.html</h2>

<p>yo的常用操作可以参考其github文档。这里需要补充说一下的是<code>app/index.html</code>文件，该文件是angular项目的起始文件。注意其中类似下面这样的语句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- build:css({.tmp,app}) styles/main.css --&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;styles/main.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="c">&lt;!-- endbuild --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- build:js(.) scripts/vendor.js --&gt;</span>
</span><span class='line'><span class="c">&lt;!-- bower:js --&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular/angular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-animate/angular-animate.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-cookies/angular-cookies.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-resource/angular-resource.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-route/angular-route.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-sanitize/angular-sanitize.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-touch/angular-touch.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">&lt;!-- endbower --&gt;</span>
</span><span class='line'><span class="c">&lt;!-- endbuild --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>要注意的是<code>&lt;!-- build:css(DIRECTORY) OUT_FILE --&gt;</code>和<code>&lt;!-- build:js(DIRECTORY) OUTFILE --&gt;</code>，它们并不是普通的html注释，而是grunt的指令。</p>

<p>比如第一段，grunt会将<code>build:css</code>到<code>endbuild</code>之间的css文件找到，查找路径是<code>build:css(DIRECTORY)</code>中的目录加上<code>link</code>标签里的<code>href</code>指定的文件路径所在文件，即<code>.tmp/styles/main.css</code>和<code>app/styles/main.css</code>,然后grunt将它们合并压缩为一个css文件<code>styles/main.css</code>，这个文件被生成在输入目录，通常是<code>dist/styles/main.css</code>。</p>

<p>类似的，下面的js编译将当前目录<code>.</code>下指定的<code>bower_components</code>下的一些js合并压缩后变成<code>dist/scripts/vendor.js</code>。</p>

<p>所以，自己引入的一些第三方库怎么弄也就清楚了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- build:css(app) assets/css/vendor.css --&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;assets/css/animate.min.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;assets/plugins/gritter/css/jquery.gritter.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="c">&lt;!-- endbuild --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>grunt</h2>

<p>最后说一下grunt的任务，如果在app目录有个<code>assets/img</code>目录，里面放了一些图片，希望执行<code>grunt build</code>后将这些资源复制到输出目录，那么可以对<code>Gruntfile.js</code>做简单修改，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Copies remaining files to places other tasks can use</span>
</span><span class='line'><span class="nx">copy</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">files</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>      <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">dot</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;&lt;%= yeoman.app %&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;&lt;%= yeoman.dist %&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">src</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;*.{ico,png,txt}&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;.htaccess&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;*.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;views/{,*/}*.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;images/{,*/}*.{webp}&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;assets/{,img/*.*,fonts/*.*}&#39;</span><span class="p">,</span>   <span class="c1">//这里添加了一行,也可以直接复制整个文件夹 &#39;assets/**&#39;</span>
</span><span class='line'>        <span class="s1">&#39;fonts/{,*/}*.*&#39;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/09/08/tmux/"/>
    <updated>2014-09-08T00:37:23+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/09/08/tmux</id>
    <content type="html"><![CDATA[<h3>基本操作</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tmux new -s SESSION_NAME  <span class="c"># 新建会话</span>
</span><span class='line'>tmux new -s SESSION_NAME -d <span class="c"># 新建会话并放入后台</span>
</span><span class='line'>tmux ls <span class="c"># 列出所有会话</span>
</span><span class='line'>tmux attach -t SESSION_NAME <span class="c"># 进入某会话</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h3>命令列表</h3>

<p>默认情况下，tmux的前导命令开关是<code>Ctrl+b</code>，按了<code>Ctrl+b</code>后再按下面的命令，即执行相应操作：</p>

<h4>会话类</h4>

<table>
<thead>
<tr>
<th></th>
<th>键位</th>
<th>操作描述</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>?</td>
<td>显示所有快捷键，按q退出|</td>
</tr>
<tr>
<td></td>
<td><strong>d</strong> </td>
<td> <strong>脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话</strong> |</td>
</tr>
<tr>
<td></td>
<td>D</td>
<td>选择要脱离的会话；在同时开启了多个会话时使用|</td>
</tr>
<tr>
<td></td>
<td> <strong>s</strong></td>
<td> <strong>选择并切换会话；在同时开启了多个会话时使用</strong>|</td>
</tr>
<tr>
<td></td>
<td>:</td>
<td>进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器|</td>
</tr>
<tr>
<td></td>
<td>[</td>
<td>进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出|</td>
</tr>
</tbody>
</table>


<h4>窗口类</h4>

<table>
<thead>
<tr>
<th></th>
<th>键位</th>
<th>操作描述</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <strong>c</strong> </td>
<td> <strong>创建新窗口</strong> |</td>
</tr>
<tr>
<td></td>
<td> <strong>&amp;</strong> </td>
<td> <strong>关闭当前窗口</strong> |</td>
</tr>
<tr>
<td></td>
<td> <strong>数字键</strong> </td>
<td> <strong>切换至指定窗口</strong> |</td>
</tr>
<tr>
<td></td>
<td>p</td>
<td>切换至上一窗口|</td>
</tr>
<tr>
<td></td>
<td>n</td>
<td>切换至下一窗口|</td>
</tr>
<tr>
<td></td>
<td>l</td>
<td>在前后两个窗口间互相切换|</td>
</tr>
<tr>
<td></td>
<td> <strong>w</strong> </td>
<td> <strong>通过窗口列表切换窗口</strong> |</td>
</tr>
<tr>
<td></td>
<td> <strong>,</strong> </td>
<td> <strong>重命名当前窗口；这样便于识别</strong> |</td>
</tr>
<tr>
<td></td>
<td> <strong>.</strong> </td>
<td> <strong>修改当前窗口编号；相当于窗口重新排序</strong> |</td>
</tr>
<tr>
<td></td>
<td>!</td>
<td>将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板|</td>
</tr>
</tbody>
</table>


<h4>面板类</h4>

<table>
<thead>
<tr>
<th></th>
<th>键位</th>
<th>操作描述</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <strong>&ldquo;</strong> </td>
<td> <strong>将当前面板平分为上下两块</strong> |</td>
</tr>
<tr>
<td></td>
<td> <strong>%</strong> </td>
<td> <strong>将当前面板平分为左右两块</strong> |</td>
</tr>
<tr>
<td></td>
<td> <strong>x</strong> </td>
<td> <strong>关闭当前面板</strong> |</td>
</tr>
<tr>
<td></td>
<td> <strong>o</strong> </td>
<td> <strong>在当前窗口中选择下一面板</strong> |</td>
</tr>
<tr>
<td></td>
<td>q</td>
<td>显示面板编号|</td>
</tr>
</tbody>
</table>


<h3>其他</h3>

<p>如果不想使用默认tmux server，或者同一用户想起多个tmux实例，可以使用<code>-S</code>参数指定不同的unix socket：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tmux -S /path/to/another/unix/socket-file
</span></code></pre></td></tr></table></div></figure>


<p>在tmux里使用zsh有时会导致窗口名称会不断变化，这需要修改下<code>~/.zshrc</code>文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">DISABLE_AUTO_TITLE</span><span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<h4>可编程</h4>

<p>tmux最强大的地方还在于他的可编程性，用<code>tmux list-commands</code>可以看到tmux所有支持的命令。以我自己常执行的一个脚本为例，我开机后常常需要启动一系列服务便于开发, 但当我不开发时开电脑又不需要启动，所以放到开机自启动脚本里是不合适的，所以这里用tmux来批量起最合适了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/zsh</span>
</span><span class='line'><span class="c"># start tmux</span>
</span><span class='line'><span class="nv">session</span><span class="o">=</span>MAC
</span><span class='line'>tmux new -s <span class="s2">&quot;$session&quot;</span> -d
</span><span class='line'>tmux rename-window -t <span class="s2">&quot;$session:0&quot;</span> daemon
</span><span class='line'><span class="c"># start redis-server</span>
</span><span class='line'>tmux send -t <span class="s2">&quot;$session:daemon&quot;</span> <span class="s1">&#39;redis-server&#39;</span> Enter
</span><span class='line'>tmux split-window -h -t <span class="s2">&quot;$session:daemon&quot;</span>
</span><span class='line'><span class="c"># start mongo</span>
</span><span class='line'>tmux send -t <span class="s2">&quot;$session:daemon&quot;</span> <span class="s1">&#39;mongod --dbpath /Users/jason/local/var/mongodb-data&#39;</span> Enter
</span><span class='line'><span class="c"># start nginx</span>
</span><span class='line'>tmux split-window  -t <span class="s2">&quot;$session:daemon&quot;</span> <span class="s1">&#39;/Users/jason/local/nginx/sbin/nginx&#39;</span>
</span><span class='line'>tmux <span class="k">select</span>-pane -L -t <span class="s2">&quot;$session:daemon&quot;</span>
</span><span class='line'>tmux split-window -t <span class="s2">&quot;$session:daemon&quot;</span>
</span><span class='line'><span class="c"># start firefox with pentadactyl</span>
</span><span class='line'>tmux send -t <span class="s2">&quot;$session:daemon&quot;</span> <span class="s1">&#39;/Applications/Firefox.app/Contents/MacOS/firefox -pentadactyl +u NONE&#39;</span> Enter
</span><span class='line'>tmux <span class="k">select</span>-pane -R -t <span class="s2">&quot;$session:daemon&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># for develop project</span>
</span><span class='line'>tmux neww -a -n dev -t <span class="s2">&quot;$session&quot;</span>
</span><span class='line'>tmux send -t <span class="s2">&quot;$session:dev&quot;</span> <span class="s1">&#39;cd /Users/jason/repository/backend&#39;</span> Enter
</span><span class='line'>tmux split-window -t <span class="s2">&quot;$session:dev&quot;</span>
</span><span class='line'>tmux send -t <span class="s2">&quot;$session:dev&quot;</span> <span class="s1">&#39;cd /Users/jason/repository/frontend&#39;</span> Enter
</span></code></pre></td></tr></table></div></figure>


<p>这个脚本启动一个名为<code>MAC</code>的tmux session，并新建了两个窗口，在第一个窗口里开了4个面板，分别启动了nginx, redis, mongo， firefox。其中，开启窗口/面板时同时执行命令，该窗口/面板会在命令执行结束后自动关闭，所以第一个窗口最后实际只有3个面板；第二个窗口启动并切换到我正则开发的工程。</p>

<p>具体命令的使用可以参照该示例和man手册理解。</p>

<p>enjoy tmux!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识hadoop及map-reduce]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/09/03/chu-shi-hadoopji-map-reduce/"/>
    <updated>2014-09-03T20:40:36+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/09/03/chu-shi-hadoopji-map-reduce</id>
    <content type="html"><![CDATA[<h2>搭建hadoop环境</h2>

<p>hadoop环境搭建具体可以参考<a href="http://hadoop.apache.org/docs/r1.2.1/single_node_setup.html">官方文档</a>。</p>

<h2>搭建配置maven</h2>

<p>map-reduce任务支持多种语言，但对java支持是最好的，所以这里说一下怎么搭建java的编译环境。</p>

<p>首先编译安装maven，并将<code>MAVEN_HOME/bin</code>加入PATH环境变量，这样就可以直接使用<code>mvn</code>命令了。这里说一下怎么利用maven编译生成我们后续示例中的jar包。</p>

<h3>1. 使用maven新建一个工程</h3>

<p>下面的命令创建一个包含java类<code>org.myorg.WordCount</code>的工程<code>WordCount</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn archetype:create -DgroupId<span class="o">=</span>org.myorg -DartifactId<span class="o">=</span>WordCount
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>工程结构如图：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>WordCount
</span><span class='line'>├── pom.xml
</span><span class='line'>└── src
</span><span class='line'>    ├── main
</span><span class='line'>    │   └── java
</span><span class='line'>    │       └── org
</span><span class='line'>    │           └── myorg
</span><span class='line'>    │               └── App.java
</span><span class='line'>    └── <span class="nb">test</span>
</span><span class='line'>        └── java
</span><span class='line'>            └── org
</span><span class='line'>                └── myorg
</span><span class='line'>                    └── AppTest.java
</span></code></pre></td></tr></table></div></figure>


<p>将<code>WordCount/src/main/java/org/myorg/App.java</code>重命名为<code>WordCount/src/main/java/org/myorg/WordCount.java</code>，并将示例代码复制进去，代码的细节稍后再看。</p>

<p>由于java类中依赖于hadoop的java包，所以在maven的配置文件<code>pom.xml</code>标签对<code>&lt;dependencies/&gt;</code>内添加java类文件里引用的依赖：</p>

<figure class='code'><figcaption><span>WordCount/pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.apache.hadoop<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>hadoop-mapreduce-client-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>2.4.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.apache.hadoop<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>hadoop-common<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>2.4.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.apache.hadoop<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>hadoop-mapreduce-client-common<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>2.4.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.apache.hadoop<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>hadoop-mapreduce-client-jobclient<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>2.4.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.编译生成jar包</h3>

<p>在WordCount根目录下执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn package
</span></code></pre></td></tr></table></div></figure>


<p>就生成了我们需要的<code>WordCount/target/WordCount-1.0-SNAPSHOT.jar</code>文件。</p>

<h2>执行示例程序WordCount</h2>

<p>示例程序是一个单词计数程序，输入文件有两个：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">file01</span>
</span><span class='line'><span class="o">=======================</span>
</span><span class='line'>Hello World Bye World
</span><span class='line'>
</span><span class='line'><span class="nv">file02</span>
</span><span class='line'><span class="o">=======================</span>
</span><span class='line'>Hello Hadoop Goodbye Hadoop
</span></code></pre></td></tr></table></div></figure>


<h3>1.上传数据文件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#创建目录</span>
</span><span class='line'>hdfs dfs -mkdir /user
</span><span class='line'>hdfs dfs -mkdir /user/hadoop
</span><span class='line'><span class="c">#上传文件</span>
</span><span class='line'>hdfs dfs -put file01 /user/hadoop/input
</span><span class='line'>hdfs dfs -put file02 /user/hadoop/input
</span><span class='line'><span class="c">#查看文件是否上传上去了</span>
</span><span class='line'>hdfs dfs -ls /user/hadoop/input
</span></code></pre></td></tr></table></div></figure>


<h3>2.提交并执行map-reduce任务</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hadoop jar WordCount-1.0-SNAPSHOT.jar org.myorg.WordCount /user/hadoop/input /user/hadoop/output
</span></code></pre></td></tr></table></div></figure>


<h3>3.获取结果</h3>

<p>当任务执行完毕在输出目录会生成_SUCCESS文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hdfs dfs -ls /user/hadoop/output
</span><span class='line'><span class="c">#输出是：</span>
</span><span class='line'>-rw-r--r--   1 hadoop supergroup          0 2014-09-03 20:20 /user/hadoop/output/_SUCCESS
</span><span class='line'>-rw-r--r--   1 hadoop supergroup         41 2014-09-03 20:20 /user/hadoop/output/part-00000
</span></code></pre></td></tr></table></div></figure>


<p>查看结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hdfs dfs -cat /user/hadoop/output/part-00000
</span><span class='line'><span class="c">#输出：</span>
</span><span class='line'>Bye   1
</span><span class='line'>Goodbye   1
</span><span class='line'>Hadoop    2
</span><span class='line'>Hello 2
</span><span class='line'>World 2
</span></code></pre></td></tr></table></div></figure>


<h2>Map-Reduce</h2>

<p>回过头来再看执行map-reduce的这个java类<code>WordCount.java</code>，该类包含了两个静态内部类<code>Map</code>和<code>Reduce</code>，都继承了<code>MapReduceBase</code>基类，并各自实现了<code>Mapper</code>和<code>Reducer</code>接口。</p>

<figure class='code'><figcaption><span>WordCount/src/main/java/org/myorg/WordCount.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">myorg</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.conf.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapred.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.util.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WordCount</span> <span class="o">{</span>
</span><span class='line'><span class="c1">//执行map操作的静态类</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Map</span> <span class="kd">extends</span> <span class="n">MapReduceBase</span> <span class="kd">implements</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">LongWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">IntWritable</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Text</span> <span class="n">word</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Text</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">map</span><span class="o">(</span><span class="n">LongWritable</span> <span class="n">key</span><span class="o">,</span> <span class="n">Text</span> <span class="n">value</span><span class="o">,</span> <span class="n">OutputCollector</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="n">output</span><span class="o">,</span> <span class="n">Reporter</span> <span class="n">reporter</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>      <span class="n">StringTokenizer</span> <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">word</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
</span><span class='line'>      <span class="c1">//OutputCollector以单词本身为键，出现次数为键值进行计数，这里每出现一次计数1</span>
</span><span class='line'>      <span class="n">output</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">one</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="c1">//执行reduce操作的静态类</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Reduce</span> <span class="kd">extends</span> <span class="n">MapReduceBase</span> <span class="kd">implements</span> <span class="n">Reducer</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">reduce</span><span class="o">(</span><span class="n">Text</span> <span class="n">key</span><span class="o">,</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">IntWritable</span><span class="o">&gt;</span> <span class="n">values</span><span class="o">,</span> <span class="n">OutputCollector</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="n">output</span><span class="o">,</span> <span class="n">Reporter</span> <span class="n">reporter</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//map后的结果是同一个key对应一个value的列表，所以这里遍历values迭代器，累加所有值，即得到每个单词计数值</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">values</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">+=</span> <span class="n">values</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">output</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="n">sum</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">JobConf</span> <span class="n">conf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JobConf</span><span class="o">(</span><span class="n">WordCount</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">setJobName</span><span class="o">(</span><span class="s">&quot;wordcount&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">setOutputKeyClass</span><span class="o">(</span><span class="n">Text</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">setOutputValueClass</span><span class="o">(</span><span class="n">IntWritable</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">setMapperClass</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">setCombinerClass</span><span class="o">(</span><span class="n">Reduce</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">setReducerClass</span><span class="o">(</span><span class="n">Reduce</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">setInputFormat</span><span class="o">(</span><span class="n">TextInputFormat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">setOutputFormat</span><span class="o">(</span><span class="n">TextOutputFormat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">FileInputFormat</span><span class="o">.</span><span class="na">setInputPaths</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class='line'>  <span class="n">FileOutputFormat</span><span class="o">.</span><span class="na">setOutputPath</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">JobClient</span><span class="o">.</span><span class="na">runJob</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Mapper</code>接口是一个泛型接口,该接口4个参数分别指定了map方法的<code>输入键值，输入值，输出键值，输出值</code>类型。 类似的<code>Reducer</code>接口也是个泛型接口，它的前两个参数和map的后两个参数类型对应，从而也间接决定了后两个参数的类型。</p>

<p>简而言之，map的过程是把一行行的输入变成：</p>

<p>key1 => val1</p>

<p>key2 => val2</p>

<p>key3 => val1</p>

<p>而reduce的输入是排序过后map的输出：</p>

<p>key1 => [val1,val&hellip;..]</p>

<p>key2 => [val2,val&hellip;..]</p>

<p>&hellip;</p>

<p>reduce的操作就是把这个输入合并成我们想要的东西。</p>

<p>最后，<code>WordCount</code>类的<code>main</code>方法里设置输入输出，然后执行任务。</p>

<h2>以streaming方式执行map-reduce任务</h2>

<p>通常来说，简单的map-reduce任务还是用脚本来写比较快，比如ruby,python或者linux shell，这里使用bash来重写一次这个单词计数。</p>

<h3>1. map程序</h3>

<p>hadoop的streaming是流式处理，即上一操作的输入作为下一操作的输出，基本可以等价用管道来看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat data-file | mapper.sh | sort | reducer.sh
</span></code></pre></td></tr></table></div></figure>


<p>输入输出都是走的标准输入输出，所以改写的map程序非常简单：</p>

<figure class='code'><figcaption><span>map.sh map操作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>awk <span class="s1">&#39;{for(i=1;i&lt;=NF;i++) print $i&quot; 1&quot;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. reduce程序</h3>

<p>类似的重写reduce：</p>

<figure class='code'><figcaption><span>reduce.sh  reduce操作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>awk <span class="s1">&#39;{arr[$1]+=1}END{for(k in arr) print k&quot; &quot;arr[k]}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 提交streaming任务</h3>

<p>提交streaming类型的任务需要指定一个额外的jar包<code>$HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-2.4.1.jar</code>，还要在命令里指出map和recude的脚本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hadoop jar <span class="nv">$HADOOP_HOME</span>/share/hadoop/tools/lib/hadoop-streaming-2.4.1.jar  -input <span class="s1">&#39;/user/hadoop/input/*&#39;</span> -output <span class="s1">&#39;/user/hadoop/output1&#39;</span> -mapper map.sh -reducer reduce.sh
</span></code></pre></td></tr></table></div></figure>


<p>任务执行的结果和之前是一致的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hdfs dfs -cat /user/hadoop/output1/part-00000
</span><span class='line'><span class="c">#输出:</span>
</span><span class='line'>Hadoop 2
</span><span class='line'>Goodbye 1
</span><span class='line'>Bye 1
</span><span class='line'>Hello 2
</span><span class='line'>World 2
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用octopress搭建github pages]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/08/31/shi-yong-octopressda-jian-github-pages/"/>
    <updated>2014-08-31T17:36:06+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/08/31/shi-yong-octopressda-jian-github-pages</id>
    <content type="html"><![CDATA[<h2>安装git,ruby</h2>

<p>略</p>

<h2>安装octopress并搭建博客</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nb">cd </span>octopress
</span><span class='line'>bundle install
</span><span class='line'>rake install
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>初始化博客</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>编辑<code>_config.yml</code>写入博客名和其他信息</p>

<p>开始书写博客：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_page<span class="o">[</span><span class="s2">&quot;About&quot;</span><span class="o">]</span>    <span class="c"># 添加博客页</span>
</span><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;First Post!&quot;</span><span class="o">]</span>  <span class="c"># 新建一篇文章</span>
</span></code></pre></td></tr></table></div></figure>


<p>发布到github</p>

<figure class='code'><figcaption><span>deploy.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate      <span class="c"># 生成页面</span>
</span><span class='line'><span class="c">#rake preview       # 如果需要在本地预览生成的结果，预览页http://localhost:4000</span>
</span><span class='line'>rake deploy        <span class="c">#发布到github</span>
</span><span class='line'><span class="c"># 发布到github的pages在master分支，还要保存源的source分支</span>
</span><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s1">&#39;Added About page and first post!&#39;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<h2>在另外机器编辑博客</h2>

<p>如果更换了电脑，在新机器上编辑写博客，不需要重新搭建一遍：</p>

<figure class='code'><figcaption><span>get_my_blog.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:username/username.github.com.git
</span><span class='line'><span class="nb">cd </span>username.github.com
</span><span class='line'>git checkout <span class="nb">source</span>
</span><span class='line'>mkdir _deploy
</span><span class='line'><span class="nb">cd </span>_deploy
</span><span class='line'>git init
</span><span class='line'>git remote add origin git@github.com:username/username.github.com.git
</span><span class='line'>git pull origin master
</span><span class='line'><span class="nb">cd</span> ..
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql常用命令]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/08/21/mysqlchang-yong-ming-ling/"/>
    <updated>2014-08-21T11:05:13+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/08/21/mysqlchang-yong-ming-ling</id>
    <content type="html"><![CDATA[<h3>1.远程链接mysql</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql -h主机地址 -u用户名 －p用户密码 －P 端口号
</span><span class='line'>grant all on *.* to ‘用户名’@’主机地址’ identified by ‘密码’
</span><span class='line'>grant select on 数据库.* to 用户名@登录主机 identified by \"密码\"</span></code></pre></td></tr></table></div></figure>


<h3>2.修改密码</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysqladmin -u用户名 -p旧密码 password 新密码</span></code></pre></td></tr></table></div></figure>


<h3>3.显示数据库列表。</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show databases</span></code></pre></td></tr></table></div></figure>


<h3>4.显示库中的数据表</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show tables</span></code></pre></td></tr></table></div></figure>


<h3>5.显示数据表的结构</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe 表名</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h3>6.建库</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create database 库名</span></code></pre></td></tr></table></div></figure>


<h3>7.建表</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create table 表名 (字段设定列表)
</span><span class='line'>CREATE TABLE MYTABLE (name VARCHAR(20), sex CHAR(1))</span></code></pre></td></tr></table></div></figure>


<h3>8.删库和删表</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>drop database 库名
</span><span class='line'>drop table 表名</span></code></pre></td></tr></table></div></figure>


<h3>9.将表中记录清空</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>delete from 表名
</span><span class='line'>truncate table 表名</span></code></pre></td></tr></table></div></figure>


<h3>10.显示表中的记录</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select * from 表名
</span><span class='line'>select * from 表名</span></code></pre></td></tr></table></div></figure>


<h3>11.插入表</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Insert into 表名 values（字段各值）</span></code></pre></td></tr></table></div></figure>


<h3>12.更新表</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Update 表名 set 字段 = 值 where </span></code></pre></td></tr></table></div></figure>


<h3>13.导入</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>数据传入命令 load data local infile "文件名" into table 表名
</span><span class='line'>Source sql文件
</span><span class='line'>./mysqlimport -u root -p123456 &lt; sql文件</span></code></pre></td></tr></table></div></figure>


<h3>14.导出</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Select * from 表名 into outfile ‘文件名’
</span><span class='line'>./mysqldump –opt –database 库名 &gt; sql文件
</span><span class='line'>./mysqldump –opt 库名 表名 &gt; sql文件</span></code></pre></td></tr></table></div></figure>


<h3>15.改名</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Alter table 表名 rename 新表名
</span><span class='line'>Alter database 库名 rename 新库名</span></code></pre></td></tr></table></div></figure>


<h3>16.查看服务器运行状态</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show status</span></code></pre></td></tr></table></div></figure>


<p>该命令将显示出一长列状态变量及其对应的值，其中包括：被中止访问的用户数量，被中止的连接数量，尝试连接的次数，并发连接数量最大值，以及其他许多有用的信息。</p>

<h3>17.显示一个用户的权限，显示结果类似于grant 命令</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show grants for user_name</span></code></pre></td></tr></table></div></figure>


<h3>18.显示表的索引</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show index from table_name</span></code></pre></td></tr></table></div></figure>


<h3>19.显示一些系统特定资源的信息，例如，正在运行的线程数量</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show status</span></code></pre></td></tr></table></div></figure>


<h3>20.显示系统变量的名称和值</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show variables</span></code></pre></td></tr></table></div></figure>


<h3>21.显示系统中正在运行的所有进程，也就是当前正在执行的查询。大多数用户可以查看</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show processlist</span></code></pre></td></tr></table></div></figure>


<p>他们自己的进程，但是如果他们拥有process权限，就可以查看所有人的进程，包括密码</p>

<h3>22.显示当前使用或者指定的database中的每个表的信息。信息包括表类型和表的最新更新时间</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show table status</span></code></pre></td></tr></table></div></figure>


<h3>23.显示服务器所支持的不同权限</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show privileges</span></code></pre></td></tr></table></div></figure>


<h3>24.显示create database 语句是否能够创建指定的数据库</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show create database database_name</span></code></pre></td></tr></table></div></figure>


<h3>25.显示create database 语句是否能够创建指定的数据库</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show create table table_name</span></code></pre></td></tr></table></div></figure>


<h3>26.显示innoDB存储引擎的状态</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show innodb status</span></code></pre></td></tr></table></div></figure>


<h3>27.显示BDB存储引擎的日志</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show logs</span></code></pre></td></tr></table></div></figure>


<h3>28.显示最后一个执行的语句所产生的错误、警告和通知</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show warnings</span></code></pre></td></tr></table></div></figure>


<h3>29.只显示最后一个执行语句所产生的错误</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show errors</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golang远程调用]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/08/15/golangyuan-cheng-diao-yong/"/>
    <updated>2014-08-15T20:22:34+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/08/15/golangyuan-cheng-diao-yong</id>
    <content type="html"><![CDATA[<p>go语言的远程调用包<code>net/rpc</code>非常简单，而且由于go不支持动态链接，如果想要获得程序的动态性，那么就只好依赖于远程调用。</p>

<!-- more -->


<h3>服务端</h3>

<p>首先定义服务契约：</p>

<figure class='code'><figcaption><span>contract.go  服务契约定义</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">contract</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Args</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Name</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">Age</span>  <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Sign</span> <span class="kt">int</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">Sign</span><span class="p">)</span> <span class="nx">Content</span><span class="p">(</span><span class="nx">args</span> <span class="o">*</span><span class="nx">Args</span><span class="p">,</span> <span class="nx">reply</span> <span class="o">*</span><span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="nx">reply</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;%s is %v years old.&quot;</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Age</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>契约的定义规则很简单：服务函数必须满足 <code>func (t *T) MethodName(argType T1, replyType *T2) error</code>的形式，方法的第一个参数是服务接收的传入参数，第二个引用参数是返回值。契约服务的接收者可以随意定义，如此处的<code>Sign</code>，没有特别的用处。</p>

<p>然后看看服务端怎么注册服务：</p>

<figure class='code'><figcaption><span>main.go 服务端</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;contract&quot;</span>
</span><span class='line'>    <span class="s">&quot;log&quot;</span>
</span><span class='line'>    <span class="s">&quot;net&quot;</span>
</span><span class='line'>    <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>    <span class="s">&quot;net/rpc&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ct</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">contract</span><span class="p">.</span><span class="nx">Sign</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">rpc</span><span class="p">.</span><span class="nx">Register</span><span class="p">(</span><span class="nx">ct</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">rpc</span><span class="p">.</span><span class="nx">HandleHTTP</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">l</span><span class="p">,</span> <span class="nx">e</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="s">&quot;:8843&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">e</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="s">&quot;listen error:&quot;</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">Serve</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>客户端</h3>

<p>在很多其他语言中，实现远程调用的契约，必须共享一套契约代码，比如android的远程调用，必须将服务端定义的契约编译成<code>.class</code>文件然后提供给客户端使用，否则同一个服务类是无法在客户端和服务端对应起来的。</p>

<p>但是，go是不需要的，至于为什么后面再讲。</p>

<p>回头想想也是，既然不支持动态链接，客户端怎么使用契约文件编译结果呢？</p>

<figure class='code'><figcaption><span>main.go 客户端</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;log&quot;</span>
</span><span class='line'>    <span class="s">&quot;net/rpc&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">sync_invoke</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rpc</span><span class="p">.</span><span class="nx">DialHTTP</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="s">&quot;127.0.0.1:8843&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="s">&quot;dialing:&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">args</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Name</span> <span class="kt">string</span>
</span><span class='line'>        <span class="nx">Age</span>  <span class="kt">int</span>
</span><span class='line'>    <span class="p">}{</span><span class="s">&quot;jack&quot;</span><span class="p">,</span> <span class="mi">23</span><span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">reply</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">err</span> <span class="p">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Call</span><span class="p">(</span><span class="s">&quot;Sign.Content&quot;</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">reply</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="s">&quot;error:&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">reply</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">async_invoke</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rpc</span><span class="p">.</span><span class="nx">DialHTTP</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="s">&quot;127.0.0.1:8843&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="s">&quot;dialing:&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">args</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Name</span> <span class="kt">string</span>
</span><span class='line'>        <span class="nx">Age</span>  <span class="kt">int</span>
</span><span class='line'>        <span class="nx">Sex</span> <span class="kt">string</span>
</span><span class='line'>    <span class="p">}{</span><span class="s">&quot;jack&quot;</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span><span class="s">&quot;male&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">reply</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">future</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Go</span><span class="p">(</span><span class="s">&quot;Sign.Content&quot;</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">reply</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// wait for call end</span>
</span><span class='line'>    <span class="nx">futureResult</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">future</span><span class="p">.</span><span class="nx">Done</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">futureResult</span><span class="p">.</span><span class="nx">Error</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="s">&quot;error:&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">c</span> <span class="o">:=</span> <span class="nx">futureResult</span><span class="p">.</span><span class="nx">Reply</span><span class="p">.(</span><span class="o">*</span><span class="kt">string</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="nx">c</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">c</span> <span class="o">:=</span> <span class="nx">sync_invoke</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;get sync result:&quot;</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">c</span> <span class="p">=</span> <span class="nx">async_invoke</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;get async result:&quot;</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果：</p>

<figure class='code'><figcaption><span>main.go 客户端</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">get</span> <span class="nx">sync</span> <span class="nx">result</span><span class="p">:</span> <span class="nx">jack</span> <span class="nx">is</span> <span class="mi">23</span> <span class="nx">years</span> <span class="nx">old</span><span class="p">.</span>
</span><span class='line'><span class="nx">get</span> <span class="nx">async</span> <span class="nx">result</span><span class="p">:</span> <span class="nx">jack</span> <span class="nx">is</span> <span class="mi">23</span> <span class="nx">years</span> <span class="nx">old</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>go同时提供了同步和异步调用远程服务两种选择。代码自解释性很强，故无须赘述了。</p>

<p><strong>注意</strong>细节的同学可能发现了，上面异步调用部分的代码传递的参数结构体args和服务端定义的参数Args并不一致，那是因为go的远程调用默认采用encoding/gob编码和解码，它是一种类似与json的数据分享方式，但更加结构化，关于gob的详情可以google，这里不细说。由于使用gob，使得go的rpc可以接受<code>相似</code>结构，而不强求服务端和客户端服务参数完全一致。</p>

<p>简单来说，两个结构的<strong>导出成员</strong>完全一致，或者其中一个缺失一部分，或者其中一个多出一部分都算是相似结构。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[js异步回调与闭包]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/08/14/jsyi-bu-hui-diao-yu-bi-bao/"/>
    <updated>2014-08-14T00:20:20+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/08/14/jsyi-bu-hui-diao-yu-bi-bao</id>
    <content type="html"><![CDATA[<p>很多地方讲解<code>CoffeeScript/JavaScript</code>都用了这么一个例子：</p>

<figure class='code'><figcaption><span>example.coffee  异步回调中的陷阱</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffee-script'><span class='line'><span class="nv">chars = </span><span class="p">[</span><span class="s">&#39;A&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="s">&#39;C&#39;</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="nx">ch</span> <span class="k">in</span> <span class="nx">chars</span>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">ch</span>
</span><span class='line'>  <span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>这个结果会输出<code>C C C</code>而不是<code>A B C</code>，为什么会这样是因为js的异步机制，在普通代码执行完毕后才会处理事件，而在处理时间打印console时<code>ch</code>已经是<code>C</code>了，所以三个回调都会打印<code>C</code>。</p>

<p>给出的改进版本也很直观：</p>

<figure class='code'><figcaption><span>example-v2.coffee 恰当控制闭包环境中的变量</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffee-script'><span class='line'><span class="nv">chars = </span><span class="p">[</span><span class="s">&#39;A&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="s">&#39;C&#39;</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="nx">ch</span> <span class="k">in</span> <span class="nx">chars</span>
</span><span class='line'>  <span class="nx">do</span> <span class="nf">(ch) -&gt;</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">ch</span>
</span><span class='line'>    <span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>为啥这样改呢，其实原因严格来说和闭包有关系。</p>

<p>在第一个版本里，我们用了一个匿名函数把变量ch作为环境放入闭包，但是注意这个变量的作用域在for循环所在的整个范围内可见，闭包复制了这个变量的引用，所以当匿名函数实际调用时，变量的值已经被改变，导致得不到想要的输出。</p>

<p>而第二个版本将ch以函数参数的形式复制到了闭包内，这个匿名函数里的ch作用域仅在这个闭包匿名函数小环境内，外部for循环仅改变外部的ch，所以复制到闭包内的ch是不变的；不信可以把do后面函数改成无参的，结果肯定还是打印三个C。</p>

<p>这个问题其实在别的语言同样存在，只不过其他语言很大部分都同步执行闭包，导致看不出差别，实际上是一样的，看下面的go语言示例：</p>

<figure class='code'><figcaption><span>example.go golang的闭包示例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">example</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>  <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">example</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">5</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出会是1而不是0.</p>

<p>所以记住一句话，使用闭包，要注意它包裹起来的环境。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[struct tags]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/07/12/struct-tags/"/>
    <updated>2014-07-12T00:07:11+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/07/12/struct-tags</id>
    <content type="html"><![CDATA[<h3>结构体标签</h3>

<p>在定义结构时，可以为struct定义一个标签，这个标签是作为结构体字段的一个附加属性，主要是反射包会使用到这个属性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;reflect&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">type</span> <span class="nx">S</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">F</span> <span class="kt">string</span> <span class="s">`species:&quot;gopher&quot; color:&quot;blue&quot;`</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">s</span> <span class="o">:=</span> <span class="nx">S</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">st</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">TypeOf</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">field</span> <span class="o">:=</span> <span class="nx">st</span><span class="p">.</span><span class="nx">Field</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">field</span><span class="p">.</span><span class="nx">Tag</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="s">&quot;color&quot;</span><span class="p">),</span> <span class="nx">field</span><span class="p">.</span><span class="nx">Tag</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="s">&quot;species&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>blue gopher
</span></code></pre></td></tr></table></div></figure>


<p>结构体<code>S</code>的<code>F</code>成员具有两个属性<code>species</code>和<code>color</code>，其属性的值分别为<code>blue</code>和<code>gopher</code>。如果不使用反射去取这个属性，在定义时写不写属性都是无所谓的。</p>

<!--more-->


<p>在go中，tag的定义是有规定的：</p>

<blockquote><p>By convention, tag strings are a concatenation of optionally space-separated key:&ldquo;value&rdquo; pairs. Each key is a non-empty string consisting of non-control characters other than space (U+0020 &lsquo; &rsquo;), quote (U+0022 &lsquo;&ldquo;&rsquo;), and colon (U+003A &lsquo;:&rsquo;). Each value is quoted using U+0022 &lsquo;&rdquo;&rsquo; characters and Go string literal syntax.</p></blockquote>

<p>即：按照go的默认约定，tag以<code>key:value</code>的形式定义，多个<code>key:value</code>以空格分割，<code>key</code>不能是控制字符单引号、双引号和冒号，<code>value</code>需要用引号引起来。</p>

<p>当然，也可以不遵守这个约定，因为具体怎么使用tag还是按照开发者自己的意愿来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你不知道的Go]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/06/23/ni-bu-zhi-dao-de-go/"/>
    <updated>2014-06-23T14:37:47+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/06/23/ni-bu-zhi-dao-de-go</id>
    <content type="html"><![CDATA[<h3>1.匿名结构</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>      <span class="kt">string</span>
</span><span class='line'>    <span class="nx">age</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">=</span><span class="s">&quot;jack&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>声明时初始化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">st</span> <span class="o">:=</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">age</span>  <span class="kt">int</span>
</span><span class='line'><span class="p">}{</span>
</span><span class='line'>  <span class="s">&quot;Jack&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">12</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">st</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>2.抢占式调度器</h3>

<blockquote><p>In prior releases, a goroutine that was looping forever could starve out other goroutines on the same thread, a serious problem when GOMAXPROCS provided only one user thread. In Go 1.2, this is partially addressed: The scheduler is invoked occasionally upon entry to a function. This means that any loop that includes a (non-inlined) function call can be pre-empted, allowing other goroutines to run on the same thread.</p></blockquote>

<p>从golang1.2起，携程调度器为抢占式的，但抢占发生在每次进入函数前，所以，如果循环内的函数被编译器优化成了inline function，那么自然不会发生调度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[信任关系建立]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/05/21/xin-ren-guan-xi-jian-li/"/>
    <updated>2014-05-21T14:58:28+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/05/21/xin-ren-guan-xi-jian-li</id>
    <content type="html"><![CDATA[<h3>建立host1到host2的信任关系</h3>

<h4>如果A的rsa文件不存在可以这样建立</h4>

<p>首先在<code>host1</code>上：</p>

<figure class='code'><figcaption><span>create_rsa.sh   </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-keygen -t rsa -N <span class="s2">&quot;&quot;</span> -f ~/.ssh/id_rsa
</span></code></pre></td></tr></table></div></figure>


<h4>添加信任关系</h4>

<p>在<code>host2</code>上，将<code>host1</code>的<code>~/.ssh/id_rsa.pub</code>文件内容<code>追加</code>到<code>host2</code>的<code>authorized_keys</code>文件中</p>

<h4>避免第一次连接出现添加fingerprint的询问</h4>

<p>在<code>host1</code>上执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-keyscan host2 &gt;&gt; ~/.ssh/known_hosts
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>下面是一个示例脚本，在一个中控机上（能同时访问a和b）建立a到b的信任关系：</p>

<figure class='code'><figcaption><span>relation_a2b</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$#&quot;</span> -lt 2 <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;Usage: relation_a2b host1 host2&quot;</span>
</span><span class='line'>        <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nv">from</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="nv">to</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'><span class="nv">key</span><span class="o">=</span><span class="sb">`</span>ssh <span class="nv">$from</span> <span class="s2">&quot;ssh-keyscan -t rsa $to &gt;&gt; ~/.ssh/known_hosts 2&gt;/dev/null &amp;&amp; cat ~/.ssh/id_rsa.pub&quot;</span><span class="sb">`</span>
</span><span class='line'>ssh <span class="nv">$to</span> <span class="s2">&quot;echo $key &gt;&gt; ~/.ssh/authorized_keys&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$from --&gt; $to [OK]&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>relation_a2b host1 host2
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[命令行参数]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/05/02/ming-ling-xing-can-shu/"/>
    <updated>2014-05-02T01:14:33+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/05/02/ming-ling-xing-can-shu</id>
    <content type="html"><![CDATA[<p>阅读docker源码第一个文件<code>DOCKER/docker/docker.go</code>，这是docker的主函数所在的地方。简单来说，这个文件的代码就做了一件事：解析命令行参数，然后根据命令行参数再分流到各种子过程的调用。</p>

<!-- more -->


<h3>flag</h3>

<p>go语言默认使用flag包来做命令行参数解析，对于这个包的使用可以参考官方文档的说明。但归结起来，使用这个包大概有三个步骤：</p>

<ol>
<li>使用<code>flag.XXX</code>函数定义参数名及保存参数的变量</li>
<li>调用<code>flag.Parse()</code>进行参数的解析，解析结果被保存在定义的各个变量里</li>
<li>读取这些变量值</li>
</ol>


<p>但docker里定义参数的函数和标准库不太一样，docker的flag可以使用参数名数组来定义参数。比如在标准flag库里定义一个显示版本号的参数：</p>

<pre><code>flVersion = flag.Bool("v", false, "Print version information and quit")
</code></pre>

<p>但在docker里是这样定义的：</p>

<figure class='code'><figcaption><span>docker/docker.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">flVersion</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">Bool</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;v&quot;</span><span class="p">,</span> <span class="s">&quot;-version&quot;</span><span class="p">},</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&quot;Print version information and quit&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以即可以使用<code>docker -v</code>也可以使用<code>docker --version</code>来显示版本号。</p>

<h3>docker的实现</h3>

<p>docker在这里玩了个小trick，首先它重写了标准库的flag，并将包名由<code>flag</code>改成<code>mflag</code>，然后这样导入包：</p>

<pre><code>import flag "github.com/dotcloud/docker/pkg/mflag"
</code></pre>

<p>所以在docker里造成直接使用flag的假象。</p>

<p>那么，docker是怎样实现多多参数名的支持的？</p>

<p>首先，mflag将<code>Flag</code>的结构体定义参数名<code>Name</code>修改成数组形式<code>Names</code>：</p>

<figure class='code'><figcaption><span>pkg/mflag/flag.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Flag</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Names</span>    <span class="p">[]</span><span class="kt">string</span> <span class="c1">// name as it appears on command line</span>
</span><span class='line'>    <span class="nx">Usage</span>    <span class="kt">string</span>   <span class="c1">// help message</span>
</span><span class='line'>    <span class="nx">Value</span>    <span class="nx">Value</span>    <span class="c1">// value as set</span>
</span><span class='line'>    <span class="nx">DefValue</span> <span class="kt">string</span>   <span class="c1">// default value (as text); for usage message</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后还利用了flag标准库本身的特性，在同一个变量上可以绑定多个参数名:</p>

<pre><code>var de string
flag.String(&amp;de,"a","","argument")
flag.String(&amp;de,"b","","argument")
</code></pre>

<p>即可以用<code>cmd -a val</code>也可以用<code>cmd -b val</code>来调用，变量de的值都会被绑定为<code>val</code>。</p>

<p>除此之外，docker的<code>mflag</code>包还多定义了一种“隐藏参数”：以<code>#</code>开头来定义参数名：</p>

<pre><code>flag.Bool([]string{"#iptables", "-iptables"}, true, "Enable Docker's addition of iptables rules")
</code></pre>

<p>即，使用<code>-iptables</code>和<code>--iptables</code>都是有效的，但是在显示<code>Usage</code>时仅显示<code>--iptables</code>参数的使用说明，这是docker在不断升级更新时，所采用的一种兼容策略吧，允许旧参数的使用并给出警告，但以无帮助信息的方式不推荐旧参数。</p>

<p>实际实现也很简单，就是在帮助函数里去除对旧参数的说明：</p>

<figure class='code'><figcaption><span>pkg/mflag/flag.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">FlagSet</span><span class="p">)</span> <span class="nx">PrintDefaults</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">f</span><span class="p">.</span><span class="nx">VisitAll</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">flag</span> <span class="o">*</span><span class="nx">Flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">format</span> <span class="o">:=</span> <span class="s">&quot;  -%s=%s: %s\n&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">Value</span><span class="p">.(</span><span class="o">*</span><span class="nx">stringValue</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// put quotes on the value</span>
</span><span class='line'>            <span class="nx">format</span> <span class="p">=</span> <span class="s">&quot;  -%s=%q: %s\n&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">names</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{}</span>
</span><span class='line'>        <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">name</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">Names</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="nx">name</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;#&#39;</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">names</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">names</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">names</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">out</span><span class="p">(),</span> <span class="nx">format</span><span class="p">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">Join</span><span class="p">(</span><span class="nx">names</span><span class="p">,</span> <span class="s">&quot;, -&quot;</span><span class="p">),</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">DefValue</span><span class="p">,</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">Usage</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在10-12行，如果参数名定义时以<code>#</code>开头则不打印参数帮助。</p>

<p>好吧，参数解析源码其实和标准库大部分都是一样的，看到不一样的地方就行了，今天就到这里吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sort]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/04/15/sort/"/>
    <updated>2014-04-15T20:57:34+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/04/15/sort</id>
    <content type="html"><![CDATA[<h3>sort排序常用参数</h3>

<p>-n : 按照数值排序</p>

<p>-u : 过滤重复的行</p>

<p>-r : 降序排序，默认升序</p>

<p>-t : 指定分段符号</p>

<p>-k : 按照第几个字段(1&hellip;)排序</p>

<p>默认sort是按照字符排序的。</p>

<h3>sort临时目录</h3>

<p>默认情况下sort使用<code>/tmp</code>作为临时文件存放目录，如果根分区很小，可能造成分区磁盘飙升，为避免这种情况可以使用<code>-T</code>参数来指定sort的临时目录：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sort -T /path/to/tmp_directory
</span></code></pre></td></tr></table></div></figure>


<h3>sort不为人知的一个深坑</h3>

<p>默认情况下，sort将排序对象作为字符串进行排序，并且声称按照ANSII字母顺序进行排序，实际上，如果系统的<code>LC_ALL</code>环境变量为空的话，sort的排序并不一定是按字母顺序进行排序的，这会导致sort的下游依赖程序运行得不稳定，所以，如果要确保sort正确排序，需要正确设置环境变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>C
</span></code></pre></td></tr></table></div></figure>


<p>为什么这样设置，可以<code>man sort</code>看一下它的warning部分的说明。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[server load]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/03/27/server-load/"/>
    <updated>2014-03-27T09:39:14+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/27/server-load</id>
    <content type="html"><![CDATA[<h3>先看几个处理器</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grep -c <span class="s1">&#39;model name&#39;</span> /proc/cpuinfo
</span></code></pre></td></tr></table></div></figure>


<p>比如结果是4</p>

<h3>top查看系统整体情况</h3>

<p>执行<code>top</code>命令查看系统负载情况：
1. 关注<code>load average</code>系统负载的当前，5分钟前，15分钟前负载，最好小于cpu个数
2. 第二行显示系统进程概况
3. 第四行us用户占用cpu，sy系统占用cpu，ni，id空闲比例，wa io等待，hi，si swap交换
4. 最后是内存情况和交换分区</p>

<h3>iostat检查io情况</h3>

<p><code>iostat -x</code>，需要关注await即io等待时间，单位ms，一般要小于5ms； %util是io处理时间除以总时间，代表io繁忙度，大于70%需要注意。</p>

<!--more-->


<h3>vmstat查看系统概况</h3>

<pre><code>procs -----------memory---------- ---swap-- -----io---- --system-- ----cpu----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in    cs us sy id wa
 1  0 409548 3317764  56864 39709176    0    0    12    29    0     0  4  1 96  0
</code></pre>

<p> 主要看r和b，代表当前执行进程和阻塞进程，当r长期大于cpu个数需要注意，还有阻塞进程过多也需要注意</p>

<h3>ps和pstree查看进程</h3>

<p>查看线程个数可以用<code>cat /proc/PID/status|grep Threads</code>，另外对于ps，可以这样查看具体线程</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ps -mp PID -o THREAD,tid,time
</span></code></pre></td></tr></table></div></figure>


<p>如：</p>

<pre><code>USER     %CPU PRI SCNT WCHAN  USER SYSTEM   TID     TIME
work      1.8   -    - -         -      -     - 15:08:33
work      0.0  14    - -         -      - 11750 00:00:00
work      0.0  23    - -         -      - 11751 00:00:14
work      0.0  23    - -         -      - 11760 00:03:36
</code></pre>

<p>关注%CPU占用cpu情况，TID是线程id，TIME是占用cpu的时间长。</p>

<p>对于java进程可以用来调试程序：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># tid 转为16进制</span>
</span><span class='line'><span class="nb">printf</span> <span class="s2">&quot;%x\n&quot;</span> tid
</span><span class='line'>jstack PID | grep tid -A 50
</span></code></pre></td></tr></table></div></figure>


<h3>怎么启动这个程序的</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pmap PID
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下查看线程数]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/03/25/linuxxia-cha-kan-xian-cheng-shu/"/>
    <updated>2014-03-25T08:53:55+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/25/linuxxia-cha-kan-xian-cheng-shu</id>
    <content type="html"><![CDATA[<h3>1. cat /proc/${pid}/status</h3>

<h3>2. ps -mp &lt;PID></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[route]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/03/14/route/"/>
    <updated>2014-03-14T00:03:30+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/14/route</id>
    <content type="html"><![CDATA[<p>算是记录一个教训吧。</p>

<p>下午我的机器突然不能上外网，尝试内网和别的机器互访都没有问题，就是访问外网显示<code>connect: Network is unreachable</code>，<code>nslookup</code>查看DNS解析也没有问题，就是没想到网络不能到达很有可能是没有路由信息，最后朋友指点发现没有默认网关(<code>route -n</code>)，外网ip没得路由规则走，添加默认网关后ok：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>route add default gw 10.46.148.1
</span></code></pre></td></tr></table></div></figure>


<p>提醒自己以后把学到的东西利用起来！</p>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ls遍历空目录处理]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/03/12/lsbian-li-kong-mu-lu-chu-li/"/>
    <updated>2014-03-12T23:18:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/12/lsbian-li-kong-mu-lu-chu-li</id>
    <content type="html"><![CDATA[<p>先说说原因：<code>for</code>循环是利用空格做分隔符，所以可以这样打印句子中的单词：</p>

<pre><code>centence="Linux is cool"
for word in $centence;do
    echo $word
done
</code></pre>

<p>有时用ls命令遍历目录会遇到空目录：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>d in <span class="k">$(</span>ls<span class="k">)</span>;<span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;$d&quot;</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>处理办法是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ls -1 | <span class="k">while </span><span class="nb">read </span>d
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;$d&quot;</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[date命令]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/03/12/dateming-ling/"/>
    <updated>2014-03-12T23:03:56+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/12/dateming-ling</id>
    <content type="html"><![CDATA[<p>首先看看常用的格式字符串</p>

<pre><code> %Y 年
 %m 月
 %d 日
 %H 时
 %M 分
 %S 秒
 %s 时间戳(秒)
</code></pre>

<p><strong>date命令常用操作</strong></p>

<p>获取当前时间</p>

<pre><code>date +%Y-%m-%d    # 2014-02-21
</code></pre>

<!--more-->


<p>几天前(后)，几月前(后)，几年前(后)</p>

<pre><code>date -d "1 day ago"  "+%Y-%m-%d %H:%M:%S"  #一天前的当前时间 2014-02-20 11:11:31
date -d "2 days ago"  # 或者date-d "-2 days"
date -d "-8 months"
date -d "+2 years" # 两年后
</code></pre>

<p>多少分钟，小时前（后）</p>

<pre><code>date -d "-5 minutes"  "+%Y-%m-%d %H:%M:%S"  #5分钟前
date -d "5 minutes"  "%H:%M:%S"  #5分钟后
</code></pre>

<p>时间戳和日期互转，常用于计算</p>

<pre><code>date -d "2014-02-20 11:11:31" +%s  #获取某时间的时间戳
date +%s   #返回当前时间戳1392954893
date -d @1392954893 "+%Y-%m-%d %H:%M:%S"  #将时间戳转换为时间
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stat命令与文件时间]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/03/12/statming-ling-yu-wen-jian-shi-jian/"/>
    <updated>2014-03-12T15:04:54+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/12/statming-ling-yu-wen-jian-shi-jian</id>
    <content type="html"><![CDATA[<h3>stat命令</h3>

<p>stat命令常用来获取文件三个时间<code>access time</code>,<code>modify time</code>和<code>change time</code></p>

<pre><code>$ stat access.log
  File: `access.log'
  Size: 1559877779  Blocks: 3049624    IO Block: 4096   regular file
Device: ca20h/51744d    Inode: 16269326    Links: 1
Access: (0644/-rw-r--r--)  Uid: (  500/    work)   Gid: (  500/    work)
Access: 2014-03-09 21:58:33.000000000 +0800
Modify: 2014-03-07 08:17:36.000000000 +0800
Change: 2014-03-07 08:17:36.000000000 +0800
</code></pre>

<p>通常可以使用<code>-c</code>参数直接获取三个时间</p>

<pre><code>$ stat -c %x access.log   #获取access time
2014-03-09 21:58:33.000000000 +0800
$ stat -c %y access.log  #获取modify time
2014-03-07 08:17:36.000000000 +0800
$ stat -c %z access.log #获取change time
2014-03-07 08:17:36.000000000 +0800
</code></pre>

<!--more-->


<h3>三个时间</h3>

<p><code>access time</code>对应文件访问时间，只要有读操作就会更新这个时间。</p>

<p><code>change time</code>对应文件元信息，比如文件重命名会更新该时间。</p>

<p><code>modify time</code>对应文件内容修改时间，只要修改文件内容就会更新该时间，由于内容改变实际也改变文件元数据，所以写操作也更新<code>change time</code>。</p>

<p>注意：对于文件夹来说，对文件夹下的文件增删，重命名，等操作，会修改文件夹<code>change time</code>和<code>modify time</code>，因为文件名实际是作为目录文件的内容存在的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[shell数组]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/03/10/shellshu-zu/"/>
    <updated>2014-03-10T00:22:25+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/10/shellshu-zu</id>
    <content type="html"><![CDATA[<h3>数组定义</h3>

<p>定义数组需要用括号把元素包裹起来。</p>

<pre><code>colors=(red green blue black white)
# 打印整个数组
echo ${colors[*]}  # red green blue black white
echo ${colors[@]}  # red green blue black white
</code></pre>

<!--more-->


<h3>基本操作</h3>

<pre><code># 有两种方法获取数组长度
echo ${#colors[@]}    # 5
echo ${#colors[*]}    # 5
</code></pre>

<p>遍历数组</p>

<pre><code>for e in ${colors[*]};do
    echo $e
done
</code></pre>

<p>或</p>

<pre><code>for((i=0;i&lt;${#colors[*]};i++));do
    echo ${colors[i]}
done
</code></pre>

<p>读写数组</p>

<pre><code>echo ${colors[0]}    # red
colors[0]=RED
echo ${colors[0]}    # RED
</code></pre>

<p>移除元素</p>

<pre><code>unset colors[1]
echo ${colors[*]}    # red blue black white
echo ${#colors[*]}   # 4
</code></pre>

<h3>切片</h3>

<p>切片不影响原数组</p>

<pre><code>echo ${colors[*]:1:3}    # green blue black
# 获取切片得到的新数组
c=(${colors[*]:1:3})
echo ${c[*]}             # green blue black
</code></pre>

<h3>替换</h3>

<p>替换也不影响原数组</p>

<pre><code>echo ${colors[*]/e/E}    # rEd grEen bluE black whitE
</code></pre>

<h3>字符串转换为数组</h3>

<p>使用<code>()</code>操作符和<code>IFS</code>指定分隔符</p>

<pre><code>IFS=";"
str="a;b;c;d;e"
arr=($str)
echo ${arr[*]}  # a b c d e
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[compile ruby from source]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/03/07/compile-ruby-from-source/"/>
    <updated>2014-03-07T15:35:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/07/compile-ruby-from-source</id>
    <content type="html"><![CDATA[<h3>下载需要的软件包</h3>

<ul>
<li><a href="http://www.openssl.org/source/">openssl</a></li>
<li><a href="http://pyyaml.org/wiki/PyYAML">yaml</a></li>
<li><a href="https://www.ruby-lang.org">ruby</a></li>
<li><a href="http://sqlite.org/2014/sqlite-autoconf-3080301.tar.gz">sqlite3</a>(可选)</li>
<li><a href="http://pkgconfig.freedesktop.org/releases/pkg-config-0.28.tar.gz">pkg-config</a>(可选)</li>
</ul>


<!--more-->


<p>假设需要安装的ruby目录为<code>/path/to/ruby_dir</code></p>

<pre><code>export RUBY_DEST=/path/to/ruby_dir
</code></pre>

<h3>编译openssl</h3>

<pre><code>./config --prefix=$RUBY_DEST  shared
make 
make install
</code></pre>

<h3>编译libyaml</h3>

<pre><code>./configure --prefix=$RUBY_DEST
make
make install
</code></pre>

<h3>编译pkg-config(如果版本过低需要安装，否则编译ruby会报错<code>Unknown keyword 'URL' in '.$RUBY_DEST.tmp.pc'</code>)</h3>

<pre><code>./configure --prefix=$RUBY_DEST         \
            --with-internal-glib  \
            --disable-host-tool
</code></pre>

<p>如果报错：</p>

<pre><code>gthread-posix.c: In function `g_system_thread_set_name':
gthread-posix.c:1175: error: `PR_SET_NAME' undeclared (first use in this function)
gthread-posix.c:1175: error: (Each undeclared identifier is reported only once
gthread-posix.c:1175: error: for each function it appears in.)
</code></pre>

<p>就需要在pkg源码目录下glib/glib/gthread.c添加：</p>

<pre><code>#define PR_SET_NAME    15               /* Set process name */
#define PR_GET_NAME    16               /* Get process name */
</code></pre>

<p>然后再继续编译</p>

<pre><code>make &amp;&amp; make install
</code></pre>

<h3>编译ruby</h3>

<p>先导入环境变量,否则ruby找不到ssl的链接目录</p>

<pre><code>export LD_LIBRARY_PATH=$RUBY_DEST/lib
export C_INCLUDE_PATH=$RUBY_DEST/include
</code></pre>

<p>开始编译ruby</p>

<pre><code>./configure --prefix=$RUBY_DEST --with-opt-dir=$RUBY_DEST
make
make install
</code></pre>

<h3>编译sqlite3(可选)</h3>

<h3>测试</h3>

<pre><code>$RUBY_DEST/bin/ruby -v #打印版本号，说明安装成功
export PATH=$PATH:$RUBY_DEST/bin
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[curl]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/03/05/curl/"/>
    <updated>2014-03-05T23:29:56+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/05/curl</id>
    <content type="html"><![CDATA[<h3>基本用法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl http://www.google.com
</span><span class='line'>curl --proxy http://proxy.com:8888 http://ww.google.com <span class="c">#使用代理</span>
</span><span class='line'>curl http://user:password@example.org/  <span class="c">#http验证</span>
</span><span class='line'>curl -u user:password http://example.org/ <span class="c">#http验证</span>
</span></code></pre></td></tr></table></div></figure>


<p>获取响应头</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -i http://example.com  <span class="c">#在返回结果中包含响应头 </span>
</span><span class='line'>curl -IL http://example.com  <span class="c">#仅返回响应头</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>REST请求</h3>

<p><strong>GET</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl http://www.google.com
</span></code></pre></td></tr></table></div></figure>


<p><strong>POST</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl --data <span class="s2">&quot;birthyear=1905&amp;press=%20OK%20&quot;</span>  http://www.example.com/when.cgi
</span><span class='line'><span class="c">#or</span>
</span><span class='line'>curl --data-urlencode <span class="s2">&quot;name=I am Daniel&quot;</span> http://www.example.com
</span></code></pre></td></tr></table></div></figure>


<p><strong>PUT</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl --upload-file uploadfile http://www.example.com/receive.cgi <span class="c">#upload a file</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>DELETE</strong></p>

<p>实际上，可以用<code>curl -X http_method</code>指定包括GET,POST,PUT内的任意方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X DELETE http://example.com
</span></code></pre></td></tr></table></div></figure>


<h3>header</h3>

<p>使用-H或&mdash;header指定请求头部</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -H <span class="s2">&quot;Content-Type: application/json&quot;</span> http:/example.com
</span></code></pre></td></tr></table></div></figure>


<h3>Cookie</h3>

<p><code>-b,--cookie</code>选项告诉<code>curl</code>使用已有的cookie，可以是键值对也可以是文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -b <span class="s2">&quot;name=value&quot;</span> http://host
</span><span class='line'>curl -b cookie.txt http://host.com
</span></code></pre></td></tr></table></div></figure>


<p><code>-c,--cookie-jar</code>选项告诉<code>curl</code>将新的cookie保存在文件中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -c new.txt http://example.com
</span></code></pre></td></tr></table></div></figure>


<h3>HTTPS</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl https://example.com
</span><span class='line'>curl --cert mycert.pem https://example.com
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[列出目录结构]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/27/lie-chu-mu-lu-jie-gou/"/>
    <updated>2014-02-27T20:52:50+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/27/lie-chu-mu-lu-jie-gou</id>
    <content type="html"><![CDATA[<h3>最简单美观的方法tree</h3>

<p>tree命令是专门用来罗列目录结构的，输出树形结果，很漂亮。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tree demo
</span><span class='line'>demo
</span><span class='line'>├── Gemfile
</span><span class='line'>├── boot.rb
</span><span class='line'>├── collectors
</span><span class='line'>├── config
</span><span class='line'>│   └── mail_config.rb
</span><span class='line'>├── controllers
</span><span class='line'>├── db
</span><span class='line'>│   ├── connection.rb
</span><span class='line'>│   ├── database.yml
</span><span class='line'>│   └── migrate
</span><span class='line'>├── helpers
</span><span class='line'>├── models
</span><span class='line'>├── rakefile
</span><span class='line'>└── views
</span><span class='line'>
</span><span class='line'>8 directories, 6 files
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>折衷的方法find</h3>

<p>如果没有权限在机器上安装tree命令，find命令也是一种折衷的选择。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>find demo -type f -o -type d
</span><span class='line'>demo
</span><span class='line'>demo/boot.rb
</span><span class='line'>demo/collectors
</span><span class='line'>demo/config
</span><span class='line'>demo/config/.gitkeep
</span><span class='line'>demo/config/mail_config.rb
</span><span class='line'>demo/controllers
</span><span class='line'>demo/db
</span><span class='line'>demo/db/connection.rb
</span><span class='line'>demo/db/database.yml
</span><span class='line'>demo/db/migrate
</span><span class='line'>demo/db/migrate/.gitkeep
</span><span class='line'>demo/Gemfile
</span><span class='line'>demo/helpers
</span><span class='line'>demo/helpers/.gitkeep
</span><span class='line'>demo/models
</span><span class='line'>demo/rakefile
</span><span class='line'>demo/views
</span></code></pre></td></tr></table></div></figure>


<p>虽然没有tree命令那么直观，但却有另一个好处，便于使用管道进一步操作。</p>

<h3>仅仅是一种选择ls</h3>

<p>ls命令也可以罗列出目录结构，但这个仅供娱乐了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls -R demo
</span><span class='line'>Gemfile       collectors  controllers helpers     rakefile
</span><span class='line'>boot.rb       config      db      models      views
</span><span class='line'>
</span><span class='line'>demo/collectors:
</span><span class='line'>
</span><span class='line'>demo/config:
</span><span class='line'>mail_config.rb
</span><span class='line'>
</span><span class='line'>demo/controllers:
</span><span class='line'>
</span><span class='line'>demo/db:
</span><span class='line'>connection.rb database.yml    migrate
</span><span class='line'>
</span><span class='line'>demo/db/migrate:
</span><span class='line'>
</span><span class='line'>demo/helpers:
</span><span class='line'>
</span><span class='line'>demo/models:
</span><span class='line'>
</span><span class='line'>demo/views:
</span></code></pre></td></tr></table></div></figure>


<h3>利用shell自己来实现</h3>

<p>在无法安装软件的情况下，自己写一个tree命令吧，至少基本的bash是可以用的。</p>

<figure class='code'><figcaption><span>tree.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>n_char<span class="o">(){</span>
</span><span class='line'>  <span class="nv">ch</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'>  <span class="nv">cnt</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'>  <span class="k">for</span><span class="o">((</span><span class="nv">i</span><span class="o">=</span>0;i&lt;<span class="nv">$cnt</span>;i++<span class="o">))</span>;<span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="nv">string</span><span class="o">=</span><span class="s2">&quot;${ch}____$string&quot;</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="nv">$string</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>dive_into<span class="o">(){</span>
</span><span class='line'>  <span class="nb">trap</span> <span class="s1">&#39;exit&#39;</span> INT
</span><span class='line'>  ls -1a <span class="s2">&quot;$1&quot;</span> | <span class="k">while </span><span class="nb">read </span>f
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'><span class="k">      if</span> <span class="o">[</span> <span class="s2">&quot;$f&quot;</span> <span class="o">==</span> <span class="s2">&quot;.&quot;</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="s2">&quot;$f&quot;</span> <span class="o">==</span> <span class="s2">&quot;..&quot;</span> <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">          continue</span>
</span><span class='line'><span class="k">      fi</span>
</span><span class='line'><span class="k">      if</span> <span class="o">[</span> <span class="s2">&quot;$4&quot;</span> <span class="o">=</span> <span class="s2">&quot;0&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">&quot;${f:0:1}&quot;</span> <span class="o">=</span> <span class="s2">&quot;.&quot;</span> <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">          continue</span>
</span><span class='line'><span class="k">      fi</span>
</span><span class='line'><span class="k">      </span><span class="nv">pre</span><span class="o">=</span><span class="k">$(</span>n_char <span class="s1">&#39;|&#39;</span> <span class="nv">$2</span><span class="k">)</span>
</span><span class='line'>      <span class="nv">line</span><span class="o">=</span><span class="s2">&quot;${pre//_/ }|-- ${f}&quot;</span>
</span><span class='line'>      <span class="o">[[</span> -L <span class="s2">&quot;$1/$f&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nv">line</span><span class="o">=</span><span class="s2">&quot;${line} -&gt; `readlink &quot;</span><span class="nv">$1</span>/<span class="nv">$f</span><span class="s2">&quot;`&quot;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$5&quot;</span> <span class="o">=</span> <span class="s2">&quot;1&quot;</span> <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">          </span><span class="nv">s</span><span class="o">=</span><span class="sb">`</span>du -sh <span class="s2">&quot;$1/$f&quot;</span>|awk <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
</span><span class='line'>          <span class="nv">line</span><span class="o">=</span><span class="s2">&quot;${line} [$s]&quot;</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;$line&quot;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;$1/${f}&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> ! -L <span class="s2">&quot;$1/$f&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="k">$((</span><span class="nv">$2</span><span class="o">+</span><span class="m">1</span><span class="k">))</span> -lt <span class="nv">$3</span> <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">          </span>dive_into <span class="s2">&quot;$1/$f&quot;</span> <span class="k">$((</span><span class="nv">$2</span><span class="o">+</span><span class="m">1</span><span class="k">))</span> <span class="nv">$3</span> <span class="nv">$4</span> <span class="nv">$5</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">  done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">while </span><span class="nb">getopts</span> <span class="s2">&quot;d:l:ahs&quot;</span> args
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  case</span> <span class="nv">$args</span> in
</span><span class='line'>  l<span class="o">)</span> <span class="nv">level</span><span class="o">=</span><span class="nv">$OPTARG</span>
</span><span class='line'>  ;;
</span><span class='line'>  d<span class="o">)</span> <span class="nv">dir</span><span class="o">=</span><span class="s2">&quot;$OPTARG&quot;</span>
</span><span class='line'>  ;;
</span><span class='line'>  a<span class="o">)</span> <span class="nv">all</span><span class="o">=</span>1
</span><span class='line'>  ;;
</span><span class='line'>  s<span class="o">)</span> <span class="nv">size</span><span class="o">=</span>1
</span><span class='line'>  ;;
</span><span class='line'>  h<span class="o">)</span> <span class="nb">echo</span> <span class="s2">&quot;Must specify directoy with -d&quot;</span>
</span><span class='line'>     <span class="nb">echo</span> <span class="s2">&quot;Usage: tree.sh -d directory &quot;</span>
</span><span class='line'>     <span class="nb">echo</span> <span class="s2">&quot;-l maxdepth, the tree depth&quot;</span>
</span><span class='line'>     <span class="nb">echo</span> <span class="s2">&quot;-s, print file size&quot;</span>
</span><span class='line'>     <span class="nb">echo</span> <span class="s2">&quot;-a, print with hidden files&quot;</span>
</span><span class='line'>     <span class="nb">exit </span>1
</span><span class='line'>  ;;
</span><span class='line'>  ?<span class="o">)</span> <span class="nb">echo</span> <span class="s2">&quot;No such argument&quot;</span>
</span><span class='line'>     <span class="nb">exit </span>1
</span><span class='line'>  ;;
</span><span class='line'>  <span class="k">esac</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="o">[[</span> -z <span class="s2">&quot;$dir&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Must specify directory with -d&quot;</span>
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">[[</span> -z <span class="s2">&quot;$level&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nv">level</span><span class="o">=</span>100
</span><span class='line'><span class="o">[[</span> -z <span class="s2">&quot;$all&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nv">all</span><span class="o">=</span>0
</span><span class='line'><span class="o">[[</span> -z <span class="s2">&quot;$size&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nv">size</span><span class="o">=</span>0
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$dir&quot;</span>
</span><span class='line'>dive_into <span class="s2">&quot;$dir&quot;</span>  0 <span class="nv">$level</span> <span class="nv">$all</span> <span class="nv">$size</span>
</span></code></pre></td></tr></table></div></figure>


<p>试试看好用不：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tree.sh -h
</span><span class='line'>Must specify directoy with -d
</span><span class='line'>Usage: tree.sh -d directory
</span><span class='line'>-l maxdepth, the tree depth
</span><span class='line'>-s, print file size
</span><span class='line'>-a, print with hidden files
</span><span class='line'>
</span><span class='line'>tree.sh -d .
</span><span class='line'>.
</span><span class='line'>|-- dir
</span><span class='line'>|    |-- file
</span><span class='line'>|    |-- g.css
</span><span class='line'>|    |-- sub
</span><span class='line'>|    |    |-- sfile
</span><span class='line'>|-- g -&gt; dir/g.css
</span><span class='line'>|-- ldir -&gt; dir/
</span><span class='line'>|-- m.html -&gt; o.html
</span><span class='line'>|-- o.html
</span><span class='line'>|-- s.html
</span><span class='line'>|-- tree.sh
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[find命令]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/27/findming-ling/"/>
    <updated>2014-02-27T20:10:37+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/27/findming-ling</id>
    <content type="html"><![CDATA[<h3>find的基本语法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find PATH OPTIONS <span class="o">[</span>-exec COMMANDD <span class="o">{}</span> <span class="se">\;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>find</code>命令可以使用多个OPTION，不同OPTION之间默认是<code>and</code>关系，除了<code>and</code>关系还有<code>not</code>和<code>or</code>关系，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find / -name <span class="s1">&#39;n1&#39;</span> -type f  <span class="c">#查找/目录下名称为n1且为普通文件的文件</span>
</span><span class='line'>find / -name <span class="s1">&#39;n1&#39;</span> -o -name <span class="s1">&#39;n2&#39;</span> <span class="c">#查找名称为n1或n2的文件</span>
</span><span class='line'>find / ! -name <span class="s1">&#39;n1&#39;</span>  <span class="c"># 查找名称不为n1的文件</span>
</span></code></pre></td></tr></table></div></figure>


<p>当使用的OPTION很多时，可以将OPTIONS括起来增加可读性，注意括号需要用<code>\</code>来转义，同时<code>\(</code>和<code>\)</code>两边都需要有空格：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find / <span class="se">\(</span> -name <span class="s1">&#39;n1&#39;</span> -o -name <span class="s1">&#39;n2&#39;</span> <span class="se">\)</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>find命令常用的OPTION</h3>

<ul>
<li>-name  按名称查找，支持通配符*,?,[]</li>
<li>-user  按用户名查找</li>
<li>-empty  查找空文件(目录)</li>
<li>-perm  查找对应权限的文件，权限表示的三位数字形式如777</li>
<li>-type 按类型查找，类型可为<code>b</code>块设备，<code>c</code>字符设备，<code>p</code>管道，<code>f</code>普通文件，<code>l</code>链接文件，<code>s</code>socket文件</li>
<li>-print  打印结果</li>
<li>-regex 按正则表达式查找，注意该正则匹配属于完全匹配，即如果要查找<code>dir</code>目录下的文件<code>file_23</code>应该用正则表达式<code>.*file_[0-9]+</code>，用<code>file_[0-9]+</code>是匹配不到的，<code>find dir -regex '.*file_[0-9]+</code>是用完整结果即<code>dir/file_23</code>来做和<code>-regex</code>完全匹配的</li>
<li>-maxdepth n  find的最大目录层级查找深度，最小为1</li>
<li>-mindepth n find的最小目录查找深度</li>
</ul>


<p>按时间查找的参数：</p>

<ul>
<li>-amin n  查找n分钟以前被访问（access）的文件</li>
<li>-atime n  查找n天前被访问的文件</li>
<li>-cmin n  查找n分钟前文件元信息被修改（change）的文件</li>
<li>-ctime n  查找n天前文件元信息被修改过的文件</li>
<li>-mmin n  查找n分钟前内容被修改的文件</li>
<li>-mtime n 查找n天前内容被修改的文件</li>
</ul>


<h3>exec</h3>

<p>find命令最后的exec表示对找到的文件执行什么命令，其中<code>{}</code>代表找到的文件，注意<code>{}</code>和<code>\;</code>间有空格。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用expect实现自动登录]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/25/shi-yong-expectshi-xian-zi-dong-deng-lu/"/>
    <updated>2014-02-25T20:13:57+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/25/shi-yong-expectshi-xian-zi-dong-deng-lu</id>
    <content type="html"><![CDATA[<p>网上有很多类似的文章，但很多都是先写expect脚本再从bash里调用expect脚本，
我希望直接在bash脚本里使用expect命令来实现自动登录。</p>

<h3>利用expect命令实现自动登录并执行命令</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>expect -c <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">spawn ssh USER@HOST &quot;commands&quot;</span>
</span><span class='line'><span class="s1">expect {</span>
</span><span class='line'><span class="s1">&quot;*(yes/no)?&quot; { send &quot;yes\r&quot;;exp_continue }</span>
</span><span class='line'><span class="s1">&quot;*assword:&quot; { send &quot;PASSWORD\r&quot; }</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'><span class="s1">expect eof</span>
</span><span class='line'><span class="s1">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于expect的命令在网上有很多资料，这里不在赘述。下面讲讲怎么在bash和expect传递变量。</p>

<!--more-->


<h3>获取登录名及登录密码</h3>

<p>从bash中获取变量无非就是获取登录主机及密码，提高代码移植性。这里利用bash的Here document实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">host</span><span class="o">=</span><span class="s2">&quot;USER@HOST&quot;</span>
</span><span class='line'><span class="nv">password</span><span class="o">=</span><span class="s2">&quot;PASSWORD&quot;</span>
</span><span class='line'><span class="nv">cmd</span><span class="o">=</span><span class="s2">&quot;command_list&quot;</span>
</span><span class='line'>
</span><span class='line'>expect <span class="s">&lt;&lt;EOF </span>
</span><span class='line'><span class="s">spawn ssh $host &quot;$cmd&quot;</span>
</span><span class='line'><span class="s">expect {</span>
</span><span class='line'><span class="s">&quot;*(yes/no)?&quot; { send &quot;yes\r&quot;;exp_continue }</span>
</span><span class='line'><span class="s">&quot;*assword:&quot; { send &quot;$password\r&quot; }</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">expect eof</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>bash会自动解析here document中的变量，个人认为这种方式比使用expect的set命令更简便。</p>

<h3>获取登录执行命令结果</h3>

<p>如果希望保持登录，去掉上面代码的<code>ssh</code>后的命令列表并且将<code>expect eof</code>改成<code>interact</code>即可。</p>

<p>但通常我们只是登录到某台机器并执行命令后就返回，同时希望获得命令执行的结果。但上面的代码会混合登录时的部分输出，所以这里可以使用管道过滤一下。</p>

<p>下面的代码展示的怎样获取并输出远程主机的真正命令输出，同时也是一个在here document后接管道操作的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">host</span><span class="o">=</span><span class="s2">&quot;USER@HOST&quot;</span>
</span><span class='line'><span class="nv">password</span><span class="o">=</span><span class="s2">&quot;PASSWORD&quot;</span>
</span><span class='line'><span class="nv">cmd</span><span class="o">=</span><span class="s2">&quot;command_list&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span>expect <span class="s">&lt;&lt;EOF </span>
</span><span class='line'><span class="s">spawn ssh $host &quot;$cmd&quot;</span>
</span><span class='line'><span class="s">expect {</span>
</span><span class='line'><span class="s">&quot;*(yes/no)?&quot; { send &quot;yes\r&quot;;exp_continue }</span>
</span><span class='line'><span class="s">&quot;*assword:&quot; { send &quot;$password\r&quot; }</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">expect eof</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="o">)</span> | awk <span class="s1">&#39;BEGIN{find=0}</span>
</span><span class='line'><span class="s1">{</span>
</span><span class='line'><span class="s1"> if(find){print $0;next}</span>
</span><span class='line'><span class="s1"> if($0 ~ /[pP]assword:/){ find=1 }</span>
</span><span class='line'><span class="s1">}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是在bash中调用expect自动登录的完整代码了。</p>

<p>P.S. 在here document后接管道操作的几种方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 1</span>
</span><span class='line'>cat <span class="s">&lt;&lt;EOF | sh</span>
</span><span class='line'><span class="s">echo 1</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="c"># 2</span>
</span><span class='line'><span class="o">(</span>cat <span class="s">&lt;&lt;EOF</span>
</span><span class='line'><span class="s">echo 1</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="o">)</span> | sh
</span><span class='line'><span class="c"># 3</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>cat<span class="s">&lt;&lt;EOF</span>
</span><span class='line'><span class="s">echo 1</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="o">}</span> | sh
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux日常维护]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/21/linuxri-chang-wei-hu/"/>
    <updated>2014-02-21T22:58:13+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/21/linuxri-chang-wei-hu</id>
    <content type="html"><![CDATA[<h3>某些用户cron任务失败</h3>

<p>有时某些普通用户的crontab任务会失败，这可能是由于crond执行普通用户的任务时，是以非登录shell的形式切换到普通用户来执行的，所以可能缺失了某些环境变量。</p>

<p>解决办法是在crontab任务前先执行<code>source /home/username/.bash_profile</code>，后面再接用户自己的任务命令即可。</p>

<p>ps.<code>/etc/profile</code>,<code>~/.bash_profile</code>,<code>~/.bashrc</code>三个脚本的区别：</p>

<ul>
<li>/etc/profile     #系统级初始化脚本，会被登录shell执行</li>
<li>~/.bash_profile  #用户配置，会被登录shell执行，非登录shell不执行</li>
<li>~/.bashrc        #非登录shell执行，但通常~/.bash_profile都会在代码里调用~/.bashrc，所以登录shell也执行它</li>
</ul>


<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sendmail发邮件中文乱码]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/19/sendmailfa-you-jian-zhong-wen-luan-ma/"/>
    <updated>2014-02-19T23:23:15+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/19/sendmailfa-you-jian-zhong-wen-luan-ma</id>
    <content type="html"><![CDATA[<p>如果这是要使用sendmail命令发送的邮件file内容：</p>

<pre><code>Subject:标题
TO:to@example.com
From:from@example
Content-Type:text/html
&lt;html&gt;
    &lt;body&gt;
        邮件内容
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3>解决内容乱码</h3>

<p>内容乱码比较好解决，首先内容先使用utf-8编码，然后在修改邮件的<code>Content-Type</code>为：</p>

<pre><code>Content-Type:text/html;charset=UTF-8
</code></pre>

<h3>解决标题乱码</h3>

<p>需要利用base64编码标题内容，例如，如果UTF-8编码的字符串<code>标题</code>进行base64编码后的内容为<code>5qCH6aKY</code>,则邮件标题为：</p>

<pre><code>Subject:=?UTF-8?B?5qCH6aKY?=
</code></pre>

<p>即邮件标题<code>Subject:</code>后字符串格式为：&#8221;<code>=?UTF-8?B?</code><em>base64编码的utf-8字串</em><code>?=</code>&#8221;</p>

<h3>发送邮件</h3>

<p>最后发送文件可以正确显示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat file | sendmail -t
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[axlsx报表工具(四)——条件格式化]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-si-tiao-jian-ge-shi-hua/"/>
    <updated>2014-02-15T00:47:04+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-si-tiao-jian-ge-shi-hua</id>
    <content type="html"><![CDATA[<h3>定义格式化操作</h3>

<p>条件格式化风格定义也是使用格式化定义语句add_style，不同的是必须将type指定为:dxf。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># define the style for conditional formatting</span>
</span><span class='line'><span class="n">profitable</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="n">styles</span><span class="o">.</span><span class="n">add_style</span><span class="p">(</span> <span class="ss">:fg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;FF428751&quot;</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:dxf</span> <span class="p">)</span>
</span><span class='line'><span class="n">unprofitable</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="n">styles</span><span class="o">.</span><span class="n">add_style</span><span class="p">(</span> <span class="ss">:fg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;FF0000&quot;</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:dxf</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>条件格式化有四种类型cellIs，colorScale，dataBar，iconSet。</p>

<!-- more -->


<h3>cellIs</h3>

<p>cellIs条件格式化使用得较为普遍，即对满足条件的单元格更改字体颜色，字体大小，背景色等等。</p>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=0cc20173b8a1cd1101b672258929b9c1/d000baa1cd11728bb30e6961cafcc3cec3fd2c56.jpg?referer=3c8b0130af4bd1135dda82028c4c&amp;x=.jpg" alt="image" /></p>

<p>对于B列，如果数值大于100000表示盈利，则更改字体颜色；对于亏损的，则在C列中将百分比小于100%的赤字显示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Cell Is&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ws</span><span class="o">|</span>
</span><span class='line'><span class="c1"># 产生20行数据</span>
</span><span class='line'><span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Previous Year Quarterly Profits (JPY)&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Quarter&quot;</span><span class="p">,</span> <span class="s2">&quot;Profit&quot;</span><span class="p">,</span> <span class="s2">&quot;% of Total&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">offset</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">rows</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="n">offset</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">rows</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'> <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Q</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="o">*</span><span class="p">((</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)),</span> <span class="s2">&quot;=100*B</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">/SUM(B3:B</span><span class="si">#{</span><span class="n">rows</span><span class="o">+</span><span class="n">offset</span><span class="si">}</span><span class="s2">)&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span><span class="o">=&gt;[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">money</span><span class="p">,</span> <span class="n">percent</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># 格式化条件&gt;100000</span>
</span><span class='line'><span class="n">ws</span><span class="o">.</span><span class="n">add_conditional_formatting</span><span class="p">(</span><span class="s2">&quot;B3:B100&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:cellIs</span><span class="p">,</span> <span class="ss">:operator</span> <span class="o">=&gt;</span> <span class="ss">:greaterThan</span><span class="p">,</span> <span class="ss">:formula</span> <span class="o">=&gt;</span> <span class="s2">&quot;100000&quot;</span><span class="p">,</span> <span class="ss">:dxfId</span> <span class="o">=&gt;</span> <span class="n">profitable</span><span class="p">,</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="c1"># 格式化条件0.00%&lt;x&lt;100%</span>
</span><span class='line'><span class="n">ws</span><span class="o">.</span><span class="n">add_conditional_formatting</span><span class="p">(</span><span class="s2">&quot;C3:C100&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:cellIs</span><span class="p">,</span> <span class="ss">:operator</span> <span class="o">=&gt;</span> <span class="ss">:between</span><span class="p">,</span> <span class="ss">:formula</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;0.00%&quot;</span><span class="p">,</span><span class="s2">&quot;100.00%&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:dxfId</span> <span class="o">=&gt;</span> <span class="n">unprofitable</span><span class="p">,</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>add_conditional_formatting方法指定条件格式化，类型type是cellIs，条件由operator和formula共同指定，dxfId就是我们上面定义的格式化操作，priority优先级数值越小，优先级越高。</p>

<h3>colorScale</h3>

<p><img src="http://h.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=3d1d3870938fa0ec7bc7640816ac28d3/f603918fa0ec08fa0ef0e9e45bee3d6d54fbda85.jpg?referer=6b56cc4859b5c9ea3be437d3269b&amp;x=.jpg" alt="image" /></p>

<p>colorScale是以颜色渐变的方式来格式化表格。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Color Scale&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ws</span><span class="o">|</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Previous Year Quarterly Profits (JPY)&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Quarter&quot;</span><span class="p">,</span> <span class="s2">&quot;Profit&quot;</span><span class="p">,</span> <span class="s2">&quot;% of Total&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">offset</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">rows</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>  <span class="n">offset</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">rows</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Q</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="o">*</span><span class="p">((</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)),</span> <span class="s2">&quot;=100*B</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">/SUM(B3:B</span><span class="si">#{</span><span class="n">rows</span><span class="o">+</span><span class="n">offset</span><span class="si">}</span><span class="s2">)&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span><span class="o">=&gt;[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">money</span><span class="p">,</span> <span class="n">percent</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">color_scale</span> <span class="o">=</span> <span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:ColorScale</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_conditional_formatting</span><span class="p">(</span><span class="s2">&quot;B3:B100&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:colorScale</span><span class="p">,</span> <span class="ss">:operator</span> <span class="o">=&gt;</span> <span class="ss">:greaterThan</span><span class="p">,</span> <span class="ss">:formula</span> <span class="o">=&gt;</span> <span class="s2">&quot;100000&quot;</span><span class="p">,</span> <span class="ss">:dxfId</span> <span class="o">=&gt;</span> <span class="n">profitable</span><span class="p">,</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:color_scale</span> <span class="o">=&gt;</span> <span class="n">color_scale</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>大于100000的单元格颜色越来越深，而小于的单元格越来越浅。</p>

<h3>dataBar</h3>

<p>dataBar格式化能够在单元格中同时显示数值和一个柱形图，非常直观漂亮。</p>

<p><img src="http://f.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=435a969d3f6d55fbc1c676235d193e77/58ee3d6d55fbb2fb26dba2514d4a20a44723dc85.jpg?referer=b0f4797338f33a87c77a342a1c9b&amp;x=.jpg" alt="image" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Data Bar&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ws</span><span class="o">|</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Previous Year Quarterly Profits (JPY)&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Quarter&quot;</span><span class="p">,</span> <span class="s2">&quot;Profit&quot;</span><span class="p">,</span> <span class="s2">&quot;% of Total&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">offset</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">rows</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>  <span class="n">offset</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">rows</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Q</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="o">*</span><span class="p">((</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)),</span> <span class="s2">&quot;=100*B</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">/SUM(B3:B</span><span class="si">#{</span><span class="n">rows</span><span class="o">+</span><span class="n">offset</span><span class="si">}</span><span class="s2">)&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span><span class="o">=&gt;[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">money</span><span class="p">,</span> <span class="n">percent</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data_bar</span> <span class="o">=</span> <span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:DataBar</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_conditional_formatting</span><span class="p">(</span><span class="s2">&quot;B3:B100&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:dataBar</span><span class="p">,</span> <span class="ss">:dxfId</span> <span class="o">=&gt;</span> <span class="n">profitable</span><span class="p">,</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:data_bar</span> <span class="o">=&gt;</span> <span class="n">data_bar</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>iconSet</h3>

<p>iconSet方式是对于满足条件和不满足条件的单元格分别使用不同的图标。</p>

<p><img src="http://d.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=c718e589e4cd7b89ed6c3a863f1f339a/34fae6cd7b899e511cacdf5740a7d933c8950d56.jpg?referer=a0046022fa1986181850dab46b4d&amp;x=.jpg" alt="image" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Icon Set&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ws</span><span class="o">|</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Previous Year Quarterly Profits (JPY)&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Quarter&quot;</span><span class="p">,</span> <span class="s2">&quot;Profit&quot;</span><span class="p">,</span> <span class="s2">&quot;% of Total&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">offset</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">rows</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>  <span class="n">offset</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">rows</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ws</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;Q</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="o">*</span><span class="p">((</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">rows</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">i</span><span class="p">)),</span> <span class="s2">&quot;=100*B</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">/SUM(B3:B</span><span class="si">#{</span><span class="n">rows</span><span class="o">+</span><span class="n">offset</span><span class="si">}</span><span class="s2">)&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span><span class="o">=&gt;[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">money</span><span class="p">,</span> <span class="n">percent</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">icon_set</span> <span class="o">=</span> <span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:IconSet</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">ws</span><span class="o">.</span><span class="n">add_conditional_formatting</span><span class="p">(</span><span class="s2">&quot;B3:B100&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:iconSet</span><span class="p">,</span> <span class="ss">:dxfId</span> <span class="o">=&gt;</span> <span class="n">profitable</span><span class="p">,</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:icon_set</span> <span class="o">=&gt;</span> <span class="n">icon_set</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[axlsx报表工具(三)创建图表]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-san-chuang-jian-tu-biao/"/>
    <updated>2014-02-15T00:42:48+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-san-chuang-jian-tu-biao</id>
    <content type="html"><![CDATA[<h3>饼图</h3>

<p>axlsx创建饼状图非常简单，上图：</p>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=4ccd2d6c4334970a4373102aa5f1a0f5/fc1f4134970a304ec10145b9d3c8a786c9175c56.jpg?referer=ddc5668e5066d016270eab189c4c&amp;x=.jpg" alt="image" /></p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wb</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Pie Chart&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">sheet</span><span class="o">|</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;First&quot;</span><span class="p">,</span> <span class="s2">&quot;Second&quot;</span><span class="p">,</span> <span class="s2">&quot;Third&quot;</span><span class="p">,</span> <span class="s2">&quot;Fourth&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_chart</span><span class="p">(</span><span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:Pie3DChart</span><span class="p">,</span> <span class="ss">:start_at</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="ss">:end_at</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">15</span><span class="o">]</span><span class="p">,</span> <span class="ss">:title</span><span class="o">=&gt;</span> <span class="s1">&#39;dark corner here&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">chart</span><span class="o">|</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">add_series</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A2:D2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:labels</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A1:D1&quot;</span><span class="o">]</span>    <span class="c1">#数据点序列及其名称</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">show_val</span> <span class="o">=</span> <span class="kp">true</span>       <span class="c1">#是否在饼状图中显示数值</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">show_percent</span> <span class="o">=</span> <span class="kp">true</span>    <span class="c1">#是否在饼状图中显示所占百分比</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">d_lbl_pos</span> <span class="o">=</span> <span class="ss">:outEnd</span>    <span class="c1">#图例位于图标外部</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">show_leader_lines</span> <span class="o">=</span> <span class="kp">true</span>  <span class="c1">#是否显示数据和数值间的指示线</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在add_chart方法中，第一个参数指定图标的类型Aslsx::Pie3DChart，而start_at和end_at分别指定图表的左上角单元格和右下角+1单元格，注意图中饼图的右下角单元格是E15即[4,14]，而end_at是[5,15]，所以称为右下角+1单元格，此外注意和excel编号不同，这里单元格序号是从0开始的。</p>

<ul>
<li>chart.add_series方法是创建图表的主要方法，用来添加点序列的值及其名称。</li>
<li>chart.d_lbls是Data Lables的缩写，顾名思义就是数据标签。</li>
</ul>


<p>饼图中每块扇形的颜色是自动生成的，如果想要手动指定也是可以的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">chart</span><span class="o">.</span><span class="n">add_series</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A2:D2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:labels</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;A1:D1&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:colors</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;FF0000&#39;</span><span class="p">,</span> <span class="s1">&#39;00FF00&#39;</span><span class="p">,</span> <span class="s1">&#39;0000FF&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>折线图</h3>

<p><img src="http://c.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=7fd401bba586c9170c03523cf90601f2/d0c8a786c9177f3e8d17194e72cf3bc79f3d5656.jpg?referer=7d35047437fae6cd55a39e51924c&amp;x=.jpg" alt="image" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wb</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Line Chart&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">sheet</span><span class="o">|</span>
</span><span class='line'> <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s1">&#39;l1&#39;</span><span class="p">,</span><span class="s1">&#39;l2&#39;</span><span class="p">,</span><span class="s1">&#39;l3&#39;</span><span class="p">,</span><span class="s1">&#39;l4&#39;</span><span class="o">]</span>
</span><span class='line'> <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="s1">&#39;=sum(A2:C2)&#39;</span><span class="o">]</span>
</span><span class='line'> <span class="n">sheet</span><span class="o">.</span><span class="n">add_chart</span><span class="p">(</span><span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:Line3DChart</span><span class="p">,</span> <span class="ss">:start_at</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="ss">:end_at</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">17</span><span class="o">]</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s2">&quot;Chart&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">chart</span><span class="o">|</span>
</span><span class='line'>   <span class="n">chart</span><span class="o">.</span><span class="n">add_series</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A2:D2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:labels</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A1:D1&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;bob&#39;</span>
</span><span class='line'>   <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">show_val</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>   <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">show_cat_name</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>   <span class="n">chart</span><span class="o">.</span><span class="n">catAxis</span><span class="o">.</span><span class="n">tick_lbl_pos</span> <span class="o">=</span> <span class="ss">:none</span>   <span class="c1">#不在横轴上显示坐标</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>chart.d_lbls.show_val表示显示数值，而chart.d_lbls.show_cat_name表示显示每个数值的名称。</p>

<h3>柱形图</h3>

<p><img src="http://d.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=4cc5e74b1d30e924cba49c347c331f3b/29381f30e924b899e2cc837b6c061d950b7bf685.jpg?referer=473e18b979cb0a46dc35bf09329b&amp;x=.jpg" alt="image" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wb</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Bar Chart&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">sheet</span><span class="o">|</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;A Simple Bar Chart&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;First&quot;</span><span class="p">,</span> <span class="s2">&quot;Second&quot;</span><span class="p">,</span> <span class="s2">&quot;Third&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_chart</span><span class="p">(</span><span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:Bar3DChart</span><span class="p">,</span> <span class="ss">:start_at</span> <span class="o">=&gt;</span> <span class="s2">&quot;A4&quot;</span><span class="p">,</span> <span class="ss">:end_at</span> <span class="o">=&gt;</span> <span class="s2">&quot;F17&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">chart</span><span class="o">|</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">add_series</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A3:C3&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:labels</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A2:C2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A1&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">valAxis</span><span class="o">.</span><span class="n">label_rotation</span> <span class="o">=</span> <span class="o">-</span><span class="mi">45</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">catAxis</span><span class="o">.</span><span class="n">label_rotation</span> <span class="o">=</span> <span class="mi">45</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">d_lbl_pos</span> <span class="o">=</span> <span class="ss">:outEnd</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">show_val</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">catAxis</span><span class="o">.</span><span class="n">tick_lbl_pos</span> <span class="o">=</span> <span class="ss">:none</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_chart</span><span class="p">(</span><span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:Bar3DChart</span><span class="p">,</span> <span class="ss">:barDir</span> <span class="o">=&gt;</span> <span class="ss">:col</span><span class="p">,</span><span class="ss">:start_at</span> <span class="o">=&gt;</span> <span class="s2">&quot;A17&quot;</span><span class="p">,</span> <span class="ss">:end_at</span> <span class="o">=&gt;</span> <span class="s2">&quot;F30&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">chart</span><span class="o">|</span> <span class="c1">#barDir指定方向:bar或:col</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">add_series</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A3:C3&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:labels</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A2:C2&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="n">sheet</span><span class="o">[</span><span class="s2">&quot;A1&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">valAxis</span><span class="o">.</span><span class="n">label_rotation</span> <span class="o">=</span> <span class="o">-</span><span class="mi">45</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">catAxis</span><span class="o">.</span><span class="n">label_rotation</span> <span class="o">=</span> <span class="mi">45</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">d_lbl_pos</span> <span class="o">=</span> <span class="ss">:outEnd</span>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">d_lbls</span><span class="o">.</span><span class="n">show_val</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">chart</span><span class="o">.</span><span class="n">catAxis</span><span class="o">.</span><span class="n">tick_lbl_pos</span> <span class="o">=</span> <span class="ss">:none</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的图表位置start_at和end_at使用了和上面不同的方式，直接使用单元格名称如A4，F17，但end_at仍然是右下角单元格+1。其他代码的自解释性很强，无须赘述了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[axlsx报表工具(二)格式化为美观的表格]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-er-ge-shi-hua-wei-mei-guan-de-biao-ge/"/>
    <updated>2014-02-15T00:38:10+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-er-ge-shi-hua-wei-mei-guan-de-biao-ge</id>
    <content type="html"><![CDATA[<h3>基础知识</h3>

<p>axlsx的格式化使用Aslsx::Styles类来处理，通常使用Axlsx::Styles#add_style 帮助方法来添加格式，该方法定义：</p>

<pre><code>(Integer) add_style(options = {})
</code></pre>

<!-- more -->


<p>所有的格式设置操作都在options这个hash中指定，该hash的键名非常好记，下面是常见的键值列表：</p>

<pre><code>Options Hash (options):
fg_color (String) — 字体颜色，如：FFFF0000
sz (Integer) — 字体大小
b (Boolean) — 是否粗体
i (Boolean) — 是否斜体
u (Boolean) — 是否加下划线
strike (Boolean) — 是否加删除线
shadow (Boolean) — 是否加阴影
charset (Integer) — 字符集，可选的字符集列表：
0   ANSI_CHARSET
1   DEFAULT_CHARSET
2   SYMBOL_CHARSET
77  MAC_CHARSET
128 SHIFTJIS_CHARSET
129 HANGUL_CHARSET
130 JOHAB_CHARSET
134 GB2312_CHARSET
136 CHINESEBIG5_CHARSET
161 GREEK_CHARSET
162 TURKISH_CHARSET
163 VIETNAMESE_CHARSET
177 HEBREW_CHARSET
178 ARABIC_CHARSET
186 BALTIC_CHARSET
204 RUSSIAN_CHARSET
222 THAI_CHARSET
238 EASTEUROPE_CHARSET
255 OEM_CHARSET


family (Integer) — 字体，可选字体：
0 Not applicable.
1 Roman
2 Swiss
3 Modern
4 Script
5 Decorative
6..14 Reserved for future use


font_name (String) — 字体名称
num_fmt (Integer) — 数字格式：可选格式：
1 0
2 0.00
3 #,##0
4 #,##0.00
5 $#,##0_);($#,##0)
6 $#,##0_);[Red]($#,##0)
7 $#,##0.00_);($#,##0.00)
8 $#,##0.00_);[Red]($#,##0.00)
9 0%
10 0.00%
11 0.00E+00
12 # ?/?
13 # ??/??
14 m/d/yyyy
15 d-mmm-yy
16 d-mmm
17 mmm-yy
18 h:mm AM/PM
19 h:mm:ss AM/PM
20 h:mm
21 h:mm:ss
22 m/d/yyyy h:mm
37 #,##0_);(#,##0)
38 #,##0_);[Red](#,##0)
39 #,##0.00_);(#,##0.00)
40 #,##0.00_);[Red](#,##0.00)
45 mm:ss
46 [h]:mm:ss
47 mm:ss.0
48 ##0.0E+0
49 @


format_code (String) — 自定义格式如'yyyy-mm-dd'，如果设置了该值，则num_fmt将被忽略.
border (Integer|Hash) — 边框样式.
bg_color (String) — 单元格背景色
hidden (Boolean) — 是否隐藏单元格
locked (Boolean) — 是否锁定单元格
type (Symbol) — 风格类型，可选的类型有[:dxf, :xf]. :xf事默认类型
alignment (Hash) — 对齐.该hash的包括：
horizontal (Symbol)，该键对应的值包括有：
:general
:left
:center
:right
:fill
:justify
:centerContinuous
:distributed
vertical (Symbol)，该键对应的值有：
:top
:center
:bottom
:justify
:distributed
textRotation (Integer)
wrapText (Boolean)
indent (Integer)
relativeIndent (Integer)
justifyLastLine (Boolean)
shrinkToFit (Boolean)
readingOrder (Integer)
</code></pre>

<h3>格式化报表示例</h3>

<p>格式化报表是以单元格为单位执行的，通常在添加行的时候，在add_row第二个hash参数里指定：</p>

<pre><code>sheet.add_row ['a', "b"], :style =&gt; [nil, header] #header是创建好的style
#or
sheet.add_row ["a', "b"], :style =&gt; header
</code></pre>

<p>如果style是一个列表，那么列表里每一个格式对应于行内每个单元格，也可以像第二行代码那样为整行指定同一种格式。</p>

<p><img src="http://b.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=9b79859e2c738bd4c021b23491b0f6eb/4bed2e738bd4b31cc6cc6ef885d6277f9f2ff885.jpg?referer=f3368c656f224f4a0e8e4723389b&amp;x=.jpg" alt="image" /></p>

<p>下面是创建如图报表的部分代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;axlsx&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:Package</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span><span class="o">.</span><span class="n">workbook</span> <span class="k">do</span> <span class="o">|</span><span class="n">wb</span><span class="o">|</span>
</span><span class='line'>    <span class="n">styles</span> <span class="o">=</span> <span class="n">wb</span><span class="o">.</span><span class="n">styles</span>
</span><span class='line'>    <span class="n">header</span>     <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">add_style</span> <span class="ss">:bg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;FFFF33&quot;</span><span class="p">,</span><span class="ss">:fg_color</span><span class="o">=&gt;</span><span class="s2">&quot;0033CC&quot;</span><span class="p">,</span> <span class="ss">:sz</span> <span class="o">=&gt;</span> <span class="mi">16</span><span class="p">,</span> <span class="ss">:b</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:alignment</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:horizontal</span> <span class="o">=&gt;</span> <span class="ss">:center</span><span class="p">}</span>
</span><span class='line'>    <span class="n">tbl_header</span> <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">add_style</span> <span class="ss">:bg_color</span><span class="o">=&gt;</span><span class="s2">&quot;99FF33&quot;</span><span class="p">,</span><span class="ss">:b</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:alignment</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:horizontal</span> <span class="o">=&gt;</span> <span class="ss">:center</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">ind_header</span> <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">add_style</span> <span class="ss">:bg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;FFDFDEDF&quot;</span><span class="p">,</span> <span class="ss">:b</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:alignment</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:indent</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>    <span class="n">col_header</span> <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">add_style</span> <span class="ss">:bg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;FFDFDEDF&quot;</span><span class="p">,</span> <span class="ss">:b</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:alignment</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:horizontal</span> <span class="o">=&gt;</span> <span class="ss">:center</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">label</span>      <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">add_style</span> <span class="ss">:alignment</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:indent</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">money</span>      <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">add_style</span> <span class="ss">:num_fmt</span> <span class="o">=&gt;</span> <span class="mi">5</span>
</span><span class='line'>    <span class="n">t_label</span>    <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">add_style</span> <span class="ss">:b</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:bg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;FFDFDEDF&quot;</span>
</span><span class='line'>    <span class="n">t_money</span>    <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">add_style</span> <span class="ss">:b</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:num_fmt</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">,</span> <span class="ss">:bg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;FFDFDEDF&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">wb</span><span class="o">.</span><span class="n">add_worksheet</span> <span class="k">do</span> <span class="o">|</span><span class="n">sheet</span><span class="o">|</span>
</span><span class='line'>      <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span>               <span class="c1">#添加空行</span>
</span><span class='line'>      <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;College Budget&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">header</span><span class="o">]</span>        <span class="c1">#标题，大字体居中</span>
</span><span class='line'>      <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span>
</span><span class='line'>      <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;What&#39;s coming in this month.&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;How am I doing&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="n">tbl_header</span>
</span><span class='line'>      <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;Item&quot;</span><span class="p">,</span> <span class="s2">&quot;Amount&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;Item&quot;</span><span class="p">,</span> <span class="s2">&quot;Amount&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">ind_header</span><span class="p">,</span> <span class="n">col_header</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">ind_header</span><span class="p">,</span> <span class="n">col_header</span><span class="o">]</span>
</span><span class='line'>      <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;Estimated monthly net income&quot;</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;Monthly income&quot;</span><span class="p">,</span> <span class="s2">&quot;=C9&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">money</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">money</span><span class="o">]</span>
</span><span class='line'>      <span class="c1">#省略部分代码</span>
</span><span class='line'>      <span class="sx">%w(B4:C4 E4:F4 B11:C11 E11:F11 B2:F2)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">range</span><span class="o">|</span> <span class="n">sheet</span><span class="o">.</span><span class="n">merge_cells</span><span class="p">(</span><span class="n">range</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">sheet</span><span class="o">.</span><span class="n">column_widths</span> <span class="mi">2</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">p</span><span class="o">.</span><span class="n">use_shared_strings</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="nb">p</span><span class="o">.</span><span class="n">serialize</span> <span class="s1">&#39;styles.xlsx&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[axlsx报表工具(一)安装及入门]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-yi-an-zhuang-ji-ru-men/"/>
    <updated>2014-02-15T00:34:19+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-yi-an-zhuang-ji-ru-men</id>
    <content type="html"><![CDATA[<h3>安装</h3>

<p>axlsx是一个基于ruby的Office Open XML Spreadsheet报表生成工具，下图是它生成的一个报表截图</p>

<p><img src="https://raw.github.com/randym/axlsx/master/examples/sample.png" alt="axlsx" /></p>

<!-- more -->


<p>安装axlsx和安装其他gem一样：</p>

<pre><code>$ gem install axlsx
</code></pre>

<h3>创建第一个报表</h3>

<p>axlsx使用的对象和office文档使用的对象完全一样，workbook代表一个文档，worksheet代表一张表，row和cell代表行和单元格，基本上所有的对象顾名思义即可，而不需要了解文档ECMA规范。</p>

<p>比如要创建一张如图所示的报表：</p>

<p><img src="http://c.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=0b461ccc6e81800a6ae5890b810e42c7/cdbf6c81800a19d86620614631fa828ba61e4656.jpg?referer=5d8a74b17f1ed21b20de1bd5a24c&amp;x=.jpg" alt="image" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;axlsx&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="ss">Axlsx</span><span class="p">:</span><span class="ss">:Package</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">wb</span> <span class="o">=</span> <span class="nb">p</span><span class="o">.</span><span class="n">workbook</span>
</span><span class='line'>
</span><span class='line'><span class="n">wb</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Basic Worksheet&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">sheet</span><span class="o">|</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s2">&quot;First Column&quot;</span><span class="p">,</span> <span class="s2">&quot;Second&quot;</span><span class="p">,</span> <span class="s2">&quot;Third&quot;</span><span class="p">,</span><span class="s2">&quot;Total&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span><span class="s2">&quot;=SUM(A2:C2)&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span> <span class="o">[</span><span class="s1">&#39;This is a very very long sentence.&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sheet</span><span class="o">.</span><span class="n">merge_cells</span> <span class="s2">&quot;A3:D3&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">serialize</span> <span class="s1">&#39;basic.xlsx&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码非常简单明了，创建worksheet，再一行行添加数据，在添加第二行数据时甚至使用了一个求和函数，所以我们使用过的Excel的知识完全可以直接拿过来使用，甚至对于较长的内容可以合并单元格，但这里没有居中显示所以还不够美观，美观的事情可以格式化来解决，不过这是下一篇的内容了。</p>

<p>最后一行是将报表序列化到xlsx格式的文件，该文件可以用MSOffice直接打开查看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步搭建mysql主从同步]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/yi-bu-yi-bu-da-jian-mysqlzhu-cong-tong-bu/"/>
    <updated>2014-02-15T00:24:49+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/yi-bu-yi-bu-da-jian-mysqlzhu-cong-tong-bu</id>
    <content type="html"><![CDATA[<h3>下载mysql数据库</h3>

<pre><code>$ wget http://cdn.mysql.com/Downloads/MySQL-5.1/mysql-5.1.73.tar.gz
tar vzxf mysql-5.1.73.tar.gz
</code></pre>

<!-- more -->


<h3>编译安装</h3>

<p>最好专门创建一个用户mysql来安装数据库。</p>

<pre><code>MYSQL_BASEDIR=$HOME/mysql
cd mysql-5.1.73
./configure 
--prefix=${MYSQL_BASEDIR} 
--with-charset=utf8 
--with-extra-charsets=gbk,utf8,ascii,big5,latin1,binary 
--with-unix-socket-path=${MYSQL_BASEDIR}/tmp/mysql.sock 
--with-mysqld-user=mysql     #以哪个用户执行mysqld进程
make
make install
</code></pre>

<h3>初始化数据库</h3>

<p>复制必要的配置文件和启停脚本</p>

<pre><code>cd ${MYSQL_BASEDIR}
mkdir etc log tmp var
cp share/mysql/my-medium.cnf  etc/my.cnf
cp share/mysql/mysql.server  bin/
</code></pre>

<h3>修改配置文件</h3>

<pre><code>vim etc/my.cnf
</code></pre>

<p>在[mysqld]下添加配置项：</p>

<pre><code>basedir= ${MYSQL_BASEDIR}   # ${MYSQL_BASEDIR}是你的mysql安装目录
datadir = ${MYSQL_BASEDIR}/var   # mysql数据路径
tmpdir = ${MYSQL_BASEDIR}/tmp   # 临时文件路径
slave-load-tmpdir = ${MYSQL_BASEDIR}/tmp   # 从服务器同步LOAD DATA INFILE语句时创建临时文件的目录名
port = 3306   # 如果修改port，[mysqld] 和 [client]下的port都要修改
pid-file = ${MYSQL_BASEDIR}/var/mysql.pid  # mysqld PID文件位置
#以下为可选
socket = ${MYSQL_BASEDIR}/tmp/mysql.sock  # 用于指定本地连接的Unix套接字文件位置，[mysqld] 和 [client]下的port都要修改
#skip-name-resolve   # 是否仅使用ip验证客户端
#skip-symbolic-links  #忽略MyISAM表的数据及索引文件连接到另一个目录下
max_connect_errors = 10000
max_connections = 500
wait-timeout = 30
</code></pre>

<p>启动数据库</p>

<pre><code>$ ./bin/mysql_install_db  #安装数据库文件
$ ./bin/mysql.server start    #出现下面这行说数据库启动ok了
Starting MySQL.                                            [  OK  ]
</code></pre>

<h3>配置mysql用户</h3>

<p>使用./bin目录下的mysql命令可以登录到数据库，登录后删除匿名用户并且为root设置密码：</p>

<pre><code>$ mysql -u root
&gt; delete from mysql.user where user='';
&gt; UPDATE mysql.user SET Password = PASSWORD('password') WHERE user='root';
</code></pre>

<p>按照以上同样的步骤再搭建一个mysql，注意，如果在同一主机搭建多个mysql实例，那么就需要将端口改成不同才行。</p>

<p>下面开始配置主从同步。</p>

<p>首先在主库新建专门用于同步的数据库账号mysqlsync</p>

<pre><code>&gt; GRANT REPLICATION SLAVE ON *.* TO 'mysqlsync'@'%' IDENTIFIED BY 'password';
</code></pre>

<h3>主库配置</h3>

<p>所有的配置项还是在my.cnf中的[mysqld]下添加。</p>

<p>首先server-id作为MySQL服务器的标识，具有相关联上下游同步系统需具有全局唯一性。主库我们将server-id配置为1。其他主库需要添加的配置有：</p>

<pre><code>server-id=1
# 同步过程中需要忽略的表，支持正则表达式。全库同步时，必须屏蔽mysql系统库和test测试库。
replicate-wild-ignore-table = mysql.%
replicate-wild-ignore-table = test.%
# 需要同步的表，多个表需多次指定，这里我们使用全库同步,方便点
# replicate-do-table = database.table
log-bin = mysql-bin  #二进制日志，强制开启
log-bin-index = mysql-bin.index  # 记录二进制日志索引文件
relay-log-index = relay-log.index # 记录中继日志索引文件
</code></pre>

<h3>从库配置</h3>

<pre><code>server-id=2
read-only # 在从库开启该选项，避免在从库上进行写操作，导致主从数据不一致（不过对super权限无效哦）
skip-slave-start # 在从库开启该选项，启动数据库后，需手动开启同步进程
relay-log = mysql-relay #中继日志，从库开启
relay-log-index = relay-log.index
log-bin = mysql-bin
log-bin-index = mysql-bin.index
replicate-wild-ignore-table = mysql.%
replicate-wild-ignore-table = test.%
</code></pre>

<h3>同步设置</h3>

<p>启动主数据库，并查看主库状态：</p>

<pre><code>$ ./bin/mysql.server start
$ mysql -u root -p
mysql&gt; show master status;
</code></pre>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=21e536be79899e517c8e3a11729ca80e/e7cd7b899e510fb31b3b92d4db33c895d1430c56.jpg?referer=a44e286a8418367af49e4aed6c4d&amp;x=.jpg" alt="image" /></p>

<p>记下来log文件名和位置，这里是“mysql-bin.000005&#8221;和”106“。</p>

<p>然后启动从库，</p>

<pre><code>$ ./bin/mysql.server start
$ mysql -u root -p
mysql&gt; change master to master_host='your_host',master_port=3307,master_user='mysqlsync',master_password='pasword',master_log_file='mysql-bin.000005',master_log_pos=106;
mysql&gt; startslave;  #启动从库
mysql&gt; show slave status\G;
</code></pre>

<p>最后一条sql命令得到如图结果：</p>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=a307b4b80846f21fcd345e56c61f1a5d/7acb0a46f21fbe091fae395769600c338644ad85.jpg?referer=781a5e5095dda144831e58820b9b&amp;x=.jpg" alt="image" /></p>

<p>其中Slave_IO_Running和Slave_SQL_Running是yes就对了。</p>

<p>最后，可以验证一下，在主库修改记录，从库可以看到同步过来的变化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在rails外单独使用ActiveRecord]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/zai-railswai-dan-du-shi-yong-activerecord/"/>
    <updated>2014-02-15T00:20:50+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/zai-railswai-dan-du-shi-yong-activerecord</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>单独使用ActiveRecord</h3>

<p>需要在应用根目录demo/下的app.rb文件中写入：</p>

<pre><code>require 'active_record'  
require 'sqlite3'  

ActiveRecord::Base.establish_connection(  
    :adapter=&gt;'sqlite3',  
    :database=&gt;'data.sqlite3',  
    :pool=&gt;5,  
    :timeout=&gt;5000  
    )  

class CreateUsers &lt; ActiveRecord::Migration  
  def change  
    create_table :users do |t|  
      t.string :name  
      t.integer :age  
    end 
  end  
end  

CreateUsers.new.change

class User &lt; ActiveRecord::Base  
end  

User.create name:"Jack",age:12
</code></pre>

<p>首先，使用ActiveRecord::Base.establish_connection建立连接，然后定义数据表迁移，再使迁移生效建立数据表，最后就可以像在rails中一样定义model，然后正常使用ActiveRecord了。</p>

<p>代码可以正常工作了，但可以做的工作还有很多，因为这段代码实在是不美观。</p>

<h3>像样的结构</h3>

<p>大杂烩式的代码文件总是不美的，上面代码中包含了数据库连接，表创建，model定义和实际的应用代码四部分，这么多功能各异的部件还是分开好。首先创建demo/db目录，在这个目录下放置所有数据库连接的定义；创建demo/models目录，在下面放置model定义文件。demo/app.rb文件位置不变。</p>

<h3>model定义</h3>

<p>model定义文件demo/user.rb的内容就是将上面的user类定义复制过来即可。</p>

<pre><code>class User &lt; ActiveRecord::Base
end
</code></pre>

<h3>ActiveRecord配置</h3>

<p>新建demo/db/connection.rb文件，该文件里设置数据库连接：</p>

<pre><code>require 'active_record'
require 'yaml'

dbconfig = YAML::load(File.open('db/database.yml'))
ActiveRecord::Base.establish_connection(dbconfig)
</code></pre>

<p>这里模仿rails使用了yaml来配置连接，该文件也在demo/db目录下，内容为：</p>

<pre><code>adapter: sqlite3
database: data.sqlite3
pool: 5
timeout: 5000
</code></pre>

<p>现在的demo/app.rb清爽多了：</p>

<pre><code>require File.expand_path('../db/connection',__FILE__)
Dir[File.expand_path('../models',__FILE__)+'/*.rb'].each{|f| require f }

User.create name:"Jack",age:12
</code></pre>

<h3>数据表迁移</h3>

<p>现在还有一个问题，我也想像rails中那样利用rake来迁移数据表定义。参考我前一篇博客Rake就可以轻松写出数据迁移的rakefile。在demo/根目录下创建rakefile文件：</p>

<pre><code>require 'active_record'
require 'yaml'
require 'logger'

task :default =&gt; :migrate

task :migrate =&gt; :environment do
  ActiveRecord::Migrator.migrate('db/migrate', ENV["VERSION"] ? ENV["VERSION"].to_i : nil )
end

task :environment do
  ActiveRecord::Base.establish_connection(YAML::load(File.open('db/database.yml')))
  ActiveRecord::Base.logger = Logger.new(File.open('db/database.log', 'a'))
end
</code></pre>

<p>只要在终端中执行rake命令就可能完成数据迁移：</p>

<pre><code>$ rake
==  CreateUsers: migrating ====================================================
-- create_table(:users)
   -&gt; 0.0020s
==  CreateUsers: migrated (0.0040s) ===========================================
</code></pre>

<p>实际上现在还无法得出这样的输出，因为还没有编写迁移代码文件。那么迁移文件写在哪儿呢？在demo/db/migrate/目录中专门用来放置数据迁移代码，比如现在我们在该目录下新建一个迁移文件001_create_users.rb，写入迁移代码：</p>

<pre><code>class CreateUsers &lt; ActiveRecord::Migration  
  def change  
    create_table :users do |t|  
      t.string :name  
      t.integer :age  
    end 
  end  
end  
</code></pre>

<p>现在执行rake命令才能得出上面给出的正确输出。</p>

<p>最后给出示例应用的最终目录结构：</p>

<p><img src="http://f.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=8350422bd309b3deefbfe46dfc841dbc/9358d109b3de9c8204461ccc6e81800a19d84356.jpg?referer=16e32c709045d688fa158794ad4c&amp;x=.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rspec]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/rspec/"/>
    <updated>2014-02-15T00:14:29+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/rspec</id>
    <content type="html"><![CDATA[<h2>RSpec断言规则</h2>

<p>RSpec有一些常见的断言规则。Ruby的断言方法是以问号结尾并且返回true或false的方法，常见的如： empty?   nil?    instance_of? 等。在spec中的断言很简单，就是should be_去掉问号的断言方法。如：</p>

<pre><code>[].should be_empty =&gt; [].empty? #passes
[].should_not be_empty =&gt; [].empty? #fails
</code></pre>

<!-- more -->


<p>除了用&#8221;be_&ldquo;来前缀断言方法，也可以用&#8221;be_a_&#8221;和&#8221;be_an_&#8221;前缀，使得代码读起来更加自然：</p>

<pre><code>"a string".should be_an_instance_of(String) =&gt;"a string".instance_of?(String)#passes
3.should be_a_kind_of(Fixnum) =&gt; 3.kind_of?(Numeric) #passes
3.should be_a_kind_of(Numeric) =&gt; 3.kind_of?(Numeric) #passes
3.should be_an_instance_of(Fixnum) =&gt; 3.instance_of?(Fixnum) #passes 
3.should_not be_instance_of(Numeric) =&gt; 3.instance_of?(Numeric) #fails
</code></pre>

<p>Rspec也会为诸如“has_key?”之类的断言创建匹配器，要使用该特性，在断言对象上使用 should have_key(:key) 就可以了，rspec会自动在对象上调用has_key?(:key)。如：</p>

<pre><code>{:a =&gt; "A"}.should have_key(:a) =&gt; {:a =&gt; "A"}.has_key?(:a) #passes
{:a =&gt; "A"}.should have_key(:b) =&gt; {:a =&gt; "A"}.has_key?(:b) #fails
</code></pre>

<p>还有一些常见的断言方法如： be  be_close  change  eql  have  be_true  be_false be_nil include raise_error respond_to throw_symbol   等等</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rack based application]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/rack-based-application/"/>
    <updated>2014-02-15T00:04:13+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/rack-based-application</id>
    <content type="html"><![CDATA[<h3>1.什么是rack</h3>

<p>rack是基于ruby的web服务器接口，它将http协议以非常简单的方式包裹起来，为web服务器和应用提供一致性的接口。rack被用于几乎所有的ruby web应用开发框架中。这是维基百科上给出的一个基于rack的ruby应用：</p>

<pre><code>app = lambda do |env|
  body = "Hello, World!"
  [200, {"Content-Type" =&gt; "text/plain", "Content-Length" =&gt; body.length.to_s}, [body]]
end

run app
</code></pre>

<p>重点是第三行，一个基于rack的ruby应用只需要一个包含call方法的对象，在调用call方法后该对象会返回形如第三行的一个列表，该列表包含三个元素：第一个元素是这次http请求的返回状态码200，第二个元素是一个返回的http响应headers的hash表，第三个元素是http响应体的列表，所以该列表的形式为：</p>

<pre><code>[ status_code, headers, body ]
</code></pre>

<!-- more -->


<h3>2.一个简单的rack-based-application</h3>

<p>编写一个最简单的rack based application，ok，需要一个能响应call方法的对象，在该对象上调用call方法能返回[ status_code, headers, body ]列表。在文件夹rack_based下新建simple.ru文件，*.ru被称为rakcup文件，rack使用该文件来启动rack应用。该文件内容为：</p>

<pre><code>run lambda { |env| [200,{'Content-Type'=&gt;'text/plain'},['OK']]}
</code></pre>

<p>That&rsquo;s all.这个基于rack的应用已经编写完成了，在terminal中键入下面命令即可启动这个应用了：</p>

<pre><code>rackup rack_based/simple.ru
</code></pre>

<blockquote><p>注：rack默认的rackup文件名是<code>config.ru</code>，使用该文件名在同级目录启动应用直接执行<code>rackup</code>即可启动应用。</p></blockquote>

<p>rack使用默认的内置WEBrick服务器，用rackup命令在端口9292启动该应用：</p>

<pre><code>JasondeMacBook-Pro:Projects jason$ rackup rack_based/simple.ru 
Thin web server (v1.6.1 codename Death Proof)
Maximum connections set to 1024
Listening on 0.0.0.0:9292, CTRL+C to stop
</code></pre>

<p>在浏览器中访问<a href="http://localhost:9292">http://localhost:9292</a> 即可看到页面显示“OK”，说明应用正常工作了。</p>

<p>Rails也是基于rack的框架，rails的rackup配置文件是位于应用根目录下的config.ru：</p>

<pre><code># This file is used by Rack-based servers to start the application.

require ::File.expand_path('../config/environment',  __FILE__)
run Rails.application
</code></pre>

<p>另外，call方法还带有一个env参数，该参数是一个hash表，包含了请求所有的环境信息，rack应用可以根据env信息给予不同的响应，如下面将simple.ru略作修改，使得它可以返回所有的请求信息：</p>

<pre><code>module Simple
    class Application
        def self.call(env)
            [200,{'Content-Type'=&gt;'text/plain'},[env.to_s]]
        end
    end
end
run Simple::Application
</code></pre>

<p>启动该应用，则可以看到结果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>"GATEWAY_INTERFACE"=&gt;"CGI/1.1",
</span><span class='line'>"PATH_INFO"=&gt;"/",
</span><span class='line'>"QUERY_STRING"=&gt;"",
</span><span class='line'>"REMOTE_ADDR"=&gt;"127.0.0.1",
</span><span class='line'>"REMOTE_HOST"=&gt;"localhost",
</span><span class='line'>"REQUEST_METHOD"=&gt;"GET",
</span><span class='line'>"REQUEST_URI"=&gt;"http://localhost:9292/",
</span><span class='line'>"SCRIPT_NAME"=&gt;"",
</span><span class='line'>"SERVER_NAME"=&gt;"localhost",
</span><span class='line'>"SERVER_PORT"=&gt;"9292",
</span><span class='line'>"SERVER_PROTOCOL"=&gt;"HTTP/1.1",
</span><span class='line'>...........
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>3.middleware</h3>

<p>这是一个rack应用的请求栈：</p>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=70915c2796eef01f491418c0d0c5e818/8d5494eef01f3a29e9eb308d9b25bc315c607c56.jpg?referer=639819647d3e6709e71770cfbc4c&amp;x=.jpg" alt="image" /></p>

<p>浏览器发出http请求到web Server，web server 再将请求转交给rack，rack负责将请求转交给应用程序栈。在应用栈中，请求经过一层层的中间层middleware后，最好才传达给rack应用，譬如rails的应用的controller最后来处理请求，当rack应用处理完请求后，又逐层返回，最后由rack上交给web server完成响应。注意，并非每次请求都需要完成从上到下的全部栈层次，比如请求一个存在的静态文件，就可能直接由处理静态文件的middleware发送文件，而根本不会将请求传递到rack应用controller中去。</p>

<p>由这张图可以看出来，rack是web server和应用之间的桥梁，或者说适配器。另外，rack应用处在请求栈的最后一层，web请求经过了无数的middleware后才真正到达应用这里。middleware所起的作用和java struts中的拦截器概念非常相似，它们都负责将请求逐层包裹最后递交给应用的是一个非常友好的请求包，使得应用可以更方便地处理逻辑。</p>

<p>下面就来创建一个自定义的middleware，该middleware可以将请求网页内所有&lt;h1>标记内的内容的e改写成大写的X。</p>

<p>首先新建一个rails app，在新建完成后，实用下面命令可以查看rails已经使用的middleware：</p>

<pre><code>rake middleware

use Rack::Sendfile
use ActionDispatch::Static
......
use Rack::Head
use Rack::ConditionalGet
use Rack::ETag
run Demo::Application.routes
</code></pre>

<p>现在在应用的lib目录下新建文件link_jumbler.rb，文件app/lib/link_jumbler.rb的内容：</p>

<pre><code>require 'nokogiri'

class LinkJumbler
    def initialize(app,letters)
        @app=app
        @letters=letters
    end

    def call(env)
        status, headers, response = @app.call(env)
        body=Nokogiri::HTML(response.body)
        body.css("h1").each do |a|
            @letters.each do |f,r|
                a.content=a.content.gsub f.to_s,r.to_s
            end
        end

        [status,headers,[body.to_s]]
    end
end
</code></pre>

<p>首先，在initialize方法中，接受了两个参数，一个是app参数，它会在各个middleware中传递，需要对它调用call方法。另一个参数letters是我们这个middleware需要的参数，这个参数来源是挂载middleware时产生的。不同middleware的传递的这个参数不同，也可能根本没有这个额外的参数。在call方法中，先对@app调用了call方法获得了一个rack风格的响应结果，这里利用nokogiri解析结果，并做出修改，最后返回结果。在java struts中有个前拦截器和后拦截器，从这里也可以看出middleware也可以有相同的功能，比如这里就是对结果作处理，属于一个后处理的middleware。</p>

<p>然后将这个middleware添加到该应用的middleware栈中（看到letters哪儿来的了吧），在app/config/application.rb中添加
<code>config.middleware.use LinkJumbler,{"e"=&gt;"X"}</code>
添加完成后app/config/application.rb文件内容为：</p>

<pre><code>require File.expand_path('../boot', __FILE__)

require 'rails/all'
require File.expand_path('../../lib/link_jumbler', __FILE__)

Bundler.require(:default, Rails.env)

module Demo
  class Application &lt; Rails::Application
    config.middleware.use LinkJumbler,{"e"=&gt;"X"}
  end
end
</code></pre>

<p>再次执行rake middleware命令，可以看到LinkJumbler被添加到最后一层middleware：</p>

<pre><code>use Rack::Sendfile
use ActionDispatch::Static
......
use Rack::Head
use Rack::ConditionalGet
use Rack::ETag
use LinkJumbler
run Demo::Application.routes
</code></pre>

<blockquote><p>实际上，rails只是利用自己的一套tricky的把戏自动添加了这个middleware，在其他rack based application中，比如sinatra，在config.ru文件里的<code>run xxx</code>方法前加上<code>use LinkJumbler</code>语句即完成添加middleware.</p></blockquote>

<p>启动该rails应用，可以看到和标准rails欢迎界面的区别了吗？</p>

<p><img src="http://b.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=513d3845adc379317968862cdbffc678/f636afc379310a559ad424b7b54543a983261084.jpg?referer=65c5a1751f950a7b2c227af4509b&amp;x=.jpg" alt="image" /></p>

<h3>4. 其他</h3>

<ul>
<li>rack based application(比如sinatra)可能会依赖于一个环境变量<code>RACK_ENV</code>，取值<code>production,development,test</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识jruby之在tomcat上部署jruby-on-rails]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/chu-shi-jrubyzhi-zai-tomcatshang-bu-shu-jruby-on-rails/"/>
    <updated>2014-02-14T23:58:44+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/chu-shi-jrubyzhi-zai-tomcatshang-bu-shu-jruby-on-rails</id>
    <content type="html"><![CDATA[<h3>1. prerequesite</h3>

<p>假定部署的sever上已经安装好了Java环境和mysql数据库（因为这里我将以mysql为例）。并且，这里为了和前面几篇博文保持一致，还是在windows上进行部署，实际在linux上部署的节奏也差不多了，即便遇到问题，google is ready for you.</p>

<!-- more -->


<h3>2. 安装配置Apache Tomcat</h3>

<p>首先，在Apache Tomcat网站上下载tomcat压缩包，目前的版本是7.0。下载完成后解压缩，如解压到C:\，解压缩后目录结构如图：</p>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=c5fe07e6d343ad4ba22e46c5b2392b92/c995d143ad4bd1136f3d4d7158afa40f4afb0584.jpg?referer=97197c6f8501a18ba9fc267f639b&amp;x=.jpg" alt="image" /></p>

<p>进入其中bin目录，并以管理员身份运行startup.bat批处理文件启动tomcat，tomcat默认端口为8080，所以，在浏览器中访问<a href="http://localhost:8080">http://localhost:8080</a> ，如果出现图示页面说明tomcat安装配置正确。</p>

<p><img src="http://d.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=79626b7c49fbfbedd859367a48cb860b/a50f4bfbfbedab642082b783f536afc378311e84.jpg?referer=24c5e74b1d30e92496b3a8015a9b&amp;x=.jpg" alt="image" /></p>

<h3>3. 下载安装jruby</h3>

<p>安装jruby在前一篇博文讲解较细，这里不再赘述。</p>

<p>安装必要的JDBC。</p>

<pre><code>jruby -S gem install activerecord-jdbcmysql-adapter -v 1.3.0.beta2
</code></pre>

<p>如果要将jruby on rails工程打包为war发布到tomcat上，就必须要用到warbler Gem：</p>

<pre><code>jruby -S gem install warbler
</code></pre>

<h3>4. 打包jruby on rails工程</h3>

<p>首先确认database.yml文件production环境配置正确：</p>

<pre><code>production:
  adapter: mysql
  encoding: utf8
  reconnect: false
  database: demo_production
  username: user
  password: password
  host: localhost
  port: 3306
</code></pre>

<p>配置正确的production数据库，及其用户密码。</p>

<p>在数据库中创建production数据库demo_production，并且赋予用户user对该数据库的完全权限。</p>

<p>然后开始打包工程，在rails app根目录下执行：</p>

<pre><code>jruby -S warble
</code></pre>

<p>该命令会在工程根目录下生成一个war文件，如demo.war，该war会将必要的gem打包进去，使得我们能够像普通java工程war文件那样部署到tomcat中。</p>

<h3>5. 部署war</h3>

<p>将该war复制到tomcat的webapps目录下，等待大约几秒钟，tomcat会自动释放文件完成部署。</p>

<p>最后一步，进入tomcat释放的文件夹demo中，生成数据库schema：</p>

<pre><code>C:\apache-tomcat-7.0.35\webapps\demo&gt;jruby -S rake db:migrate RAILS_ENV="production"
</code></pre>

<p>现在可以访问<a href="http://localhost:8080/demo">http://localhost:8080/demo</a> ，可以看到rails app的首页了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识jruby之安装配置jrubyonrails]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/chu-shi-jrubyzhi-an-zhuang-pei-zhi-jrubyonrails/"/>
    <updated>2014-02-14T23:49:23+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/chu-shi-jrubyzhi-an-zhuang-pei-zhi-jrubyonrails</id>
    <content type="html"><![CDATA[<h3>1. prerequesite</h3>

<p>假设你已经安装好了jruby，并且使用的jdk最好是1.7。</p>

<h3>2. 安装rails</h3>

<p>安装rails4.0.0：</p>

<pre><code>C:\&gt;jruby -S gem install rails -V
</code></pre>

<p>查看安装的rails版本：</p>

<pre><code>C:\&gt;jruby -S rails -v
Rails 4.0.0
</code></pre>

<!-- more -->


<h3>3. 新建一个rails Apps</h3>

<pre><code>C:\&gt;jruby -S rails new demo
</code></pre>

<p>并且取消bundle install，因为使用默认安装的ActiveRecord-JDBC-adapter的master分支版本目前，会导致执行rake db:migrate命令时发生wrong number of arguments calling exec_insert (5 for 3) error错误，所以，修改gemfile使用它的1.3.0.beta2版本（这个步骤是现在的权宜之计，以后肯定不必这么麻烦了。后注：此问题目前已修复)：</p>

<p>如果使用的是sqlite数据库，则将：</p>

<pre><code>gem 'activerecord-jdbcsqlite3-adapter'
</code></pre>

<p>改为：</p>

<pre><code>gem 'activerecord-jdbcsqlite3-adapter', '1.3.0.beta2'
</code></pre>

<p>如果使用的mysql数据库，则将：</p>

<pre><code>gem 'activerecord-jdbcmysql-adapter'
</code></pre>

<p>改为：</p>

<pre><code>gem 'activerecord-jdbcmysql-adapter','1.3.0.beta2'
</code></pre>

<p>然后再进行 jruby -S bundle install 安装gem。</p>

<p>如果使用sqlite数据库，默认配置即可，如果使用mysql数据库，则修改database.yml，以development
环境为例，这里的username，password，host，port按照具体情况进行具体配置：</p>

<pre><code>development:
  adapter: mysql
  encoding: utf8
  reconnect: false
  database: demo_development
  username: user
  password: user_password
  host: localhost
  port: 3306
</code></pre>

<p>最后，启动rails app：</p>

<pre><code>C:\DEMO&gt;jruby -S rails s
</code></pre>

<p>然而此时又出错了：</p>

<pre><code>OpenSSL::Cipher::CipherError: Illegal key size: possibly you need to install Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files for your JRE
</code></pre>

<p>要求安装JCE，到Oracle 官网上下载一个UnlimitedJCEPolicyJDK7.zip文件，解压缩后包含两个jar文件：local_policy.jar和US_export_policy.jar。将这两个文件替换$JAVA_HOME/jre/lib/security目录下两个同名文件，如，在我的电脑是就是替换C:\Program Files\Java\jdk1.7.0_25\jre\lib\security目录下两个文件。替换后，重启电脑。</p>

<p>此时，再jruby -S rails s启动app则可以正确运行了。</p>

<h3>4. 配置java类路径</h3>

<p>如果需要在rails中使用java外部类，则需要配置一下$CLASSPATH，首先，假设我们将需要的java类都放在rails_root/lib/java文件夹下。那么就在environment.rb文件中require File.expand_path(&lsquo;../
application&rsquo;, __FILE__)后添加代码：</p>

<pre><code>require 'java'
$CLASSPATH &lt;&lt; File.join(Rails.root, 'lib','java')
</code></pre>

<p>这样，如果在该目录下有一个编译好的java类example.MyClass在rails中就可以像这样使用该类：</p>

<pre><code>mc=Java::example.MyClass.new
</code></pre>

<p>如果还使用了外部jar，则还要添加引用jar的代码，同样在environment.rb文件中添加：</p>

<pre><code>Dir.glob(File.join(Rails.root, 'lib','java',"**","*.jar")).each do |jar| 
    $CLASSPATH &lt;&lt; jar
end
</code></pre>

<p>所以最终environment.rb文件看起来是这样的：</p>

<blockquote><p>environment.rb</p></blockquote>

<pre><code># Load the rails application
require File.expand_path('../application',__FILE__)
requrie 'java'
$CLASSPATH&lt;&lt;File.join(Rails.root,'lib','java')
Dir.glob(File.join(Rails.root,'lib','java','**','*.jar)).each do |jar|
    $CLASSPATH &lt;&lt; jar
end

Demo::Application.initialize!
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在一组方法中共享变量]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/zai-yi-zu-fang-fa-zhong-gong-xiang-bian-liang/"/>
    <updated>2014-02-14T23:46:19+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/zai-yi-zu-fang-fa-zhong-gong-xiang-bian-liang</id>
    <content type="html"><![CDATA[<pre><code>lambda{
    shared=10
    Kernel.send :define_method, :counter do
        shared+=1
    end
    Kernel.send :define_method, :show do
        shared
    end
}.call

show #=&gt;10
3.times{counter}
show #=&gt;13
</code></pre>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails 在javascript中使用ruby对象]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rails-zai-javascriptzhong-shi-yong-rubydui-xiang/"/>
    <updated>2014-02-14T23:40:15+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rails-zai-javascriptzhong-shi-yong-rubydui-xiang</id>
    <content type="html"><![CDATA[<h3>1.在javascript中使用ruby简单对象</h3>

<p>如，需要将ruby对象转换成javascript的简单变量：</p>

<pre><code>&lt;%= javascript_tag do %&gt;
  url = '&lt;%= j products_url %&gt;';
&lt;% end %&gt;
</code></pre>

<p>此时的&lt;%=  %>是由引号包裹的。rails的j方法是为了正确地转义ruby对象从而嵌入javascript中。</p>

<!-- more -->


<h3>2.在javascript中使用ruby复杂对象</h3>

<p>公共桥梁显然是json，但要正确地转义json就需要raw方法：</p>

<pre><code>&lt;%= javascript_tag do %&gt;
  products = &lt;%= raw Product.limit(10).to_json %&gt;
&lt;% end %&gt;
</code></pre>

<p>此时&lt;%= %>无引号包裹。</p>

<h3>3.Gon gem</h3>

<p>如果有大量的ruby对象需要在javascript中使用，这种方法就不好了。Gon就是为了解决这个问题。</p>

<p>首先在gemfile中添加gon：</p>

<pre><code>gem 'gon'
</code></pre>

<p>然后在/app/views/layouts/application.html.erb文件中包含gon：</p>

<pre><code>&lt;head&gt;
  &lt;title&gt;Store&lt;/title&gt;
  &lt;%= include_gon %&gt;
  &lt;%= stylesheet_link_tag    "application", media: "all" %&gt;
  &lt;%= javascript_include_tag "application" %&gt;
  &lt;%= csrf_meta_tag %&gt;
&lt;/head&gt;
</code></pre>

<p>然后在controller中就可以以这种形式为javascript对象赋值：</p>

<pre><code>gon.variable_name = variable_value
# or new syntax
gon.push({
  :user_id =&gt; 1,
  :user_role =&gt; "admin"
})
gon.push(any_object) # any_object with respond_to? :each_pair
</code></pre>

<p>例如：</p>

<pre><code>class ProductsController &lt; ApplicationController
    def index
        gon.products = Product.limit(10)
    end
end
</code></pre>

<p>在js中获取变量的方法：</p>

<pre><code>gon.variable_name
</code></pre>

<p>即：</p>

<pre><code>go.products
</code></pre>

<h3>参考文献</h3>

<ul>
<li><a href="https://github.com/gazay/gon">gon</a></li>
<li><a href="http://railscasts.com/episodes/324-passing-data-to-javascript?view=asciicast">Passing data to javascript</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails URL路由]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rails-urllu-you/"/>
    <updated>2014-02-14T23:26:35+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rails-urllu-you</id>
    <content type="html"><![CDATA[<p>rails URL路由的最权威文档当然是其官方站点Rails routing from the outside in，我这里只提几个文档中常用的要点。</p>

<h3>1.CRUB</h3>

<p>由resources建立的资源，是rails中最常见的路由方式，不用多说。</p>

<pre><code>resources :photos
</code></pre>

<!-- more -->


<h3>2.单例资源</h3>

<p>单例资源也比较常用，官方文档上举的例子很形象也很常见，用户user需要拥有一个profile资源，而每个用户必然只有一个profile，所以如果生成类似/profiles/:id的URL显然是不美观的，此时就需要单例资源，单例资源的生成使用的是单数形式方法resource：</p>

<pre><code>resource :profile
</code></pre>

<p>该语句生成的路由如下：</p>

<pre><code>     profile POST   /profile(.:format)      profiles#create
 new_profile GET    /profile/new(.:format)  profiles#new
edit_profile GET    /profile/edit(.:format) profiles#edit
             GET    /profile(.:format)      profiles#show
             PATCH  /profile(.:format)      profiles#update
             PUT    /profile(.:format)      profiles#update
             DELETE /profile(.:format)      profiles#destroy
</code></pre>

<h3>3.嵌入的路由</h3>

<p>适用于某种资源必须依赖于另一种资源才有意义，比如某些comment必然在针对的event下存在，所以comment就必须依赖于event。</p>

<pre><code>resources :events do
    resources :comments
end
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>events_comments GET    /events/comments(.:format)          comments#index
</span><span class='line'>                POST   /events/comments(.:format)          comments#create
</span><span class='line'> new_events_comment GET    /events/comments/new(.:format)      comments#new
</span><span class='line'>edit_events_comment GET    /events/comments/:id/edit(.:format) comments#edit
</span><span class='line'> events_comment GET    /events/comments/:id(.:format)      comments#show
</span><span class='line'>                PATCH  /events/comments/:id(.:format)      comments#update
</span><span class='line'>                PUT    /events/comments/:id(.:format)      comments#update
</span><span class='line'>                DELETE /events/comments/:id(.:format)      comments#destroy
</span><span class='line'>         events POST   /events(.:format)                   events#create
</span><span class='line'>     new_events GET    /events/new(.:format)               events#new
</span><span class='line'>    edit_events GET    /events/edit(.:format)              events#edit
</span><span class='line'>                GET    /events(.:format)                   events#show
</span><span class='line'>                PATCH  /events(.:format)                   events#update
</span><span class='line'>                PUT    /events(.:format)                   events#update
</span><span class='line'>                DELETE /events(.:format)                   events#destroy</span></code></pre></td></tr></table></div></figure>


<p>对应的也自动生成了诸如event_comment_path之类的url 帮助方法。对于嵌入式资源，官方建议不要超过两层。最简单的理由，路由层次过深，除了增加逻辑的复杂度外，也得不到任何好处。</p>

<h3>4.namespace和scope路由</h3>

<p>以下规则同时适用于resources和controller。</p>

<p>比如，如果想要在特定的命名空间(admin)下访问某个资源(post)，这时就可以利用namespace。</p>

<pre><code>namespace :admin do
  resources :posts
end
</code></pre>

<p>此时，处理该路由的controller是Admin::PostsController，体现在rails工程中是在controller文件夹下的admin文件夹下的posts_controller.rb文件。而产生的路由全部以/admin开头：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>admin_posts GET    /admin/posts(.:format)          admin/posts#index
</span><span class='line'>            POST   /admin/posts(.:format)          admin/posts#create
</span><span class='line'> new_admin_post GET    /admin/posts/new(.:format)      admin/posts#new
</span><span class='line'>edit_admin_post GET    /admin/posts/:id/edit(.:format) admin/posts#edit
</span><span class='line'> admin_post GET    /admin/posts/:id(.:format)      admin/posts#show
</span><span class='line'>            PATCH  /admin/posts/:id(.:format)      admin/posts#update
</span><span class='line'>            PUT    /admin/posts/:id(.:format)      admin/posts#update
</span><span class='line'>            DELETE /admin/posts/:id(.:format)      admin/posts#destroy</span></code></pre></td></tr></table></div></figure>


<p>一言以蔽之，由namespace产生的资源路由，controller和url都由该namespace作“前缀”。</p>

<p>如果需要让资源路由没有前缀，而又希望该路由url被某个模块下的controller受理，那么就需要使用
scope。</p>

<pre><code>scope module: 'admin' do
  resources :posts
end
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>posts GET    /posts(.:format)          admin/posts#index
</span><span class='line'>      POST   /posts(.:format)          admin/posts#create
</span><span class='line'> new_post GET    /posts/new(.:format)      admin/posts#new
</span><span class='line'>edit_post GET    /posts/:id/edit(.:format) admin/posts#edit
</span><span class='line'> post GET    /posts/:id(.:format)      admin/posts#show
</span><span class='line'>      PATCH  /posts/:id(.:format)      admin/posts#update
</span><span class='line'>      PUT    /posts/:id(.:format)      admin/posts#update
</span><span class='line'>      DELETE /posts/:id(.:format)      admin/posts#destroy</span></code></pre></td></tr></table></div></figure>


<p>由rake routes输出可以看出，路由url没有了admin前缀，而posts资源都由admin模块下的Admin::PostsController受理。</p>

<p>一言以蔽之，带module的scope产生的资源路由，路由url无“前缀”，controller以module指定模块为“前缀”。</p>

<p>反过来，如果希望给资源附加一个前缀，而由普通controller受理该url，则需要另一种形式的scope：</p>

<pre><code>scope '/admin' do
  resources :posts
end
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   posts GET    /admin/posts(.:format)          posts#index
</span><span class='line'>          POST   /admin/posts(.:format)          posts#create
</span><span class='line'> new_post GET    /admin/posts/new(.:format)      posts#new
</span><span class='line'>edit_post GET    /admin/posts/:id/edit(.:format) posts#edit
</span><span class='line'>     post GET    /admin/posts/:id(.:format)      posts#show
</span><span class='line'>          PATCH  /admin/posts/:id(.:format)      posts#update
</span><span class='line'>          PUT    /admin/posts/:id(.:format)      posts#update
</span><span class='line'>          DELETE /admin/posts/:id(.:format)      posts#destroy</span></code></pre></td></tr></table></div></figure>


<p>此时，资源posts每个url都附加了/admin为前缀，而受理这些url的是PostsController。</p>

<p>一言以蔽之，这种形式的scope产生的资源路由，路由url有“前缀”，controller无“前缀”。</p>

<p>另外，这种形式的路由还有一种简写：</p>

<pre><code>resources :posts, path: '/admin/posts'
</code></pre>

<p>该简写和使用scope产生的结果完全一样。不过，path还有另外的用途，如果保持controller及url helper不变，仅仅希望为url路由中的资源改个名称，这时path就派上用场了：</p>

<pre><code>resources :posts, path: '/articles'
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>posts GET    /articles(.:format)          posts#index
</span><span class='line'>      POST   /articles(.:format)          posts#create
</span><span class='line'> new_post GET    /articles/new(.:format)      posts#new
</span><span class='line'>edit_post GET    /articles/:id/edit(.:format) posts#edit
</span><span class='line'> post GET    /articles/:id(.:format)      posts#show
</span><span class='line'>      PATCH  /articles/:id(.:format)      posts#update
</span><span class='line'>      PUT    /articles/:id(.:format)      posts#update
</span><span class='line'>      DELETE /articles/:id(.:format)      posts#destroy</span></code></pre></td></tr></table></div></figure>


<h3>5.新增RESTful动词</h3>

<p>以下规则同样适用于resources和controller。</p>

<pre><code>resources :photos do
  get 'preview', on: :member
end
</code></pre>

<p>该语句为某个特定photo新增了一个preview动作，该动作是一个get请求，默认photos_controller中存在一个preview方法处理该动作。</p>

<p>类似的，如果需要为photos集合新增一个动词，只需要将语句中member改成collection即可。</p>

<p>如果，需要为特定photo增加多个动词preview1和preview2，改成下面的形式即可，甚至可以指定
controller中处理该请求的方法，以及自定义url helper：</p>

<pre><code>resources :photos do
  member do
    get 'preview1'=&gt;:pre1, as:"p1"
    get 'preview2'=&gt;:pre2, as:"p2"
  end
end
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  p1_photo GET    /photos/:id/preview1(.:format) photos#pre1
</span><span class='line'>  p2_photo GET    /photos/:id/preview2(.:format) photos#pre2</span></code></pre></td></tr></table></div></figure>


<h3>6.非resourceful路由</h3>

<h4>使用参数：</h4>

<pre><code>controller :photos do
  get 'check/:id',:to=&gt;:check
end
</code></pre>

<p>产生的路由输出如下：</p>

<pre><code>GET /check/:id(.:format) photos#check
</code></pre>

<p>在执行该get请求如/check/23，后photos_controller的check方法受理该请求，并在params中将参数设置为23。</p>

<h4>限制参数格式：</h4>

<pre><code>get 'photos/:id', to: 'photos#show', constraints: { id: /[A-Z]\d{5}/ }
</code></pre>

<p>该路由规则能接受/photos/A12345却不能接受/photos/893。</p>

<h4>指定请求的默认类型：</h4>

<pre><code>get 'articles/:id', to: 'articles#show', defaults: { format: 'xml' }
</code></pre>

<p>若get请求/articles/2，该路由规则会自动将params的params[:format]置为&#8221;xml&#8221;。</p>

<p>该方法仅仅是在请求未指定format时指定默认类型，如果需要某个controller仅接受某些格式的请求如xml和json，则可以在该controller类定义中添加如下代码，这在书写api时常常用到：</p>

<pre><code>respond_to :json, :xml
</code></pre>

<h4>更换资源的controller：</h4>

<p>如果不希望为某个资源使用默认的controller，则：</p>

<pre><code>resources :photos, controller: 'images'
</code></pre>

<p>此时photos资源的所有请求都由images_controller受理，而photos的路由url和url helper都不变。</p>

<h4>限制资源的默认动作：</h4>

<p>如果仅希望使用资源的部分动作，如仅使用资源photos的index和show动作：</p>

<pre><code>resources :photos, only: [:index, :show]
</code></pre>

<p>或者使用除了destroy动作外的所有默认动作：</p>

<pre><code>resources :photos, except: :destroy
</code></pre>

<p>还可以使用:all（所有默认动作），:none（没有默认动作）：</p>

<pre><code>resources :photos, :only=&gt;:none
</code></pre>

<h4>为new和edit的url路由改名：</h4>

<pre><code>resources :photos, path_names: { new: 'make', edit: 'change' }
</code></pre>

<p>产生的新路由为：</p>

<pre><code>/photos/make
/photos/1/change
</code></pre>

<p>而此时受理该路由的方法仍为new和edit，即controller中的方法并未改名。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails 填充数据库初始数据]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rails-tian-chong-shu-ju-ku-chu-shi-shu-ju/"/>
    <updated>2014-02-14T23:21:46+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rails-tian-chong-shu-ju-ku-chu-shi-shu-ju</id>
    <content type="html"><![CDATA[<!-- more -->


<p>利用db/seeds.rb文件将数据库的initial data填入即可，该文件位于rails环境中，可以访问railsApp中任何类和方法。如，填充product表的初始数据：</p>

<figure class='code'><figcaption><span>seeds.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Product</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="ss">:&quot;Product #</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="ss">&quot;</span><span class="p">,</span><span class="ss">description</span><span class="p">:</span><span class="s2">&quot;A product&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用rake命令填充数据：</p>

<pre><code>rake db:seed
</code></pre>

<p>或者从头调用所有migration创建空的数据库并自动seed填充数据库：</p>

<pre><code>rake db:setup
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails 配置使用jquery-file-upload  step by step]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rails-pei-zhi-shi-yong-jquery-file-upload-step-by-step/"/>
    <updated>2014-02-14T23:11:06+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rails-pei-zhi-shi-yong-jquery-file-upload-step-by-step</id>
    <content type="html"><![CDATA[<p>一步步安装使用jquery-file-upload</p>

<!-- more -->


<h3>1.安装Gem</h3>

<p>在gemfile中添加jquery-fileupload-rails和paperclip的gem：</p>

<pre><code>gem "jquery-fileupload-rails"
gem 'paperclip'
</code></pre>

<h3>2.在app/assets/application.js添加</h3>

<pre><code>//= require jquery-fileupload
</code></pre>

<h3>3.在app/assets/stylesheets/application.css添加</h3>

<pre><code>*= require jquery.fileupload-ui
</code></pre>

<h3>4.创建Picture数据表</h3>

<pre><code>rails g model Picture avatar:attachment
rake db:migrate
</code></pre>

<p>pictures表的avatar属性代表上传的文件对象。</p>

<p>修改picture.rb的内容：</p>

<pre><code>class Picture &lt; ActiveRecord::Base
    has_attached_file :avatar

    include Rails.application.routes.url_helpers

    def to_json_picture
        {
            'name'=&gt;read_attribute(:avatar_file_name),
            'size'=&gt;read_attribute(:avatar_file_size),
            'url'=&gt;avatar.url(:original),
            'delete_url'=&gt;picture_path(self),
            'delete_type'=&gt;'DELETE'
        }
    end
end
</code></pre>

<p>在model中，使用类方法has_attached_file指明文件对象是avatar，并且定义了to_json_picture方法，该方法将picture对象转换成一个hash，在jquery-fileupload和server的交互中被转变为json数据。</p>

<h3>5.创建view</h3>

<p>只需要创建一个上传界面index.html.erb，自定义你自己的view时，仅需要将form_for Picture.new和f.file_field :avatar修改为自己model即可，其他内容都可以直接copy-paste。</p>

<p><a href="https://gist.github.com/qjpcpu/9017226">源码地址</a></p>

<h3>6.创建controller</h3>

<pre><code>rails g controller pictures index create destroy
</code></pre>

<p>&ndash;</p>

<pre><code>class PicturesController &lt; ApplicationController
  def index
    @pictures = Picture.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @pictures.map{|picuture| picuture.to_json_picture } }
    end
  end

  # POST /picture
  # POST /picture.json
  def create
    @picture = Picture.new(params[:picture])

    respond_to do |format|
      if @picture.save
        format.html {
          render :json =&gt; [@picture.to_json_picture].to_json,
          :content_type =&gt; 'text/html',
          :layout =&gt; false
        }
        format.json { render json: {files: [@picture.to_json_picture]}, status: :created, location: @picture }
      else
        format.html { render action: "new" }
        format.json { render json: @picture.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /picture/1
  # DELETE /picture/1.json
  def destroy
    @picture = Picture.find(params[:id])
    @picture.destroy

    respond_to do |format|
      format.html { redirect_to picture_url }
      format.json { head :no_content }
    end
  end
end
</code></pre>

<h3>7.效果图</h3>

<p><img src="http://a.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=794ee559c45c1038207ecec7822ae22e/342ac65c103853436bec62629113b07eca808856.jpg?referer=457c5546e7dde711bec576c6e84c&amp;x=.jpg" alt="image" /></p>

<p>这就是最终结果了，如果想要达到jqeury-fileupload Demo中漂亮的结果，如下图，就需要使用Twitter-bootstrap或者自己写写CSS了。</p>

<p><img src="http://c.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=ff26dca4932397ddd279980169b9c38a/0dd7912397dda144372a89f1b0b7d0a20cf48656.jpg?referer=354f23adb68f8c54bac4f01fe24c&amp;x=.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails Eagerloading]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rails-eagerloading/"/>
    <updated>2014-02-14T23:05:33+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rails-eagerloading</id>
    <content type="html"><![CDATA[<p>若存在如下Post model：</p>

<pre><code>class Post &lt; ActiveRecord::Base
    belongs_to :author
    has_many :comments
end
</code></pre>

<p>使用下面的循环加载数据时产生了N+1查询问题：</p>

<pre><code>Post.all.each do |post|
  puts "Post:            " + post.title
  puts "Written by:      " + post.author.name
  puts "Last comment on: " + post.comments.first.created_on
end
</code></pre>

<!-- more -->


<p>首先，解决author获取问题：</p>

<pre><code>Post.includes(:author).each do |post|
</code></pre>

<p>然后解决comments加载：</p>

<pre><code>Post.includes(:author, :comments).each do |post|
</code></pre>

<p>带条件的eager loading：</p>

<pre><code>Post.includes([:author, :comments]).where(['comments.approved = ?', true]).all
</code></pre>

<p>多态关系的eager laoding</p>

<pre><code>class Address &lt; ActiveRecord::Base
    belongs_to :addressable, :polymorphic=&gt;true
end
Address.includes(:addressable)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails 创建数据库索引]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rails-chuang-jian-shu-ju-ku-suo-yin/"/>
    <updated>2014-02-14T23:01:32+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rails-chuang-jian-shu-ju-ku-suo-yin</id>
    <content type="html"><![CDATA[<p>以经典的customer-order为例</p>

<h3>1. 在创建数据表时直接创建索引</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g model customer
</span><span class='line'>rails g model order customer:references
</span></code></pre></td></tr></table></div></figure>


<p>查看order的migration文件，rails自动为我们添加了index：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateOrders</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>      <span class="n">create_table</span> <span class="ss">:orders</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>              <span class="n">t</span><span class="o">.</span><span class="n">refercences</span> <span class="ss">:customer</span>
</span><span class='line'>              <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">add_index</span> <span class="ss">:orders</span><span class="p">,</span> <span class="ss">:customer_id</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>2. 手动附加索引</h3>

<p>此时创建数据表是以普通字段创建的外键</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g model customer
</span><span class='line'>rails g model order customer_id:integer
</span></code></pre></td></tr></table></div></figure>


<p>如果需要创建索引，就需要手动新建一个migration来添加索引：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g migration add_customer_id_index_to_orders
</span></code></pre></td></tr></table></div></figure>


<p>修改migration文件，手动添加index</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AddCustomerIdIndexToOrders</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>      <span class="n">add_index</span> <span class="ss">:orders</span><span class="p">,</span> <span class="ss">:customer_id</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. many-to-many关系中添加index</h3>

<p>以man-address为例，直接创建中间表并不会自动添加索引，所以需要在中间表内手动添加索引：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AddAddressesMenTable</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>      <span class="n">create_table</span> <span class="ss">:address_men</span><span class="p">,</span><span class="ss">:id</span><span class="o">=&gt;</span><span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>          <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="ss">:address</span><span class="p">,</span> <span class="ss">:null</span><span class="o">=&gt;</span><span class="kp">false</span>
</span><span class='line'>          <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="ss">:man</span><span class="p">,</span><span class="ss">:null</span><span class="o">=&gt;</span><span class="kp">false</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">add_index</span> <span class="ss">:addresses_men</span><span class="p">,</span><span class="o">[</span><span class="ss">:address_id</span><span class="p">,</span><span class="ss">:man_id</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. 建议</h3>

<p>所有的外键最好都添加索引。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails使用devise验证用户]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/railsshi-yong-deviseyan-zheng-yong-hu/"/>
    <updated>2014-02-14T22:46:34+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/railsshi-yong-deviseyan-zheng-yong-hu</id>
    <content type="html"><![CDATA[<h3>安装配置devise</h3>

<p>在gemfile中添加一行：</p>

<pre><code>gem 'devise'
</code></pre>

<p>执行bundle install后，需要安装devise到工程：</p>

<pre><code>rails generate devise:install
</code></pre>

<p>创建验证用户model，通常用user，也可以使用其他名称：</p>

<pre><code>rails generate devise user
rake db:migrate
</code></pre>

<!-- more -->


<p>查看models文件夹下devise创建了user.rb文件：</p>

<p><img src="http://d.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=f2f25a60612762d0843ea4ba90d779c7/8b13632762d0f703ca91709f0afa513d2697c556.jpg?referer=7e3304592a34349b2d115bb5234c&amp;x=.jpg" alt="image" /></p>

<p>devise方法来自Devise gem，其中默认启用了database_authenticatable,registerable等模块，注释部分列出了其他模块默认未启用，根据devise文档按需要使能。</p>

<p>attr_accessible定义的属性可以被create, update_attributes使用，未在这里定义的属性会引发这两个方法的 mass-assignment异常。</p>

<p>查看路由文件 routes.rb，devise gem在创建model时在路由文件中添加了： <code>devise_for :users</code></p>

<p>执行rake routes可以看到devise创建的url：</p>

<p><img src="http://g.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=4a985b9df21f3a295ec8d5cba91ecd0c/95eef01f3a292df526325656be315c6035a87384.jpg?referer=0fdbb04d6509c93d5ee53ac7bd9a&amp;x=.jpg" alt="image" /></p>

<p>注意devise gem提供的账户注销和用户退出登陆都是默认使用的DELETE方法，该url设计常导致编码出错，但它确是遵循了RESTful规范，留意下即可。</p>

<p>在需要的页面上添加注册、登陆的代码（我添加在application.html.erb中yield语句上方）：</p>

<p><img src="http://c.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=6ae4814e249759ee4e5060ce82c0322b/503d269759ee3d6d37e5628841166d224f4ade56.jpg?referer=77d0e6a0d739b60014d93a871a4c&amp;x=.jpg" alt="image" /></p>

<p>rails server启动服务器，即可查看注册登陆页面：</p>

<p><img src="http://c.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=e7392f8d9b25bc312f5d019d6ee4fc8c/e1fe9925bc315c60fe6491ac8fb1cb1348547784.jpg?referer=ba03f4b49d3df8dcff2abba1b19a&amp;x=.jpg" alt="image" /></p>

<h3>devise提供的常用method</h3>

<pre><code>* authenticate_user!，验证用户是否登陆，常用于before_filter: `before_filter :authenticate_user!`. 另，如果你创建的devise model叫admin，那么该方法就是authenticate_admin!，以下方法同理。这又是ruby玩的一个小把戏了。
* user_signed_in?，当前是否有登陆用户
* current_user， 获取当前登陆用户
* user_session, 用户session，类似于session，也是一个hash表，可以用来保存用户特有的数据
* after_sign_in_path_for和after_sign_out_path_for方法指定用户登入/登出后的跳转url.
</code></pre>

<h3>自定义views</h3>

<p>devise gem提供了足够功能的用户验证，但是由上图可见，其自带的view未免太过简单。如果需要自定义视图，就需要将devise默认的view拷贝到rails工程：</p>

<pre><code>rails generate devise:views
</code></pre>

<p><img src="http://h.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=ff4c4851700e0cf3a4f74efe3a7d8322/9922720e0cf3d7ca14d5da35f01fbe096b63a956.jpg?referer=fc0d600dc880653822fd9123174c&amp;x=.jpg" alt="image" /></p>

<p>该命令将devise的views复制到工程目录app/views下，分类为多个文件夹。修改需要的view模板就能够改变对应界面。</p>

<h3>自定义controller</h3>

<ul>
<li><p>如果需要自定义controller，如Devise::SessionController：</p>

<pre><code>  class Admins::SessionsController &lt; Devise::SessionsController
  end
</code></pre></li>
<li><p>在路由文件routes.rb中更新配置，告诉devise使用新的controller</p>

<pre><code>  devise_for :users, :controllers =&gt; { :sessions =&gt; "admins/sessions" }
</code></pre></li>
<li><p>更新了controller后，在app/views/devise/sessions下的views不会再被使用，所以，还需要将这部分views复制到app/views/admins/sessions下，或者在该目录下建立新的views。</p></li>
</ul>


<h3>邮件确认</h3>

<p>如果需要更安全一点的注册验证，可以使用邮件确认方式。</p>

<p>首先，修改user.rb文件，启用devise的confirmable模块：</p>

<p><img src="http://f.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=7f58226cbc096b6385195e553c08f679/f31fbe096b63f6241e7edc408544ebf81a4ca356.jpg?referer=e2c37137af3459829c9dd0a20d4c&amp;x=.jpg" alt="image" /></p>

<p>在数据表users中新加字段：</p>

<pre><code>rails g migration add_confirmable_fields_to_users
</code></pre>

<p><img src="http://c.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=117edc408544ebf86971643ae9c2a617/0d338744ebf81a4c2b11098ad52a6059252da656.jpg?referer=aabcdc8733adcbef58234b36024c&amp;x=.jpg" alt="image" /></p>

<p>新用户是以邮件的方式确认，所以，需要更改rails的环境配置。rails的环境配置位于config/environments/xxx.rb文件，xx代表develepment/test/production，三个文件的配置选项都十分类似，下面以production环境为例，打开config/environments/production.rb，在最后的end前添加：</p>

<p><img src="http://c.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=464e1e2bcebf6c81f3372ced8c05c008/d058ccbf6c81800ac314734db33533fa838b4784.jpg?referer=0ef348e7a6c27d1efc310ff4a19a&amp;x=.jpg" alt="image" /></p>

<p>配置邮件帐户，在production时rails建议使用邮件服务如Mandrill，这里为了简单，使用gmail帐户示例。</p>

<p>在改文件中继续添加smtp配置，新添加的内容最终如下：</p>

<p><img src="http://a.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=5cf27e4631fa828bd5239de6cd243009/b03533fa828ba61e481f326c4334970a314e5984.jpg?referer=fb19621ddfc451daafe138dba79a&amp;x=.jpg" alt="image" /></p>

<p>最后，修改devise.rb文件</p>

<pre><code>config.mailer_sender = "replyme@126.com" 
</code></pre>

<p>现在，当新用户new@test.com注册后，它会收到一封确认邮件，邮件from: your_gmail_username@gmail.com, to: new@test.com, reply_to: replyme@126.com，邮件包含一个链接，指向用户激活地址。用户点击该链接激活帐户后才能登陆网站。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby线程]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rubyxian-cheng/"/>
    <updated>2014-02-14T22:35:53+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rubyxian-cheng</id>
    <content type="html"><![CDATA[<h3>1. 创建线程</h3>

<pre><code>    Thread.new do
        3.times do 
            sleep 3
            puts "Thread #{Thread.current.object_id} running..."
        end
    end
</code></pre>

<p>ruby使用在Thread.new创建线程，线程创建后立即返回，线程也同时开始执行。ruby线程可以在创建块中使用外部变量，也可以使用本地变量，值变量在线程内部保存的是本地副本，而引用变量保存的是一个本地引用。</p>

<pre><code>class Book
    attr_accessor :name
end
num = 0
count = 0
book = Book.new
book.name = 'ybur'
puts "main Thread=#{num} count=#{count} book=#{book.name}"

t.Thread.new(num,book) do |n,b|
    n+=1
    count+=1
    b.name.reverse!
    puts "new Thread:num=#{n} count=#{count} book=#{b.name}"
end
t.join
puts "main Thread:num=#{num} count=#{count} book=#{book.name}"
#=&gt;main Thread:num=0 count=0 book=ybur
#=&gt;new Thread:num=1 count=1 book=ruby
#=&gt;main Thread:num=0 count=1 book=ruby
</code></pre>

<!-- more -->


<p>新线程中保存num的副本，在线程中更改num并不影响外部num值，而新线程对book的修改会直接影响外部book，在新线程中也可打破作用域直接访问外部count并作出修改。</p>

<p>常用方法</p>

<pre><code>Thread.current #获取当前线程
Thread.list #所有线程列表
Thread#status #线程状态
Thread#alive?
Thread#stop?
Thread#join
</code></pre>

<p>线程可以将某些信息放在自身的hash表中，让别的线程访问。使用Thread#value（阻塞方法）访问线程执行最后一行代码的结果：</p>

<pre><code>t=Thread.new(1,10) do |a,b|
    sleep 3
    Thread.current['plus_result']=a+b
    "thread result:#{a+b}"
end
t.join
puts "1+10=#{t['plus_result']}"
puts "#{t.value}"
#=&gt; 1+10=11
#=&gt; thread result:11
</code></pre>

<h3>2. Mutex</h3>

<p>来自ruby-doc的例子</p>

<pre><code>require 'thread'
mutex=Mutex.new
count1=count2=0
difference=0
counter=Thread.new do
    loop do
        mutex.synchronize do
            count1+=1
            count2+=1
        end
    end
end
spy=Thread.new do
    loop do
        mutex.synchronize do
            difference+=(count1-count2).abs
        end
    end
end
sleep 1
mutex.lock
#=&gt; count1 &gt;&gt; 21192
#=&gt; count2 &gt;&gt; 21192
#=&gt; difference &gt;&gt;0
</code></pre>

<h3>3. Condition Variables</h3>

<p>来自ruby-doc</p>

<pre><code>require 'thread'
mutext=Mutex.new
cv=ConditionVariable.new
a=Thread.new {
    mutex.synchronize {
        puts "A:I have critical section, but will wait for cv"
        cv.wait mutex
        puts "A:I have critical section again! I rule!"
    }
}
puts "(Later, back at the ranch...)"
b=Thread.new {
    mutex.synchronize {
        puts "B: Now I am critical, but am done with cv"
        cv.signal
        puts "B: I am still critical, finishing up"
    }
}
a.join
b.join

produces:
A:I have critical section, but will wait for cv(Later, back at the ranch...)
B: Now I am critical,but am done with cv
B:I am still critical, finishing up
A: I have critical section again! I Rule!
</code></pre>

<p>在进入临界区并在cv上等待时，会释放该互斥锁mutex，从而才能让别的线程进入临界区，不至于发生死锁。</p>

<h3>4. Queue</h3>

<p>ruby的Queue和java的BlockingQueue十分类似。当Queue为空时，执行pop操作会导致线程挂起等待。</p>

<pre><code>require 'thread'
queue=Queue.new
producer=Thread.new do 
    5.times do |i|
        sleep 4
        queue &lt;&lt; i # operator &lt;&lt; is alias of push
        puts "#{i} produced"
    end
end
consumer=Thread.new do 
    5.times do |i|
        value=queue.pop
        sleep 2
        puts "consumed #{value}"
    end
end
</code></pre>

<p>ruby还提供了一个SizedQueue，当达到队列最大长度后，执行push操作时也会导致线程挂起。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails ActiveRecord数据库关系1:n]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rails-activerecordshu-ju-ku-guan-xi-1-n/"/>
    <updated>2014-02-14T22:05:20+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rails-activerecordshu-ju-ku-guan-xi-1-n</id>
    <content type="html"><![CDATA[<p>如图所示，在demo数据库中有customers和orders两张表。一个customer有多个order，一个order属于一个customer，是一个1:n关系。</p>

<p><img src="http://b.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=12b2395769600c33f479decd2a772032/f7246b600c3387449229d53f530fd9f9d62aa081.jpg?referer=20537dc4d2a20cf41f87caef009f&amp;x=.jpg" alt="1:n" /></p>

<ol>
<li><p>建立数据表</p>

<pre><code> $ rails g model customer name:string
 $ rails g model order customer_id:integer order_date:datetime
 $ rails g model rake db:migrate
</code></pre></li>
</ol>


<!-- more -->


<ol>
<li>修改model，添加关系</li>
</ol>


<p>在这个1:n关系中，orders拥有外键customer_id，所以需要在order.rb中添加belongs_to关系，相对应在customer.rb中添加has_many关系。注意rails的约定，用rails g命令创建model时使用单数形式（首字母大小写无所谓），得到的数据库的表名是小写的复数形式，model的类名是驼峰形式的单数形式，model文件名是小写单数形式。</p>

<p>类似1:1关系，同样添加inverse_of和dependent选项。此处dependent选项的多了一个delete_all，即:dependent=>:delete_all，表示移除customer时会删除其order的所有数据库记录，但不调用这些order的destroy方法销毁对象。</p>

<figure class='code'><figcaption><span>customer.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Customer</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:orders</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="ss">:inverse_of</span> <span class="o">=&gt;</span> <span class="ss">:customer</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>order.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Order</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:customer</span><span class="p">,</span> <span class="ss">:inverse_of</span> <span class="o">=&gt;</span> <span class="ss">:orders</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>操作关系</li>
</ol>


<p>1：n关系中，在belongs_to关系端添加的方法和1：1中类似，不再赘述。在has_many端添加了如下方法：</p>

<pre><code>collection(force_reload=false)
collection&lt;&lt;(object, ...)
collection.delete(object,...)
collection = objects
collection_singular_ids
collection_singular_ids = ids
collection.clear
collection.empty?
collection.size
collection.find(...)
collection.where(...)
collection.exists?(...)
collection.build(attributes={},...)
collection.create(attributes={})
</code></pre>

<p>使用举例：</p>

<pre><code>c = Customer.first
order_list = c.orders #获取customer c的所有orders
c.orders.delete order_list.first #解除关系
c.orders.clear #清空当前customer的所有order
ar = c.order_ids # =&gt; [1,2,3,4,9,12]
c.orders &lt;&lt; Order.create( order_date:DateTime.now ) #自动保存关系到数据库
c.orders.create(order_date:DateTime.now) #和上一行等同
c.orders.build(order_date:DateTime.now) #需要手动保存该order对象
c.orders.size #获取orders的数量
c.orders.find 6 # 找到customer的orders中id为6的order
c.orders.where :order_date=&gt;DateTime.now
c.orders.where("id &gt; ?",6)
c.orders.empty?
</code></pre>

<ol>
<li>特殊的1：n关系——自引用关联</li>
</ol>


<p>如，一个Employee拥有多个下属，同时也拥有一个主管，这就是一个自引用关系表。</p>

<pre><code>$ rails g model employee name:string manager_id:integer
$ rake db:migrate
</code></pre>

<figure class='code'><figcaption><span>employee.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Employee</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:subordinates</span><span class="p">,</span> <span class="ss">:class_name</span><span class="o">=&gt;</span><span class="s1">&#39;Employee&#39;</span><span class="p">,</span> <span class="ss">:forgeign_key</span><span class="o">=&gt;</span><span class="s1">&#39;manager_id&#39;</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:manager</span><span class="p">,</span> <span class="ss">:class_name</span><span class="o">=&gt;</span><span class="s1">&#39;Employee&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>建立好model后，和普通1：n关系使用方法并无二致：</p>

<pre><code>manger = Emloyee.where(manager_id:nil).first
manager.subordinates.each do |s|
    puts s.name
end
</code></pre>

<ol>
<li>特殊的1：n关系——多态关系</li>
</ol>


<p>多态关系(polymorphic)可以看作是一种特殊的1：n关系。考虑一种情况，Emplyee和Picture是1：n的关系，Product和Picture也是1：n的关系，Company和Picture也是1：n的关系，这样，在Picture的model中就需要添加许多的belongs_to关系，这些belongs_to的功能是非常类似的，多态关系就是为了解决这类重复。</p>

<p>以Picture,Employee,Product为例，首先创建数据表。</p>

<pre><code>$ rails g model picture name:string owner_id:integer owner_type:string
$ rails g model employee
$ rails g model product
</code></pre>

<p>注意在创建pictures时，将所有拥有Picture的model称为owner（也可以取别的名称，如RailsGuide上取名为imageable，个人觉得称为owner更形象），并创建了owner_id和owner_type两个字段，分别表示拥有者model的id和类型。</p>

<p>修改model：</p>

<figure class='code'><figcaption><span>product.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:picture</span><span class="p">,</span> <span class="ss">:as</span><span class="o">=&gt;</span><span class="ss">:owner</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>employee.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Employee</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:pictures</span><span class="p">,</span> <span class="ss">:as</span><span class="o">=&gt;</span><span class="ss">:owner</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>picture.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Picture</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:owner</span><span class="p">,</span> <span class="ss">:polymorphic</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>所有拥有picture的model中，都在其has_many关系中添加了选项:as=>:owner，而picture的model中belongs_to关系添加了:polymorphic=>true选项。这样，如果以后还有新的model和picture是1:n的关系，那么在其中写入has_many :pictures,:as=>:owner即可，不必修改Picture的model及其数据表。</p>

<p>关系的使用：</p>

<pre><code>p1=Picture.create name:'picture-1'
p2=Picture.create name:'picture-2'
e=Employee.create
pro=Product.create
e.pictures&lt;&lt;p1
pro.pictures&lt;&lt;p2

p1.owner.class.name # =&gt; 'Employee'
p2.owner.class.name # =&gt; 'Product'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails ActiveRecord数据库关系n:n]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rails-activerecordshu-ju-ku-guan-xi-n-n/"/>
    <updated>2014-02-14T21:50:54+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rails-activerecordshu-ju-ku-guan-xi-n-n</id>
    <content type="html"><![CDATA[<p>如图所示，在demo数据库中有assemblies和parts两张表。一个assembly有多个part，一个part也拥有多个assembly，是一个n:n关系。</p>

<p><img src="http://c.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=85dca9420855b31998f982707392f31b/78310a55b319ebc49d5a93da8026cffc1e171656.jpg?referer=378ada0800087bf424fb62d9524d&amp;x=.jpg" alt="n-n" /></p>

<!-- more -->


<ol>
<li>建立数据表</li>
</ol>


<p>由于n:n的关系是以中间表的形式表达的，所以需要创建图示中的三张表assemlies, parts和中间表assemlies_part。</p>

<pre><code>$ rails g model assembly name:string
$ rails g model part part_number:string
$ rails g migration CreateAssembliesAndParts 
</code></pre>

<p>编辑db/migrate/目录下新建的xxxx_create_assemblies_and_parts.rb文件，在该文件中定义中间表：</p>

<figure class='code'><figcaption><span>20130609063804_create_assemblies_and_parts.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateAssembliesAndParts</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>      <span class="n">create_table</span> <span class="ss">:assemblies_parts</span><span class="p">,</span> <span class="ss">:id</span><span class="o">=&gt;</span><span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>          <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:assembly_id</span>
</span><span class='line'>          <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:part_id</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p> 注意，该表包含n:n的两端表的主键，且自身不使用主键，故:id=>false。</p>

<p>另外，该中间表的表名是“assemblies_part“，以中间的下划线连接两张表，并且按照字母顺序小在前字母顺序大的在后排列，如果创建”part_assemlies“表，则rails可能找不到该中间表。</p>

<p>实际上，rails是以string的”&lt;“操作来比较单词的，所以，如果不确定哪个表在前哪个在后，可以使用该操作符确定一下再创建表。比如有两张表”devil_x“和&#8221;devilx&#8221;（为什么会有人取这么奇怪的表名呢），那就需要自己来确认一下中间表的表名：</p>

<pre><code>irb(main):002:0&gt; 'devil_x'&lt;'devilx'
=&gt; true
</code></pre>

<p>所以，中间表的表名应该是“devil_x_devilx”。</p>

<p>最后，确认创建数据表：</p>

<pre><code>$ rake db:migrate
</code></pre>

<ol>
<li>修改model，添加关系</li>
</ol>


<p>在关系的两端都需要添加has_and_belongs_to_many。</p>

<figure class='code'><figcaption><span>assembly.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Assembly</span> <span class="o">&lt;</span><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_and_belongs_to_many</span> <span class="ss">:parts</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>part.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Part</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_and_belongs_to_many</span> <span class="ss">:assemblies</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>操作关系</li>
</ol>


<p>在n:n关系的两端都添加了如下方法：</p>

<pre><code>collection(force_reload=false)
collection&lt;&lt;(object, ...)
collection.delete(object, ...)
collection = objects
collection_singular_ids
collection_singular_ids = ids
collection.clear
collection.empty?
collection.size
collection.find(...)
collection.where(...)
collection.exists?(...)
collection.build(attributes = {})
collection.create(attributes = {})
</code></pre>

<p>可以看到，添加的方法和has_many关系添加的方法相同，所以就不再重复介绍使用方法。</p>

<ol>
<li>特殊多对多关系，多态</li>
</ol>


<p>还是以Picture,Employee,Product为例,Picture和Employee,Product都是多对多的关系，首先创建数据表。</p>

<pre><code>$ rails g model picture
$ rails g model picture_box  box_id:integer box_type:string picture_id:integer
$ rails g model employee
$ rails g model product
</code></pre>

<p>修改model：</p>

<figure class='code'><figcaption><span>product.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>   <span class="n">has_many</span> <span class="ss">:picture_boxes</span><span class="p">,</span> <span class="ss">:as</span><span class="o">=&gt;</span><span class="ss">:box</span>
</span><span class='line'>   <span class="n">has_many</span> <span class="ss">:pictures</span><span class="p">,</span><span class="ss">through</span><span class="p">:</span> <span class="ss">:picture_boxes</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>employee.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Employee</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>   <span class="n">has_many</span> <span class="ss">:picture_boxes</span><span class="p">,</span> <span class="ss">:as</span><span class="o">=&gt;</span><span class="ss">:box</span>
</span><span class='line'>   <span class="n">has_many</span> <span class="ss">:pictures</span><span class="p">,</span><span class="ss">through</span><span class="p">:</span> <span class="ss">:picture_boxes</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>picture.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Picture</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:picture_boxes</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:products</span><span class="p">,</span><span class="ss">through</span><span class="p">:</span> <span class="ss">:picture_boxes</span><span class="p">,</span> <span class="ss">source</span><span class="p">:</span> <span class="ss">:box</span><span class="p">,</span> <span class="n">source_type</span><span class="p">:</span> <span class="s1">&#39;Product&#39;</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:employee</span><span class="p">,</span><span class="ss">through</span><span class="p">:</span> <span class="ss">:picture_boxes</span><span class="p">,</span> <span class="ss">source</span><span class="p">:</span> <span class="ss">:box</span><span class="p">,</span> <span class="n">source_type</span><span class="p">:</span> <span class="s1">&#39;Employee&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>picture_box.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PictureBox</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:box</span><span class="p">,</span> <span class="ss">:polymorphic</span><span class="o">=&gt;</span><span class="kp">true</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:picture</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>所有拥有picture的model中，都在其has_many关系中添加了选项:as=>:box，而picture的model中has_many关系添加了:polymorphic=>true选项。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails ActiveRecord数据库关系1:1]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rails-activerecordshu-ju-ku-guan-xi-1-1/"/>
    <updated>2014-02-14T21:25:17+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rails-activerecordshu-ju-ku-guan-xi-1-1</id>
    <content type="html"><![CDATA[<p>如图所示，在demo数据库中有suppliers和accounts两张表。一个supplier有一个account，一个account属于一个supplier，是一个1:1关系。</p>

<p><img src="http://b.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=e9efbd7d0ef3d7ca08f63f73c224cf34/730e0cf3d7ca7bcb7b8b3d6cbc096b63f724a885.jpg?referer=c1b305f367380cd7bf0996dd089b&amp;x=.jpg" alt="1-1" /></p>

<!-- more -->


<ol>
<li><p>建立数据表</p>

<pre><code>  $ rails g model supplier name:string
  $ rails g model account supplier_id:integer account_number:string
  $ rake db:migrate
</code></pre></li>
<li><p>修改model，添加关系</p></li>
</ol>


<p>在这个1:1关系中，accounts拥有外键supplier_id，所以需要在account.rb中添加belongs_to关系，相对应在supplier.rb中添加has_one关系。注意rails的约定，用rails g命令创建model时使用单数形式（首字母大小写无所谓），得到的数据库的表名是小写的复数形式，model的类名是驼峰形式的单数形式，model文件名是小写单数形式。</p>

<figure class='code'><figcaption><span>account.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:supplier</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>supplier.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Supplier</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>    <span class="n">has_one</span> <span class="ss">:account</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于1:1关系，有几个常用的可选项：</p>

<p>:dependent: 对于has_one关系的一方（supplier)，可以添加:dependent选项为destroy, delete,nullify，destroy表示删除supplier会同时删除它拥有的account(包括内存对象和数据库记录)，delete表示删除supplier会删除拥有account的数据库记录但不调用其destroy销毁内存对象，nullify表示删除supplier会解除和account的关系，即仅将其拥有account中的外键置为NULL。</p>

<p>:inverse_of: 该选项成对出现，保证一对关系中的数据同步，避免出现下面的情况：</p>

<pre><code>s=Supplier.first
a=s.account
s.name==a.supplier.name #=&gt;true
s.name="new_name"
s.name==a.supplier.name #=&gt;false
</code></pre>

<p>所以，再次修改model：</p>

<figure class='code'><figcaption><span>account.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:supplier</span><span class="p">,</span> <span class="ss">:inverse_of</span><span class="o">=&gt;</span><span class="ss">:account</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>supplier.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Supplier</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>    <span class="n">has_one</span> <span class="ss">:account</span><span class="p">,</span> <span class="ss">:dependent</span><span class="o">=&gt;</span><span class="ss">:destroy</span><span class="p">,</span> <span class="ss">:inverse_of</span><span class="o">=&gt;</span><span class="ss">:supplier</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>关系操作</li>
</ol>


<p>在建立1:1关系后，关系的两端都自动添加了如下方法来创建关系：</p>

<pre><code>association(force_reload = false)
association = (associate)
build_association(attributes = {})
create_association(attributes = {})
</code></pre>

<p>即，在rails中可以这样使用：</p>

<pre><code>s = Supplier.first
a = s.account #获取关系
s.account = Account.find(11) #创建关系
#仅仅创建关系，这个acc并没有被保存
acc = s.build_account(account_number:"1234")
#这个新的acc被创建并保存
acc = s.create_account(account_number:"4589")
</code></pre>

<p>需要注意的是，对于association=()方法，在1:1关系的两端的工作是不一样的。</p>

<pre><code>#关系被自动保存到数据库
@supplier.account = @account
#关系保存在内存，除非现实调用save，否则关系不会保存到数据库
@account.supplier = @supplier #并未保存关系
@account.save #保存了二者的关系
</code></pre>

<p>这个问题对于1：n关系也同样存在，在1的一方建立关系会自动保存，在多的一方建立关系不会自动保存。对于什么时候应该使用save方法，什么时候不必使用，有一个好记的规则，如果model包含外键，那么在该model上调用association=()建立的关系需要save（如上例的account），反过来如果model不包含外键，则不需要（如上例的supplier）。</p>

<p>解除关系：</p>

<pre><code>@supplier.account = nil
@supplier.account.delete
</code></pre>

<p>在本例中，上述两种办法都可以解除关系，并且会删除account对象。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go学习笔记-类型与接口]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/goxue-xi-bi-ji-lei-xing-yu-jie-kou/"/>
    <updated>2014-02-14T18:27:36+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/goxue-xi-bi-ji-lei-xing-yu-jie-kou</id>
    <content type="html"><![CDATA[<p>如果说go语言的其他内容看起来和c/c++语言没什么太大的区别，那么它的接口设计一定会让人大吃一惊，是的，有时它真的让我产生我使用的是一种动态语言的幻觉。</p>

<!-- more -->


<h3>结构类型</h3>

<p>这里，还是和C语言很像的，定义结构：</p>

<pre><code>type Man struct {
     name string
     age int
}
</code></pre>

<p>声明结构变量及初始化：</p>

<pre><code>var m Man   //声明Man变量
m := new(Man)  //声明一个Man指针
m := Man{name:"jack",age:12} //声明并初始化 
m := Man{"jack",12}  //声明并初始化
</code></pre>

<h3>方法</h3>

<p>go语言为结构定义的函数称为方法，和面向对象的叫法是一样的。go语言的方法定义看起来非常前卫，方法即消息，所以方法定义先是说明方法(消息)接收者，然后是方法名及其参数。</p>

<pre><code>func (m *Man) Introduce() bool {
    fmt.Println("name: ",m.name)
    return true
}
</code></pre>

<p>调用方法使用了&#8221;.&ldquo;符号：</p>

<pre><code>m := Man{"Jack",12}
ok := m.Introduce()
</code></pre>

<p>利用结构的方法，我们甚至还能像ruby一样，为系统中预定类型打个猴子补丁，添加新的方法，只不过手段稍微曲线了一点，比如，下面代码为字符串(不是string类型)添加一个chomp方法来去掉字符串最后一个换行符：</p>

<pre><code>package main
import (
    "fmt"
    "strings"
)

type MyString string
func (str MyString) chomp() string {
    return strings.TrimRight(string(str),"\n")
}
func main() {
    str := "Hello world!\n"
    ms := MyString(str)
    fmt.Println(ms.chomp())   //输出 Hello world!
}
</code></pre>

<h3>方法代理</h3>

<p>其实google把这个特性叫做嵌入类型(Embedded type)，如果类型A包含一个类型B，通常在其他语言里我们称之为 A  has-a B，但在go里我们称之为A是一个B，这是因为B成为了A的成员，那么我们可以视为A也就拥有了B的功能，那么它也就是一个B了。那么方法代理的作用是什么呢？顾名思义，我们可以在A上直接调用B的方法，就好像A.B.b_method一样，举个例子：在 matrix里，neo是救世主，所以他具有（包含）了救世主的能力，所以我们直接发送fly的消息给neo，neo肯定是可以飞的，同样neo的前几代救世主可能不叫neo但我们直接告诉他fly，他们都是可以飞的，所以利用方法代理的确简捷直当：</p>

<pre><code>package main
import "fmt"
func main() {
    n := new(Neo)
    n.Fly()  //输出：The One can fly!
}

type Neo struct{
    TheOne
}
type TheOne struct{}

func (o *TheOne) Fly(){
    fmt.Println("The One can fly!")
}
</code></pre>

<p>在ruby语言中，有许多做这种方法代理的代码，而go语言的嵌入类型的表征和该特性竟是如此神似，嘿嘿</p>

<p>另外，大家觉得这个嵌入类型和OOP的继承很像，为什么不叫继承而叫方法代理呢？实际情况就是， Neo做的仅仅是将消息转发给TheOne，就算二者有相同的成员，但fly方法也只能看到TheOne的成员变量，所以叫方法代理更合适，大家可以写代码验证下。</p>

<h3>go style duck-type</h3>

<p>go风格的鸭子类型。个人觉得这是go语言里最cool的地方了，在静态语言里将动态语言的鸭子类型实现得如此风骚。go语言的接口就是为此而生的。</p>

<p>接口定义：</p>

<pre><code>type Duck interface {
     run()
     height() int
     gaga(word string)
}
</code></pre>

<p>Duck接口中仅包含了一系列的方法声明。</p>

<p>然后在方法参数中我们可以这样使用：</p>

<pre><code>func DuckRun(d Duck){
    d.run()
}
</code></pre>

<p>那么是不是我们需要去完成多个Duck接口的实现呢？NO。那样岂不是和java一样了。go语言的interface的唯一用处其实是为了满足编译器（唉，多少有点无奈），这样编译器在DuckRun函数入口会检查传递进来的对象是否含有Duck接口所包含的三个方法，如果符合定义，则通过编译。这样不就是鸭子类型吗？仅检查是否包含这些方法，而不管是否是某种类型，所以说go style的鸭子类型是很了不起的。</p>

<p>举个例子，人是有say说话的方法的，但其实对于某个需要say方法的函数中，我们可以给它传递一个地球对象，尽管地球什么话也不会说：</p>

<pre><code>package main
import "fmt"
func main() {
     m := Man{name:"Jack"}
     m.say()
     e := new(Earch)
     SaySth(e)
     SaySth(&amp;m)  //say()方法的接收者是一个指针变量，所以这里要用&amp;取地址
}
func SaySth(obj Object){
    obj.say()
}
type Object interface{
    say()
}
type Man struct{
    name string
}
type Earch struct{}

func (m *Man) say(){
    fmt.Println("Man says: I'm ",m.name)
}

func (e *Earch) say(){
    //do nothing
}
</code></pre>

<h3>空接口及类型</h3>

<p>空interface(interface{})不包含任何的method,正因为如此,所有的类型都实现了空interface。空interface对于描述起不到任何的作用(因为它不包含任何的method),但是空interface在我们需要存储任意
类型的数值的时候相当 有用,因为它可以存储任意类型的数值。它有点类似于C语言的void*类型。</p>

<pre><code>// 定义a为空接口
var a interface{}
var i int = 5
s := "Hello world"
// a可以存储任意类型的数值 a=i,a=s
</code></pre>

<p>一个函数把interface{}作为参数,那么他可以接受任意类型的值作为参数,如果一个函数返回interface{},那么也 就可以返回任意类型的值。</p>

<p>我们知道interface的变量里面可以存储任意类型的数值(该类型实现了interface)。那么我们怎么反向知道这个变量 里面实际保存了的是哪个类型的对象呢?可以使用Comma-ok断言</p>

<pre><code>value, ok = element.(T)
</code></pre>

<p>这里value就是变 量的值,ok是一个bool类型,element是interface变量,T是断言的类型。</p>

<p>如果element里面确实存储了T类型的数值,那么ok返回true,否则返回false。</p>

<p>此外，关于go语言中类型处理的要求更多时，就需要使用反射。Go语言实现了反射,所谓反射就是动态运行时的状态。我们一般用到的包是reflect包。使用reflect一般分成三步,下面简要的讲解一下:要去反射是一个类型的值(这些值都实现了空interface),首先需 要把它转化成reflect对象(reflect.Type或者reflect.Value,根据不同的情况调用不同的函数)。这两种获取方式如 下:</p>

<pre><code>t := reflect.TypeOf(i) //得到类型的元数据,通过t我们能获取类型定义里面的所有元素
v := reflect.ValueOf(i) //得到实际的值,通过v我们获取存储在里面的值,还可以去改变值
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go学习笔记-go routine]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/goxue-xi-bi-ji-go-routine/"/>
    <updated>2014-02-14T18:23:38+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/goxue-xi-bi-ji-go-routine</id>
    <content type="html"><![CDATA[<h2>Go routine indeed</h2>

<blockquote><p>本段结论引用自：goroutine背后的系统知识，让我了解为什么goroutine这么轻量级，以及其优势劣势。</p></blockquote>

<p>Go语言通过goroutine提供了目前为止所有(我所了解的)语言里对于并发编程的最清晰最直接的支持，Go语言的文档里对其特性也描述的非常全面甚至超过了，在这里，基于我们上面的系统知识介绍，列举一下goroutine的特性，算是小结：</p>

<p>(1) goroutine是Go语言运行库的功能，不是操作系统提供的功能，goroutine不是用线程实现的。具体可参见Go语言源码里的pkg/runtime/proc.c</p>

<p>(2) goroutine就是一段代码，一个函数入口，以及在堆上为其分配的一个堆栈。所以它非常廉价，我们可以很轻松的创建上万个goroutine，但它们并不是被操作系统所调度执行</p>

<p>(3) 除了被系统调用阻塞的线程外，Go运行库最多会启动$GOMAXPROCS个线程来运行goroutine</p>

<p>(4) goroutine是协作式调度的，如果goroutine会执行很长时间，而且不是通过等待读取或写入channel的数据来同步的话，就需要主动调用Gosched()来让出CPU</p>

<p>(5) 和所有其他并发框架里的协程一样，goroutine里所谓“无锁”的优点只在单线程下有效，如果$GOMAXPROCS > 1并且协程间需要通信，Go运行库会负责加锁保护数据，这也是为什么sieve.go这样的例子在多CPU多线程时反而更慢的原因</p>

<p>(6) Web等服务端程序要处理的请求从本质上来讲是并行处理的问题，每个请求基本独立，互不依赖，几乎没有数据交互，这不是一个并发编程的模型，而并发编程框架只是解决了其语义表述的复杂性，并不是从根本上提高处理的效率，也许是并发连接和并发编程的英文都是concurrent吧，很容易产生“并发编程框架和coroutine可以高效处理大量并发连接”的误解。</p>

<p>(7) Go语言运行库封装了异步IO，所以可以写出貌似并发数很多的服务端，可即使我们通过调整$GOMAXPROCS来充分利用多核CPU并行处理，其效率也不如我们利用IO事件驱动设计的、按照事务类型划分好合适比例的线程池。在响应时间上，协作式调度是硬伤。</p>

<p>(8) goroutine最大的价值是其实现了并发协程和实际并行执行的线程的映射以及动态扩展，随着其运行库的不断发展和完善，其性能一定会越来越好，尤其是在CPU核数越来越多的未来，终有一天我们会为了代码的简洁和可维护性而放弃那一点点性能的差别。</p>

<!-- more -->


<h3>启动一个go routine</h3>

<p>go关键字+函数名即可启动一个go routine:</p>

<pre><code>package main
import (
    "fmt"
    "time"
)
func p() {
     for i := 0; i &lt; 100; i++ {
           fmt.Println(i)
           time.Sleep(time.Second * 1)
       } 
}
func main() {
     go p()
     var input string
     fmt.Scanln(&amp;input)
     fmt.Println("End")
}
</code></pre>

<h3>goroutine通信：Channel</h3>

<p>go routine使用channel来进行routine间的通信：</p>

<pre><code>package main
import (
    "fmt"
    "time"
    "math/rand"
)
func sell(c chan int) {
    for {
    num := &lt;- c
    fmt.Println("Sell ",num," bread")
}
}
func produce(c chan int){
    for {
    num := rand.Intn(10)
    t := time.Duration(num)
    fmt.Println("Product ",num," bread")
    c &lt;- num
    time.Sleep(time.Second* t)
    }
}
func main() {
    var c chan int = make(chan int)
     go sell(c)
     go produce(c)
     var input string
     fmt.Scanln(&amp;input)
     fmt.Println("End")
}
//输出结果：
Product  1  bread
Sell  1  bread
Product  7  bread
Sell  7  bread
Product  7  bread
Sell  7  bread
Product  9  bread
Sell  9  bread
</code></pre>

<p>默认channel是双向的，在函数入口也可以定义为单向：</p>

<pre><code>func sell(c &lt;-chan int)  //只能从通道取出
func produce(c chan&lt;- int) //通道只能放入
</code></pre>

<p>select语句用于在多个channel中选择已经ready的通道，如：</p>

<pre><code>select {
case msg1 := &lt;- c1:
     fmt.Println("Message 1", msg1)
case msg2 := &lt;- c2:
     fmt.Println("Message 2", msg2)
case &lt;- time.After(time.Second):
     fmt.Println("timeout")
default:
     fmt.Println("nothing ready")
}
</code></pre>

<p>time.After会在指定时间后创建一个匿名通道，用来进行等待超时。如果所有channel都没有准备妥当，则立即执行default块。</p>

<p>在make channel时指定第二个参数可以创建一个缓冲通道，类似其他高级语言中的定长队列：</p>

<pre><code>c := make(chan int, 1)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go学习笔记-函数和包]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/goxue-xi-bi-ji-han-shu-he-bao/"/>
    <updated>2014-02-14T18:15:26+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/goxue-xi-bi-ji-han-shu-he-bao</id>
    <content type="html"><![CDATA[<h3>函数定义</h3>

<p>go语言中使用func关键字定义函数，如main函数的定义：</p>

<pre><code>func main() {
     fmt.Println("main function")
}
</code></pre>

<p>定义一个具有参数和返回值的函数：</p>

<pre><code>func sum(a int,b int) int {
    return a+b
}
</code></pre>

<!-- more -->


<h3>多值返回</h3>

<p>go语言的函数可以有多个返回值，它是真正的多值返回，这个特性让ruby之父都有些艳羡呢（ruby的多值实际上是返回的列表）。</p>

<pre><code>func sum(a int,b int) (int,bool){
    s := a+b
    t := true
    return s,t
}
</code></pre>

<p>调用函数时，可以这样获取多个值：</p>

<pre><code>m,n := sum(1,2)
//如果，不需要全部的返回值，可以用_来替代
m,_ := sum(1,2)
</code></pre>

<p>多值返回还有一个很cool的特性，如果返回值使用了命名参数，那么函数最后可以直接使用空的return语句，go函数会自动寻找匹配返回值的变量返回：</p>

<pre><code>func sum(a int,b int) (s int,t bool){
    s = a+b
    t = true
    return 
}
</code></pre>

<h3>闭包</h3>

<p>go语言另一个很cool的特性就是它支持了闭包，虽然这在众多的动态语言中已经被玩坏了，不过go语言明确对它提出了支持，这仍旧是令人十分激动的。</p>

<pre><code>func main() {
     x := 0
     increment := func() int {
           x++
return x }
     fmt.Println(increment())
     fmt.Println(increment())
}
</code></pre>

<h3>defer</h3>

<p>go语言的defer延迟执行是一个很有意思的特性，它将defer后的函数推迟到退出函数的最后一刻才执行：</p>

<pre><code>func main() {
    defer second()
    first() 
}
</code></pre>

<p>main函数里执行的真正顺序是first()，然后才是 second()，defer保证其后的函数会最后执行，甚至在发生运行时异常后，也会保证执行。</p>

<pre><code>package main
import "fmt"
func main() {
     defer func() {
           str := recover()
           fmt.Println(str)
     }()
     panic("PANIC")
}
</code></pre>

<h3>指针</h3>

<p>go的指针和c语言的指针用法非常类似，不再赘述。另外go还提供了另一种创建指针的方式，new关键字，它返回对应类型的地址：</p>

<pre><code>func one(xPtr *int) {
     *xPtr = 1
}
func main() {
     xPtr := new(int)
     one(xPtr)
     fmt.Println(*xPtr) // x is 1
}
</code></pre>

<h3>go保留函数</h3>

<blockquote><p>本节内容来自：Go Web编程</p>

<p>Go里面有两个保留的函数:init函数(能够应用于所有的package)和main函数(只能应用于package main)。 这两个函数在定义时不能有任何的参数和返回值。虽然一个package里面可以写任意多个init函数,但这无论是对 于可读性还是以后的可维护性来说,我们都强烈建议用户在一个package中每个文件只写一个init函数。</p>

<p>Go程序会自动调用init()和main(),所以你不需要在任何地方调用这两个函数。每个package中的init函数都是可选的,但package main就必须包含一个main函数。</p>

<p>程序的初始化和执行都起始于main包。如果main包还导入了其它的包,那么就会在编译时将它们依次导入。有时一 个包会被多个包同时导入,那么它只会被导入一次(例如很多包可能都会用到fmt包,但它只会被导入一次,因为没 有必要导入多次)。</p></blockquote>

<h4>包的引入</h4>

<p>我们在写Go代码的时候经常用到import这个命令用来导入包文件,而我们经常看到的方式参考如下:</p>

<pre><code>import(
   "fmt"
)
</code></pre>

<p>然后我们代码里面可以通过如下的方式调用</p>

<pre><code>fmt.Println("hello world")
</code></pre>

<p>上面这个fmt是Go语言的标准库,其实是去goroot下去加载该模块,当然Go的import还支持如下两种方式来加载自己写的模块:</p>

<ol>
<li><p>相对路径</p>

<pre><code> import “./model”   //当前文件同一目录的model目录,但是不建议这种方式来import
</code></pre></li>
<li><p>绝对路径</p>

<pre><code> import “shorturl/model”   //加载$GOPATH/src/shorturl/model模块
</code></pre></li>
</ol>


<p>上面展示了一些import常用的几种方式,但是还有一些特殊的import,让很多新手很费解,下面我们来一一讲解一下 到底是怎么一回事</p>

<ol>
<li>点操作</li>
</ol>


<p>我们有时候会看到如下的方式导入包</p>

<pre><code>import(
   . "fmt"
)
</code></pre>

<p>这个点操作的含义就是这个包导入之后在你调用这个包的函数时,你可以省略前缀的包名,也就是前面你调用的<code>fmt.Println("hello world")</code>可以省略的写成<code>Println("hello world")</code></p>

<ol>
<li>别名操作</li>
</ol>


<p>别名操作顾名思义我们可以把包命名成另一个我们用起来容易记忆的名字</p>

<pre><code>import(
   f "fmt"
)
</code></pre>

<p>别名操作的话调用包函数时前缀变成了我们的前缀,即 f.Println(&ldquo;hello world&rdquo;)</p>

<ol>
<li>_操作</li>
</ol>


<p>这个操作经常是让很多人费解的一个操作符,请看下面这个import</p>

<pre><code>import (
     "database/sql"
     _ "github.com/ziutek/mymysql/godrv"
)
</code></pre>

<p>_操作其实是引入该包,而不直接使用包里面的函数,而是调用了该包里面的init函数</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[shell字符串处理]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/shellzi-fu-chuan-chu-li/"/>
    <updated>2014-02-14T18:10:30+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/shellzi-fu-chuan-chu-li</id>
    <content type="html"><![CDATA[<h3>1.获取字符串长度</h3>

<pre><code>${#string}
</code></pre>

<p>&ndash;</p>

<pre><code>[jason@localhost ~]$ str="hello,world"
[jason@localhost ~]$ echo ${#str}
11
</code></pre>

<h3>2.获取子串</h3>

<pre><code>${string:position}
${string:position:length}
$(string:(-postion)) 如果使用负数，表示从右开始计数，注意负数必须使用括号
</code></pre>

<p>&ndash;</p>

<pre><code>[jason@localhost ~]$ str=ABCDEFGHIJKLMN
[jason@localhost ~]$ echo ${str:1}
BCDEFGHIJKLMN
[jason@localhost ~]$ echo ${str:1:2}
BC
[jason@localhost ~]$ echo ${str:(-2)}
MN
</code></pre>

<!-- more -->


<h3>3.子串切除</h3>

<pre><code>${string#substring} 从左向右切除最短匹配的子串
${stirng##substring} 从左向右切除最长匹配的子串
${string%substring} 从右向左切除最短匹配的子串
${stirng%%substring} 
</code></pre>

<h3>4.字符串正则提取</h3>

<pre><code>echo $string | grep -oE "regexpression”

#awk的match方法利用RSTART和RLENGTH分别保存匹配的起点(从1开始)和匹配到的长度,RSTART同时也是match方法的返回值，如果没找到则RSTART==0,RLENGHT==-1
echo $string | awk '{ match($0,"reg"); print substr(RSTART,RLENGTH)}'
</code></pre>

<p>&ndash;</p>

<pre><code>[jason@localhost ~]$ str="I am 12 years old"
[jason@localhost ~]$ echo $str | grep -Eo '[0-9]+'
12
[jason@localhost ~]$ str="I am 12 years old"
[jason@localhost ~]$ echo $str | awk '{ if(match($0,"[0-9]+")){ print substr($0,RSTART,RLENGTH) } }'
12
</code></pre>

<h3>5.字符串正则替换</h3>

<pre><code>echo $string | sed -r 's/regexpr/replacement'
</code></pre>

<p>&ndash;</p>

<pre><code>[jason@localhost ~]$ str="I am 12 years old" 
[jason@localhost ~]$ echo $str | sed -r  "s/ am/'m/"
I'm 12 years old
</code></pre>

<h3>6.分割字符串</h3>

<pre><code>awk
</code></pre>

<p>&ndash;</p>

<pre><code>[jason@localhost ~]$ str="I_am_12_years_old, and you?"
[jason@localhost ~]$ echo $str | awk -F '_' '{print $3}'
12
[jason@localhost ~]$ echo $str | awk  '{split($1,a,"_");print a[3]}'
12
</code></pre>

<h3>7. 获取索引</h3>

<pre><code>awk '{print match($0,"substring")}'
</code></pre>

<p>&ndash;</p>

<pre><code>[jason@localhost ~]$ str="I_am_12_years_old, and you?"
[jason@localhost ~]$ echo $str | awk '{print match($0,"[0-9]+")}'
6
</code></pre>

<p>注意这个索引是从1开始的</p>

<h3>8.sed分组</h3>

<p>sed的分组是很好玩的，在替换模式中，“&amp;”代表前面匹配的全部字符串，而反斜杠加数字表示分组。</p>

<pre><code>[jason@localhost ~]$ str="name:jack;age:12"
[jason@localhost ~]$ echo $str | sed -r 's/name:[^;]+/[&amp;]/'
[name:jack];age:12
[jason@localhost ~]$ echo $str | sed -r 's/name:([^;]+)/--\1--/'
--jack--;age:12
</code></pre>

<h3>9.awk专题</h3>

<p><strong>常用字符串处理函数</strong></p>

<pre><code>sub(reg,replacement,string)
gsub(reg,replacement,string)
</code></pre>

<p>将string中匹配正则表达式reg的字符串（全部）替换为replacement</p>

<pre><code>[jason@localhost ~]$ str="name:jack;age:12"
[jason@localhost ~]$ echo $str | awk '{gsub(/a/,"A",$0);print $0}'      
nAme:jAck;Age:12
</code></pre>

<p>&ndash;</p>

<pre><code>index(substring,string) #返回子字符串substring在字符串string中的位置
length(string) #获取字符串的长度
match(string,reg) #获取匹配reg得到的子串在字符串中的位置
split(string,array,separator) #将字符串按分隔符separator分割到array数组中，返回值为数组长度
sprintf("format",expression) #和c语言的sprintf类似
printf("format",expression) #和c语言的printf类似
substr(string,position,length)  #获取子字符串
tolower(string)
toupper(string)
</code></pre>

<p><strong>awk的常见控制语法</strong></p>

<pre><code>exit #退出awk执行
next #跳转到命令块首，并开始下一行数据读入
NF #列数
NR #行号
FS #分隔符
FILENAME #文件名
</code></pre>

<p><strong>定义函数</strong></p>

<p>在awk中还可以定义函数：</p>

<pre><code>awk 'function sum(a,b){
    print "Computing..."
    return a+b
}BEGIN{ print sum(1,2) }' -
#写个二分搜索
awk 'function bsearch(element,arr,low,high){
    while(low&lt;=high){
        mid=int((low+high)/2)
        if(arr[mid]==element)
            return mid
        else if(arr[mid]&lt;element)
            low=mid+1
        else
            high=mid-1
    }
    return -1
}
BEGIN{ arr[1]="a";arr[2]="b";print bsearch("a",arr,1,2)}' -
</code></pre>

<p><strong>给awk传递shell变量值</strong></p>

<p>方法一：<code>awk '{action}' name1=val1 name2=val2 file</code>，变量值无法在<code>BEGIN</code>中获得</p>

<pre><code>$ var="SHELL"
$ awk 'BEGIN{print a}{print a}END{print a}' a=$var file
#输出

SHELL
</code></pre>

<p>方法二：<code>awk -v name=value '{action}' file</code>，变量在三种块中都可以获得</p>

<pre><code>$ var="SHELL"
$ awk -v a=$var 'BEGIN{print a}{print a}END{print a}' file
#输出
SHELL
SHELL
SHELL
</code></pre>

<p>P.S.awk获取环境变量</p>

<pre><code>$ awk 'BEGIN{print ENVIRON["LANG"]}' -
en_US
</code></pre>

<p>P.S.给awk传递数组，可以先将数组转化为字符串再作为参数传递，在awk内部再用<code>split</code>函数还原为数组</p>

<p><strong>awk中调用shell命令</strong></p>

<p>awk中调用shell命令，使用<code>system()</code>函数，被引号括起来的内容会直接发送给shell，而没有括起来的部分被当做awk当中的变量替换</p>

<pre><code>$ awk 'BEGIN{a="AWK";system("echo "a)}' -
AWK
</code></pre>

<p>如果在awk中调用系统命令且希望获取命令的输出可以这样，例如要执行<code>echo</code>命令：</p>

<pre><code>$ awk 'BEGIN{cmd="echo hello"; cmd|getline x; print x}' -
hello
</code></pre>

<p>最好是将命令先写到变量如cmd，然后再管道到getline，否则有时可能获取不到输出。</p>

<p><strong>awk的正则表达式</strong></p>

<p>awk中支持的正则表达式是ERES,它包含下列特殊符号：</p>

<ul>
<li><strong>+</strong>, 指定如果一个或多个字符或扩展正则表达式的具体值（在 +（加号）前）在这个字符串中，则字符串匹配。</li>
<li><strong>?</strong>,    指定如果零个或一个字符或扩展正则表达式的具体值（在 ?（问号）之前）在字符串中，则字符串匹配</li>
<li><strong>|</strong> , 指定如果以 |（垂直线）隔开的字符串的任何一个在字符串中，则字符串匹配。</li>
<li><strong>( )</strong>,  在正则表达式中将字符串组合在一起。</li>
<li><strong>{m}</strong>,  指定如果正好有 m 个模式的具体值位于字符串中，则字符串匹配。</li>
<li><strong>{m,}</strong>, 指定如果至少 m 个模式的具体值在字符串中，则字符串匹配</li>
<li><strong>{m, n}</strong>,   指定如果 m 和 n 之间（包含的 m 和 n）个模式的具体值在字符串中（其中m &lt;= n），则字符串匹配。</li>
<li><strong>[String]</strong>, 指定正则表达式与方括号内 String 变量指定的任何字符匹配。</li>
<li><strong>[^ String]</strong>,   在 [ ]（方括号）和在指定字符串开头的 ^ (插入记号) 指明正则表达式与方括号内的任何字符不匹配。</li>
<li><strong>~,!~</strong>, 表示指定变量与正则表达式匹配（代字号）或不匹配（代字号、感叹号）的条件语句。</li>
<li><strong>^</strong>,    指定字段或记录的开头。</li>
<li><strong>$</strong>,    指定字段或记录的末尾。</li>
<li><strong>.</strong>, （句号）   表示除了在空白末尾的终端换行字符以外的任何一个字符。</li>
<li><strong>*</strong>（星号）    表示零个或更多的任意字符。</li>
<li><strong>\</strong> (反斜杠)    转义字符</li>
</ul>


<p>对竖线符号<code>|</code>补充两句：</p>

<pre><code>#匹配的内容是good或bad，是将两个整体来匹配
good|bad
#匹配的内容是以d结尾的单词，该单词要么以goo开头要么以ba开头
(goo|ba)d
</code></pre>

<p>上面两种竖线匹配结果是一样的，但是匹配的方式不一样，<code>()</code>改变了<code>|</code>的作用域，有时可能导致匹配错误，需要注意。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[code snippets]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/code-snippets/"/>
    <updated>2014-02-14T18:08:28+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/code-snippets</id>
    <content type="html"><![CDATA[<h3>ruby文件utf-8编码</h3>

<pre><code># -*- coding: UTF-8 -*-
</code></pre>

<h3>退出ssh登录后继续执行命令</h3>

<p>如果long_run_cmd是一个长时间执行的命令，而我们又想在退出ssh后不至于中断该命令：</p>

<pre><code>nohup long_run_cmd &amp;
</code></pre>

<!-- more -->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rake-ruby's make]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rake-rubys-make/"/>
    <updated>2014-02-14T17:49:14+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rake-rubys-make</id>
    <content type="html"><![CDATA[<p>Rake，顾名思义，就是Ruby的Make工具。</p>

<h2>Rake的特性</h2>

<p>Rakefile就是rake版本的makefile文件，它使用的就是标准的ruby语法。不需要编辑XML文件，也不需要记忆古怪的makefile语法。</p>

<ul>
<li>可以定义任务（task），并为任务定义依赖。</li>
<li>rake支持利用规则模式来合成隐式任务。</li>
<li>灵活的文件列表，可以像列表一样操作。</li>
<li>预置的库使得编写rakefile变得更加简单。</li>
<li>支持并行执行多个任务。</li>
</ul>


<p>所以说，rakefile文件没有特殊的格式，仅仅是一个包含ruby代码的文件，不过，仍然有一些关于rakefile的约定，遵循这些约定，使得rake能够更好地处理任务和行为。</p>

<!-- more -->


<h2>任务(Task)</h2>

<p>Task是rakefile的最重要组成部分。task拥有自己的名称（通常使用符号或字符串命名），一个依赖列表，以及一系列动作（在task的块中定义）。</p>

<h3>简单任务</h3>

<p>使用task方法定义任务。task方法接受单个参数作为任务名称。</p>

<pre><code>task :name
</code></pre>

<h3>依赖任务</h3>

<p>依赖以列表的形式紧跟任务名。</p>

<pre><code>task :name =&gt; [:prereq1, :prereq2]
</code></pre>

<h3>任务动作</h3>

<p>在task方法块中定义动作，块中可以使用任意ruby代码。块中的Ruby代码也可以使用块的参数引用任务对象本身。</p>

<pre><code>task :name =&gt; [:prereq1, :prereq2] do |t|
  # actions (may reference t)
end
</code></pre>

<h3>任务的多次定义</h3>

<p>一个任务可以被多次定义。每次定义都能增加新的规定到已经存在的任务。该特性使得可以在不同的rakefile文件中定义的任务组合成一个完整任务。例如，下面的任务定义和上面的代码定义了完全相同的任务。</p>

<pre><code>task :name
task :name =&gt; [:prereq1]
task :name =&gt; [:prereq2]
task :name do |t|
  # actions
end
</code></pre>

<h3>文件任务File Task</h3>

<p>实际情况中可能遇到在文件中创建其他文件的情况。如果文件已经存在，文件任务就会跳过该文件。使用方法file（而不是task）可以定义文件任务，此外文件任务名通常使用字符串而不是符号来定义。下面的任务会创建一个可执行程序prog，它依赖于另两个文件a.o和b.o（创建a.o和b.o的任务未写出）。</p>

<pre><code>file "prog" =&gt; ["a.o", "b.o"] do |t|
  sh "cc -o #{t.name} #{t.prerequisites.join(' ')}"
end
</code></pre>

<h3>目录任务Directory Task</h3>

<p>创建目录也是很常见的任务，这是由directory方法来完成的，它是使用文件任务创建目录的一个快捷方式。如：</p>

<pre><code>directory "testdata/examples/doc"
</code></pre>

<p>等价于：</p>

<pre><code>file "testdata"              do |t| mkdir t.name end
file "testdata/examples"     do |t| mkdir t.name end
file "testdata/examples/doc" do |t| mkdir t.name end
</code></pre>

<p>目录任务并不接受依赖和动作定义。但是，可以在定义完成后追加依赖或动作。如：</p>

<pre><code>directory "testdata"
file "testdata" =&gt; ["otherdata"]
file "testdata" do
  cp Dir["standard_data/*.data"], "testdata"
end
</code></pre>

<h3>并行依赖任务Task with Parallel Prerequisites</h3>

<p>Rake可以让依赖任务并行执行：</p>

<pre><code>multitask :copy_files =&gt; [:copy_src, :copy_doc, :copy_bin] do
  puts "All Copies Complete"
end
</code></pre>

<p>copy_files是一个普通任务，它的动作在所有依赖任务完成后才会执行。但copy_src, copy_doc, copy_bin这三个依赖任务会并行执行，它们各自在自己的ruby线程中执行。如果这三个任务还依赖于某个共同任务pre_for_copy，那么只有当pre_for_copy任务完成后这个三个任务才开始并行执行。</p>

<p>另外，Rake内部的数据结构是线程安全的，所以当执行并行任务时不必考虑同步。但如果使用了某些用户自定义的数据，就可能需要考虑线程安全的问题了。</p>

<h3>带参数的任务</h3>

<p>直接传递参数给需要的任务。如，有个release任务需要版本号作为参数：</p>

<pre><code>rake release[0.8.2]
</code></pre>

<p>版本号字符串0.8.2就会传递给release任务。多个参数可以以逗号分隔的列表的形式传递给任务：</p>

<pre><code>rake name[john,doe]
</code></pre>

<p>注意，rake任务名及其参数是以单个命令行参数传递给rake的，即中间不允许有空格。如果任务名和参数包含空格，就必须进行使用引号：</p>

<pre><code>rake "name[billy bob, smith]"
</code></pre>

<h3>任务参数和环境参数</h3>

<p>任务参数也可以从环境参数获得。如：</p>

<pre><code>rake release[0.8.2]
</code></pre>

<p>也可以写成：</p>

<pre><code>RELEASE_VERSION=0.8.2 rake release
</code></pre>

<p>或：</p>

<pre><code>rake release RELEASE_VERSION=0.8.2
</code></pre>

<p>注意：</p>

<ul>
<li>环境参数名要么完全匹配任务定义中的参数，要么和参数全部大写匹配；</li>
<li>rake命令中声明使用的环境参数不影响系统中的环境变量。</li>
</ul>


<h3>带参数任务的定义</h3>

<p>必须声明接收参数的任务才能接受参数。定义带参数的任务十分简单：</p>

<pre><code>task :name, [:first_name, :last_name]
</code></pre>

<p>name是任务名，后面的列表是name任务需要接收的参数。利用task块的第二个参数可以在动作中访问传递来的参数：</p>

<pre><code>task :name, [:first_name, :last_name] do |t, args|
  puts "First name is #{args.first_name}"
  puts "Last  name is #{args.last_name}"
end
</code></pre>

<p>块中的t总是绑定为当前任务对象，第二个参数args就是传递进来的参数对象。如果传递了额外的参数，则多余的参数会被忽略；如果缺少参数，那么任务首先会从环境变量中获取，如果没有找到则将参数赋值为nil。</p>

<p>也可以为参数指定默认值：</p>

<pre><code>task :name, [:first_name, :last_name] do |t, args|
  args.with_defaults(:first_name =&gt; "John", :last_name =&gt; "Dough")
  puts "First name is #{args.first_name}"
  puts "Last  name is #{args.last_name}"
end
</code></pre>

<h3>任务接受参数并包含依赖任务</h3>

<p>如果任务需要接受参数，并且还依赖于其他任务，则可以这样定义：</p>

<pre><code>task :name, [:first_name, :last_name] =&gt; [:pre_name] do |t, args|
  args.with_defaults(:first_name =&gt; "John", :last_name =&gt; "Dough")
  puts "First name is #{args.first_name}"
  puts "Last  name is #{args.last_name}"
end
</code></pre>

<h3>接收额外参数的任务</h3>

<pre><code>task :email, [:message] do |t, args|
  mail = Mail.new(args.message)
  recipients = args.extras
  recipients.each do |target|
    mail.send_to(recipents)
  end
end
</code></pre>

<p>此外，可以使用to_a方法将所有参数按顺序转换为列表，包括命名参数和额外参数。</p>

<h3>以编程方式访问任务</h3>

<p>有时我们需要在rakefile中操作任务本身，使用Rake::Task的:[ ]操作符查找任务。例如，:doit任务打印“DONE”，而:dont任务会查找doit任务并且清除其所有依赖和动作。</p>

<pre><code>task :doit do
  puts "DONE"
end

task :dont do
  Rake::Task[:doit].clear
end
</code></pre>

<p>执行任务：</p>

<pre><code>$ rake doit
(in /Users/jim/working/git/rake/x)
DONE
$ rake dont doit
(in /Users/jim/working/git/rake/x)
$
</code></pre>

<p>编程方式处理任务再一次使用了元编程的能力，所以，小心使用该魔法。</p>

<h2>规则</h2>

<p>如果一个文件依赖于别的任务，但却没有为它定义文件任务，rake会尝试查找rakefile定义的规则去合成一个任务。</p>

<p>若我们要调用任务&#8221;mycode.o&#8221;，但却没有为它定义文件任务，但rakefile文件却含有如下的规则：</p>

<pre><code>rule '.o' =&gt; ['.c'] do |t|
  sh "cc #{t.source} -c -o #{t.name}"
end
</code></pre>

<p>该规则会合成所有以“.o”结尾的方法。它依赖于以“.c”结尾的源文件。如果rake能找到一个名为&#8221;mycode.c&#8221;的文件，它就会创建一个任务将mycode.c编译为mycode.o。如果mycode.c文件不存在，rake会递归尝试合成其他规则。</p>

<p>如果任务是由规则合成而来的，那么任务的source属性就被设置为匹配的源文件，这样在规则的动作中就可硬
引用该源文件了。</p>

<h3>高级规则</h3>

<p>规则模式支持正则表达式。此外，   proc块可以用来计算源文件的名称。下面的规则定义和上面的规则是等价的：</p>

<pre><code>rule( /\.o$/ =&gt; [
  proc {|task_name| task_name.sub(/\.[^.]+$/, '.c') }
]) do |t|
  sh "cc #{t.source} -c -o #{t.name}"
end
</code></pre>

<p>下面的任务用于java的编译：</p>

<pre><code>rule '.class' =&gt; [
  proc { |tn| tn.sub(/\.class$/, '.java').sub(/^classes\//, 'src/') }
] do |t|
  java_compile(t.source, t.name)
end
</code></pre>

<p>注意：java_compile是一个假想的调用java编译器的方法。</p>

<h2>注释</h2>

<p>在rakefile中同样可以使用ruby的标准注释（以#开头），但如果希望使用rake -T来显示任务描述，就需要
使用desc命令来描述任务。如：</p>

<pre><code>desc "Create a distribution package"
task :package =&gt; [ ... ] do ... end
</code></pre>

<p>rake -T（或者rake -tasks）会列出所有带描述的任务。如果使用desc来描述任务，就能非常方便的看到rakefile的主要任务。注：-T参数只能列出带desc的任务，如果想列出所有任务，需要使用-P或-prereqs。</p>

<h2>命名空间</h2>

<p>命名空间是用来解决大程序rakefile可能发生的命名冲突问题。</p>

<pre><code>namespace "main" do
  task :build do
    # Build the main program
  end
end

namespace "samples" do
  task :build do
    # Build the sample programs
  end
end

task :build =&gt; ["main:build", "samples:build"]
</code></pre>

<p>使用 命名空间:任务名 来引用任务，如“main:build”。但注意，在task定义内部获取的任务名是不带命名空间的。</p>

<h3>文件任务</h3>

<p>文件任务和目录任务是不使用命名空间的，因为他们代表真实文件系统中的文件，所以是不会冲突的，故而将他们放置在命名空间中是没有意义的。</p>

<h3>命名空间解析</h3>

<p>当查找任务时，首先在当前命名空间寻找，如果失败则到父命名空间寻找。</p>

<p>“rake”是隐式定义的命名空间，它指代顶级命名空间。</p>

<p>如果一个任务名以“^”打头，那么命名解析会从父级命名空间开始解析。允许使用多个“^”符号。</p>

<pre><code>task :run

namespace "one" do
  task :run

  namespace "two" do
    task :run

    # :run            =&gt; "one:two:run"
    # "two:run"       =&gt; "one:two:run"
    # "one:two:run"   =&gt; "one:two:run"
    # "one:run"       =&gt; "one:run"
    # "^run"          =&gt; "one:run"
    # "^^run"         =&gt; "rake:run" (the top level task)
    # "rake:run"      =&gt; "rake:run" (the top level task)
  end

  # :run       =&gt; "one:run"
  # "two:run"  =&gt; "one:two:run"
  # "^run"     =&gt; "rake:run"
end

# :run           =&gt; "rake:run"
# "one:run"      =&gt; "one:run"
# "one:two:run"  =&gt; "one:two:run"
</code></pre>

<h3>文件列表FileList</h3>

<p>文件列表基本等同于字符串列表，但建议使用文件列表。下面是创建文件列表的示例：</p>

<pre><code>fl = FileList['file1.rb', file2.rb']
</code></pre>

<p>使用通配符：</p>

<pre><code>fl = FileList['*.rb']
</code></pre>

<h3>do/end和{ }</h3>

<p>建议在任务定义时使用do/end，不要使用{ }。</p>

<h3>Rakefile路径</h3>

<p>当在终端键入rake命令时，rake会在当前目录下查找rakefile，如果没有则在父目录查找直到找到为止。</p>

<h3>多个rakefile</h3>

<p>并不是所有任务都要在一个单独的rakefile文件中定义，额外的任务可以在应用根目录下的rakelib文件夹中定义，额外的rakefile以&#8221;.rake&#8221;结尾。rails应用的额外rakefile就放置在lib/tasks目录中。</p>

<p>附：如果不在rails环境中使用分离的子rake文件，则可以在根目录的rakefile中这样引用子目录tasks中的子rakefile：</p>

<pre><code>Dir.glob('tasks/*.rake').each { |r| import r }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[天道酬勤-在追逐梦想的路上]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/tian-dao-chou-qin-zai-zhui-zhu-meng-xiang-de-lu-shang/"/>
    <updated>2014-02-14T17:43:24+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/tian-dao-chou-qin-zai-zhui-zhu-meng-xiang-de-lu-shang</id>
    <content type="html"><![CDATA[<p>还记得大概一年前，也是在CSDN博客上读过一篇文章，拜读某个大牛描述了他为心仪的公司准备的过程，当时觉得很受触动，于是在博客下留言自勉，还记得他回复的话说：跨专业，更要提早准备。而现在，作为一个机械专业的学生，一路过关斩将拿到百度offer，除了激动之余，我能清晰的感觉到，自己的梦想画卷才刚刚展开。</p>

<!-- more -->


<p>说起来，我一开始完全没想到自己会干上IT这一行。大学学的是机械，但老实说，我对机械一点都没兴趣，中国应试教育的结果就是，我能高分考入大学，但却完全不知道自己想做什么，未来，仍然是一片迷茫。在大二的时候，学了C++编程的课程，但也没能勾起对编程的爱好。回想起来，我很庆幸自己没有读计算机专业，否则以中国老师的讲课方式，我现在应当是极度厌恶计算机的。不过我有一个好习惯，喜欢读书。记得有一个下午，我闲来无事去书店，抓起了一本Java的书，是个韩国人写的，随手翻翻竟然比国字教材将得有趣多了。就是这本书，唤醒了我对编程的热爱。</p>

<p>从那以后，我就不停读了很多计算机类的书籍，但都是完全凭着爱好去看的，没有任何人给我指导，零零散散不成体系，比起计算机系的学生基础比较薄弱，而且各类知识也没能构成网络。不过好的一点就是，我完全自主去深入，虽然走了很多弯路，但自始至终都保留了一份完整的兴趣，所以，这又是上天给我的偏爱。</p>

<p>在读完本科时，我已经完全沉迷进计算机的世界里。那时我决定去考计算机研究生，于是把计算机系所有的基础课程都学习了一遍。后来虽然放弃了，但我却借这个机会，将计算机里的基础课程全部深入了一遍，至少达到了研究生考试的水平，所以，不得不说，上天帮助了我不少啊。说到我为什么放弃考研，主要因为两个原因。第一，我极度厌恶政治，所以，我从5月份开始复习到10月份放弃考研，数据结构这类书都翻了两三遍了，但政治却碰也没碰，最后放弃考研，很大部分是我翻开政治书就想自残；第二，我遇到了可以算是我的贵人的老师（话说回来，高中也有一个老师也改变了我的命运，也是难得的贵人），在机械学院有一位老师同样沉迷于计算机，在linux界还颇有名气。所以我争取了保研资格，成为他的学生。在争取成为他的学生的过程中，过程还是比较曲折的，但我就不一一细表了。但是，就是在导师的教导下，我的编程能力得到了质的飞跃。可以说，之前我对计算机程序设计就如同是在森林茂密的树丛里转悠，一直没有意识到见木不见林的可怕，但是他不停引导我爬到高山上，将程序世界里的名山一一指点给我，这时，我觉得自己突然明白了编程的意义，同时也在山顶看到了自己的方向。所以，我的研究生导师在我的梦想道路上是极为重要的一个人，看起来放弃考研而继续留在机械是个失败，其实，我仍然非常感恩，这次上天仍然眷顾了我。</p>

<p>在研究生阶段，我不再迷茫，对于编程对于人生我都有了非常清晰的认识和规划，知道了自己是什么样的人，此时再去看外面的世界，什么事情应该争取什么事情应该舍弃，就再明白不过了。这个时候我开始涉猎大量的程序设计艺术类的书籍，更加注重思考的过程，阅读的深度也逐渐增加，对编程里面的为什么也挖掘得更多了。回过头来还是得感谢我的导师，没有他的首肯，我是买不了那么多好书的。</p>

<p>后来在师兄的帮助下，我进入了一家有名的IT外企实习，说起来，真的很多人帮助了很多。在这段经历中幸运的是，我没有像其他人那样实习打打酱油，感谢主管的信任，我直接接手了开发类的工作。这段实习经历使我受益良多，也认识的很多牛人。</p>

<p>最后，在找工作时，我拿到了想要的offer，如果要分享什么笔经面经，我真的没什么好说的。所有的努力都在平时，在面试过程中，我仅仅是把自己原原本本展示出来而已。最后通过了，说明自己的能力还是被认可的。但是他们给了我这次展示的机会，没有像MS在简历阶段因为专业就剔除我们这些非计算机专业的，我还是很感激的。</p>

<p>总的来说，我觉得自己整个求索的过程都是非常幸运的，一路上遇到了那么多人在非常关键的时刻都指引和帮助了我，所以我多少有点诚惶诚恐，不敢有些许辜负。但是还有最重要的一个人，我的宝贝，她一直支持我相信我，我在一无所有的时候（虽然现在也是，但是现在有自信）将梦想的蓝图描绘给她看时，她就比我自己还有笃信，所以，不能让她的相信落空。</p>

<p>好了，如果非要在文章最后分享点什么的话，那我就说说自己的一些感悟吧。人一定要会自省，佛语观心以观天下，知道自己想要什么知道自己能做什么，没有目标的人生是惨淡的，尤其是男人，要懂得聆听内心的声音，它决定了人生的方向和高度。</p>

<p>过去的都过去了，丢弃过去的包袱，现在是一个新的开始，一切，也才刚刚开始。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby之周期性任务]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rubyzhi-zhou-qi-xing-ren-wu/"/>
    <updated>2014-02-14T17:38:41+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rubyzhi-zhou-qi-xing-ren-wu</id>
    <content type="html"><![CDATA[<h3>1.前言</h3>

<p>无论是用ruby做系统管理，还是用rails做web开发，都可能遇到周期性任务，它们按照一定时间周期（1小时，2天&hellip;&hellip;）持续地触发。在ruby中，我认为一次性任务使用sidekiq来完成是非常方便的，而周期性的任务就需要用到whenever，sidetiq，clockwork等等gem了。</p>

<!-- more -->


<h3>2.whenever</h3>

<p>首先，whenever是基于linux的cron服务的，所以，在windows平台上没有直接的方法使用该gem。whenever严格来说应该算一个cron的翻译器，将ruby代码翻译为cron脚本，从而将周期性任务转交给cron实际去完成。对于精通cron的shell程序员来说可能不值一提，但对rubyist却不是。首先，我们可以使用ruby语言来书写任务代码，在ruby层面上控制代码，避免了和一些shell脚本的切换；另外，cron命令很强大，但我总是记不住它的命令参数，为了避免一遍一遍去man它的手册，还是ruby语法比较亲民。</p>

<p>首先，安装whenever：</p>

<pre><code>$ gem install whenever
</code></pre>

<p>然后切换到任务编写文件夹project下，保证该文件夹下有一个config文件夹。如果是在rails项目中建立
whenever任务，则config文件夹已经存在了。</p>

<pre><code>$ cd /project
$ wheneverize .
</code></pre>

<p>whenverize命令会在config文件夹下创建schedule.rb文件，我们的任务代码需要在该文件中定义。下面的是schedule.rb文件示例：</p>

<pre><code>every 3.hours do
  runner "MyModel.some_process"
  rake "my:rake:task"
  command "/usr/bin/my_great_command"
end

every 1.day, :at =&gt; '4:30 am' do
  runner "MyModel.task_to_run_at_four_thirty_in_the_morning"
end

every :hour do # 常用的简写有： :hour, :day, :month, :year, :reboot
  runner "SomeModel.ladeeda"
end

every :sunday, :at =&gt; '12pm' do # 你可以使用星期几或周末或工作日： :weekend, :weekday
  runner "Task.do_something_great"
end

every '0 0 27-31 * *' do
  command "echo 'you can use raw cron syntax too'"
end

# run this task only on servers with the :app role in Capistrano
# see Capistrano roles section below
every :day, :at =&gt; '12:20am', :roles =&gt; [:app] do
  rake "app_server:task"
end
</code></pre>

<p>如示例代码，whenever默认定义了三种任务类型：runner, rake, command，我们也可以定义自己的任务，比如，下面的代码定义了脱离rails环境，独立执行ruby代码的类型：</p>

<pre><code>job_type :ruby, "cd :path &amp;&amp; /usr/bin/ruby ':task'.rb"

every :hour do
  ruby 'have_a_rest'
end
</code></pre>

<p>该示例描述了：每个小时会执行一次当前文件夹下的have_a_rest.rb脚本。
下面看看怎么将任务写入cron服务。</p>

<pre><code>$ whenever   #不带参数的whenever会显示转换程cron任务的代码，不写入cron任务表
$ whenever -w #写入cron任务表，开始执行
$ whenever -c #取消任务
</code></pre>

<p>如果要查看cron任务表，也可以使用linux的命令列出所有cron任务：</p>

<pre><code>$ crontab -l
</code></pre>

<h3>3.sidetiq</h3>

<p>sidetiq是sidekiq的亲兄弟，如果在rails项目中使用sidekiq来处理后台任务，那么就用sidetiq来交付周期性任务也显得比较自然。</p>

<p>安装sidetiq：</p>

<pre><code>$ [sudo] gem install sidetiq
</code></pre>

<p>定义周期性任务：</p>

<pre><code>class MyWorker
  include Sidekiq::Worker
  include Sidetiq::Schedulable

  recurrence { daily }

  def perform
    # do stuff ...
  end
end
</code></pre>

<p>sidetiq和sidekiq一样，依赖于redis消息来处理消息。当rails项目启动后，这些周期性任务会自动加载执行。</p>

<h3>3.1 sidetiq-cron</h3>

<p>现在可以使用sidetiq-cron，和sidekiq配合更紧密，使用更加简单。</p>

<p><a href="https://github.com/ondrejbartas/sidekiq-cron">sidetiq-cron</a></p>

<h3>4.clockwork</h3>

<p>clockwork和sidetiq一样，也不必依赖于cron，可以适应”跨平台“要求。下面是代码示例(clock.rb)：</p>

<pre><code>require 'clockwork'
include Clockwork

handler do |job|
  puts "Running #{job}"
end

every(10.seconds, 'frequent.job')
every(3.minutes, 'less.frequent.job')
every(1.hour, 'hourly.job')

every(1.day, 'midnight.job', :at =&gt; '00:00')
</code></pre>

<p>启动任务：</p>

<pre><code>$ clockwork clock.rb
Starting clock for 4 events: [ frequent.job less.frequent.job hourly.job midnight.job ]
Triggering frequent.job
</code></pre>

<p>如果要带上rails环境，就在任务文件加入：</p>

<pre><code>require './config/boot'
require './config/environment'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学算法并非和语言无关]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/xue-suan-fa-bing-fei-he-yu-yan-wu-guan/"/>
    <updated>2014-02-14T17:35:43+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/xue-suan-fa-bing-fei-he-yu-yan-wu-guan</id>
    <content type="html"><![CDATA[<h3>1. 写在前面</h3>

<p>算法这个东西，本来不是什么特别复杂的东西，就是为了解决某个问题提出的一个解决方案，说白了，就是一种思路。基本上，所有的算法书上都默认选用了伪代码来表达算法，因为这样可以脱离具体的语言，让算法学习者能够直面算法的本质，理解算法的核心，然后使用自己常用的语言来重新表达，写出能够运行的代码。实际上，在我接触到ruby这类高表达力的语言前，我也这么认为。虽然我能够理解很多算法的核心本质，但往往在实际用C或者java来实现时，总是被一些数组索引等细枝末节的问题所折磨，我通常会告诉自己，嗷，我还没有深刻领悟它，再去看看算法图述和伪码。</p>

<p>但是，今天我想说，我错了。也许，有的语言能够更好地表述算法，表述算法的好的语言应该能够以最接近人类语言的方式表达出来，而且基本就能够运行出结果。</p>

<!-- more -->


<h3>2. 基本快速排序</h3>

<p>下面是关于快速排序的official描述：
快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p>

<p>步骤为：</p>

<p>从数列中挑出一个元素，称为 &ldquo;基准&#8221;（pivot），
重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。
递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p>

<p>简单地说就是，按数组中某个元素为标准，将数组分为大于该数和不大于该数两个组，然后递归地分别处理这两个组，知道所有元素有序。</p>

<p>那么，我们看看算法导论是怎么用伪码来表述该算法的：</p>

<pre><code>QUICKSORT(A,p,r)
  if p&lt;r
    then q &lt;- PARTITION(A,p,r)
      QUICKSORT(A,p,q-1)
      QUICKSORT(A,q+1,r)

PARTITION(A,p,r)
  x&lt;-A[r]
  i &lt;- p-1
  for j &lt;- p to r-1
    do if A[j]&lt;=x
      then i &lt;- i+1
        exchange A[i] &lt;-&gt; A[j]
  exchange A[i+1] &lt;-&gt; A[r]
  return i+1
</code></pre>

<p>看看吧，不算空行一共14行代码，这甚至还没有包括没有实现的辅助函数exchange呢。反正看算法导论时，我看到这样一堆伪代码时，我都要先去喝杯水，然后深吸一口气，告诉自己，好吧一口气读完吧。</p>

<p>接着，我希望用我爱的ruby重新实现一遍：</p>

<pre><code>def qs(list)
    if list.size&lt;=1
        list
    else
        left,right=list[0..-2].partition{|x| x&lt;=list.last}
        qs(left)+[list.last]+qs(right)
    end
end
</code></pre>

<p>总共8行代码，实际上还可以缩减到5行（可以参考维基百科的ruby实现）。几乎比伪代码节约了一半长度，而且算法表述非常清晰。更重要的是，这是一段可以直接运行的代码，这不是很鼓舞人心吗？</p>

<pre><code>irb(main):056:0&gt; list=[9, 4, 6, 3, 7, 11, 5, 6]
=&gt; [9, 4, 6, 3, 7, 11, 5, 6]
irb(main):066:0&gt; qs list
=&gt; [3, 4, 5, 6, 6, 7, 9, 11]
</code></pre>

<p>最终，如果真的希望使用这段代码，那么就在ruby特有语言基础上再走一步，当然这步和算法表述无关了，只是为了在ruby中更为漂亮地使用该实现。</p>

<pre><code>class Array
    def quick_sort
        if self.size&lt;=1
            self
        else
            left,right=self[0..-2].partition{|x| x&lt;=self.last}
            left.quick_sort+[self.last]+right.quick_sort
        end
    end
end
</code></pre>

<p>使用示例：</p>

<pre><code>irb(main):069:0&gt; list.quick_sort
=&gt; [3, 4, 5, 6, 6, 7, 9, 11]
</code></pre>

<h3>3. 关于UE的一点感悟</h3>

<p>是的，用户体验。各种和计算机打交道的语言也要有好的用户体验，程序员就是编程语言的用户。有时候程序bug很多，真的有可能是语言不好。各种算法书上的伪码真的很让人恶心，所以，伪码也并不简捷。我相信，最终，计算机编程语言会进化到一种，那就是人类语言，那时，就再也没有程序员了，或者，所有人都是程序员。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[状态转移]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/zhuang-tai-zhuan-yi/"/>
    <updated>2014-02-14T17:30:39+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/zhuang-tai-zhuan-yi</id>
    <content type="html"><![CDATA[<h3>0. 引言</h3>

<p>昨天遇到一个问题，就是关于对象状态转移的问题，我姑且这样命名吧。简要描述一下就是：对于一个人，他有进食，帮助他人，恋爱等功能，但是这些功能是有先后顺序的，对于刚出生的人，他要先学会进食，然后随着他的成长，他逐渐学会帮助他人，在这个过程中他学会了爱与被爱，当他遇到一个合适的女孩，他就坠入了爱河。整个过程反映到程序上就是，必须按照下面的顺序调用方法：</p>

<pre><code>man=Human.new
man.feed
man.fall_in_love   # Error
man.help_people
man.fall_in_love
</code></pre>

<p>如果你调用某个功能时没有完成前面的事情，就像上面的例子这样，一个人尚未学会帮助他人的人，我们是不希望他去恋爱的，这样一个不懂得互助互爱的人怎么可能珍惜自己的爱人呢？</p>

<p>所以，对象状态转移就是：某个对象随着状态转移获得调用新方法的能力或权限，未达到某个状态前无法调用该状态下的方法。</p>

<!-- more -->


<h3>1. 目标</h3>

<p>仔细想想，其实这类问题出现还是比较普遍的，比如一个浏览器处理类，它必须要在登陆操作后才允许执行修改个人信息。所以，有必要为了这类问题思考一个解决方法。那么，首先要明确的是，我想要怎样实现这样一个功能。为每个类去实现一个这样的状态转移显然不是ruby way。所以，我觉得对于我自己，我希望这样处理一下我的Human类之后，我就能像引言中那样直接使用状态转移提供的功能：</p>

<pre><code>class Human
    include State
    def feed
        puts"feed myself"
    end
    def protect_env
        puts "protect environment"
    end
    def help_people
        puts "help other people"
    end
    def fall_in_love
        puts "love someone"
    end
    define_chain :feed,[:protect_env,:help_people],:fall_in_love
end
</code></pre>

<p>如代码所示，我希望在我使用的类中包含一个State模块，然后用define_chain定义一个方法链，那么方法链中的方法，必须要在前一个方法调用过之后才可以被调用，否则就会抛出异常。另外，在定义方法链的define_chain中，我希望可以包含列表，列表中的方法需要至少被调用一种才能执行方法链的后续调用。</p>

<p>好吧，这样看起来，似乎是像模像样的ruby解决方法了，那么，下面就看看如何来实现这个State模块。</p>

<h3>2. 环绕别名</h3>

<p>首先，我们肯定需要在define_chain方法上做文章。该方法实际完成状态转移方法链的定义，那么问题的关键是：我知道了这一串方法，怎么样保证在调用下一个方法前，明确上一个方法是否被调用了呢？很显然，我们需要一个变量来保存状态，在每次调用方法前检查是否能够调用当前方法，如果能够，则在调用完成之后更新状态。那么怎么做呢？总不能要求编写Human类的程序员在每个方法调用前先检查一下状态，在调用完成后再更新状态吧，那显然是会被鄙视的。实际上，作为一个ruby程序员，每个人都需要会一点点魔法，这次的魔法就是环绕别名。</p>

<p>假如，对于某个方法名method，我们可以这样环绕起来：</p>

<pre><code>define_method "#{method}_in_chain" do |*params,&amp;block|
    validate_state_for method.to_sym
    self.send "#{method}_out_chain",*params,&amp;block
    update_state_for method.to_sym
    end
alias_method "#{method}_out_chain",method
alias_method method,"#{method}_in_chain"
</code></pre>

<p>这部分代码就是define_chain方法的主体，这样，在定义了状态转移方法链之后，直接调用在方法链中的方法，就会自动使用validate_state_for方法检查方法是否可以被调用，在完成调用后使用update_state_for方法更新状态。</p>

<p>然后我们去实现validate_state_for和update_state_for方法，这两个方法实现很简单，后面再说，我们的State模块看起来基本是这样的：</p>

<pre><code>module State
    def define_chain(*args)
    end

    def validate_state_for(method)
    end

    def update_state_for(method)
    end
end
</code></pre>

<p>好吧，问题的最关键部分解决了，但还是有一些细节，不要小看细节，它决定成败。</p>

<h3>3. 类扩展混入</h3>

<p>显然，我们的define_chain方法必须作为类方法存在，这很简单，可以使用扩展混入。即</p>

<pre><code>class Human
  extend State
end
</code></pre>

<p>但问题来了，我只希望define_chain被作为类方法混入，而validate_state_for和update_state_for方法仍然需要作为类实例方法。那么直接混入肯定就不行了，这时就需要使用ruby另一个魔法了——类扩展混入，将部分方法作为类方法混入，部分方法作为实例方法混入。这种魔法使用了included钩子。</p>

<pre><code>module State
    def self.included(base)
        base.extend StateMaker
    end
    module StateMaker
        def define_chain(*args)
        end
    end
    def validate_state_for(method)
    end
    def update_state_for(method)
    end
end
</code></pre>

<p>现在，在使用下面的方法混入，就获得了我想要的效果。我能够用类方法define_chain定义状态方法链，也能够实例化Human对象调用它的validate_state_for实例方法。</p>

<pre><code>class Human
  include State
end
</code></pre>

<h3>4. 最后一步，实现</h3>

<p>我们的State状态转移模块的结构就是这样了，那么下面就需要具体实现了。</p>

<p>状态判断逻辑非常简单：按照状态方法链的定义，从左到右从0开始编号，而对象状态也从0开始，仅到当前状态大于等于方法编号时，才允许调用该方法。</p>

<p>状态更新逻辑：仅当状态方法编号等于当前对象状态时，才更新状态，即将状态值加1。</p>

<p>这就是State模块的实例方法实现：</p>

<pre><code>module State
    def validate_state_for(method)
        raise "State is too low to execute #{method}" unless min_state_for(method) &lt;= state
    end
    def min_state_for(method)
        self.class.state_chain.find_index{|k,v| v.include? method}
    end
    def update_state_for(method)
        @_state_from_object_monitor_+=1 if min_state_for(method) == state
    end
    def reset_state
        @_state_from_object_monitor_=0
    end
    def state
        @_state_from_object_monitor_=0 unless @_state_from_object_monitor_
        @_state_from_object_monitor_
    end
end
</code></pre>

<p>该模块还提供了reset_state方法重置状态值。另外，min_state_for方法用于获取调用某个方法的最低状态值，该方法中实际上也使用了ruby一点点小魔法，类实例变量，state_chain是一个类方法，它获取了是我们定义的状态转移方法链的一个hash表，该表是一个类实例变量，这个hash具体结构马上就会看到。</p>

<p>下面就是State::StateMaker的的define_chain方法的实现：</p>

<pre><code>module State
    module StateMaker
        def define_chain(*args)
            args.map{|x| x}
            args.flatten.each do |method|
                define_method "#{method}_in_chain" do |*params,&amp;block|
                    validate_state_for method.to_sym
                    self.send "#{method}_out_chain",*params,&amp;block
                    update_state_for method.to_sym
                    nil
                end
                alias_method "#{method}_out_chain",method
                alias_method method,"#{method}_in_chain"
            end
            @chain_methods=args.each_with_index.inject({}) do |memo,(v,index)|
                memo[index]=v.class==Symbol ? [v] : v
                memo
            end
            nil
        end

        def state_chain
            @chain_methods
        end
    end
end
</code></pre>

<p>define_chain方法的前半部分使用环绕别名来包裹特定方法，后半部分就是生成方法链的hash表，生成的hash表被保存在实例变量@chain_methods中，由于define_chain被作为类方法混入，所以它自然也成为了混入类的类实例变量，注意，尽量多使用类实例变量而不要使用类变量。而state_chain方法也同时混入成为类方法，该方法纯粹就是用来获取类实例变量chain_methods的。如1.目标中的方法链生成的hash表的结构是：</p>

<pre><code>{0=&gt;[:feed], 1=&gt;[:protect_env, :help_people], 2=&gt;[:fall_in_love]}
</code></pre>

<h3>5. 结尾</h3>

<p>现在，整个状态转移方法调用就完成了，可以像引言中那样去使用了。不过，这仅仅是个开始，ruby的原则就是DRY，还有细节的地方需要完善修改，比如用ruby2.0就可以更漂亮地完成环绕别名等等。</p>

<h3>6. 附录</h3>

<p>下面是State模块完整代码，供参考。</p>

<pre><code>module State
    def self.included(base)
        base.extend StateMaker
    end
    module StateMaker
        def define_chain(*args)
            args.map{|x| x}
            args.flatten.each do |method|
                define_method "#{method}_in_chain" do |*params,&amp;block|
                    validate_state_for method.to_sym
                    result=self.send "#{method}_out_chain",*params,&amp;block
                    update_state_for method.to_sym
                    result
                end
                alias_method "#{method}_out_chain",method
                alias_method method,"#{method}_in_chain"
            end
            @chain_methods=args.each_with_index.inject({}) do |memo,(v,index)|
                memo[index]=v.class==Symbol ? [v] : v
                memo
            end
            nil
        end
        def state_chain
            @chain_methods
        end
    end
    def validate_state_for(method)
        raise "State is too low to execute #{method}" unless min_state_for(method) &lt;= state
    end
    def min_state_for(method)
        self.class.state_chain.find_index{|k,v| v.include? method}
    end
    def update_state_for(method)
        @_state_from_object_monitor_+=1 if min_state_for(method) == state
    end
    def reset_state
        @_state_from_object_monitor_=0
    end
    def state
        @_state_from_object_monitor_=0 unless @_state_from_object_monitor_
        @_state_from_object_monitor_
    end
end
</code></pre>

<h3>7. 后记</h3>

<p>现在回来看这篇文章，感觉那时的思考和视野的局限。其实我需要的是一个状态机，而那时我还不知道这个名词，自己闭门思考实现的这个东西，状态的转移非常局限，无法适应灵活的需求，而且使用方法链的方式本身也局限了进一步升级。同时，<code>alias_method</code>这种技术也可以使用2.0的<code>prepend</code>关键字来更优美地完成。</p>

<p>Anyway,这篇文章还是留着，写这个后记，也说明进步了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识jruby之入门]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/chu-shi-jrubyzhi-ru-men/"/>
    <updated>2014-02-14T17:24:21+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/chu-shi-jrubyzhi-ru-men</id>
    <content type="html"><![CDATA[<p>首先，Jruby的官方站点是<a href="http://jruby.org/">http://jruby.org/</a> ，最详尽的资料都在那里。至于为什么选择JRuby，官方站点上列举了诸如jvm的普及以及性能等等优点，但我想最简单的回答就是，我喜欢用ruby编程，而大多数不再充电的老板还固守着java，对他们来说，相对于ruby，java这个词本身先产生了50%的安全感，所以这可能是比较贴近现实的选择。不过我今天想去倒腾倒腾这个东西，则完全是为了了解ruby的方方面面。</p>

<!-- more -->


<h3>1. 下载安装</h3>

<p>首先在官方下载页下载安装最新的jruby，这部分内容还是老老实实去下载页照着做，话说配置开发环境不是每个程序员的必修课吗？不过放心，jruby安装起来很方便的，安装完成后，查看jruby版本，验证是否正确安装：</p>

<pre><code>C:\&gt;jruby --version
jruby 1.7.4 (1.9.3p392) 2013-05-16 2390d3b on Java HotSpot(TM) 64-Bit Server VM 1.6.0_38-b05 [Windows 7-amd64]
</code></pre>

<h3>2. 在jruby中使用rake,gem等</h3>

<p>在jruby下使用这些命令需要前缀一个jruby -S命令，如：</p>

<pre><code>jruby -S gem list --local
jruby -S gem install rails mongrel jdbc-mysql activerecord-jdbcmysql-adapter
jruby -S rails new blog 
cd blog
jruby -S rake -T
jruby -S rake db:create
jruby -S rake db:migrate
</code></pre>

<p>另外，jruby的控制台进入命令时jirb而不是irb：</p>

<pre><code>C:\&gt;jirb
irb(main):001:0&gt;
</code></pre>

<h3>3. 在jruby中调用java类</h3>

<p>例如，在C:\DEMO文件夹下有一个java类文件JavaMan.java：</p>

<pre><code>package example;

public class JavaMan {

  public JavaMan() {
  }

  public void hello() {
      System.out.println("Hello, I am a Java man!");
  }
  public void hello(String name){
     System.out.println("Hello "+name+", I am a Java man!");
  }

}
</code></pre>

<p>然后在命令行中编译该java类文件：</p>

<pre><code>C:\DEMO&gt;javac JavaMan.java -d .
</code></pre>

<p>在C:\DEMO下建立ruby文件demo.rb：</p>

<pre><code>require 'java'
java_import "example.JavaMan" #导入java类JavaMan
j=JavaMan.new
j.hello
j.hello "Jason"
</code></pre>

<p>在命令行中执行该ruby脚本使用jruby命令：</p>

<pre><code>C:\DEMO&gt;jruby demo.rb
Hello, I am a Java man!
Hello Jason, I am a Java man!
</code></pre>

<p>也可以直接在jirb中调试ruby程序：</p>

<pre><code>C:\DEMO&gt;jirb
irb(main):001:0&gt; java_import 'example.JavaMan'
=&gt; [Java::Example::JavaMan]
irb(main):002:0&gt; JavaMan.new.hello "Jason"
Hello Jason, I am a Java man!
=&gt; nil
</code></pre>

<h3>4. 在jruby中实现java接口</h3>

<p>若有一个java接口类：</p>

<pre><code>package example;
public interface JavaDog{
    public void runs();
}
</code></pre>

<p>那么可以在ruby代码中实现该接口：</p>

<pre><code>require 'java'
java_import "example.JavaDog" #导入java接口

class FastDog
    include JavaDog
    def runs
        puts "I am running fast!"
    end
end

FastDog.new.runs
</code></pre>

<p>运行结果：</p>

<pre><code>C:\DEMO&gt;jruby demo.rb
I am running fast!
</code></pre>

<h3>5. 在jruby中调用jar中的类</h3>

<p>若在C:\DEMO\some.jar中包含了一个java bean， example.Person，该类包含了四个属性name,age,sex,country，除了country外其他三个属性都有setter和getter，另外该Person bean还有一个方法getProfile()获取简历。</p>

<pre><code>require 'java'
require 'some.jar'
java_import "example.Person"

p=Person.new
p.name="Jason"
p.age=10
p.sex="Male"
begin
    p.country="China"
rescue NoMethodError =&gt; e
    puts "No country setter in Person bean"
end
puts p.getProfile
</code></pre>

<p>运行结果：</p>

<pre><code>C:\DEMO&gt;jruby demo.rb
No country setter in Person bean
Name:Jason Sex:Male Age:10
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby常用的迭代操作]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rubychang-yong-de-die-dai-cao-zuo/"/>
    <updated>2014-02-14T17:18:15+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rubychang-yong-de-die-dai-cao-zuo</id>
    <content type="html"><![CDATA[<p>ruby是一门可以用sexy来形容的语言，下面就列举几个sexy的迭代操作。</p>

<!-- more -->


<h3>1. each简单迭代</h3>

<p>each是ruby中非常常见的遍历操作，她是年老色衰的for直接替代品。如果需要索引，则可以使用each_with_index方法。</p>

<pre><code>words=%w(good god ruby sexy girl run)
words.each do |word|
    puts word
end
</code></pre>

<h3>2. find 查找单个元素</h3>

<p>查找到第一个符合条件的元素，find。</p>

<pre><code>words=%w(good god ruby sexy girl run)
words.find do |word|
    word.start_with? 'r'
end
=&gt; "ruby"
</code></pre>

<h3>3. select 选取元素</h3>

<p>选取所有符合条件的元素，select。</p>

<pre><code>words=%w(good god ruby sexy girl run)
words.select do |word|
    word.start_with? 'r'
end
=&gt; ["ruby", "run"]
</code></pre>

<h3>4. reject 剔除元素</h3>

<p>剔除部分符合条件的元素，reject。</p>

<pre><code>words=%w(good god ruby sexy girl run)
words.reject do |word|
    word.start_with? 'r'
end
=&gt; ["good", "god", "sexy", "girl"]
</code></pre>

<h3>5. map 转换元素</h3>

<p>转换每个元素，map。</p>

<pre><code>words=%w(good god ruby sexy girl run)
words.map do |word|
    word.capitalize
end
=&gt; ["Good", "God", "Ruby", "Sexy", "Girl", "Run"]
</code></pre>

<h3>6. uniq 唯一化</h3>

<p>剔除相等的元素，uniq。</p>

<pre><code>words=%w(good god ruby sexy girl run run god Run)
words.uniq
=&gt; ["good", "god", "ruby", "sexy", "girl", "run", "Run"]
</code></pre>

<p>也可以在块中指定比较的方法，自定义比较的对象。</p>

<pre><code>words=%w(good god ruby sexy girl run run god Run)
words.uniq do |w|
    w.downcase
end
=&gt; ["good", "god", "ruby", "sexy", "girl", "run"]
</code></pre>

<h3>7. group_by 分组元素</h3>

<p>分组元素，这个真的很sexy，group_by。</p>

<p>按首字母分组：</p>

<pre><code>words=%w(good god ruby sexy girl Run)
words.group_by do |w|
    w.capitalize[0]
end
=&gt; {"G"=&gt;["good", "god", "girl"], "R"=&gt;["ruby", "Run"], "S"=&gt;["sexy"]}
</code></pre>

<h3>8. sort_by 排序元素</h3>

<p>排序元素，sort_by。</p>

<pre><code>words=%w(good god ruby sexy girl Run)
words.sort_by do |w|
    w.length
end
=&gt; ["Run", "god", "sexy", "ruby", "girl", "good"]
</code></pre>

<h3>9. zip 组合元素</h3>

<p>组合遍历元素，zip。</p>

<pre><code>words=%w(good god ruby sexy girl Run)
numbers=(11..16)
symbols=%w(+ - * / = %)
words.zip(symbols,numbers)
=&gt; [["good", "+", 11], ["god", "-", 12], ["ruby", "*", 13], ["sexy", "/", 14], ["girl", "=", 15], ["Run", "%", 16]]
</code></pre>

<h3>10. inject 累积元素</h3>

<p>累积元素求值，这是我最喜欢的一个，inject。</p>

<pre><code>numbers=(1..10)
numbers.inject do |memo,value|
    memo=memo+value
end
=&gt; 55
</code></pre>

<p>这是比较简单的，举个难点的，如果需要将hash表 {a:1,b:2,c:3,d:1} 的键和值相互调换，即键变值，值变键，并且重复的值变成键后将原本的键变成列表形式的值。</p>

<pre><code>tbl={a:1,b:2,c:3,d:1}
tbl.inject({}) do |memo,(k,v)|
    memo[v]||=[]
    memo[v]&lt;&lt;k
    memo
end
=&gt; {1=&gt;[:a, :d], 2=&gt;[:b], 3=&gt;[:c]}
</code></pre>

<h3>11. partition 分组操作</h3>

<p>将元素分为符合条件和不符合条件的两个组。</p>

<pre><code>(1..6).partition { |v| v.even? }  #=&gt; [[2, 4, 6], [1, 3, 5]]
</code></pre>

<h3>12. flatten扁平化列表</h3>

<p>将多级列表合并为一个单独列表，以上例的列表为例。</p>

<pre><code>[[2, 4, 6], [1, 3, 5]].flatten  #=&gt;[ 2 , 4 , 6 , 1 , 3 , 5 ]
</code></pre>

<h3>13. rotate旋转列表</h3>

<pre><code>a = [ "a", "b", "c", "d" ]
a.rotate         #=&gt; ["b", "c", "d", "a"]
a                #=&gt; ["a", "b", "c", "d"]
a.rotate(2)      #=&gt; ["c", "d", "a", "b"]
a.rotate(-3)     #=&gt; ["b", "c", "d", "a"]
</code></pre>

<h3>14. join将列表转换为一个字符串</h3>

<pre><code>[ "a", "b", "c" ].join        #=&gt; "abc"
[ "a", "b", "c" ].join("-")   #=&gt; "a-b-c"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby webdriver]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/ruby-webdriver/"/>
    <updated>2014-02-14T17:13:12+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/ruby-webdriver</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>Watir Webdriver是用ruby操作webdriver的很酷的方式，通常被用来做一些rails app的测试。</p>

<!-- more -->


<h3>Example</h3>

<p>下面的示例是一个网站的登录示例：</p>

<pre><code>require 'watir-webdriver'
b = Watir::Browser.new
b.driver.manage.window.maximize
b.goto "http://xx.com"
b.link(:text =&gt; 'Create Account').click
b.text_field(:id =&gt; 'signupEmail').focus!.set "some@example.com"
b.text_field(:id =&gt; 'signupPassword').focus!.set "1234"
b.text_field(:id =&gt; 'passwordConfirm').focus!.set "1234"
b.checkbox(:id=&gt; 'notifyOptin').focus!.set true
b.button(:id =&gt; 'signupSubmit').focus!.click
# or you can use:
# b.send_keys :enter
b.text.include? 'Welcome to XX website'
b.close
</code></pre>

<p>上面的示例中，很多text_field或button等元素使用了focus！方法，这是因为webdriver无法和浏览器中未显示的元素交互，否则会发生异常，当你拥有一个很长的列表在当前浏览器窗口中无法显示时，如果去和未显示的列表项交互就会发生这种异常。解决办法是调用元素的focus方法，focus方法会将该元素滚动到视野中，但focus方法默认返回nil，如果调用该方法多次就不是一个hacky way。所以需要为webdriver打个补丁，添加一个focus！方法：</p>

<pre><code>class Watir::Element
    def focus!
        self.focus unless self.visible?
        self
    end
end
</code></pre>

<p>有的网站登录会使用一个frame来呈现登录窗口，webdriver可以很方便地和frame交互：</p>

<pre><code>b.frame(:id =&gt; "content_ifr").text_field(:id=&gt;'signinEmail').set "s@gmail.com"
b.frame(:id =&gt; "content_ifr").text_field(:id=&gt;'signinEmail').set "234"
</code></pre>

<p>更多html元素的交互请看elements。
发送特定的按键：</p>

<pre><code>b.send_keys :enter
b.element.send_keys [:control, 'a'], :backspace
b.element.click(:shift, :control)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails为paperclip上传文件添加访问控制]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/railswei-paperclipshang-chuan-wen-jian-tian-jia-fang-wen-kong-zhi/"/>
    <updated>2014-02-14T15:21:11+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/railswei-paperclipshang-chuan-wen-jian-tian-jia-fang-wen-kong-zhi</id>
    <content type="html"><![CDATA[<h3>0 前言</h3>

<p>由paperclip上传的文件默认是放在rails项目的public目录下的，也就是说，只要能得到该文件的URL，就可以直接访问/下载该文件，如果要对该文件添加访问控制，就需要更改paperclip的默认上传位置。</p>

<!-- more -->


<h3>1 更改paperclip默认的上传位置</h3>

<p>若有一个story类，每个story有一个封面cover，该cover是一张图片，就可以这样更改model定义：</p>

<pre><code>class Story &lt; ActiveRecord::Base
  has_attached_file :cover,
  :styles=&gt;{:small=&gt;"32x32"}, 
  :path =&gt; ":rails_root/paperclip/:class/:attachment/:id/:style/:filename",
  :url =&gt; "/paperclip/:class/:attachment/:id/:style/:filename"
end
</code></pre>

<p>要同时修改path和url，url是相对于rails工程而言，被rails app用来获取图片渲染页面；而path是相对于rails app服务器而言，在整个宿主文件系统中的路径。必须同时修改path和url。</p>

<p>这里，将保存paperclip的上传文件的目录设置为rails工程根目录下的paperclip目录。</p>

<h3>2 添加controller</h3>

<p>在routes.rb中添加路由：</p>

<pre><code>get "/paperclip/:class/:attachment/:id/:style/:filename",to:"assets#show"
</code></pre>

<p>添加assets_controller.rb文件：</p>

<pre><code>class AssetsController &lt; ApplicationController
  def show
    cls=params[:class].singularize.capitalize.constantize
    asset=cls.find params[:id]
    send_file asset.send(params[:attachment].singularize).path(params[:style])
  end
end
</code></pre>

<p>在提交的参数中params[:class]是复数形式，而通常类定义都是单数如Story，params[:attachment]是也复数形式而类定义中cover为单数，所以都要将他们变成单数，如果类中定义的attachment是复数形式，那么这里attachment就不必转换为单数，否则会引发NoMethod异常。</p>

<p>现在，所有的paperclip资源都由AssetsController控制，所以在其中添加诸如身份登录验证等before_filter就很方便了。在加入身份验证后，即便用户得到该cover的URL，在未登录的情况下，也无法直接访问该图片了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails使用bootstrap及bootswatch]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/railsshi-yong-bootstrapji-bootswatch/"/>
    <updated>2014-02-14T15:14:34+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/railsshi-yong-bootstrapji-bootswatch</id>
    <content type="html"><![CDATA[<h3>1.简介</h3>

<p>Twitter-bootstrap是一个功能强大的前端web框架，使用它可以快速地开发出漂亮的web UI。而thomas-mcdonald/bootstrap-sass是rails sass版本的bootstrap。其他类似的gem还有jlong/sass-twitter-bootstrap，metaskills/less-rails-bootstrap，seyhunak/twitter-bootstrap-rails，前一个也是sass版本，后两个是less版本的。另外，jasny-twitter-bootstrap是bootstrap的一个很好的拓展，添加了文件上传等漂亮的插件。</p>

<p>而Bootswatch是基于bootstrap的主题资源站，提供了很多收费和免费的主题，利用这些现成的主题能够在bootstrap的基础上更进一步加快网站开发，制作出精美的页面。</p>

<!-- more -->


<h3>2.安装twitter-bootstrap</h3>

<p>这里推荐使用tomas-macdonald/bootstrap-sass。首先在gemfile中添加：</p>

<pre><code>gem 'sass-rails', '~&gt; 3.2'
gem 'bootstrap-sass', '~&gt; 2.3.2.0'
</code></pre>

<p>然后执行bundle install安装需要的gem。
在app/assets/javascripts/application.js文件中添加需要的javascript引用：</p>

<pre><code>//= require jquery
//= require jquery_ujs
//= require bootstrap
//= require_tree .
</code></pre>

<p>将app/assets/stylesheets/application.css重命名为app/assets/stylesheets/application.css.scss。</p>

<p>现在可以调整app/views/layouts/application.html.erb模板布局，然后就可以浏览twitter-bootstrap网站按照example美化自己的rails站点了。</p>

<h3>3.安装bootswatch主题</h3>

<p>如果还想利用bootswatch的主题，就可以使用maxim/bootswatch-rails来方便地继承bootswatch的免费主题。</p>

<p>在gemfile中添加：</p>

<pre><code>gem 'bootswatch-rails'
</code></pre>

<p>然后执行bundle install安装该gem。在application.css.scss文件中require语句后添加：</p>

<pre><code>// 示例：使用bootswatch免费主题： 'Cerulean' bootswatch
// 首先导入变量
@import "bootswatch/cerulean/variables";

// 导入bootstrap
@import "bootstrap";

// 修改bootstrapbody边距
body { padding-top: 60px; }

// 导入bootstrap Responsive styles
@import "bootstrap-responsive";

// 最后导入需要的bootswatch主题
@import "bootswatch/cerulean/bootswatch";

// 你还可以在base.css.scss文件中添加更多自定义设置
@import "base";
</code></pre>

<p>你需要在application.css.scss文件相同目录下创建base.css.scss文件，如果需要就在其中添加更多自定义选择。</p>

<h3>4.Bug fix</h3>

<p>在rails中使用bootswatch可能导致某些css设置失效，通常的可能就是在/app/assets/stylesheets目录下，某些css设置覆盖了bootswatch的配置。比如，按照上述方法配置的bootswatch主题就有可能无法显示主题背景色（body背景色始终是白色）。而rails自动产生的scaffolds.css.sass文件中就覆盖了body的背景色配置，故而导致该bug。所以删除scaffolds.css.scss中除.field_with_errors  和 #error_explanation 其余内容即可。</p>

<p>另外，使用一些其他的rails gem也可能无法使用bootswatch的主题，比如jQuery-modal-rails，它是一个简单的模态对话框gem，但它的对话框就是白底，无法使用bootswatch的主题配置，此时手工配置一下即可，如在需要的页面的.css.sass文件中配置.modal {background-color: green;}，就可以显示绿色的模态对话框。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在CentOS上搭建git服务器]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/zai-centosshang-da-jian-gitfu-wu-qi/"/>
    <updated>2014-02-14T15:01:55+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/zai-centosshang-da-jian-gitfu-wu-qi</id>
    <content type="html"><![CDATA[<h3>0.定义</h3>

<p>这里的示例中出现的主机有三台：localhost是一台centos主机，也是git服务器；ubuntu是git服务器管理员的workstation；linux是某个git用户jason的workstation。</p>

<p>localhost即git服务器上有两个账户test和git，test是用来搭建git服务器的已存在账户，
git是为git服务器创建的专有账户。</p>

<p>ubuntu是git服务器管理员的workstation，该管理员在自己的这台workstation上的账户是user。</p>

<p>linux是jason的workstation。</p>

<ul>
<li>git server:                 [test@localhost]     [git@localhost]</li>
<li>git administrator:      [user@ubuntu]</li>
<li>git user:                    [jason@linux]</li>
</ul>


<p>文中省略了ssh在各主机间的登录命令及scp复制公钥的过程，注意观察命令前的用户及主机名提示即可。</p>

<!-- more -->


<h3>1.安装git</h3>

<pre><code>[test@localhost ~]$ sudo yum install git
#检查git是否安装正确
[test@localhost ~]$ git --version
git version 1.7.1
</code></pre>

<h3>2.为git服务器创建专有用户</h3>

<p>通常将该用户取名git</p>

<pre><code>[test@localhost ~]$ sudo useradd git -d /home/git
#最后切换到git用户
[test@localhost ~]$ su - git
</code></pre>

<h3>3.安装gitolite</h3>

<p>gitolite是一款git服务管理工具，通过公钥对用户进行认证，并能够利用配置文件进行repo的精细授权管理。由于它采用ssh公钥认证，所以先要安装ssh。</p>

<pre><code>[test@localhost ~]$ sudo yum install ssh
[test@localhost ~]$ sudo service sshd start
[test@localhost ~]$ sudo chkconfig sshd on
</code></pre>

<p>然后准备安装gitolite，git服务器的管理员需要先准备自己的密钥对。所以，假设这个管理员在自己的workstation（另一台linux主机，这里只是为了得到管理员自己的密钥，并非一定要在另一台linux机器上）上，他需要创建自己的密钥对（方便起见，不要输入passphrase）：</p>

<pre><code>[user@ubuntu ~]$  ssh-keygen -f ~/.ssh/admin
</code></pre>

<p>该命令在~/.ssh目录下创建密钥对admin和admin.pub。</p>

<p>现在回到git服务器主机，将刚创建的admin.pub复制到git用户的家目录下，即/home/git/下，并且chown为git账户。另外，在安装前须保证不存在文件~/.ssh/authorized_keys或该文件为空。</p>

<p>安装gitolite：</p>

<pre><code>[git@localhost ~]$ git clone git://github.com/sitaramc/gitolite
[git@localhost ~]$ mkdir -p ~/bin
[git@localhost ~]$ gitolite/install -to ~/bin
[git@localhost ~]$ gitolite setup -pk admin.pub
</code></pre>

<p>如果在执行第三条命令时出现错误：</p>

<pre><code>Can't locate Time/HiRes.pm in @INC (@INC contains: /home/git/gitolite/src/lib /usr/local/lib/perl5 /usr/local/share/perl5 /usr/lib/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib/perl5 /usr/share/perl5 .) at /home/git/gitolite/src/lib/Gitolite/Common.pm line 76.
BEGIN failed--compilation aborted at /home/git/gitolite/src/lib/Gitolite/Common.pm line 76.
Compilation failed in require at gitolite/install line 15.
BEGIN failed--compilation aborted at gitolite/install line 15.
</code></pre>

<p>说明缺少perl需要的软件Time::HiRes，安装该软件包后，重新执行上面的命令：</p>

<pre><code>[test@localhost ~]$ sudo yum install perl-Time-HiRes
</code></pre>

<h3>4.添加用户</h3>

<p>现在，假设team里有个成员叫jason，他将自己的公钥jason.pub邮件给管理员，要求为他创建一个名为foo的repo，他要求该repo仅自己可以修改，其他人不能修改但可以查看。首先管理员在自己的workstation上先要获取gitolite的管理repo，the_git_host是管理员刚搭建的git服务器地址：</p>

<pre><code>[user@ubuntu ~]$  git clone git@the_git_host:gitolite-admin
</code></pre>

<p>注意，执行该命令时，如果被要求输入密码，说明前面某些配置出错了，需要重新查证后再继续。</p>

<p>克隆完成后，在./gitolite-admin目录下需要关注两个子目录：conf和keydir。conf是gitolite的权限配置文件夹，keydir用于放置所有用户的公钥。所以，现在可以将jason的公钥jason.pub放入文件夹keydir。然后编辑conf/gitolite.conf文件，在文件末尾添加新的repo：</p>

<pre><code>repo foo
       RW+         =   jason
       R           =   @all
</code></pre>

<p>提交更改，完成用户及其库的添加：</p>

<pre><code>[user@ubuntu ~]$  git add conf
[user@ubuntu ~]$  git add keydir
[user@ubuntu ~]$  git commit -m 'added foo, gave access to jason'
[user@ubuntu ~]$   git push
</code></pre>

<h3>5.用户执行git版本管理</h3>

<pre><code>[jason@linux ~]$   git clone git@the_git_host:foo
</code></pre>

<p>命令执行完成，创建一个空库foo，现在jason就可以进行版本管理，在需要的时候进行提交。</p>

<p>如果用户想要查询自己有权访问的所有repo，可以使用下面命令查询：</p>

<pre><code>[jason@linux ~]$ ssh git@the_git_host  info
</code></pre>

<p>注意：从第3步开始，任何地方使用ssh或git登录到git服务器需要输入密码，都说明配置git服务器出现错误，需要重新安装gitolite，重新安装前先清除之前的文件：</p>

<pre><code>[git@localhost ~]$ ls -a | grep gitolite | xargs rm -fr
[git@localhost ~]$ rm -fr ~/repositories ~/bin  ~/projects.list ~/.ssh/authorized_keys
</code></pre>

<h3>6.配置gitweb</h3>

<p>如果想要能够在网页上访问git库，就可以利用gitweb。</p>

<pre><code>[test@localhost ~]$ sudo yum install gitweb
</code></pre>

<p>打开/etc/gitweb.conf文件，按照注释的格式添加projectroot变量，指向git库：</p>

<pre><code>our $projectroot = "/home/git/repositories";
our @git_base_url_list = qw(git://git.the_git_host
                        ssh://git.the_git_host/var/lib/git);
</code></pre>

<p>最后编辑apache服务器配置文件/etc/httpd/conf/httpd.conf，在文末添加：</p>

<pre><code>&lt;VirtualHost *:80&gt;
    ServerName the_git_host
    DocumentRoot /var/www/git
    &lt;Directory /var/www/git&gt;
        Options ExecCGI +FollowSymLinks +SymLinksIfOwnerMatch
        AllowOverride All
        order allow,deny
        Allow from all
        AddHandler cgi-script cgi
        DirectoryIndex gitweb.cgi
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;
</code></pre>

<p>最后修改git库的权限，否则会出现404 no projects found错误，最后重启Apache服务器：</p>

<pre><code>[test@localhost ~]$ sudo chmod 775 /home/git/repositories
[test@localhost ~]$ sudo chmod 775 /home/git
[test@localhost ~]$ sudo apachectl restart
</code></pre>

<p>最后在浏览器里键入<a href="http://the_git_host">http://the_git_host</a> 就可以看到git库了，我在本机测试，使用的是<a href="http://localhost">http://localhost</a> 来访问服务器。</p>

<p><em>注：</em>如果在完成上述操作后，仍然显示404 no project found，那很可能又是SELinux惹的麻烦，尝试更改selinux的状态为permissive后再刷新页面试试：</p>

<pre><code>[test@localhost ~]$ sudo setenforce 0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby类和模块的关系]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rubylei-he-mo-kuai-de-guan-xi/"/>
    <updated>2014-02-14T14:47:25+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rubylei-he-mo-kuai-de-guan-xi</id>
    <content type="html"><![CDATA[<p>学习ruby入门的时候，很容易被其类和模块的小trick给迷惑住了，这里为了整理自己的理解，就写出来看看吧。</p>

<!-- more -->


<h3>1.ruby一切皆对象</h3>

<p>ruby是彻底地面向对象，你见到的一切构件都是对象。数字是对象，字符串是对象，类也是对象，模块也是对象，甚至类的类(Class)也是对象&hellip;&hellip;</p>

<pre><code>irb(main):001:0&gt; 1.is_a? Object
=&gt; true
irb(main):002:0&gt; Object.is_a? Object
=&gt; true
irb(main):003:0&gt; Class.is_a? Object
=&gt; true
irb(main):007:0&gt; class Test
irb(main):008:1&gt; end
=&gt; nil
irb(main):009:0&gt; Test.is_a? Object
=&gt; true
</code></pre>

<p>其实在这里，像我这样从传统面向对象语言过来的初学者往往会提出疑问：在Java中，我们总可以明显地看出是那个对象在调用方法，但当我进入irb时，并没有创建任何对象，怎么可以调用puts等等方法？这里先不讨论puts方法来源于哪儿，但是当开始执行第一行ruby代码之前，实际上就存在一个对象了。这个对象叫main，是Object的对象。</p>

<pre><code>irb(main):015:0&gt; self
=&gt; main
irb(main):016:0&gt; self.class
=&gt; Object
</code></pre>

<p>此时所处的环境被称为Top Level Context（顶级上下文）。是ruby调用栈的顶端，通常（不在TLC时并非main在充当当前对象）你调用puts等方法时就是这个main对象在充当调用者（接收者）。</p>

<h3>2.ruby的类和模块</h3>

<p>ruby的类和模块可以统一看成是对象的分类，ruby中每个对象都有一个分类：</p>

<pre><code>irb(main):017:0&gt; Object.class
=&gt; Class
irb(main):018:0&gt; t=Test.new
=&gt; #&lt;Test:0x1a5aa48&gt;
irb(main):019:0&gt; t.class
=&gt; Test
irb(main):020:0&gt; Kernel.class
=&gt; Module
irb(main):023:0&gt; Module.class
=&gt; Class
irb(main):024:0&gt; Class.class
=&gt; Class
</code></pre>

<p>可以看到，对象的分类是其普通类，类的分类是Class，Kernel模块的分类是Module，Class的分类也是Class，Module的分类也是类。
甚至于，在ruby中，我们可以认为只有一种分类，那就是模块Module，因为Class是从Module继承而来。</p>

<pre><code>irb(main):011:0&gt; Class.ancestors
=&gt; [Class, Module, Object, Kernel, BasicObject]
</code></pre>

<p>除了很少的几个区别，几乎可以将类和模块一视同仁，类只不过是增强后的模块。那么，ruby中其他普通类和Class/Module有什么关系呢？答案是，其他类（模块）不过是Class(Module)的实例而已。</p>

<pre><code>irb(main):028:0&gt; Test.instance_of? Class
=&gt; true
irb(main):013:0&gt; Kernel.instance_of? Module
=&gt; true
</code></pre>

<p>根据这个原理，就可以像下面这样定义新类：</p>

<pre><code>irb(main):029:0&gt; MyClass=Class.new do
irb(main):030:1* def say
irb(main):031:2&gt; puts "I am MyClass"
irb(main):032:2&gt; end
irb(main):033:1&gt; end
=&gt; MyClass
irb(main):034:0&gt; m=MyClass.new
=&gt; #&lt;MyClass:0x1a4f798&gt;
irb(main):035:0&gt; m.say
I am MyClass
=&gt; nil
</code></pre>

<p>使用Class.new操作就新建了一个类，把这个类赋值给MyClass，这个新类就定义出来了，可以像使用其他类一样使用。这段代码除了证明普通类不过是Class的实例外，还说明了另一个问题：类名不过是一个常量而已。我们可以查看当前常量列表来验证：</p>

<pre><code>irb(main):038:0&gt; Object.constants.grep /MyClass/
=&gt; [:MyClass]
</code></pre>

<h3>3.ruby的方法查找</h3>

<p>当在ruby程序中调用一个方法时，ruby解释器以方法的接收者或者self为起点，沿着该对象的祖先链往上查找方法，直到找到这个方法或者抛出异常。</p>

<p>以在TLC中调用puts方法为例，此时puts方法的接收者隐式由self充当，而此时的self是Object类的对象main，那么查看Object类的方法：</p>

<pre><code>irb(main):041:0&gt; Object.methods.grep /puts/
=&gt; []
</code></pre>

<p>在Object中显然并不存在puts方法，那么查看Object的祖先链：</p>

<pre><code>irb(main):042:0&gt; Object.ancestors
=&gt; [Object, Kernel, BasicObject]
       沿着祖先链，我们查看Kernel的方法：

irb(main):043:0&gt; Kernel.methods.grep /puts/
=&gt; [:puts]
</code></pre>

<p>显然puts方法位于Kernel中。从前面知道，Kernel是一个模块，它被混入(Mixin)类中，通常当模块include混入时，模块的方法就成为类的实例方法，由于Kernel模块混入了Object类中，所以在ruby代码的任何地方都可以调用puts方法，因为ruby的几乎全部的类都继承自Object。</p>

<blockquote><p>PS.关于private方法：</p>

<p>ruby中的private方法有时让人很懊恼。但实际上需要记住的只有一点：private方法只能在隐含的接收者self上被调用，但private方法调用的查找规则和其他方法是一样的。</p></blockquote>

<p>所以，即便是TLC中main对象拥有puts方法，但却不能这样调用：</p>

<pre><code>irb(main):046:0&gt; self.puts
NoMethodError: private method `puts' called for main:Object
    from (irb):46
    from C:/RailsInstaller/Ruby1.9.3/bin/irb:12:in `&lt;main&gt;'
</code></pre>

<p>另外，不要和Java等语言中的private混淆，ruby的private方法时可以在子类中调用的：</p>

<pre><code>irb(main):052:0&gt; class Dad
irb(main):053:1&gt; private
irb(main):054:1&gt; def say
irb(main):055:2&gt; puts "Dad says private"
irb(main):056:2&gt; end
irb(main):057:1&gt; end
=&gt; nil
irb(main):058:0&gt; class Son &lt;Dad
irb(main):059:1&gt; def talk
irb(main):060:2&gt; say
irb(main):061:2&gt; puts "son talk"
irb(main):062:2&gt; end
irb(main):063:1&gt; end
=&gt; nil
irb(main):064:0&gt; s=Son.new
=&gt; #&lt;Son:0x1c90cb0&gt;
irb(main):065:0&gt; s.talk
Dad says private
son talk
</code></pre>

<p>最后，补充说一下几个常用方法的调用：</p>

<pre><code>irb(main):067:0&gt; Object.private_methods.grep /method/
=&gt; [:define_method, :method_missing,.........]
</code></pre>

<p>Objcet的method_missing和define_method都是其私有方法，为什么在方法内部调用method_missing正确，而调用define_method就会报错，必须在类上下文充当self时才能调用define_method？</p>

<p>Object#method_missing方法是Object的一个private方法，不能显示地使
用接收者调用，但所有对象都可以隐式调用该方法。
而define_method实际上是Module#define_method方法，该方法是Module的private实例方法，而Class又继承了Module类，所以它变成了Class的实例方法，由于所有的普通类都是Class的实例，所以define_method就成为了所有普通类的类方法，所以在类上下文中能够使用define_method此时self由类充当，而不能在某个具体对象充当self时调用该方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install and deploy rails on CentOS]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/install-and-deploy-rails-on-centos/"/>
    <updated>2014-02-14T14:30:55+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/install-and-deploy-rails-on-centos</id>
    <content type="html"><![CDATA[<h3>prerequisites:</h3>

<p>I cover all these operations on CentOS 6.4 and with root, so if you encounter some privilege problem, try sudo. And, if using Ubuntu, you needn&rsquo;t worry about SELinux.</p>

<!-- more -->


<h4>1. install essentical library</h4>

<pre><code>yum update
yum install gcc g++ make automake autoconf curl-devel openssl-devel zlib-develhttpd-devel apr-devel apr-util-devel sqlite-devel gcc-c++
</code></pre>

<p>then compile and install nodejs</p>

<pre><code>wget http://nodejs.org/dist/v0.10.7/node-v0.10.7.tar.gz
# then compile and install it
</code></pre>

<h4>2. install libyaml(needed by ruby)</h4>

<pre><code>wget http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz
tar xzvf yaml-0.1.4.tar.gz
cd yaml-0.1.4
./configure
make
make install
</code></pre>

<h4>3. install ruby</h4>

<pre><code>wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p0.tar.gz
# compile and install
ruby –v # check ruby installed correctly
</code></pre>

<h4>4. install rubygems</h4>

<pre><code>wget  http://production.cf.rubygems.org/rubygems/rubygems-2.0.3.tgz
tar vxzf rubygems-2.0.3.tgz
cd rubygems-2.0.3.tgz
ruby setup.rb
gem –v
</code></pre>

<h4>5. install rails</h4>

<pre><code>gem update
gem update --system
gem install rails –V  #It really costs a longtime, enjoy a coffee now
</code></pre>

<p>Next,we talk about deploy on centos</p>

<h4>6. install passenger(follow the instructions to install extra lib)</h4>

<pre><code>gem  install passenger
passenger-install-apache2-module
</code></pre>

<p>P.S. ==>install passenger &amp; compile nginx</p>

<pre><code>passenger-install-nginx-module
</code></pre>

<p>P.S. install passenger &amp; compile nginx&lt;==</p>

<h4>7. find the apache configure</h4>

<pre><code>apachectl  –V | grep HTTPD_ROOT
apachectl  –V | grep SERVER_CONFIG_FILE
</code></pre>

<p>Add code snippet below to apache config file</p>

<pre><code>&lt;VirtualHost  *:80&gt;
      ServerName   test.com
      DocumentRoot  /var/www/html/blog/public   
      &lt;Directory  /var/www/html/blog/public&gt;
         Allow from all
         AllowOverride all
         Options -MultiViews
      &lt;/Directory&gt;
&lt;/VirtualHost&gt;
</code></pre>

<p>P.S. ==>for nginx</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   server {
</span><span class='line'>      listen 80;
</span><span class='line'>      server_name www.yourhost.com;
</span><span class='line'>      root /somewhere/public;   # &lt;--- be sure to point to 'public'!
</span><span class='line'>      passenger_enabled on;
</span><span class='line'>   }</span></code></pre></td></tr></table></div></figure>


<p>Add this for development mode in <code>http{</code> node.</p>

<pre><code>passenger_app_env development;
</code></pre>

<p>P.S. for nginx end&lt;==</p>

<p>If something’s wrong, add line below then try again</p>

<pre><code>NameVirtualHost  *:80
</code></pre>

<h4>8. config mysql database(if you use sqlite,skip this step)</h4>

<p>If you use mysql in production, add below to gemfile</p>

<pre><code>group:production do
    gem ‘mysql2’
end
</code></pre>

<p>Then bundle install</p>

<pre><code>bundle install
</code></pre>

<p>Config mysql</p>

<pre><code>mysql–u root –p # login to mysqlserver
mysql&gt;create database depot_production character set utf8;
mysql&gt;grant all privileges on depot_production.*
mysql&gt;to ‘username’@’localhost’ identified by ‘password’;
mysql&gt;exit;
</code></pre>

<p>Modify the config/database.yml</p>

<pre><code>production:
     adapter: mysql2
     encoding: utf8
     reconnect: false
     database: depot_production
     pool: 5
     username: username
     password: password
     host: localhost
</code></pre>

<h4>9. apply your migrations</h4>

<pre><code>rake db:setup RAILS_ENV='production'
</code></pre>

<h4>10. precompile the static resources</h4>

<pre><code>bundle exec rake assets:precompile RAILS_ENV='production'
</code></pre>

<p>On centos, we must change selinux’s behavior(Everytime you deploy!)</p>

<h4>11. Temporarily go into SELinux permissive mode</h4>

<pre><code>setenforce  0
</code></pre>

<h4>12. restart apache</h4>

<pre><code>apachectl restart
</code></pre>

<h4>13. use your rails app for a while</h4>

<h4>14. allow passenger run with selinux</h4>

<p>Note: if can&rsquo;t find audit2allow, you should install it first, otherwise you can skip 2 commands below</p>

<pre><code>yum  provides  \*/audit2allow
yum  install  policycoreutils-python
grep httpd  /var/log/audit/audit.log | audit2allow -M passenger
</code></pre>

<p>install newly created selinux module</p>

<pre><code>semodule  -i passenger.pp
</code></pre>

<h4>15. switch selinux back to enforcing mode</h4>

<pre><code>setenforce 1
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git常用操作]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/gitchang-yong-cao-zuo/"/>
    <updated>2014-02-14T14:26:31+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/gitchang-yong-cao-zuo</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>创建远程版本库</h3>

<ol>
<li><p>设置git</p>

<pre><code> git config --global user.name "MyName"
 git config --global user.email abcde@example.com
</code></pre></li>
<li><p>创建版本库</p>

<p> a.新建版本库，并推送到远端</p>

<pre><code> mkdir TestRepo
 cd TestRepo
 git init
 touch README.md
 git add README.md
 git commit -m 'first commit'
 git remote add origin git@gitserver.com:MyAcountName/TestRepo.git
 git push -u origin master
</code></pre>

<p> b.使用已有本地版本库，并推送到远端</p>

<pre><code> cd TestRepo
 git remote add origin git@gitserver.com:MyAcountName/TestRepo.git
 git push -u origin mast
</code></pre></li>
<li><p>推/拉</p>

<pre><code> git push origin master
 git pull origin master
</code></pre></li>
</ol>


<h3>克隆已有的远程版本库</h3>

<pre><code>git clone  git@gitserver.com:MyAcountName/TestRepo.git  usr1/project
cd usr1/project
git config user.name usr1
git config user.email usr1@example.com
echo Hello &gt; README
git add README
git commit –m “initial commit.”
git push origin master
</code></pre>

<h3>克隆本地版本库</h3>

<pre><code>git clone  file:///path/to/repo/TestRepo.git  usr2/project
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Linq中使用委托作为相等比较]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/zai-linqzhong-shi-yong-wei-tuo-zuo-wei-xiang-deng-bi-jiao/"/>
    <updated>2014-02-14T14:13:30+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/zai-linqzhong-shi-yong-wei-tuo-zuo-wei-xiang-deng-bi-jiao</id>
    <content type="html"><![CDATA[<p>Linq中的操作符的相等比较都使用IEqualityComparer<T>作为判断依据，常见的使用该接口的操作符有：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Distinct</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;,</span> <span class="n">IEqualityComparer</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;)</span>
</span><span class='line'><span class="n">Contains</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;,</span> <span class="n">TSource</span><span class="p">,</span> <span class="n">IEqualityComparer</span><span class="p">&lt;</span><span class="n">TSource</span><span class="p">&gt;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用该接口固然可以进行自定义的相等比较，但若对同一类型要做多种相等比较则需要继承实现IEqualityComparer<T>接口的多个子类型，这对于像我这样懒惰的程序员是很难接受的。</p>

<!-- more -->


<p>如果有一个Person类定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="n">Age</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而有一个Person[]数组名为people，在代码中我希望这样使用Linq查询：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">age</span> <span class="p">=</span> <span class="n">people</span><span class="p">.</span><span class="n">Distinct</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Age</span> <span class="p">==</span> <span class="n">y</span><span class="p">.</span><span class="n">Age</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">nameandage</span> <span class="p">=</span> <span class="n">people</span><span class="p">.</span><span class="n">Distinct</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">Age</span> <span class="p">==</span> <span class="n">y</span><span class="p">.</span><span class="n">Age</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">Name</span><span class="p">==</span><span class="n">y</span><span class="p">.</span><span class="n">Name</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>利用委托实现自定义的相等操作，不论是灵活性还是可读性都要好得多，下面我就要为了写成这样的代码而做做工作了。
首先，要定义一个泛型类去实现IEqualityComparer<T>接口，此外，对该类的要求是要能接受委托比较器，下面即是实现的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">MyLinqOperandExtensions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">class</span> <span class="nc">DelegateComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IEqualityComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">readonly</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">comparator</span><span class="p">;</span>
</span><span class='line'>        <span class="k">public</span> <span class="nf">DelegateComparer</span><span class="p">(</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">comparator</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">comparator</span> <span class="p">=</span> <span class="n">comparator</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="n">T</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">comparator</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">int</span> <span class="nf">GetHashCode</span><span class="p">(</span><span class="n">T</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，就是需要一个自定义的Distinct操作符，为了和.NET的操作符区分开来，我是用MyDistinct作为新名称：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">MyLinqOperandExtensions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">MyDistinct</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">comparator</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">source</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;source&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">comparator</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;comparator&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">source</span><span class="p">.</span><span class="n">Distinct</span><span class="p">(</span><span class="k">new</span> <span class="n">DelegateComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">comparator</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，我们就可以使用委托来使用Distinct操作了，如下示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Person</span><span class="p">[]</span> <span class="n">people</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Person</span><span class="p">[]</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">new</span> <span class="n">Person</span><span class="p">{</span><span class="n">Name</span><span class="p">=</span><span class="s">&quot;Jack&quot;</span><span class="p">,</span><span class="n">Age</span><span class="p">=</span><span class="m">12</span> <span class="p">},</span>
</span><span class='line'>     <span class="k">new</span> <span class="n">Person</span><span class="p">{</span><span class="n">Name</span><span class="p">=</span><span class="s">&quot;Linq&quot;</span><span class="p">,</span><span class="n">Age</span><span class="p">=</span><span class="m">22</span> <span class="p">},</span>
</span><span class='line'>     <span class="k">new</span> <span class="n">Person</span><span class="p">{</span><span class="n">Name</span><span class="p">=</span><span class="s">&quot;Tom&quot;</span><span class="p">,</span><span class="n">Age</span><span class="p">=</span><span class="m">22</span> <span class="p">},</span>
</span><span class='line'>     <span class="k">new</span> <span class="n">Person</span><span class="p">{</span><span class="n">Name</span><span class="p">=</span><span class="s">&quot;Tom&quot;</span><span class="p">,</span><span class="n">Age</span><span class="p">=</span><span class="m">12</span> <span class="p">},</span>
</span><span class='line'>     <span class="k">new</span> <span class="n">Person</span><span class="p">{</span><span class="n">Name</span><span class="p">=</span><span class="s">&quot;Jack&quot;</span><span class="p">,</span><span class="n">Age</span><span class="p">=</span><span class="m">22</span> <span class="p">}</span>
</span><span class='line'> <span class="p">};</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">name</span> <span class="p">=</span> <span class="n">people</span><span class="p">.</span><span class="n">MyDistinct</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="n">y</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'> <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">n</span> <span class="k">in</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>     <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0} {1}&quot;</span><span class="p">,</span> <span class="n">n</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">n</span><span class="p">.</span><span class="n">Age</span><span class="p">);</span>
</span><span class='line'> <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;----------------------&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">age</span> <span class="p">=</span> <span class="n">people</span><span class="p">.</span><span class="n">MyDistinct</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Age</span> <span class="p">==</span> <span class="n">y</span><span class="p">.</span><span class="n">Age</span><span class="p">);</span>
</span><span class='line'> <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">n</span> <span class="k">in</span> <span class="n">age</span><span class="p">)</span>
</span><span class='line'>     <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0} {1}&quot;</span><span class="p">,</span> <span class="n">n</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">n</span><span class="p">.</span><span class="n">Age</span><span class="p">);</span>
</span><span class='line'> <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;----------------------&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">nameandage</span> <span class="p">=</span> <span class="n">people</span><span class="p">.</span><span class="n">MyDistinct</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">Age</span> <span class="p">==</span> <span class="n">y</span><span class="p">.</span><span class="n">Age</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">Name</span><span class="p">==</span><span class="n">y</span><span class="p">.</span><span class="n">Name</span><span class="p">));</span>
</span><span class='line'> <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">n</span> <span class="k">in</span> <span class="n">nameandage</span><span class="p">)</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0} {1}&quot;</span><span class="p">,</span> <span class="n">n</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">n</span><span class="p">.</span><span class="n">Age</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建自己的gem]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/chuang-jian-zi-ji-de-gem/"/>
    <updated>2014-02-14T09:45:52+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/chuang-jian-zi-ji-de-gem</id>
    <content type="html"><![CDATA[<p>如果在开发过程中遇到比较通用化的场景，并且估计这种情况其他开发者也可能遇到，就可以把解决方案做成ruby gem，放到<a href="https://rubygems.org">rubygems.org</a>上供所有人使用，并且将源码托管到github上使得解决方案逐步成熟。</p>

<!-- more -->


<p>以创建一个名为jgem的gem为例，下面就是创建gem的具体步骤：</p>

<h3>1.首先要有<a href="https://rubygems.org">rubygems.org</a>和<a href="https://github.com">github</a>的帐号。</h3>

<h3>2.利用bundler创建新的gem：</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle gem jgem
</span><span class='line'>      create  jgem/Gemfile
</span><span class='line'>      create  jgem/Rakefile
</span><span class='line'>      create  jgem/LICENSE.txt
</span><span class='line'>      create  jgem/README.md
</span><span class='line'>      create  jgem/.gitignore
</span><span class='line'>      create  jgem/jgem.gemspec
</span><span class='line'>      create  jgem/lib/jgem.rb
</span><span class='line'>      create  jgem/lib/jgem/version.rb
</span><span class='line'>      Initializing git repo in /Users/jason/Documents/tmp/jgem
</span></code></pre></td></tr></table></div></figure>


<h3>3.修改<code>.gemspec</code>文件，主要修改新gem描述：</h3>

<figure class='code'><figcaption><span>jgem.gemspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">spec</span><span class="o">.</span><span class="n">summary</span>       <span class="o">=</span> <span class="sx">%q{TODO: Write a short summary. Required.}</span>
</span><span class='line'><span class="n">spec</span><span class="o">.</span><span class="n">description</span>   <span class="o">=</span> <span class="sx">%q{TODO: Write a longer description. Optional.}</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加gem的依赖，包括开发时依赖和运行时依赖：</p>

<figure class='code'><figcaption><span>jgem.gemspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">spec</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s2">&quot;rake&quot;</span>
</span><span class='line'><span class="n">spec</span><span class="o">.</span><span class="n">add_runtime_dependency</span> <span class="s2">&quot;activerecord&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. 编译gem</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem build jgem.gemspec
</span><span class='line'>WARNING:  no homepage specified
</span><span class='line'>WARNING:  open-ended dependency on rake <span class="o">(</span>&gt;<span class="o">=</span> 0, development<span class="o">)</span> is not recommended
</span><span class='line'><span class="k">if </span>rake is semantically versioned, use:
</span><span class='line'>  add_development_dependency <span class="s1">&#39;rake&#39;</span>, <span class="s1">&#39;~&gt; 0&#39;</span>
</span><span class='line'>WARNING:  See http://guides.rubygems.org/specification-reference/ <span class="k">for </span><span class="nb">help</span>
</span><span class='line'>Successfully built RubyGem
</span><span class='line'>Name: jgem
</span><span class='line'>Version: 0.0.1
</span><span class='line'>File: jgem-0.0.1.gem
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>编译后生成jgem-0.0.1.gem。</p>

<p>注意：在每次<code>gem build</code>编译gem前，必须<code>git add .</code>或<code>git commit</code>一次，因为由于gem和git的紧密关系，没有<code>git add</code>到暂存区的文件变更很可能不会被编译进gem。有的朋友说在bin目录下创建的可执行文件始终无法被编译进gem就是这个原因（他们采取的办法是将<code>.gemspec</code>文件的<code>spec.executables   = spec.files.grep(%r{^bin/}) { |f| File.basename(f) }</code>改成<code>spec.executables =['your_executable_file']</code>，实际这是不必要的）</p>

<h3>5. 发布</h3>

<p>发布生成的gem到rubygems.org。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem push jgem-0.0.1.gem
</span></code></pre></td></tr></table></div></figure>


<p>根据提示输入用户信息就行了。</p>

<h3>6. 托管代码</h3>

<p>在github上新建一个代码库，名称最好和gem保持一致为jgem。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote add origin git@github.com:USERNAME/jgem.git
</span><span class='line'>git push -u origin master
</span></code></pre></td></tr></table></div></figure>


<h3>7. 更新gem代码</h3>

<p>如果在本地更新代码，需要先<code>git add .</code>或<code>git commit</code>，然后执行<code>gem build</code>才能正确编译。编译好的gem可以先在本地安装试用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem build jgem.gemspec
</span><span class='line'><span class="nv">$ </span>gem install --local jgem-0.0.1.gem
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>如果要上传到rubygems，则必须更新<code>jgem/lib/jgem/version.rb</code>里的版本号，相同的版本号是不允许重复上传的。到rubygems上传的只是编译好的gem，不要忘了提交代码变更到github。</p>

<p>PS. 如果gem需要添加可执行文件如<code>example_cmd</code>，在jgem目录下创建bin目录来放置这些命令即可(反复提醒，别忘了将新文件添加到git库哦)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir bin
</span><span class='line'><span class="nv">$ </span>touch bin/example_cmd
</span><span class='line'><span class="nv">$ </span>chmod a+x bin/example_cmd
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post!]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://qjpcpu.github.io/blog/2014/02/13/first-post/"/>
    <updated>2014-02-13T22:12:38+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/13/first-post</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s1">&#39;Hello world!&#39;</span>  
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p> <img src="http://c.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=073d9f3922a446237acaa567a8190333/4e4a20a4462309f7fa4d4851700e0cf3d7cad657.jpg?referer=ac43c04b5143fbf29c3b9313124d&amp;x=.jpg" alt="logo" /></p>
]]></content>
  </entry>
  
</feed>
