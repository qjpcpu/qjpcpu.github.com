<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CoffeeScript | Jason's space]]></title>
  <link href="http://qjpcpu.github.io/blog/categories/coffeescript/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2014-08-14T00:32:32+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[js异步回调与闭包]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/08/14/jsyi-bu-hui-diao-yu-bi-bao/"/>
    <updated>2014-08-14T00:20:20+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/08/14/jsyi-bu-hui-diao-yu-bi-bao</id>
    <content type="html"><![CDATA[<p>很多地方讲解<code>CoffeeScript/JavaScript</code>都用了这么一个例子：</p>

<p>```
chars = [&lsquo;A&rsquo;, &lsquo;B&rsquo;, &lsquo;C&rsquo;]
for ch in chars
  setTimeout(&ndash;></p>

<pre><code>console.log ch
</code></pre>

<p>  ,10)
```</p>

<!--more-->


<p>这个结果会输出<code>C C C</code>而不是<code>A B C</code>，为什么会这样是因为js的异步机制，在普通代码执行完毕后才会处理事件，而在处理时间打印console时<code>ch</code>已经是<code>C</code>了，所以三个回调都会打印<code>C</code>。</p>

<p>给出的改进版本也很直观：</p>

<p>```
chars = [&lsquo;A&rsquo;, &lsquo;B&rsquo;, &lsquo;C&rsquo;]
for ch in chars
  do (ch) &ndash;></p>

<pre><code>setTimeout(-&gt;
  console.log ch
,10)
</code></pre>

<p>```</p>

<p>为啥这样改呢，其实原因严格来说和闭包有关系。</p>

<p>在第一个版本里，我们用了一个匿名函数把变量ch作为环境放入闭包，但是注意这个变量的作用域在for循环所在的整个范围内可见，闭包复制了dui这个变量的引用，所以当匿名函数实际调用时，变量的值已经被改变，导致得不到想要的输出。</p>

<p>而第二个版本将ch以函数参数的形式复制到了闭包内，这个匿名函数里的ch作用域仅在这个闭包小环境内，外部for循环仅改变外部的这个ch，所以复制到闭包内的ch是不变的；不信可以把do后面函数改成无参的，结果肯定还是打印三个C。</p>
]]></content>
  </entry>
  
</feed>
