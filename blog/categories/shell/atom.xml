<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: shell | Jason's space]]></title>
  <link href="http://qjpcpu.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2014-04-10T00:01:11+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux下查看线程数]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/25/linuxxia-cha-kan-xian-cheng-shu/"/>
    <updated>2014-03-25T08:53:55+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/25/linuxxia-cha-kan-xian-cheng-shu</id>
    <content type="html"><![CDATA[<h3>1. cat /proc/${pid}/status</h3>

<h3>2. ps -mp &lt;PID></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[route]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/14/route/"/>
    <updated>2014-03-14T00:03:30+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/14/route</id>
    <content type="html"><![CDATA[<p>算是记录一个教训吧。</p>

<p>下午我的机器突然不能上外网，尝试内网和别的机器互访都没有问题，就是访问外网显示<code>connect: Network is unreachable</code>，<code>nslookup</code>查看DNS解析也没有问题，就是没想到网络不能到达很有可能是没有路由信息，最后朋友指点发现没有默认网关，外网ip没得路由规则走，添加默认网关后ok：</p>

<p><code>bash
route add default gw 10.46.148.1
</code></p>

<p>提醒自己以后把学到的东西利用起来！</p>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ls遍历空目录处理]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/12/lsbian-li-kong-mu-lu-chu-li/"/>
    <updated>2014-03-12T23:18:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/12/lsbian-li-kong-mu-lu-chu-li</id>
    <content type="html"><![CDATA[<p>先说说原因：<code>for</code>循环是利用空格做分隔符，所以可以这样打印句子中的单词：</p>

<pre><code>centence="Linux is cool"
for word in $centence;do
    echo $word
done
</code></pre>

<p>有时用ls命令遍历目录会遇到空目录：</p>

<p>```bash
for d in $(ls);do</p>

<pre><code>echo "$d"
</code></pre>

<p>done
```</p>

<p>处理办法是：</p>

<p>```bash
ls -1 | while read d
do</p>

<pre><code>echo "$d"
</code></pre>

<p>done
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[date命令]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/12/dateming-ling/"/>
    <updated>2014-03-12T23:03:56+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/12/dateming-ling</id>
    <content type="html"><![CDATA[<p>首先看看常用的格式字符串</p>

<pre><code> %Y 年
 %m 月
 %d 日
 %H 时
 %M 分
 %S 秒
 %s 时间戳(秒)
</code></pre>

<p><strong>date命令常用操作</strong></p>

<p>获取当前时间</p>

<pre><code>date +%Y-%m-%d    # 2014-02-21
</code></pre>

<!--more-->


<p>几天前(后)，几月前(后)，几年前(后)</p>

<pre><code>date -d "1 day ago"  "+%Y-%m-%d %H:%M:%S"  #一天前的当前时间 2014-02-20 11:11:31
date -d "2 days ago"  # 或者date-d "-2 days"
date -d "-8 months"
date -d "+2 years" # 两年后
</code></pre>

<p>多少分钟，小时前（后）</p>

<pre><code>date -d "-5 minutes"  "+%Y-%m-%d %H:%M:%S"  #5分钟前
date -d "5 minutes"  "%H:%M:%S"  #5分钟后
</code></pre>

<p>时间戳和日期互转，常用于计算</p>

<pre><code>date -d "2014-02-20 11:11:31" +%s  #获取某时间的时间戳
date +%s   #返回当前时间戳1392954893
date -d @1392954893 "+%Y-%m-%d %H:%M:%S"  #将时间戳转换为时间
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stat命令与文件时间]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/12/statming-ling-yu-wen-jian-shi-jian/"/>
    <updated>2014-03-12T15:04:54+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/12/statming-ling-yu-wen-jian-shi-jian</id>
    <content type="html"><![CDATA[<h3>stat命令</h3>

<p>stat命令常用来获取文件三个时间<code>access time</code>,<code>modify time</code>和<code>change time</code></p>

<pre><code>$ stat access.log
  File: `access.log'
  Size: 1559877779  Blocks: 3049624    IO Block: 4096   regular file
Device: ca20h/51744d    Inode: 16269326    Links: 1
Access: (0644/-rw-r--r--)  Uid: (  500/    work)   Gid: (  500/    work)
Access: 2014-03-09 21:58:33.000000000 +0800
Modify: 2014-03-07 08:17:36.000000000 +0800
Change: 2014-03-07 08:17:36.000000000 +0800
</code></pre>

<p>通常可以使用<code>-c</code>参数直接获取三个时间</p>

<pre><code>$ stat -c %x access.log   #获取access time
2014-03-09 21:58:33.000000000 +0800
$ stat -c %y access.log  #获取modify time
2014-03-07 08:17:36.000000000 +0800
$ stat -c %z access.log #获取change time
2014-03-07 08:17:36.000000000 +0800
</code></pre>

<!--more-->


<h3>三个时间</h3>

<p><code>access time</code>对应文件访问时间，只要有读操作就会更新这个时间。</p>

<p><code>change time</code>对应文件元信息，比如文件重命名会更新该时间。</p>

<p><code>modify time</code>对应文件内容修改时间，只要修改文件内容就会更新该时间，由于内容改变实际也改变文件元数据，所以写操作也更新<code>change time</code>。</p>

<p>注意：对于文件夹来说，对文件夹下的文件增删，重命名，等操作，会修改文件夹<code>change time</code>和<code>modify time</code>，因为文件名实际是作为目录文件的内容存在的。</p>
]]></content>
  </entry>
  
</feed>
