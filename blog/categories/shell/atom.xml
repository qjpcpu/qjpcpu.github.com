<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: shell | Jason's space]]></title>
  <link href="http://qjpcpu.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2018-07-02T15:24:08+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[信任关系建立]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/05/21/xin-ren-guan-xi-jian-li/"/>
    <updated>2014-05-21T14:58:28+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/05/21/xin-ren-guan-xi-jian-li</id>
    <content type="html"><![CDATA[<h3 id="host1host2">建立host1到host2的信任关系</h3>

<h4 id="arsa">如果A的rsa文件不存在可以这样建立</h4>

<p>首先在<code>host1</code>上：</p>

<p><code>bash create_rsa.sh   
ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa
</code></p>

<h4 id="section">添加信任关系</h4>

<p>在<code>host2</code>上，将<code>host1</code>的<code>~/.ssh/id_rsa.pub</code>文件内容<code>追加</code>到<code>host2</code>的<code>authorized_keys</code>文件中</p>

<h4 id="fingerprint">避免第一次连接出现添加fingerprint的询问</h4>

<p>在<code>host1</code>上执行：</p>

<p><code>bash
ssh-keyscan host2 &gt;&gt; ~/.ssh/known_hosts
</code></p>

<!--more-->

<p>下面是一个示例脚本，在一个中控机上（能同时访问a和b）建立a到b的信任关系：</p>

<p><code>bash relation_a2b
#!/bin/bash
if [ "$#" -lt 2 ];then
        echo "Usage: relation_a2b host1 host2"
        exit 1
fi
from=$1
to=$2
key=`ssh $from "ssh-keyscan -t rsa $to &gt;&gt; ~/.ssh/known_hosts 2&gt;/dev/null &amp;&amp; cat ~/.ssh/id_rsa.pub"`
ssh $to "echo $key &gt;&gt; ~/.ssh/authorized_keys"
echo "$from --&gt; $to [OK]"
</code></p>

<p>使用方法</p>

<p><code>bash
relation_a2b host1 host2
</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sort]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/04/15/sort/"/>
    <updated>2014-04-15T20:57:34+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/04/15/sort</id>
    <content type="html"><![CDATA[<h3 id="sort">sort排序常用参数</h3>

<p>-n : 按照数值排序</p>

<p>-u : 过滤重复的行</p>

<p>-r : 降序排序，默认升序</p>

<p>-t : 指定分段符号</p>

<p>-k : 按照第几个字段(1…)排序</p>

<p>默认sort是按照字符排序的。</p>

<h3 id="sort-1">sort临时目录</h3>

<p>默认情况下sort使用<code>/tmp</code>作为临时文件存放目录，如果根分区很小，可能造成分区磁盘飙升，为避免这种情况可以使用<code>-T</code>参数来指定sort的临时目录：</p>

<p><code>bash
sort -T /path/to/tmp_directory
</code></p>

<h3 id="sort-2">sort不为人知的一个深坑</h3>

<p>默认情况下，sort将排序对象作为字符串进行排序，并且声称按照ANSII字母顺序进行排序，实际上，如果系统的<code>LC_ALL</code>环境变量为空的话，sort的排序并不一定是按字母顺序进行排序的，这会导致sort的下游依赖程序运行得不稳定，所以，如果要确保sort正确排序，需要正确设置环境变量：</p>

<p><code>bash
export LC_ALL=C
</code></p>

<p>为什么这样设置，可以<code>man sort</code>看一下它的warning部分的说明。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下查看线程数]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/25/linuxxia-cha-kan-xian-cheng-shu/"/>
    <updated>2014-03-25T08:53:55+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/25/linuxxia-cha-kan-xian-cheng-shu</id>
    <content type="html"><![CDATA[<h3 id="cat-procpidstatus">1. cat /proc/${pid}/status</h3>
<p>### 2. ps -mp &lt;PID&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[route]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/14/route/"/>
    <updated>2014-03-14T00:03:30+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/14/route</id>
    <content type="html"><![CDATA[<p>算是记录一个教训吧。</p>

<p>下午我的机器突然不能上外网，尝试内网和别的机器互访都没有问题，就是访问外网显示<code>connect: Network is unreachable</code>，<code>nslookup</code>查看DNS解析也没有问题，就是没想到网络不能到达很有可能是没有路由信息，最后朋友指点发现没有默认网关(<code>route -n</code>)，外网ip没得路由规则走，添加默认网关后ok：</p>

<p><code>bash
route add default gw 10.46.148.1
</code></p>

<p>提醒自己以后把学到的东西利用起来！</p>

<!--more-->
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ls遍历空目录处理]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/12/lsbian-li-kong-mu-lu-chu-li/"/>
    <updated>2014-03-12T23:18:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/12/lsbian-li-kong-mu-lu-chu-li</id>
    <content type="html"><![CDATA[<p>先说说原因：<code>for</code>循环是利用空格做分隔符，所以可以这样打印句子中的单词：</p>

<pre><code>centence="Linux is cool"
for word in $centence;do
	echo $word
done
</code></pre>

<p>有时用ls命令遍历目录会遇到空目录：</p>

<p><code>bash
for d in $(ls);do
	echo "$d"
done
</code></p>

<p>处理办法是：</p>

<p><code>bash
ls -1 | while read d
do
	echo "$d"
done
</code></p>
]]></content>
  </entry>
  
</feed>
