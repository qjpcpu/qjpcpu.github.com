<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: shell | Jason's space]]></title>
  <link href="http://qjpcpu.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2014-02-16T18:27:20+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[shell字符串处理]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/shellzi-fu-chuan-chu-li/"/>
    <updated>2014-02-14T18:10:30+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/shellzi-fu-chuan-chu-li</id>
    <content type="html"><![CDATA[<h3>1.获取字符串长度</h3>

<pre><code>${#string}
</code></pre>

<p>&ndash;</p>

<pre><code>[jason@localhost ~]$ str="hello,world"
[jason@localhost ~]$ echo ${#str}
11
</code></pre>

<h3>2.获取子串</h3>

<pre><code>${string:position}
${string:position:length}
$(string:(-postion)) 如果使用负数，表示从右开始计数，注意负数必须使用括号
</code></pre>

<p>&ndash;</p>

<pre><code>[jason@localhost ~]$ str=ABCDEFGHIJKLMN
[jason@localhost ~]$ echo ${str:1}
BCDEFGHIJKLMN
[jason@localhost ~]$ echo ${str:1:2}
BC
[jason@localhost ~]$ echo ${str:(-2)}
MN
</code></pre>

<!-- more -->


<h3>3.子串切除</h3>

<pre><code>${string#substring} 从左向右切除最短匹配的子串
${stirng##substring} 从左向右切除最长匹配的子串
${string%substring} 从右向左切除最短匹配的子串
${stirng%%substring} 
</code></pre>

<h3>4.字符串正则提取</h3>

<pre><code>echo $string | grep -oE "regexpression”
</code></pre>

<p>&ndash;</p>

<pre><code>[jason@localhost ~]$ str="I am 12 years old"
[jason@localhost ~]$ echo $str | grep -Eo '[0-9]+'
12
</code></pre>

<h3>5.字符串正则替换</h3>

<pre><code>echo $string | sed -r 's/regexpr/replacement'
</code></pre>

<p>&ndash;</p>

<pre><code>[jason@localhost ~]$ str="I am 12 years old" 
[jason@localhost ~]$ echo $str | sed -r  "s/ am/'m/"
I'm 12 years old
</code></pre>

<h3>6.分割字符串</h3>

<pre><code>awk
</code></pre>

<p>&ndash;</p>

<pre><code>[jason@localhost ~]$ str="I_am_12_years_old, and you?"
[jason@localhost ~]$ echo $str | awk -F '_' '{print $3}'
12
[jason@localhost ~]$ echo $str | awk  '{split($1,a,"_");print a[3]}'
12
</code></pre>

<h3>7. 获取索引</h3>

<pre><code>awk '{print match($0,"substring")}'
</code></pre>

<p>&ndash;</p>

<pre><code>[jason@localhost ~]$ str="I_am_12_years_old, and you?"
[jason@localhost ~]$ echo $str | awk '{print match($0,"[0-9]+")}'
6
</code></pre>

<p>注意这个索引是从1开始的</p>

<h3>8.sed分组</h3>

<p>sed的分组是很好玩的，在替换模式中，“&amp;”代表前面匹配的全部字符串，而反斜杠加数字表示分组。</p>

<pre><code>[jason@localhost ~]$ str="name:jack;age:12"
[jason@localhost ~]$ echo $str | sed -r 's/name:[^;]+/[&amp;]/'
[name:jack];age:12
[jason@localhost ~]$ echo $str | sed -r 's/name:([^;]+)/--\1--/'
--jack--;age:12
</code></pre>

<h3>9.awk常用字符串处理函数</h3>

<pre><code>sub(reg,replacement,string)
gsub(reg,replacement,string)
</code></pre>

<p>将string中匹配正则表达式reg的字符串（全部）替换为replacement</p>

<pre><code>[jason@localhost ~]$ str="name:jack;age:12"
[jason@localhost ~]$ echo $str | awk '{gsub(/a/,"A",$0);print $0}'      
nAme:jAck;Age:12
</code></pre>

<p>&ndash;</p>

<pre><code>index(substring,string) #返回子字符串substring在字符串string中的位置
length(string) #获取字符串的长度
match(string,reg) #获取匹配reg得到的子串在字符串中的位置
split(string,array,separator) #将字符串按分隔符separator分割到array数组中
sprintf("format",expression) #和c语言的sprintf类似
substr(string,position,length)  #获取子字符串
tolower(string)
toupper(string)
</code></pre>
]]></content>
  </entry>
  
</feed>
