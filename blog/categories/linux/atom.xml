<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Jason's space]]></title>
  <link href="http://qjpcpu.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2018-07-23T11:58:53+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[task tracer -- 实时任务追踪系统]]></title>
    <link href="http://qjpcpu.github.io/blog/2016/02/18/task-tracer/"/>
    <updated>2016-02-18T14:43:27+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2016/02/18/task-tracer</id>
    <content type="html"><![CDATA[<h2 id="section">产生背景</h2>

<p><strong>Task Tracer(以下简称tt)</strong>的产生原因其实是为了解决一个用户体验的缺憾。由于在生产环境中，我们一直使用salt-stack作为任务的发布和执行机构，然而salt使用的Pub/Sub这种模式下有一个遗留缺陷: 就是任务一旦发出，直到它执行结束退出，任务的发起者无法知道任务当前的执行状态,唯一能做的仅仅能够判断该任务是否在running,而不能实时获取其进程输出；其次，当该salt任务执行完成后，需要独立获取其任务标准输出和进程退出状态(exit code)，无法一次性获取其输出和退出状态。salt社区也意识到这个问题，在逐步开发VT模块以求解决，不过这个特性截止到目前仍在实验阶段。</p>

<p>所以，为了消除salt任务执行阶段的黑洞焦虑，我决定开发tt。 虽然tt是为了解决salt的一个问题，但在开发时，我决定将其和salt分离开来，使得tt其实是能够解决这样一类问题: <strong>如果需要实时获取命令执行输出，就可以将命令包裹到tt中执行,从而利用tt Server实时获取其执行输出及结果</strong></p>

<!-- more -->

<p><img src="https://raw.githubusercontent.com/qjpcpu/task-tracer-server/master/snapshots/tt-preview.png" alt="tt preview" /></p>

<h2 id="section-1">工作原理</h2>

<p>tt其实是一个shell命令包裹器，它将要执行的命令以子进程的方式执行起来，实时地将该子进程的输出发送到tt Server，这样用户(api client)就能够从tt Server实时读取到该进程的输出；使用到的技术其实也很简单，就是nodejs+socket.io。
<img src="https://raw.githubusercontent.com/qjpcpu/task-tracer-server/master/snapshots/data-flow.png" alt="tt" /></p>

<p>从这张原理图可以看到，tt的数据流是单向的，也就是说这里的任务发起需要第三方来做，比如salt-stack甚至手动的shell登录后发起。当任务发起后，tt client会吐出一个输出结果查看的url，使用你的浏览器访问该url就可以实时查看任务的输出，另外，相同任务名下执行的所有tt client都会将输出发布出来，均可以查看。</p>

<p>另外，tt是一个实时输出查看跟踪系统，所以不会持久化任务的输出。</p>

<h2 id="try-our-live-demo">Try our live demo</h2>

<h3 id="section-2">1. 配置客户端</h3>

<p>根据你的系统类型(osx/linux)下载客户端可执行文件tt</p>

<p><code>
# for osx
wget https://raw.githubusercontent.com/qjpcpu/task-tracer-client/master/dist/tt.darwin -O tt
# for linux
wget https://raw.githubusercontent.com/qjpcpu/task-tracer-client/master/dist/tt.linux -O tt
</code></p>

<p>客户端会读取配置文件<code>$HOME/.tt.conf</code>，将其内容配置为:</p>

<p><code>
id = natasha
token = eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiY2xpZW50X3Rva2VuIiwibnMiOiJ0ZXN0IiwiaWF0IjoxNDU1NzgwNDU0LCJleHAiOjE0ODczMzgwNTR9.hk96PzocFTSGogl1evyWa4UGjDpQ4nAWppIMCl6lnlo
url = http://tt.single-bit.org
</code></p>

<p>同样的方法再配置一台客户端，注意其配置文件中id和另一台不同（可以根据需要配置任意多台客户端,注意其配置文件中id需要各不相同）。</p>

<p><code>
id = tanya
token = eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiY2xpZW50X3Rva2VuIiwibnMiOiJ0ZXN0IiwiaWF0IjoxNDU1NzgwNDU0LCJleHAiOjE0ODczMzgwNTR9.hk96PzocFTSGogl1evyWa4UGjDpQ4nAWppIMCl6lnlo
url = http://tt.single-bit.org
</code></p>

<h3 id="section-3">2. 访问任务追踪页面</h3>

<p>打开浏览器访问<a href="http://tt.single-bit.org/?accessToken=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYnJvd3Nlcl90b2tlbiIsIm5zIjoidGVzdCIsImlhdCI6MTQ1NTc4MDQ1NCwiZXhwIjoxNDg3MzM4MDU0fQ.AuhXIVNxk5LYoamU2ziSBqvn0tEqyrszAvsCom3OmgI">tt Server live demo</a></p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/task-tracer-server/master/snapshots/live-demo-index.png" alt="live demo index page" /></p>

<p>填入我们需要追踪的任务名称，如: <strong>demo</strong>并确定，进入到任务监听状态。</p>

<h3 id="section-4">3. 执行任务</h3>

<p>在配置好的两台客户端上同时执行命令:</p>

<p><code>
tt -n demo 'echo "from `head -1 ~/.tt.conf`";sleep 2;echo "sleep for a while";sleep 5;echo done'
</code></p>

<p>在浏览器上可以看到实时输出: 在<code>tanya</code>和<code>natasha</code>分别输出各自的id，然后等待一会儿后进程执行结束.</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/task-tracer-server/master/snapshots/live-demo-output.png" alt="live demo output page" /></p>

<p>你也可以在执行过程中在某个客户端上执行<code>kill</code>命令或<code>Ctrl+C</code>终止进程，并查看浏览器实时反馈的结果。</p>

<h2 id="as-a-sevice----tt-server">As a sevice – 搭建自己的tt Server</h2>

<p>如果tt仅仅是作为一个web页面查看机器上的进程输出，那其实也没多大存在意义，关键是对于一个devops来说，它需要能够比较容易地嵌入你的系统工具里。</p>

<h3 id="section-5">1. 系统接口</h3>

<p>ttServer对外提供了若干<a href="http://socket.io/">socket.io</a>事件接口，基于你的需求，可以非常容易地接入到你自己的系统中，这样一来，怎样在UI上展示就完全取决于自己的实现。至于socket.io也有很多语言已经实现了该规范，所以使用起来应该也很简单。</p>

<p>详细接口定义及实现方式请查看<a href="https://github.com/qjpcpu/task-tracer-server">tt Server github文档</a></p>

<h3 id="section-6">2. 客户端安装配置</h3>

<p>tt的客户端安装配置非常简单，仅仅包含一个可执行文件tt和一份简单的ini格式的配置文件,令人愉悦的是该客户端没有环境依赖，不需要安装node等执行环境。</p>

<p>如果下载的二进制文件无法执行，请从源码编译。</p>

<p>具体的客户端安装配置可以查看<a href="https://github.com/qjpcpu/task-tracer-client">tt Client github文档</a></p>

<h2 id="logio">相关系统: log.io</h2>

<p><a href="http://logio.org/">log.io</a>是一个实时日志监控系统，其系统架构和实现方式都和tt非常相似。不过其应用场景是实时的日志采集监控，另外，logio的客户端有node环境依赖，个人觉得有点部署不完美。</p>

<p><img src="http://logio.org/screenshot3.png" alt="log.io" /></p>

<h2 id="github">附录: github地址</h2>

<p><a href="https://github.com/qjpcpu/task-tracer-server">tt Server</a></p>

<p><a href="https://github.com/qjpcpu/task-tracer-client">tt Client</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[server load]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/27/server-load/"/>
    <updated>2014-03-27T09:39:14+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/27/server-load</id>
    <content type="html"><![CDATA[<h3 id="section">先看几个处理器</h3>

<p><code>bash
grep -c 'model name' /proc/cpuinfo
</code>
比如结果是4</p>

<h3 id="top">top查看系统整体情况</h3>

<p>执行<code>top</code>命令查看系统负载情况：
1. 关注<code>load average</code>系统负载的当前，5分钟前，15分钟前负载，最好小于cpu个数
2. 第二行显示系统进程概况
3. 第四行us用户占用cpu，sy系统占用cpu，ni，id空闲比例，wa io等待，hi，si swap交换
4. 最后是内存情况和交换分区</p>

<h3 id="iostatio">iostat检查io情况</h3>

<p><code>iostat -x</code>，需要关注await即io等待时间，单位ms，一般要小于5ms； %util是io处理时间除以总时间，代表io繁忙度，大于70%需要注意。</p>

<!--more-->

<h3 id="vmstat">vmstat查看系统概况</h3>

<pre><code>procs -----------memory---------- ---swap-- -----io---- --system-- ----cpu----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in    cs us sy id wa
 1  0 409548 3317764  56864 39709176    0    0    12    29    0     0  4  1 96  0
</code></pre>

<p>主要看r和b，代表当前执行进程和阻塞进程，当r长期大于cpu个数需要注意，还有阻塞进程过多也需要注意</p>

<h3 id="pspstree">ps和pstree查看进程</h3>

<p>查看线程个数可以用<code>cat /proc/PID/status|grep Threads</code>，另外对于ps，可以这样查看具体线程</p>

<p><code>bash
ps -mp PID -o THREAD,tid,time
</code>
如：</p>

<pre><code>USER     %CPU PRI SCNT WCHAN  USER SYSTEM   TID     TIME
work      1.8   -    - -         -      -     - 15:08:33
work      0.0  14    - -         -      - 11750 00:00:00
work      0.0  23    - -         -      - 11751 00:00:14
work      0.0  23    - -         -      - 11760 00:03:36
</code></pre>

<p>关注%CPU占用cpu情况，TID是线程id，TIME是占用cpu的时间长。</p>

<p>对于java进程可以用来调试程序：</p>

<p><code>bash
# tid 转为16进制
printf "%x\n" tid
jstack PID | grep tid -A 50
</code>
### 怎么启动这个程序的</p>

<p><code>bash
pmap PID
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux日常维护]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/21/linuxri-chang-wei-hu/"/>
    <updated>2014-02-21T22:58:13+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/21/linuxri-chang-wei-hu</id>
    <content type="html"><![CDATA[<h3 id="cron">某些用户cron任务失败</h3>

<p>有时某些普通用户的crontab任务会失败，这可能是由于crond执行普通用户的任务时，是以非登录shell的形式切换到普通用户来执行的，所以可能缺失了某些环境变量。</p>

<p>解决办法是在crontab任务前先执行<code>source /home/username/.bash_profile</code>，后面再接用户自己的任务命令即可。</p>

<p>ps.<code>/etc/profile</code>,<code>~/.bash_profile</code>,<code>~/.bashrc</code>三个脚本的区别：</p>

<ul>
  <li>/etc/profile     #系统级初始化脚本，会被登录shell执行</li>
  <li>~/.bash_profile  #用户配置，会被登录shell执行，非登录shell不执行</li>
  <li>~/.bashrc        #非登录shell执行，但通常~/.bash_profile都会在代码里调用~/.bashrc，所以登录shell也执行它</li>
</ul>

<!--more-->
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步搭建mysql主从同步]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/yi-bu-yi-bu-da-jian-mysqlzhu-cong-tong-bu/"/>
    <updated>2014-02-15T00:24:49+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/yi-bu-yi-bu-da-jian-mysqlzhu-cong-tong-bu</id>
    <content type="html"><![CDATA[<h3 id="mysql">下载mysql数据库</h3>

<pre><code>$ wget http://cdn.mysql.com/Downloads/MySQL-5.1/mysql-5.1.73.tar.gz
tar vzxf mysql-5.1.73.tar.gz
</code></pre>

<!-- more -->

<h3 id="section">编译安装</h3>

<p>最好专门创建一个用户mysql来安装数据库。</p>

<pre><code>MYSQL_BASEDIR=$HOME/mysql
cd mysql-5.1.73
./configure 
--prefix=${MYSQL_BASEDIR} 
--with-charset=utf8 
--with-extra-charsets=gbk,utf8,ascii,big5,latin1,binary 
--with-unix-socket-path=${MYSQL_BASEDIR}/tmp/mysql.sock 
--with-mysqld-user=mysql     #以哪个用户执行mysqld进程
make
make install
</code></pre>

<h3 id="section-1">初始化数据库</h3>

<p>复制必要的配置文件和启停脚本</p>

<pre><code>cd ${MYSQL_BASEDIR}
mkdir etc log tmp var
cp share/mysql/my-medium.cnf  etc/my.cnf
cp share/mysql/mysql.server  bin/
</code></pre>

<h3 id="section-2">修改配置文件</h3>

<pre><code>vim etc/my.cnf
</code></pre>

<p>在[mysqld]下添加配置项：</p>

<pre><code>basedir= ${MYSQL_BASEDIR}   # ${MYSQL_BASEDIR}是你的mysql安装目录
datadir = ${MYSQL_BASEDIR}/var   # mysql数据路径
tmpdir = ${MYSQL_BASEDIR}/tmp   # 临时文件路径
slave-load-tmpdir = ${MYSQL_BASEDIR}/tmp   # 从服务器同步LOAD DATA INFILE语句时创建临时文件的目录名
port = 3306   # 如果修改port，[mysqld] 和 [client]下的port都要修改
pid-file = ${MYSQL_BASEDIR}/var/mysql.pid  # mysqld PID文件位置
#以下为可选
socket = ${MYSQL_BASEDIR}/tmp/mysql.sock  # 用于指定本地连接的Unix套接字文件位置，[mysqld] 和 [client]下的port都要修改
#skip-name-resolve   # 是否仅使用ip验证客户端
#skip-symbolic-links  #忽略MyISAM表的数据及索引文件连接到另一个目录下
max_connect_errors = 10000
max_connections = 500
wait-timeout = 30
</code></pre>

<p>启动数据库</p>

<pre><code>$ ./bin/mysql_install_db  #安装数据库文件
$ ./bin/mysql.server start    #出现下面这行说数据库启动ok了
Starting MySQL.                                            [  OK  ]
</code></pre>

<h3 id="mysql-1">配置mysql用户</h3>

<p>使用./bin目录下的mysql命令可以登录到数据库，登录后删除匿名用户并且为root设置密码：</p>

<pre><code>$ mysql -u root
&gt; delete from mysql.user where user='';
&gt; UPDATE mysql.user SET Password = PASSWORD('password') WHERE user='root';
</code></pre>

<p>按照以上同样的步骤再搭建一个mysql，注意，如果在同一主机搭建多个mysql实例，那么就需要将端口改成不同才行。</p>

<p>下面开始配置主从同步。</p>

<p>首先在主库新建专门用于同步的数据库账号mysqlsync</p>

<pre><code>&gt; GRANT REPLICATION SLAVE ON *.* TO 'mysqlsync'@'%' IDENTIFIED BY 'password';
</code></pre>

<h3 id="section-3">主库配置</h3>

<p>所有的配置项还是在my.cnf中的[mysqld]下添加。</p>

<p>首先server-id作为MySQL服务器的标识，具有相关联上下游同步系统需具有全局唯一性。主库我们将server-id配置为1。其他主库需要添加的配置有：</p>

<pre><code>server-id=1
# 同步过程中需要忽略的表，支持正则表达式。全库同步时，必须屏蔽mysql系统库和test测试库。
replicate-wild-ignore-table = mysql.%
replicate-wild-ignore-table = test.%
# 需要同步的表，多个表需多次指定，这里我们使用全库同步,方便点
# replicate-do-table = database.table
log-bin = mysql-bin  #二进制日志，强制开启
log-bin-index = mysql-bin.index  # 记录二进制日志索引文件
relay-log-index = relay-log.index # 记录中继日志索引文件
</code></pre>

<h3 id="section-4">从库配置</h3>

<pre><code>server-id=2
read-only # 在从库开启该选项，避免在从库上进行写操作，导致主从数据不一致（不过对super权限无效哦）
skip-slave-start # 在从库开启该选项，启动数据库后，需手动开启同步进程
relay-log = mysql-relay #中继日志，从库开启
relay-log-index = relay-log.index
log-bin = mysql-bin
log-bin-index = mysql-bin.index
replicate-wild-ignore-table = mysql.%
replicate-wild-ignore-table = test.%
</code></pre>

<h3 id="section-5">同步设置</h3>

<p>启动主数据库，并查看主库状态：</p>

<pre><code>$ ./bin/mysql.server start
$ mysql -u root -p
mysql&gt; show master status;
</code></pre>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=21e536be79899e517c8e3a11729ca80e/e7cd7b899e510fb31b3b92d4db33c895d1430c56.jpg?referer=a44e286a8418367af49e4aed6c4d&amp;x=.jpg" alt="image" /></p>

<p>记下来log文件名和位置，这里是“mysql-bin.000005”和”106“。</p>

<p>然后启动从库，</p>

<pre><code>$ ./bin/mysql.server start
$ mysql -u root -p
mysql&gt; change master to master_host='your_host',master_port=3307,master_user='mysqlsync',master_password='pasword',master_log_file='mysql-bin.000005',master_log_pos=106;
mysql&gt; startslave;  #启动从库
mysql&gt; show slave status\G;
</code></pre>

<p>最后一条sql命令得到如图结果：</p>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=a307b4b80846f21fcd345e56c61f1a5d/7acb0a46f21fbe091fae395769600c338644ad85.jpg?referer=781a5e5095dda144831e58820b9b&amp;x=.jpg" alt="image" /></p>

<p>其中Slave_IO_Running和Slave_SQL_Running是yes就对了。</p>

<p>最后，可以验证一下，在主库修改记录，从库可以看到同步过来的变化。</p>
]]></content>
  </entry>
  
</feed>
