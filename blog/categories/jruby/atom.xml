<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jruby | Jason's space]]></title>
  <link href="http://qjpcpu.github.io/blog/categories/jruby/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2022-09-10T08:30:34+00:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[初识jruby之在tomcat上部署jruby-on-rails]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/chu-shi-jrubyzhi-zai-tomcatshang-bu-shu-jruby-on-rails/"/>
    <updated>2014-02-14T15:58:44+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/chu-shi-jrubyzhi-zai-tomcatshang-bu-shu-jruby-on-rails</id>
    <content type="html"><![CDATA[<h3 id="prerequesite">1. prerequesite</h3>

<p>假定部署的sever上已经安装好了Java环境和mysql数据库（因为这里我将以mysql为例）。并且，这里为了和前面几篇博文保持一致，还是在windows上进行部署，实际在linux上部署的节奏也差不多了，即便遇到问题，google is ready for you.</p>

<!-- more -->

<h3 id="apache-tomcat">2. 安装配置Apache Tomcat</h3>

<p>首先，在Apache Tomcat网站上下载tomcat压缩包，目前的版本是7.0。下载完成后解压缩，如解压到C:\，解压缩后目录结构如图：</p>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=c5fe07e6d343ad4ba22e46c5b2392b92/c995d143ad4bd1136f3d4d7158afa40f4afb0584.jpg?referer=97197c6f8501a18ba9fc267f639b&amp;x=.jpg" alt="image" /></p>

<p>进入其中bin目录，并以管理员身份运行startup.bat批处理文件启动tomcat，tomcat默认端口为8080，所以，在浏览器中访问http://localhost:8080 ，如果出现图示页面说明tomcat安装配置正确。</p>

<p><img src="http://d.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=79626b7c49fbfbedd859367a48cb860b/a50f4bfbfbedab642082b783f536afc378311e84.jpg?referer=24c5e74b1d30e92496b3a8015a9b&amp;x=.jpg" alt="image" /></p>

<h3 id="jruby">3. 下载安装jruby</h3>

<p>安装jruby在前一篇博文讲解较细，这里不再赘述。</p>

<p>安装必要的JDBC。</p>

<pre><code>jruby -S gem install activerecord-jdbcmysql-adapter -v 1.3.0.beta2
</code></pre>

<p>如果要将jruby on rails工程打包为war发布到tomcat上，就必须要用到warbler Gem：</p>

<pre><code>jruby -S gem install warbler
</code></pre>

<h3 id="jruby-on-rails">4. 打包jruby on rails工程</h3>

<p>首先确认database.yml文件production环境配置正确：</p>

<pre><code>production:
  adapter: mysql
  encoding: utf8
  reconnect: false
  database: demo_production
  username: user
  password: password
  host: localhost
  port: 3306
</code></pre>

<p>配置正确的production数据库，及其用户密码。</p>

<p>在数据库中创建production数据库demo_production，并且赋予用户user对该数据库的完全权限。</p>

<p>然后开始打包工程，在rails app根目录下执行：</p>

<pre><code>jruby -S warble
</code></pre>

<p>该命令会在工程根目录下生成一个war文件，如demo.war，该war会将必要的gem打包进去，使得我们能够像普通java工程war文件那样部署到tomcat中。</p>

<h3 id="war">5. 部署war</h3>

<p>将该war复制到tomcat的webapps目录下，等待大约几秒钟，tomcat会自动释放文件完成部署。</p>

<p>最后一步，进入tomcat释放的文件夹demo中，生成数据库schema：</p>

<pre><code>C:\apache-tomcat-7.0.35\webapps\demo&gt;jruby -S rake db:migrate RAILS_ENV="production"
</code></pre>

<p>现在可以访问http://localhost:8080/demo ，可以看到rails app的首页了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识jruby之安装配置jrubyonrails]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/chu-shi-jrubyzhi-an-zhuang-pei-zhi-jrubyonrails/"/>
    <updated>2014-02-14T15:49:23+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/chu-shi-jrubyzhi-an-zhuang-pei-zhi-jrubyonrails</id>
    <content type="html"><![CDATA[<h3 id="prerequesite">1. prerequesite</h3>

<p>假设你已经安装好了jruby，并且使用的jdk最好是1.7。</p>

<h3 id="rails">2. 安装rails</h3>

<p>安装rails4.0.0：</p>

<pre><code>C:\&gt;jruby -S gem install rails -V
</code></pre>

<p>查看安装的rails版本：</p>

<pre><code>C:\&gt;jruby -S rails -v
Rails 4.0.0
</code></pre>

<!-- more -->

<h3 id="rails-apps">3. 新建一个rails Apps</h3>

<pre><code>C:\&gt;jruby -S rails new demo
</code></pre>

<p>并且取消bundle install，因为使用默认安装的ActiveRecord-JDBC-adapter的master分支版本目前，会导致执行rake db:migrate命令时发生wrong number of arguments calling exec_insert (5 for 3) error错误，所以，修改gemfile使用它的1.3.0.beta2版本（这个步骤是现在的权宜之计，以后肯定不必这么麻烦了。后注：此问题目前已修复)：</p>

<p>如果使用的是sqlite数据库，则将：</p>

<pre><code>gem 'activerecord-jdbcsqlite3-adapter'
</code></pre>

<p>改为：</p>

<pre><code>gem 'activerecord-jdbcsqlite3-adapter', '1.3.0.beta2'
</code></pre>

<p>如果使用的mysql数据库，则将：</p>

<pre><code>gem 'activerecord-jdbcmysql-adapter'
</code></pre>

<p>改为：</p>

<pre><code>gem 'activerecord-jdbcmysql-adapter','1.3.0.beta2'
</code></pre>

<p>然后再进行 jruby -S bundle install 安装gem。</p>

<p>如果使用sqlite数据库，默认配置即可，如果使用mysql数据库，则修改database.yml，以development
环境为例，这里的username，password，host，port按照具体情况进行具体配置：</p>

<pre><code>development:
  adapter: mysql
  encoding: utf8
  reconnect: false
  database: demo_development
  username: user
  password: user_password
  host: localhost
  port: 3306
</code></pre>

<p>最后，启动rails app：</p>

<pre><code>C:\DEMO&gt;jruby -S rails s
</code></pre>

<p>然而此时又出错了：</p>

<pre><code>OpenSSL::Cipher::CipherError: Illegal key size: possibly you need to install Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files for your JRE
</code></pre>

<p>要求安装JCE，到Oracle 官网上下载一个UnlimitedJCEPolicyJDK7.zip文件，解压缩后包含两个jar文件：local_policy.jar和US_export_policy.jar。将这两个文件替换$JAVA_HOME/jre/lib/security目录下两个同名文件，如，在我的电脑是就是替换C:\Program Files\Java\jdk1.7.0_25\jre\lib\security目录下两个文件。替换后，重启电脑。</p>

<p>此时，再jruby -S rails s启动app则可以正确运行了。</p>

<h3 id="java">4. 配置java类路径</h3>

<p>如果需要在rails中使用java外部类，则需要配置一下$CLASSPATH，首先，假设我们将需要的java类都放在rails_root/lib/java文件夹下。那么就在environment.rb文件中require File.expand_path(‘../
application’, __FILE__)后添加代码：</p>

<pre><code>require 'java'
$CLASSPATH &lt;&lt; File.join(Rails.root, 'lib','java')
</code></pre>

<p>这样，如果在该目录下有一个编译好的java类example.MyClass在rails中就可以像这样使用该类：</p>

<pre><code>mc=Java::example.MyClass.new
</code></pre>

<p>如果还使用了外部jar，则还要添加引用jar的代码，同样在environment.rb文件中添加：</p>

<pre><code>Dir.glob(File.join(Rails.root, 'lib','java',"**","*.jar")).each do |jar| 
	$CLASSPATH &lt;&lt; jar
end
</code></pre>

<p>所以最终environment.rb文件看起来是这样的：</p>

<blockquote>
  <p>environment.rb</p>
</blockquote>

<pre><code># Load the rails application
require File.expand_path('../application',__FILE__)
requrie 'java'
$CLASSPATH&lt;&lt;File.join(Rails.root,'lib','java')
Dir.glob(File.join(Rails.root,'lib','java','**','*.jar)).each do |jar|
	$CLASSPATH &lt;&lt; jar
end

Demo::Application.initialize!
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识jruby之入门]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/chu-shi-jrubyzhi-ru-men/"/>
    <updated>2014-02-14T09:24:21+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/chu-shi-jrubyzhi-ru-men</id>
    <content type="html"><![CDATA[<p>首先，Jruby的官方站点是http://jruby.org/ ，最详尽的资料都在那里。至于为什么选择JRuby，官方站点上列举了诸如jvm的普及以及性能等等优点，但我想最简单的回答就是，我喜欢用ruby编程，而大多数不再充电的老板还固守着java，对他们来说，相对于ruby，java这个词本身先产生了50%的安全感，所以这可能是比较贴近现实的选择。不过我今天想去倒腾倒腾这个东西，则完全是为了了解ruby的方方面面。</p>

<!-- more -->

<h3 id="section">1. 下载安装</h3>

<p>首先在官方下载页下载安装最新的jruby，这部分内容还是老老实实去下载页照着做，话说配置开发环境不是每个程序员的必修课吗？不过放心，jruby安装起来很方便的，安装完成后，查看jruby版本，验证是否正确安装：</p>

<pre><code>C:\&gt;jruby --version
jruby 1.7.4 (1.9.3p392) 2013-05-16 2390d3b on Java HotSpot(TM) 64-Bit Server VM 1.6.0_38-b05 [Windows 7-amd64]
</code></pre>

<h3 id="jrubyrakegem">2. 在jruby中使用rake,gem等</h3>

<p>在jruby下使用这些命令需要前缀一个jruby -S命令，如：</p>

<pre><code>jruby -S gem list --local
jruby -S gem install rails mongrel jdbc-mysql activerecord-jdbcmysql-adapter
jruby -S rails new blog 
cd blog
jruby -S rake -T
jruby -S rake db:create
jruby -S rake db:migrate
</code></pre>

<p>另外，jruby的控制台进入命令时jirb而不是irb：</p>

<pre><code>C:\&gt;jirb
irb(main):001:0&gt;
</code></pre>

<h3 id="jrubyjava">3. 在jruby中调用java类</h3>

<p>例如，在C:\DEMO文件夹下有一个java类文件JavaMan.java：</p>

<pre><code>package example;

public class JavaMan {
  
  public JavaMan() {
  }
  
  public void hello() {
      System.out.println("Hello, I am a Java man!");
  }
  public void hello(String name){
     System.out.println("Hello "+name+", I am a Java man!");
  }
  
}
</code></pre>

<p>然后在命令行中编译该java类文件：</p>

<pre><code>C:\DEMO&gt;javac JavaMan.java -d .
</code></pre>

<p>在C:\DEMO下建立ruby文件demo.rb：</p>

<pre><code>require 'java'
java_import "example.JavaMan" #导入java类JavaMan
j=JavaMan.new
j.hello
j.hello "Jason"
</code></pre>

<p>在命令行中执行该ruby脚本使用jruby命令：</p>

<pre><code>C:\DEMO&gt;jruby demo.rb
Hello, I am a Java man!
Hello Jason, I am a Java man!
</code></pre>

<p>也可以直接在jirb中调试ruby程序：</p>

<pre><code>C:\DEMO&gt;jirb
irb(main):001:0&gt; java_import 'example.JavaMan'
=&gt; [Java::Example::JavaMan]
irb(main):002:0&gt; JavaMan.new.hello "Jason"
Hello Jason, I am a Java man!
=&gt; nil
</code></pre>

<h3 id="jrubyjava-1">4. 在jruby中实现java接口</h3>

<p>若有一个java接口类：</p>

<pre><code>package example;
public interface JavaDog{
	public void runs();
}
</code></pre>

<p>那么可以在ruby代码中实现该接口：</p>

<pre><code>require 'java'
java_import "example.JavaDog" #导入java接口

class FastDog
	include JavaDog
	def runs
		puts "I am running fast!"
	end
end

FastDog.new.runs
</code></pre>

<p>运行结果：</p>

<pre><code>C:\DEMO&gt;jruby demo.rb
I am running fast!
</code></pre>

<h3 id="jrubyjar">5. 在jruby中调用jar中的类</h3>

<p>若在C:\DEMO\some.jar中包含了一个java bean， example.Person，该类包含了四个属性name,age,sex,country，除了country外其他三个属性都有setter和getter，另外该Person bean还有一个方法getProfile()获取简历。</p>

<pre><code>require 'java'
require 'some.jar'
java_import "example.Person"

p=Person.new
p.name="Jason"
p.age=10
p.sex="Male"
begin
	p.country="China"
rescue NoMethodError =&gt; e
	puts "No country setter in Person bean"
end
puts p.getProfile
</code></pre>

<p>运行结果：</p>

<pre><code>C:\DEMO&gt;jruby demo.rb
No country setter in Person bean
Name:Jason Sex:Male Age:10
</code></pre>
]]></content>
  </entry>
  
</feed>
