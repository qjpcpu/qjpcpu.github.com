<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Jason's space]]></title>
  <link href="http://qjpcpu.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2022-09-26T13:27:25+00:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[怎样写一个解释器]]></title>
    <link href="http://qjpcpu.github.io/blog/2022/09/09/how-to-write-your-interpreter/"/>
    <updated>2022-09-09T11:57:00+00:00</updated>
    <id>http://qjpcpu.github.io/blog/2022/09/09/how-to-write-your-interpreter</id>
    <content type="html"><![CDATA[<p>写一个解释器，通常是设计和实现一个编程语言的第一步,或者如果我们想要一种自定义程度较高的 DSL，通常也不得不自行去实现解释器。而如何实现一个解释器，网络上的资料其实也并不算多，所以我这里简单做个分享。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">写在前面</a></li>
  <li><a href="#lisp-">Lisp 语法</a></li>
  <li><a href="#lisgo-">lis.go 计算器</a></li>
  <li><a href="#section-1">解释器工作流程</a></li>
  <li><a href="#get-started">Get started</a>    <ul>
      <li><a href="#section-2">类型定义</a></li>
      <li><a href="#parsing-parse-tokenize-and-readfromtokens">Parsing: parse, tokenize and read_from_tokens</a></li>
      <li><a href="#section-3">基础环境</a></li>
      <li><a href="#evaluation-eval">Evaluation: eval</a></li>
      <li><a href="#interaction-a-repl">Interaction: A REPL</a></li>
      <li><a href="#section-4">自定义函数</a></li>
    </ul>
  </li>
  <li><a href="#section-5">完整代码</a></li>
  <li><a href="#section-6">应用到生产环境?</a></li>
</ul>

<h1 id="section">写在前面</h1>

<p>写一个解释器，通常是设计和实现一个编程语言的第一步,或者如果我们想要一种自定义程度较高的 DSL，通常也不得不自行去实现解释器。而如何实现一个解释器，网络上的资料其实也并不算多，所以我这里简单做个分享。</p>

<p>要完整实现一个编译器/解释器，需要语法设计到编译前后端的完整实现，这涉及到巨大的工作量。但通常我们只需要能够实现 DSL，使得 DSL 能够依托于我们主语言环境运行即可，不需要考虑编译后端的问题。所以本文的解释器仅涉及到编译前端流程，后端执行细节交给宿主语言运行时。</p>

<p>此外，如果一开始就选择非常复杂的语言如 Python、Ruby或Haskell, 会让我们掉入词法/语法解析的深坑，但对学习书写解释器没什么帮助，所以我们选择了语法规则简单的 lisp 来实现一个解释器。</p>

<p>另外，主语言使用 Golang, 除了语言本身比较简单，也为了读者对照实验没有环境部署的焦虑。</p>

<blockquote>
  <p>If you don’t know how compilers work, then you don’t know how computers work.</p>

  <p>http://norvig.com/lispy.html 
Steve Yegge.</p>
</blockquote>

<h1 id="lisp-">Lisp 语法</h1>

<p>考虑到很多国内的同学可能没有接触过 lisp，这里首先简单介绍下其语法。</p>

<ul>
  <li>golang</li>
</ul>

<p><code>go
if x &gt; 0 {
  return fn(arr[i] + 3 * i, []string{"a", "b"})
}
</code></p>

<ul>
  <li>lisp</li>
</ul>

<p><code>clojure
(if (&gt; x 0)
  (fn (+ (array_get arr i) (* 3 i)) 
      (list "a" "b")))
</code></p>

<p>如上例所示，尽管golang 相较于其他语言，其语法已经非常简单，但是它仍然有数十个关键字，几个中置操作符, 操作优先级、逗号、各种括号等等，其语法规范仍然是比较多的；而相对来说，lisp 的语法规范就简单很多： </p>

<ul>
  <li>lisp 代码仅包含表达式，不包含语句，即，每一句lisp 必定都会返回值；</li>
  <li>数字、字符串、符号均称为「原子」，原子不可分解；</li>
  <li>除了原子外所有东西都是「列表」，列表以 <code>(</code>开头,<code>)</code>结尾；列表的第一个元素要么是一个关键字，要么是一个函数调用；</li>
</ul>

<p>lisp 的这种设计导致代码可读性略有下降，但是却带来易解析、表意性强、代码和数据统一等诸多优点，因此长期是国外CS教学的首选语言。</p>

<h1 id="lisgo-">lis.go 计算器</h1>

<p>我们本次的目标是基于 lisp 在 golang 是实现一个计算器。该计算器支持以下一些表达式:</p>

<table>
  <thead>
    <tr>
      <th>Expression</th>
      <th>Syntax</th>
      <th>Semantics and Example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>符号</td>
      <td>symbol</td>
      <td>一个符号通常引用了一个值，如 (define r 10) 表示符号 r 引用了值 10</td>
    </tr>
    <tr>
      <td>字面量</td>
      <td>number</td>
      <td>比如数字 12</td>
    </tr>
    <tr>
      <td>条件分支</td>
      <td>(if test conseq alt)</td>
      <td>如果 test 为 true，则返回 conseq，否则返回 alt</td>
    </tr>
    <tr>
      <td>变量绑定</td>
      <td>(define symbol expr)</td>
      <td>定义一个符号 symbol,且将其值绑定为 expr</td>
    </tr>
    <tr>
      <td>函数调用</td>
      <td>(proc arg …)</td>
      <td>如果 proc 是关键字，如 if，则执行分支逻辑，否则寻找对应函数进行调用</td>
    </tr>
  </tbody>
</table>

<h1 id="section-1">解释器工作流程</h1>

<p>解释器执行通常包含两步：</p>

<ul>
  <li>Parsing</li>
</ul>

<p>解析代码生成抽象语法树,这一步通常叫 <code>parse</code>。</p>

<ul>
  <li>Execution</li>
</ul>

<p>对 AST 求值，返回我们想要的结果,这一步通常叫 <code>eval</code>。</p>

<p>下图是解释器工作的简单示例:</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/parsing-and-execution.png" alt="parsing-execution" /></p>

<p>如下代码是是<code>parse</code>和<code>eval</code>工作的代码示例：</p>

<p>```go
» program := “(begin (define r 10) (* pi (* r r)))”</p>

<blockquote>
  <blockquote>
    <p>parse(program)
[‘begin’, [‘define’, ‘r’, 10], [’<em>’, ‘pi’, [’</em>’, ‘r’, ‘r’]]]</p>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <p>eval(parse(program))
314.1592653589793
```</p>
  </blockquote>
</blockquote>

<h1 id="get-started">Get started</h1>

<h2 id="section-2">类型定义</h2>

<p>首先，我们定义好 lis.go 需要的基本类型:</p>

<p>```go
// 所有的表达式都需要实现 Expression 接口,该接口仅仅是一个标记接口
type Expression interface {
	Sexpr() string
}</p>

<p>// 符号类型
type Symbol string
// 列表类型,其实是一个单向链表,每个节点存储当前表达式和下一个节点指针
type List struct {
	Val  Expression
	Rest <em>List
}
// 函数类型
type Function func(</em>Env, []Expression) Expression
// 布尔类型
type Bool bool
// 整数
type Integer int64
// 浮点数
type Float float64</p>

<p>// 环境,包含父环境的引用及当前环境的符号表
type Env struct {
	parent *Env
	scope  map[string]Expression
}
```</p>

<p>我们定义的基本接口<code>Expression</code>，所有lis.go的类型都需要实现该接口，包括了：</p>

<ul>
  <li>Symbol 符号</li>
  <li>Integer 整数</li>
  <li>Float 浮点数</li>
  <li>Bool 布尔值</li>
  <li>List 列表</li>
  <li>Function 函数</li>
</ul>

<p>此外，我们还定义了环境 <code>Env</code>。或者叫作用域，程序运行时的符号查找都需要依赖于所处的环境，比如同一个符号 <code>a</code>，在不同的环境中，很可能引用了不同的值。</p>

<p>每个符号的解释，都需要优先查找当前环境，如果找不到则向上到父环境查找，直至根环境。这也很好理解，其实就是一个变量是局部变量还是全局变量的区别。</p>

<h2 id="parsing-parse-tokenize-and-readfromtokens">Parsing: parse, tokenize and read_from_tokens</h2>

<p>解析的过程通常分为两步：</p>

<ul>
  <li>词法解析，逐个字符读取代码文件，将字符串流解析为「词」的流，也叫 tokenize</li>
  <li>语法解析，对 token 流进行语义分析，生成 AST</li>
</ul>

<p>词法分析有很多现成的工具，这里我们使用最简单的一种: golang的 <code>strings.Split</code></p>

<p><code>go
func tokenize(s string) *TokenStream {
	s = strings.ReplaceAll(s, "(", " ( ")
	s = strings.ReplaceAll(s, ")", " ) ")
	return &amp;TokenStream{tokens: strings.Split(s, " ")}
}
</code></p>

<p><code>parse</code> 函数接受代码字符串作为输入,调用<code>tokenize</code> 得到 token 流, 然后调用 <code>read_from_tokens</code> 将词流组织成抽象语法树。</p>

<p><code>read_from_tokens</code> 遇到 <code>(</code> 则开始一个列表的解析,直至遇到列表结束符<code>)</code>;如果其他 case 则作为原子解析。</p>

<p>```go
// Read an expression from a sequence of tokens.
func read_from_tokens(tokens *TokenStream) Expression {
	if tokens.Empty() {
		panic(“unexpected EOF while reading”)
	}
	token := tokens.Pop()
	if “(“ == token {
		l := &amp;List{}
		for tokens.Peek() != “)” {
			l.Append(read_from_tokens(tokens))
		}
		tokens.Pop() // drop ‘)’
		return l
	} else if “)” == token {
		panic(“unexpected )”)
	} else {
		return atom(token)
	}
}</p>

<p>// Numbers become numbers; Booleans become booleans; any other token is a symbol.
func atom(token string) Expression {
	if val, err := strconv.ParseInt(token, 10, 64); err == nil &amp;&amp; !strings.Contains(token, “.”) {
		return Integer(val)
	} else if fval, err := strconv.ParseFloat(token, 64); err == nil {
		return Float(fval)
	} else if token == <code>true</code> || token == <code>false</code> {
		return Bool(token == <code>true</code>)
	} else {
		return Symbol(token)
	}
}
```</p>

<p>OK, 我们的 <code>parse</code> 函数已经可以运行了:</p>

<p>```go
»&gt; program = “(define r 10) (* pi (* r r))”</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>parse(program)
[‘define’, ‘r’, 10], [’<em>’, ‘pi’, [’</em>’, ‘r’, ‘r’]]
```</p>
    </blockquote>
  </blockquote>
</blockquote>

<h2 id="section-3">基础环境</h2>

<p>在进入下一步之前，我们需要为代码准备好执行环境。</p>

<p><code>go
func baseEnv() *Env {
	env := NewEnv(nil)
	env.scope["+"] = Function(plus)
	env.scope["-"] = Function(minus)
	env.scope["*"] = Function(multiple)
	env.scope["/"] = Function(divide)
	env.scope["&gt;"] = Function(gt)
	env.scope["&lt;"] = Function(lt)
	env.scope["=="] = Function(eq)
	return env
}
</code></p>

<p>如前文所述，环境是符号解释的核心组件。在我们的基础环境里，已经定义好了加减乘除等几个基本操作函数，当然，你也可以提前定义好一些全局变量，任何 lis.go 支持的表达式都可以根据需求预置到环境中。</p>

<p>函数的实现也非常简单，以加法为例，其实就是调用了 golang 自己的加法操作符进行计算而已。</p>

<p><code>go
func plus(env *Env, exprs []Expression) Expression {
	if isFloat(exprs[0]) || isFloat(exprs[1]) {
		return Float(toFloat(exprs[0]) + toFloat(exprs[1]))
	}
	return Integer(toInt(exprs[0]) + toInt(exprs[1]))
}
</code></p>

<h2 id="evaluation-eval">Evaluation: eval</h2>

<p>我们将根据之前的需求，实现该表中的能力:</p>

<table>
  <thead>
    <tr>
      <th>Expression</th>
      <th>Syntax</th>
      <th>Semantics and Example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>符号</td>
      <td>symbol</td>
      <td>一个符号通常引用了一个值，如 (define r 10) 表示符号 r 引用了值 10</td>
    </tr>
    <tr>
      <td>字面量</td>
      <td>number</td>
      <td>比如数字 12</td>
    </tr>
    <tr>
      <td>条件分支</td>
      <td>(if test conseq alt)</td>
      <td>如果 test 为 true，则返回 conseq，否则返回 alt</td>
    </tr>
    <tr>
      <td>变量绑定</td>
      <td>(define symbol expr)</td>
      <td>定义一个符号 symbol,且将其值绑定为 expr</td>
    </tr>
    <tr>
      <td>函数调用</td>
      <td>(proc arg …)</td>
      <td>如果 proc 是关键字，如 if，则执行分支逻辑，否则寻找对应函数进行调用</td>
    </tr>
  </tbody>
</table>

<p>下面的代码即 <code>eval</code> 的实现:</p>

<p><code>go
func eval(x Expression, env *Env) Expression {
	switch val := x.(type) {
	case Symbol:
		// variable reference
		return env.Find(val)[val.Sexpr()]
	case *List:
		return evalList(val, env)
	default:
		// constant literal
		return x
	}
}
</code></p>

<p>如果是符号，则从环境中查找其引用的值，如果是列表则调用<code>evalList</code>对列表求值，如果是其他字面量，则直接返回字面量本身。</p>

<p><code>go
func evalList(x *List, env *Env) Expression {
	name := string(x.Val.(Symbol))
	switch name {
	case "if":
		// (if test conseq alt)
		test, conseq, alt := x.Rest.Val, x.Rest.Rest.Val, x.Rest.Rest.Rest.Val
		if res := eval(test, env); res.(Bool) {
			return eval(conseq, env)
		} else {
			return eval(alt, env)
		}
	case "define":
		// (define var exp)
		vvar, expr := x.Rest.Val, x.Rest.Rest.Val
		env.scope[vvar.Sexpr()] = eval(expr, env)
		return env.scope[vvar.Sexpr()]
	case "set!":
		// (set! var exp)
		vvar, expr := x.Rest.Val, x.Rest.Rest.Val
		env.Find(vvar.(Symbol))[vvar.Sexpr()] = expr
		return expr
	default:
		// (function arg...)
		proc := eval(x.Val, env)
		var args []Expression
		for ptr := x.Rest; ptr.Val != nil; {
			args = append(args, eval(ptr.Val, env))
			ptr = ptr.Rest
		}
		return proc.(Function)(NewEnv(env), args)
	}
}
</code></p>

<p><code>evalList</code> 如果发现第一个符号是 <code>if</code> 等关键字，则执行对应逻辑，如果是函数调用，则调用对应的函数即可。</p>

<h2 id="interaction-a-repl">Interaction: A REPL</h2>

<p>为了使用我们的计算器，我们实现了一个简单的 REPL.</p>

<blockquote>
  <p>REPL: Read Eval Print Loop</p>
</blockquote>

<p>逐行读入代码字符串，然后计算结果并打印到标准输出。</p>

<p>```go
func repl() {
	line := liner.NewLiner()
	defer line.Close()</p>

<pre><code>line.SetCtrlCAborts(true)

env := baseEnv()
for {
	if sentence, err := line.Prompt("lis.go&gt; "); err == nil {
		val := eval(parse(sentence), env)
		fmt.Println(val.Sexpr())
	} else {
		return
	}
} } ```
</code></pre>

<h2 id="section-4">自定义函数</h2>

<p>到目前为止，我们的计算器已经能使用内置函数进行基本的四则运算；但是，其能力也就仅此而已，如果现在需要一个计算一个数的平方的函数，就只能在每个计算的地方写上：</p>

<p><code>clojure
(* a a)
</code></p>

<p>所以，我们需要自定义函数的能力。</p>

<p>我们希望使用关键字 <code>define-func</code> 来定义函数，比如平方函数可以这样定义。</p>

<p><code>clojure
(define-func ** (a) 
    (* a a))
</code></p>

<p>定义自定义函数类型:</p>

<p><code>go
type UserFunction struct {
       Name string
       Args []string
       Body []Expression
}
func (s UserFunction) Sexpr() string { return "user-function:" + s.Name }
</code></p>

<p>在 <code>evalList</code> 中添加对函数定义的解释：</p>

<p><code>go
func evalList(x *List, env *Env) Expression {
.......
       case "define-func":
               var userf UserFunction
               // (define-func name (arg1 arg2) body)
			   // 解析参数列表
               var args []string
               argsExpr := x.Rest.Rest.Val.(*List)
               for argsExpr.Val != nil {
                       args = append(args, string(argsExpr.Val.(Symbol)))
                       argsExpr = argsExpr.Rest
               }
			   // 解析函数名
               name := string(x.Rest.Val.(Symbol))
               userf.Name = name
               userf.Args = args
			   // 解析函数体
               expr := x.Rest.Rest.Rest
               for expr.Val != nil {
                       userf.Body = append(userf.Body, expr.Val)
                       expr = expr.Rest
               }
			   // 安装函数
               env.scope[name] = userf
               return userf
.......
</code></p>

<p>实现对自定义函数的调用:</p>

<p><code>go
func callUserFunction(env *Env, f UserFunction, args []Expression) Expression {
       env = NewEnv(env)
       for i, arg := range f.Args {
               env.scope[arg] = args[i]
       }
       var ret Expression
       for _, expr := range f.Body {
               ret = eval(expr, env)
       }
       return ret
}
</code></p>

<p>这其中有两点要注意:</p>

<ul>
  <li>创建新的执行环境</li>
  <li>并将入参依次绑定到环境中</li>
</ul>

<p>重新编译启动 REPL，可以定义并试用新的求平方函数了:</p>

<p><code>clojure
(define a 100)
(define-func ** (a) (* a a))
(** 2) ;; 返回 4
</code></p>

<p>这里特意定义同名的全局变量 <code>a</code> 和函数入参局部变量 <code>a</code>，由于平方函数在独立的环境中绑定求值，所以二者互不影响。</p>

<h1 id="section-5">完整代码</h1>

<p>完整的代码可以参考: <a href="https://github.com/qjpcpu/lis.go">lis.go</a></p>

<h1 id="section-6">应用到生产环境?</h1>

<p><code>lis.go</code> 只是帮助学习实现解释器的简单玩具，要作为生成环境的嵌入式语言，还缺乏很多关键性质:</p>

<ul>
  <li>Tail Call Optimization, 对于不支持循环的函数式语言，没有 TCO 支撑的递归很可能栈溢出;</li>
  <li>VM, 目前 <code>lis.go</code> 其实是依赖 go 语言默认的调用栈来实现函数调用，没有自己设计虚拟机，性能有待提高；同时，无法通过编译提前感知指令流，就难以控制程序运行时状态，更无法做指令优化；</li>
  <li>调用环境没有隔离完全，下层函数可以”看到”上层环境;</li>
  <li>常用语法  feature 如闭包、宏等能力缺失，无法提供足够生产力；</li>
  <li>文档，注释 etc.</li>
</ul>

<p>如果想要应用于生产环境，可以使用 <a href="https://github.com/qjpcpu/glisp">glisp</a>，其完整文档参考 <a href="https://github.com/qjpcpu/glisp/wiki">glisp-wiki</a>.</p>
]]></content>
  </entry>
  
</feed>
