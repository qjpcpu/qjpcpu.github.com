<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blockchain | Jason's space]]></title>
  <link href="http://qjpcpu.github.io/blog/categories/blockchain/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2018-04-02T11:02:38+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ethereum-solidity的坑]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/04/02/ethereum-solidityde-keng/"/>
    <updated>2018-04-02T10:54:43+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/04/02/ethereum-solidityde-keng</id>
    <content type="html"><![CDATA[<h1 id="section">被意外更改的合约变量</h1>

<p>```javascript
pragma solidity ^0.4.11;</p>

<p>contract Test{
    address public a;
    address public b;
    function Test() public{
        a=msg.sender;
        b=msg.sender;
        uint256[2] g=[uint256(0),uint256(0)];
        g[0]=uint256(-1);</p>

<pre><code>} } ```
</code></pre>

<p>如果<code>msg.sender</code>是 <code>0xca35b7d915458ef540ade6068dfe2f44e8fa733c</code>,那么想象中的合约变量<code>a,b</code>都应该是这个值,但是结果却是:</p>

<p><code>
// a: address: 0xffffffffffffffffffffffffffffffffffffffff
// b: address: 0xca35b7d915458ef540ade6068dfe2f44e8fa733c
</code></p>

<p>可以看出<code>a</code>变成了 <code>g[0]</code>的值。 这是因为solidity对于这个未初始化的数组时,把它指向了合约变量地址,所以修改 <code>g[0]</code>就相当于修改了 <code>a</code>,读者可以试试修改 <code>g[1]</code>实际是修改了 <code>b</code>.</p>

<p>解决办法是将数组改成<code>memory</code>,防止他变成<code>storage</code></p>

<p><code>javascript
uint256[2] memory g = [uint256(-1),uint256(-1)];
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[以太坊合约开发中那些危险的坑]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/03/18/yi-tai-fang-he-yue-kai-fa-zhong-na-xie-wei-xian-de-keng/"/>
    <updated>2018-03-18T16:29:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/03/18/yi-tai-fang-he-yue-kai-fa-zhong-na-xie-wei-xian-de-keng</id>
    <content type="html"><![CDATA[<p>列举合约开发中那些危险的操作.</p>

<!-- more -->

<p><a href="https://github.com/ConsenSys/smart-contract-best-practices/blob/master/README-zh.md">以太坊智能合约 —— 最佳安全开发指南</a></p>

<p><a href="http://me.tryblockchain.org/blockchain-solidity-fallback.html">Solidity的fallback函数</a></p>

<p><a href="http://me.tryblockchain.org/Solidity-call-callcode-delegatecall.html">深入浅出Solidity call相关函数</a></p>

<p><a href="http://me.tryblockchain.org/blockchain-solidity-send-ether-bestpractice.html">Solidity发送ether最佳实践</a></p>

<p><a href="http://solidity.readthedocs.io/en/v0.4.21/contracts.html#fallback-function">Fallback Function</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[以太坊实战-交易爬虫]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/03/13/yi-tai-fang-shi-zhan-jiao-yi-pa-chong/"/>
    <updated>2018-03-13T19:46:40+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/03/13/yi-tai-fang-shi-zhan-jiao-yi-pa-chong</id>
    <content type="html"><![CDATA[<p>本文从一个区块链跑路项目说起,怎么通过大家可见的区块数据进行自己的业务分析,目的主要是讲述中间涉及到的技术,如果你能从中获益,并因此构建自己更加强大的分析工具,我深感荣幸.</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">防止区块链项目跑路</a></li>
  <li><a href="#section-1">服务端控制智能合约</a></li>
  <li><a href="#erc20">ERC20关键参数获取</a>    <ul>
      <li><a href="#section-2">某个地址是否合约</a></li>
      <li><a href="#from">From</a></li>
      <li><a href="#to">To</a>        <ul>
          <li><a href="#section-3">函数签名</a></li>
          <li><a href="#section-4">参数编码</a></li>
          <li><a href="#transfer">transfer</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#put-it-together">Put it together</a></li>
  <li><a href="#section-5">参考文献</a></li>
</ul>

<h1 id="section">防止区块链项目跑路</h1>

<p>首先要说说这个争议颇多的英雄链: 做为首个全球加密数字货币区块链博彩平台的建设者，HeroChain致力打造数字货币一站式博彩娱乐互动平台，是实现在区块链上加密数字货币的娱乐和产品集合服务平台。HeroChain团队目标是落地与合作全球85个博彩合法的国家和地区，或博彩业合法牌照或与当地博彩业紧密合作，未来使得HEC能与线下赌场打通，使得HEC拥有更大的交易场景。团队认为：HEC的应用覆盖和使用领域确实足以支撑这个巨量加密数字货币的流通市值。由于没有税收，使得HeroChain团队每年可以拿出收益的30%，在进行市场回购HEC， 让参与者获利。关键这个博彩业市场不像之前其它项目的预测的预期市场，是庞大而真实的网络娱乐刚需市场。</p>

<p>从这段描述来看，英雄链所针对的应用场景和未来目标都是非常有说服力的。然而目前出现有用户和项目团队因为破发矛盾激化,进而对该项目本身也产生各种质疑。媒体也对其核心人员的资金流向进行了分析:</p>

<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/JFoxiaVESXq0R8KvzDkcyicO28Yyo94Ngzl8JoqNXcPxFBgibetLQ74ENNDiaFY1S3gQokIAddFrxI9snaPooY4dWA/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="balance flow" /></p>

<p>从结果来看，项目募集的资金都最终流向了某一个地址，确实存在发行者卷款跑路的可能(详细分析可以查阅参考文献两篇文章)。</p>

<p>我这里只是以这件事件做一个引子，由于区块链的数据对大众完全透明公开,所有人的资金流向其实都摆在眼前，只是说现在链上基础工具不完善，普通人很难去分析这庞大而精细的交易记录。如果我们做一个交易爬虫，能够轻松分析任意账户的资金流动，那么不论是对普通小白验证项目的可信度还是金融从业者分析深度数据，都是很有价值的。</p>

<p>下面，我就介绍下，如果要产生ERC20某个代币的资金流向图(类似下图)，要注意哪些技术关键点。</p>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/JFoxiaVESXq0R8KvzDkcyicO28Yyo94NgzgqH5wW9TgI5o4zoBZB3owgvXNbykPhEkEep9zHS5rjqm0GD12BfgRg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="hec" /></p>

<h1 id="section-1">服务端控制智能合约</h1>

<p>要和只能合约进行交互,显然需要完成通用编程语言对合约的控制,这里我们以<code>golang</code>代码为例,展示怎么从<code>golang</code>中调用合约函数。<a href="https://github.com/ethereum/go-ethereum">官方go-ethereum</a>已经提供了这样的工具<code>abigen</code>,直接从合约<code>sol</code>代码生成go代码:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><code>abigen</code></td>
      <td>Source code generator to convert Ethereum contract definitions into easy to use, compile-time type-safe Go packages. It operates on plain <a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI">Ethereum contract ABIs</a> with expanded functionality if the contract bytecode is also available. However it also accepts Solidity source files, making development much more streamlined. Please see our <a href="https://github.com/ethereum/go-ethereum/wiki/Native-DApps:-Go-bindings-to-Ethereum-contracts">Native DApps</a> wiki page for details.</td>
    </tr>
  </tbody>
</table>

<p>那我们要分析erc20的代币，所以定义好一份接口合约即可:</p>

<p>```javascript
contract Token {
  function name() constant returns (string name);
    // 可选方法，返回代币符号，如EOS
    function symbol() constant returns (string symbol);
    // 可选方法,返回代币小数位数，如8
    function decimals() constant returns (uint8 decimals);</p>

<pre><code>// 货币总发行量
function totalSupply() constant returns (uint256 totalSupply);
// 获取某个账户的代币余额
function balanceOf(address _owner) constant returns (uint256 balance);
// (本人)向某人转账
function transfer(address _to, uint256 _value) returns (bool success);
// (本人)批准只能合约可以向某人转账
function approve(address _spender, uint256 _value) returns (bool success);
// 合约代理from向to转账(须先经过from账户approve)
function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
// 查询_owner允许合约代理向_spender转账的金额
function allowance(address _owner, address _spender) constant returns (uint256 remaining); } ```
</code></pre>

<p>然后使用<code>abigen</code>工具生成go代码</p>

<p><code>bash
abigen --sol ./erc20.sol --pkg erc20 --out token.go
</code></p>

<p>然后在<code>golang</code>中就可以像这样调用合约函数:</p>

<p>```go
package main</p>

<p>import (
	“fmt”
	“log”</p>

<pre><code>"github.com/ethereum/go-ethereum/common"
"github.com/ethereum/go-ethereum/ethclient" )
</code></pre>

<p>func main() {
	// Create an IPC based RPC connection to a remote node
	conn, err := ethclient.Dial(“/home/karalabe/.ethereum/testnet/geth.ipc”)
	if err != nil {
		log.Fatalf(“Failed to connect to the Ethereum client: %v”, err)
	}
	// Instantiate the contract and display its name
	token, err := NewToken(common.HexToAddress(“0x21e6fc92f93c8a1bb41e2be64b4e1f88a54d3576”), conn)
	if err != nil {
		log.Fatalf(“Failed to instantiate a Token contract: %v”, err)
	}
	name, err := token.Name(nil)
	if err != nil {
		log.Fatalf(“Failed to retrieve token name: %v”, err)
	}
	fmt.Println(“Token name:”, name)
}
```</p>

<h1 id="erc20">ERC20关键参数获取</h1>

<p>做交易爬虫,现在最关键的是分析交易参数,比如这是<code>etherscan.io</code>上一个<code>MCAP</code>转账交易:</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/eth-tx.png" alt="tx" /></p>

<h2 id="section-2">某个地址是否合约</h2>

<p>在交易里，如果是合约的调用那么<code>To</code>字段必然是一个合约地址,那么当我们拿到一个交易时，怎么判断这个交易是否一次合约调用呢，或者怎么判断<code>To</code>是合约地址而不是用户钱包地址呢？</p>

<p><code>
很简单,地址对应存储位置上有代码则是合约地址,反之是用户钱包
</code></p>

<p>理解了这个原理,那么在go代码里就很容易判断了:</p>

<p><code>go
// 某个地址是否合约
func IsContract(conn *ethclient.Client, hexAddr string) bool {
	code, err := conn.CodeAt(context.Background(), common.HexToAddress(hexAddr), nil)
	return err == nil &amp;&amp; len(code) &gt; 0
}
</code></p>

<blockquote>
  <p>这里附上其他环境判断是否合约的方法</p>
</blockquote>

<p>在合约solidity代码里判断:</p>

<p><code>javascript
function isContract(address addr) returns (bool) {
  uint size;
  assembly { size := extcodesize(addr) }
  return size &gt; 0;
}
</code></p>

<p>在<code>geth</code>的console:</p>

<p><code>bash
eth.getCode("0xbfb2e296d9cf3e593e79981235aed29ab9984c0f")
</code></p>

<h2 id="from">From</h2>

<p><code>From</code>无法直接从交易函数里获取,因为来源地址可以从签名里反解出来,为了拿取到这个字段,用的方法是解析交易的<code>String()</code>输出来获取,虽然办法效率不高,但为了不改动源码这是最简单的。</p>

<h2 id="to">To</h2>

<p>收款地址的获取就比较麻烦一些了，它不像eth的直接转账,交易的<code>to</code>字段就是收款地址,合约调用的<code>To</code>是合约地址,真正的收款地址存放在<code>Data</code>字段里,那么我们来看看<code>Data</code>字段怎么编码的。</p>

<h3 id="section-3">函数签名</h3>

<p><code>Data</code>的起始4个字节是函数签名的sha3结果的前缀,举个例子,对于下面的合约</p>

<p><code>javascript
contract Foo {
  function bar(fixed[2] xy) {}
  function baz(uint32 x, bool y) returns (bool r) { r = x &gt; 32 || y; }
  function sam(bytes name, bool z, uint[] data) {}
}
</code><code>
如果要调用</code>baz<code>函数,则结果应该是</code>keccak256(“baz(uint32,bool)”)[0:4]<code>转换为16进制是</code>0xcdcd77c0`</p>

<h3 id="section-4">参数编码</h3>

<p>参数编码是依次对函数签名每个参数进行32字节左补齐编码,如<code>baz(69,true)</code>这次调用,参数<code>69</code>和<code>true</code>分别编码结果是:</p>

<ul>
  <li><code>69</code>,编码为<code>0x0000000000000000000000000000000000000000000000000000000000000045</code></li>
  <li><code>true</code>,编码为<code>0x0000000000000000000000000000000000000000000000000000000000000001</code></li>
</ul>

<p>那么整合起来,<code>baz(69,true)</code>调用时交易的<code>Data</code>应该为:</p>

<p><code>
0xcdcd77c000000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001
</code></p>

<h3 id="transfer">transfer</h3>

<p>回到我们的需求,我们要分析的20代币的转账，其实就是分析<code>transfer(address _to,unit256 _value)</code>的合约函数调用,该函数签名编码是<code>0xa9059cbb</code>,比如我们要对<code>0x54d28e24df3a2381d4c072118da0ef0a51a4fcd9</code>转账<code>493480000</code>个MCAP,编码过程为:</p>

<p>```
Function: transfer(address _to, uint256 _value)</p>

<p>MethodID: 0xa9059cbb
[0]:  00000000000000000000000054d28e24df3a2381d4c072118da0ef0a51a4fcd9
[1]:  000000000000000000000000000000000000000000000000000000001d69e840
```</p>

<p>最终结果<code>Data</code>是</p>

<p><code>0xa9059cbb00000000000000000000000054d28e24df3a2381d4c072118da0ef0a51a4fcd9000000000000000000000000000000000000000000000000000000001d69e840</code></p>

<h1 id="put-it-together">Put it together</h1>

<p>把这上面关键点整合起来,就可以构建一个简单爬虫,这个爬虫执行流程应该是:</p>

<ul>
  <li>遍历区块交易,取到我们关注的某个合约的所有转账交易</li>
  <li>解析交易关键字段,包含交易ID,from,to,金额,时间戳</li>
  <li>入库,提供webAPI给应用层</li>
</ul>

<p>目前我的示例代码仅实现了关键字段解析,但已经足够作为基础函数去做上层分析工具了: <a href="https://github.com/qjpcpu/ethereum/blob/master/stats/erc20_crawl.go">代码地址</a></p>

<h1 id="section-5">参考文献</h1>

<ul>
  <li><a href="https://mp.weixin.qq.com/s/2wG9-NyeHwan8pgmlaLSwQ">英雄链深度调查 永不说谎的地址</a></li>
  <li><a href="https://mp.weixin.qq.com/s/KPIDMwujSZI_MhpmMIG5Gg?scene=25#wechat_redirect">谁是英雄链背后的英雄</a></li>
  <li><a href="https://github.com/ethereum/go-ethereum/wiki/Native-DApps:-Go-bindings-to-Ethereum-contracts">Go bindings to Ethereum contracts</a></li>
  <li><a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#argument-encoding">Ethereum Contract ABI</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solidity备忘录]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/03/08/soliditybei-wang-lu/"/>
    <updated>2018-03-08T09:38:45+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/03/08/soliditybei-wang-lu</id>
    <content type="html"><![CDATA[<p>关于以太坊solidity语言一些有趣或者有意义的tips.</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#basic-sytax">basic sytax</a>    <ul>
      <li><a href="#section">字符串比较</a></li>
      <li><a href="#storage-vs-memory">storage vs memory</a></li>
    </ul>
  </li>
  <li><a href="#function">function</a>    <ul>
      <li><a href="#section-1">访问修饰符</a></li>
      <li><a href="#section-2">函数修饰符</a></li>
    </ul>
  </li>
  <li><a href="#msg">msg</a></li>
  <li><a href="#section-3">接口</a></li>
  <li><a href="#ownable">Ownable</a></li>
  <li><a href="#section-4">性能优化</a></li>
</ul>

<h1 id="basic-sytax">basic sytax</h1>

<h2 id="section">字符串比较</h2>

<p><code>solidity</code>本身无法直接比较字符串,需要转换成整数比较</p>

<p><code>javascript
keccak256("aaaab") != keccak256("bbbbbc");
</code></p>

<h2 id="storage-vs-memory">storage vs memory</h2>

<ul>
  <li><code>storage</code>,变量将存储到链上,如合约变量默认即storage</li>
  <li><code>memory</code>, 内存临时变量</li>
</ul>

<h1 id="function">function</h1>

<h2 id="section-1">访问修饰符</h2>

<ul>
  <li><code>public</code>, 任何人可以调用,包括其他合约</li>
  <li><code>private</code>, 仅本合约可调用</li>
  <li><code>internal</code>, 本合约和继承本合约的合约可调用</li>
  <li><code>external</code>, 仅能外部调用</li>
</ul>

<h2 id="section-2">函数修饰符</h2>

<ul>
  <li><code>view</code>, 仅查看数据不修改数据,另外注意<code>view</code>修饰符不耗费gas,因为它只做本地查询</li>
  <li><code>pure</code>, 根本不访问(区块链)数据,如仅做内存数学计算</li>
</ul>

<p>函数修饰符还可以带参数:</p>

<p>```javascript
// 存储用户年龄的映射
mapping (uint =&gt; uint) public age;</p>

<p>// 限定用户年龄的修饰符
modifier olderThan(uint _age, uint _userId) {
  require(age[_userId] &gt;= _age);
  _;
}</p>

<p>// 必须年满16周岁才允许开车 (至少在美国是这样的).
// 我们可以用如下参数调用<code>olderThan</code> 修饰符:
function driveCar(uint _userId) public olderThan(16, _userId) {
  // 其余的程序逻辑
}
```</p>

<h1 id="msg">msg</h1>

<p>msg对象有几个常用属性</p>

<ul>
  <li><code>msg.sender</code>, 合约调用者</li>
  <li><code>msg.value</code>, 合约调用者发送的ETH金额</li>
</ul>

<h1 id="section-3">接口</h1>

<p>接口定义及使用非常简单,不需要额外语言描述.</p>

<p>```javascript
// 声明
contract NumberInterface {
  function getNum(address _myAddress) public view returns (uint);
}</p>

<p>contract MyContract {
  address NumberInterfaceAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E….;
  // ^ The address of the FavoriteNumber contract on Ethereum
  NumberInterface numberContract = NumberInterface(NumberInterfaceAddress);
  // Now numberContract is pointing to the other contract</p>

<p>function someFunction() public {
     // Now we can call getNum from that contract:
     uint num = numberContract.getNum(msg.sender);
    // …and do something with num here
  }
}
```</p>

<p>接口的使用和实现分离的特点,也是实战中重要特性:解决bugfix,调用外部合同等等灵活场景.</p>

<h1 id="ownable">Ownable</h1>

<p><code>Ownable</code>是进行合约管理的常用手段</p>

<p>```javascript
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of “user permissions”.
 */
contract Ownable {
  address public owner;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);</p>

<p>/**
   * @dev The Ownable constructor sets the original <code>owner</code> of the contract to the sender
   * account.
   */
  function Ownable() public {
    owner = msg.sender;
  }</p>

<p>/**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }</p>

<p>/**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}
```</p>

<h1 id="section-4">性能优化</h1>

<p>通常情况下我们不会考虑使用 unit 变种，因为无论如何定义 uint的大小，Solidity 为它保留256位的存储空间。例如，使用 uint8 而不是uint（uint256）不会为你节省任何gas。</p>

<p>除非，把 unit 绑定到 struct 里面。</p>

<p>如果一个 struct 中有多个 uint，则尽可能使用较小的 uint, Solidity 会将这些 uint 打包在一起，从而占用较少的存储空间。例如：</p>

<p>```javascript
struct NormalStruct {
  uint a;
  uint b;
  uint c;
}</p>

<p>struct MiniMe {
  uint32 a;
  uint32 b;
  uint c;
}
```</p>

<p>// 因为使用了结构打包，<code>mini</code> 比 <code>normal</code> 占用的空间更少</p>

<p><code>javascript
NormalStruct normal = NormalStruct(10, 20, 30);
MiniMe mini = MiniMe(10, 20, 30);
</code></p>

<p>所以，当 uint 定义在一个 struct 中的时候，尽量使用最小的整数子类型以节约空间。 并且把同样类型的变量放一起（即在struct中将把变量按照类型依次放置），这样 Solidity 可以将存储空间最小化。例如，有两个 struct：</p>

<p>uint c; uint32 a; uint32 b; 和 uint32 a; uint c; uint32 b;</p>

<p>前者比后者需要的gas更少，因为前者把uint32放一起了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于以太坊的数字资产]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/03/06/ji-yu-yi-tai-fang-de-shu-zi-zi-chan/"/>
    <updated>2018-03-06T18:24:35+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/03/06/ji-yu-yi-tai-fang-de-shu-zi-zi-chan</id>
    <content type="html"><![CDATA[<p>代币(token)是什么?</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">什么是代币</a>    <ul>
      <li><a href="#section-1">最小可用代币</a></li>
    </ul>
  </li>
  <li><a href="#erc20">ERC20</a>    <ul>
      <li><a href="#section-2">大纲</a></li>
      <li><a href="#section-3">摘要</a></li>
      <li><a href="#section-4">动机</a></li>
      <li><a href="#section-5">标准内容</a>        <ul>
          <li><a href="#section-6">方法定义</a></li>
          <li><a href="#section-7">事件定义</a></li>
          <li><a href="#section-8">范例</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#erc721">ERC721</a>    <ul>
      <li><a href="#section-9">实用性</a></li>
      <li><a href="#nft-ids">NFT IDs</a></li>
      <li><a href="#section-10">向后兼容性</a></li>
    </ul>
  </li>
  <li><a href="#section-11">其他问题</a>    <ul>
      <li><a href="#gas">自动装填gas</a></li>
    </ul>
  </li>
  <li><a href="#section-12">参考文献</a></li>
</ul>

<h1 id="section">什么是代币</h1>

<p>通常区块链上由矿工挖出的币种,我们把它称之为初代币，初代币是该区块链最底层的货币，链上的转账及各类基础交易都是以初代币作为结算依据。比如比特币对于比特币区块链，以太币之于以太坊等等。</p>

<p>而通常我们说的代币,或者token(令牌),又指的是什么呢？代币是基于区块链的智能合约定义出的二代币,如果把比特币/以太币比作tcp层的数据包，那么代币就可以类比为http层的http包，它是一个更加上层的概念。</p>

<p>目前市场上发行的代币大部分都是基于以太坊，这是因为以太坊本身是一个图灵完备的区块链，即它的智能合约语言是图灵完备语言。对比起来比特币链上的脚本是非图灵完备的。正是因为以太坊的图灵完备性，使得基于以太坊的开发者可以根据自己的业务需求设计出各种特性各异的代币,它们可以代表任何可替代的可交易商品: 虚拟货币，忠诚点，金牌，白条，游戏内物品等。</p>

<h2 id="section-1">最小可用代币</h2>

<p>标准令牌合约可能相当复杂。但实际上，一个非常基本的令牌归结为:</p>

<p>```javascript
contract MyToken {
    /* This creates an array with all balances */
    mapping (address =&gt; uint256) public balanceOf;</p>

<pre><code>/* Initializes contract with initial supply tokens to the creator of the contract */
function MyToken(uint256 initialSupply) {
    balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens
}

/* Send coins */
function transfer(address _to, uint256 _value) {
    require(balanceOf[msg.sender] &gt;= _value);           // Check if the sender has enough
    require(balanceOf[_to] + _value &gt;= balanceOf[_to]); // Check for overflows
    balanceOf[msg.sender] -= _value;                    // Subtract from the sender
    balanceOf[_to] += _value;                           // Add the same to the recipient
} } ```
</code></pre>

<p>阅读这段代码时，请不要拘泥于<code>token</code>的字面意思。这里的<code>MyToken</code>在发行时限定了发行总额(合约构造函数),同时具备了转账功能<code>transfer</code>。那么其实他就是一个简易的货币,具备作为物物交易的中间桥梁来转移价值的能力。</p>

<h1 id="erc20">ERC20</h1>

<p>以以太坊为例，由于大家均在链上以大致相同的方式发行了各自的代币，逐渐发现其实这里面有共同的模式可以被提炼出来:由于所有代币都以标准方式实施一些基本功能，这也意味着您的代币将立即与以太坊钱包和任何其他使用相同标准的客户或合同兼容.于是就出现了<code>ERC20</code>提案。</p>

<h2 id="section-2">大纲</h2>

<p><code>
EIP: 20
Title: ERC-20 Token Standard
Author: Fabian Vogelsteller &lt;fabian@ethereum.org&gt;, Vitalik Buterin &lt;vitalik.buterin@ethereum.org&gt;
Type: Standard
Category: ERC
Status: Accepted
Created: 2015-11-19
</code></p>

<h2 id="section-3">摘要</h2>

<p>以下标准定义了在智能合约中实施代币的标准API。该标准提供了传送代币的基本功能，并允许代币被批准，以便其他链上第三方可以使用它们。</p>

<h2 id="section-4">动机</h2>

<p>标准接口允许其他应用程序重新使用以太坊上的任何令牌：从钱包到分散式交换。</p>

<h2 id="section-5">标准内容</h2>

<h3 id="section-6">方法定义</h3>

<p>```javascript
// 可选方法,返回代币名称,如MyToken
function name() constant returns (string name)
// 可选方法，返回代币符号，如EOS
function symbol() constant returns (string symbol)
// 可选方法,返回代币小数位数，如8
function decimals() constant returns (uint8 decimals)</p>

<p>// 货币总发行量
function totalSupply() constant returns (uint256 totalSupply)
// 获取某个账户的代币余额
function balanceOf(address _owner) constant returns (uint256 balance)
// (本人)向某人转账
function transfer(address _to, uint256 _value) returns (bool success)
// (本人)批准只能合约可以向某人转账
function approve(address _spender, uint256 _value) returns (bool success)
// 合约代理from向to转账(须先经过from账户approve)
function transferFrom(address _from, address _to, uint256 _value) returns (bool success)
// 查询_owner允许合约代理向_spender转账的金额
function allowance(address _owner, address _spender) constant returns (uint256 remaining)
```</p>

<h3 id="section-7">事件定义</h3>

<p><code>javascript
// 转移代币时必须触发该事件
event Transfer(address indexed _from, address indexed _to, uint256 _value)
// 批准代币时必须触发该事件
event Approval(address indexed _owner, address indexed _spender, uint256 _value)
</code></p>

<h3 id="section-8">范例</h3>

<p><a href="https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol">https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol</a>
<a href="https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol">https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol</a></p>

<h1 id="erc721">ERC721</h1>

<p>至于erc721的产生是为了解决数字资产唯一性问题。本质上说，erc20的两个代币之间是没有任何区别的，所以它适合作为通用的数字货币来流通，单还有一类有区别的场景，比如数字世界里我的一栋房子和你的一栋房子，他们的面积，朝向，颜色等等都会有区别，是无法同质化标识的，所以就有了erc721.</p>

<p>ERC721官方称谓是:Non-fungible Token Standard(NFT),非同质化代币标准。</p>

<p>ERC721的标准内容我这里不再详述，具体标准可以参考github上以太坊提案,实现实例的话，以太猫就是最好的代表。</p>

<h3 id="section-9">实用性</h3>

<p>许多以太坊智能合约的建议用途都依赖于跟踪单个非同质币（NFTs）。现有或计划中的NFTs 有很多，例如 Decentraland 中的 LAND，与CryptoPunks 项目同名的punks（朋克），以及Dmarket 或 EnjinCoin 等系统的游戏内物品。未来的用途包括检测真实世界中的非同质资产，例如房地产（例如 Ubitquity 或 Propy 等公司所设想的）。在这些情况下，项目在账本中不是“集中在一起的”，相反，每单位代币必须有独立的所有权并自动跟踪，这非常重要。无论这些项目的性质如何，如果我们有一个标准化的接口，并且建立跨功能的NFTs管理和销售平台，这将使得生态系统更加强大。</p>

<h3 id="nft-ids">NFT IDs</h3>

<p>该标准的基础是，每一个 NFT 在跟踪它的合约中，用唯一的一个256 位无符号整数进行标识。每个NFT 的 ID 标号在智能合约的生命周期内不允许改变。元组 ( contract address, asset ID ) 是每个特定 NFT 在以太坊生态系统中的全局唯一且完全合格的标识。虽然某些合约可能觉得 ID 从 0 开始编码，并且对于每一个新 NFT 的 ID 简单增 1 进行编码更加简便，但是使用者绝不能假设 ID 编号具有任何特定模式，并且需要将 ID 编码看做 “黑盒”。</p>

<h3 id="section-10">向后兼容性</h3>

<p>本标准尽可能遵循 ERC-20 的语义，但由于同质代币与非同质代币之间的根本差异，并不能完全兼容 ERC-20。</p>

<h1 id="section-11">其他问题</h1>

<h2 id="gas">自动装填gas</h2>

<p>每次，您在Ethereum上进行交易，您需要向该块矿工支付费用，以计算您的智能合约的结果。虽然这可能会在未来发生变化，但目前费用只能在以太网中支付，因此您的代币的所有用户都需要它。账户余额小于费用的账户被卡住，直到业主可以支付必要的费用。但在某些使用案例中，您可能不希望用户考虑以太坊，区块链或如何获得以太网，因此只要检测到平衡危险性低，您的硬币就会自动重新填充用户余额。</p>

<p>```javascript
uint minBalanceForAccounts;</p>

<p>function setMinBalance(uint minimumBalanceInFinney) onlyOwner {
     minBalanceForAccounts = minimumBalanceInFinney * 1 finney;
}
/* Send coins */
function transfer(address _to, uint256 _value) {
    …
    if(msg.sender.balance &lt; minBalanceForAccounts)
        sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);
}
```</p>

<h1 id="section-12">参考文献</h1>

<ul>
  <li><a href="http://ethfans.org/posts/eip-721-non-fungible-token-standard">干货ERC721 Non-fungible Token Standard</a></li>
  <li><a href="https://ethereum.org/token">Create your own CRYPTO-CURRENCY with Ethereum</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
