<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blockchain | Jason's space]]></title>
  <link href="http://qjpcpu.github.io/blog/categories/blockchain/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2018-07-02T15:24:08+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[怎样实现以太坊交易可靠提交]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/06/14/zen-yang-shi-xian-yi-tai-fang-jiao-yi-ke-kao-ti-jiao/"/>
    <updated>2018-06-14T14:54:01+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/06/14/zen-yang-shi-xian-yi-tai-fang-jiao-yi-ke-kao-ti-jiao</id>
    <content type="html"><![CDATA[<p>在真实环境下的以太坊Dapp开发,是一定涉及到链上链下逻辑的交互的。那么开发者可能会遇到这样一种场景,当用户使用metamask签名交易并提交后,Dapp的中心服务端需要拿到这个交易ID,并跟踪这个交易的执行,甚至会根据这笔交易去触发后端逻辑(当然使用event可以一定程度避开这个问题,但这种回避式的解决方案不在此讨论)，但现实情况往往是令人痛苦的，因为很可能会因为种种原因，我们无法取到metamask的回调，导致开发者因此”丢失”掉这笔交易。</p>

<p>那么，如果我们要直面这个问题，要怎么样实现交易可靠提交呢？</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">提炼问题</a>    <ul>
      <li><a href="#metamask">1. 最显而易见,metamask能够提供可靠回调</a></li>
      <li><a href="#metamask-1">2. metamask将交易签名和发送拆分开来</a></li>
      <li><a href="#section-1">3. 弄脏手自己做</a></li>
    </ul>
  </li>
  <li><a href="#section-2">关键实现</a>    <ul>
      <li><a href="#section-3">1.前端获取裸交易数据</a></li>
      <li><a href="#hash">2.后端计算裸交易hash</a></li>
      <li><a href="#metamask-2">3.前端唤起metamask签名</a></li>
      <li><a href="#section-4">4.后端发送交易</a></li>
    </ul>
  </li>
  <li><a href="#section-5">反思</a>    <ul>
      <li><a href="#section-6">1.安全性</a></li>
      <li><a href="#section-7">2.用户体验</a></li>
      <li><a href="#section-8">3.时效性</a></li>
    </ul>
  </li>
</ul>

<h1 id="section">提炼问题</h1>

<p>首先，我再次描述下问题的发生场景: 在metamask环境下，我们需要拿到用户提交的交易来触发后续中心化逻辑，但是在现实情况下很可能拿不到这个回调交易ID.</p>

<p>看起来，问题的核心并不是交易可靠提交，而是可靠地拿到交易提交的回调。那么解决问题，就有两种思路:</p>

<h5 id="metamask">1. 最显而易见,metamask能够提供可靠回调</h5>

<p>这个解决方案最无痛，然而完全依赖于metamask团队的开发意愿。所幸的是metamask团队在接收开发者的反馈后，有意愿往这方面努力。但开发时间不确定，甚至于我认为，在浏览器环境下，可能无法完美解决。所以短期内，这个方向是无法在生产环境实施的。</p>

<h5 id="metamask-1">2. metamask将交易签名和发送拆分开来</h5>

<p>如果没做过以太坊Dapp开发，可能不清楚metamask提交交易其实是串行执行了两步操作： 一.先对交易裸数据签名，得到签名后的交易,二.将签名后的交易提交到以太坊。</p>

<p>实际上，在metamask完成第一步签名后，这个交易就已经是一笔以太坊合法交易了，任何一个以太坊节点都可以拿着这笔交易进行全网广播，要求矿工打包。试想，如果metamsk将这两个操作拆分开来，那么开发者就可以要求metamask先对裸交易签名，然后客户端将这笔交易发送给服务端，让服务端向以太坊节点提交交易，这样应用开发者就能够使用各种传统手段保证交易提交，并且能够实施后续各种中心化逻辑了。</p>

<p>看似很美好，然而metamask目前不提供这样的接口。虽然web3js已经有这样的接口，但metamask并没有对接。不过前景还是可以期望的,metamask团队表示已经会进行操作拆分，将来可以这样做。详细可以参考<a href="https://github.com/MetaMask/metamask-extension/issues/3475">Issue#3475</a>.</p>

<h5 id="section-1">3. 弄脏手自己做</h5>

<p>既然靠不了别人，就自己来解决。这第3种解决方案，其实和第二种思路是一样的，只是达到这个目的有些纠结。</p>

<p>首先，metamsk支持web3js一个比较原始的签名方法<code>web3.eth.sign</code>,他是对一段数据进行以太坊签名，看起来可以满足我们的需求，不过为了使用这个方法我们还需要做很多工作。</p>

<p>该方法输入是交易的hash，但web3并没有提供从裸交易数据计算hash的方法，所以我选择让前端提交裸交易数据到服务端，服务端计算出hash值返还给前端;</p>

<p>前端拿到这个交易hash后，就可以调用<code>web3.eth.sign</code>唤起metamask签名，然后将签名字段和裸交易数据再次发送给服务端，服务端负责验证签名并且将交易和签名拼装好后发送到以太坊。</p>

<h1 id="section-2">关键实现</h1>

<h2 id="section-3">1.前端获取裸交易数据</h2>

<p>前端直面用户，可以拿到裸交易全部数据</p>

<p><code>
{
    from: "0x...",
    to: "0x....",
    value: "0x...",
    gas: 10000,
    gasPrice: 21000,
    data: "0x...",
    nonce: "0x..."
}
</code></p>

<h2 id="hash">2.后端计算裸交易hash</h2>

<p>后端拿到前端的裸交易json，可以很容易计算出交易hash，下面给出计算的golang代码</p>

<p><code>go
tx := types.NewTransaction(....)
hash := types.HomesteadSigner{}.Hash(tx).Hex()
</code></p>

<p>然后将计算出的hash返回给前端</p>

<h2 id="metamask-2">3.前端唤起metamask签名</h2>

<p><code>javascript
// 第一个参数是返回的交易hash
// 第二个参数是用户地址
web3.eth.sign("0x...", "0x...", "").then(console.log);
</code></p>

<p>这里将唤起metamask.</p>

<h2 id="section-4">4.后端发送交易</h2>

<p>前端将裸交易数据和第3步得到的签名发送给后端，后端验证签名并发送到以太坊,关键go代码如下:</p>

<p><code>go
sign := common.Hex2Bytes(txSign)
if len(sign) != 65 {
	return nil, errors.New("bad sign")
}
if sign[64] != 27 &amp;&amp; sign[64] != 28 {
	return nil, errors.New("invalid Ethereum signature (V is not 27 or 28)")
}
sign[64] -= 27
signer := types.HomesteadSigner{}
signedTx, err := tx.WithSignature(signer, sign)
if err != nil {
	return nil, err
}
ethConn.SendTransaction(context.Background(), signedTx)
</code></p>

<h1 id="section-5">反思</h1>

<p>看起来，上面的技术方案好像完美解决了问题，实则不然，这只是当前环境下的较优方案罢了，并且这个方案还是存在诸多问题:</p>

<h2 id="section-6">1.安全性</h2>

<p>这是最大的问题,因为调用<code>web3.eth.sign</code>进行数据签名时，metamask无法展示签名的数据，所以用户根本不了解他到底是在对什么授权签名。这是非常可怕的，这可能被骇客利用，让用户对一笔转出自己账户所有余额的交易进行签名，导致资金盗窃。</p>

<h2 id="section-7">2.用户体验</h2>

<p>还是因为签名的方法，metamask在签名时会展示一段红色警告，导致用户体验下降。</p>

<h2 id="section-8">3.时效性</h2>

<p>因为这个安全原因，metamask团队将来也许会放弃对这个方法的支持，不过我倒是觉得，保留对这个方法的支持，将签名数据做详细展示，让开发者自己做安全性的权衡。</p>

<p>最后聊一点感想吧，目前区块链上簇拥了太多投机者，真正致力于深耕技术的人不多，metamask团队算一个，区块链是个有意思的技术，因为它的技术背后，隐含了人类社会化的意识，它目前的基础组件都还不够完善，需要我们热爱技术的所有人，去投入，去发展。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那些以太坊DApp服务端开发期望已久的轮子]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/05/16/na-xie-yi-tai-fang-dappfu-wu-duan-kai-fa-qi-wang-yi-jiu-de-lun-zi/"/>
    <updated>2018-05-16T17:20:33+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/05/16/na-xie-yi-tai-fang-dappfu-wu-duan-kai-fa-qi-wang-yi-jiu-de-lun-zi</id>
    <content type="html"><![CDATA[<p>以太坊虽说是一个去中心化的东西,但DApp却并非是完全去中心化的应用,其主要原因不外乎是以太坊的处理能力和资源有限,无法承载一个完整应用全部的逻辑。所以，目前市面上所有的DApp应用都是需要中心化服务解释的。那么，本文就是列举一些可能会用到的轮子,帮助快速构建应用。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#nonce">nonce管理</a></li>
  <li><a href="#section">交易重发</a></li>
  <li><a href="#section-1">交易备注</a>    <ul>
      <li><a href="#eth">裸交易(仅发送eth的交易)</a></li>
      <li><a href="#section-2">合约调用交易</a></li>
    </ul>
  </li>
  <li><a href="#section-3">事件扫描器</a></li>
  <li><a href="#section-4">登录</a></li>
  <li><a href="#section-5">其他</a></li>
  <li><a href="#qjpcpuethereumhttpsgithubcomqjpcpuethereum"><a href="https://github.com/qjpcpu/ethereum">代码地址qjpcpu/ethereum</a></a></li>
</ul>

<h1 id="nonce">nonce管理</h1>

<p>重要的放在前面,nonce管理应该是所有以太坊开发者遇到的第一个问题。nonce类似于账户的自增主键,必须连续提交,如果每次都使用<code>pending nonce</code>自动提交交易,就会造成之前交易被丢弃,除非你想要替换原交易，否则这可能不是我们期望的结果。</p>

<p><code>github.com/qjpcpu/ethereum/ethnonce</code>包将nonce存储在redis中,使用类似事务的方式申请、使用nonce。</p>

<p><code>go
func TestWrap(t *testing.T) {
	mgr := _testinit()
	addr := common.HexToAddress(`0xe35f3e2a93322b61e5d8931f806ff38f4a4f4d88`)
    mgr.SyncNonce(addr)  // 注意,该方法仅在程序第一次运行做初始化时需要调用,或者nonce发生不一致时调用
	tx,err:=mgr.GiveNonceForTx(addr, func(nonce uint64) (*types.Transaction, error) {
        // 向以太坊提交交易
        // 使用nonce manager注入的nonce进行交易提交
		return new(types.Transaction), nil
	})
	if err!=nil {
		t.Fatal(err)
	}
    t.Log(tx)
}
</code></p>

<p>P.S. 该包基于redis lua脚本,实现nonce的原子读写,可适用于多协程并行操作。</p>

<h1 id="section">交易重发</h1>

<p>对于要做以太坊交易的可靠提交,我相信交易重发绝对是DApp后端程序员的痛点需求。通常,在以太坊拥堵的时候,常常提交的交易会发生”丢失”,以太坊浏览器上搜索这笔交易会被提示: <code>Sorry, we are unable to locate this Transaction Hash</code>。发生这种情况主要有两个可能: 1.用户给的gas太低,导致交易长时间挂在pending队列不能打包进区块 2. 网络环境恶劣,导致投放的节点丢弃交易(网络环境恶劣只是诱因,其真实的丢包原因是及其复杂的)</p>

<p><code>github.com/qjpcpu/ethereum/contracts</code>提交交易重发的函数</p>

<p><code>go
func ResendTransaction(conn *ethclient.Client, tx *types.Transaction, signerFunc bind.SignerFn, nonce uint64, gasPrice *big.Int) (*types.Transaction, error)
</code></p>

<ul>
  <li>conn, eth client</li>
  <li>tx, 需要重发的交易</li>
  <li>signerFunc, 交易签名函数</li>
  <li>nonce, 可选参数,为0表示将交易重发为全新的交易,非0表示替换之前未被打包的交易</li>
  <li>gasPrice,可选参数,为nil表示自动选择合适的price</li>
</ul>

<p>返回值为重发的新交易数据结构。</p>

<p>通常的使用场景是:</p>

<ol>
  <li>发送交易,并将返回的交易tx marshal为json存储到数据库</li>
  <li>定时检查交易是否成功打包</li>
  <li>超过超时时间后,调用ResendTransaction重发交易，再进入第1步循环</li>
</ol>

<p>结合第一步<code>ethnonce</code>包管理nonce,可以比较完美实现以太坊可靠交易提交。</p>

<p>简单的代码示例:</p>

<p><code>go
signerFunc := contracts.SignerFuncOf(keyJson, keyPwd)
var oldTx *types.Transaction = getLastTxFromDB()
contracts.ResendTransaction(conn, oldTx, signerFunc, oldTx.Nonce(), nil)
</code></p>

<h1 id="section-1">交易备注</h1>

<p>交易备注其实就是在交易<code>data</code>字段附加一些额外的数据,前端时间有人收费在以太坊永久”刻字”其实就是干的这个事情。那么，抛开这个噱头不说,正常开发中怎么会有这个需求呢?</p>

<p>比如,我们要基于以太坊做一个区块链商品抢购,前端在提交了交易后拿到<code>metafox</code>回调后,才能通知到后端是抢购的哪个商品,但是很多时候<code>metafox</code>的回调并不可靠,那其实就可以使用交易备注,等后端收到这个交易的event log后,再去查询交易的备注信息就知道了是哪个商品。</p>

<p>相关辅助方法还是在<code>github.com/qjpcpu/ethereum/contracts</code>包中,目前交易备注有两种场景</p>

<h2 id="eth">裸交易(仅发送eth的交易)</h2>

<p>有两个生成交易数据的辅助方法:</p>

<p><code>go
// 备注字符串
func PackString(str string) []byte
// 备注一个数字
func PackNum(num *big.Int) []byte
</code></p>

<h2 id="section-2">合约调用交易</h2>

<p>也有两个辅助方法,他们均是将备注信息放置在合约方法参数最后:</p>

<p><code>go
func PackArgumentsWithNumber(_abi abi.ABI, method string, params ...interface{}) ([]byte, error)
func PackArgumentsWithString(_abi abi.ABI, method string, params ...interface{}) ([]byte, error)
</code></p>

<p>最后调用发送<code>raw</code>交易的方法提交:</p>

<p><code>go
func SendRawTransaction(conn *ethclient.Client, from, to common.Address, value *big.Int, data []byte, signerFunc bind.SignerFn, nonce uint64, gasPrice *big.Int, gasLimit uint64) (*types.Transaction, error)
</code></p>

<p>简单的代码示例(不可直接运行):</p>

<p><code>go
mgr := GetNonceManager()
_abi, _ := contracts.ParseABI(myABI)
signer := contracts.SignerFuncOf(keyjson, keypwd)
tx, err := mgr.GiveNonceForTx(from_addr, func(nonce uint64) (*types.Transaction, error) {
    // 该合约方法function_name只有一个number参数,后面额外的参数2是备注
	data, err := contracts.PackArgumentsWithNumber(_abi, "function_name", big.Int(1), big.Int(2))
	if err != nil {
		return nil, err
	}
	return contracts.SendRawTransaction(conf.EthConn(), from_addr, getContractAddress(), nil, data, signer, nonce, nil, 0)
})
</code></p>

<h1 id="section-3">事件扫描器</h1>

<p>扫描某个/某些事件并更改中心化服务器数据状态,这个需求很常见,直接上代码.</p>

<p>举个例子,扫描 <code>CryptoKitties</code> 的怀孕事件:</p>

<p>```go
package main</p>

<p>import (
	“fmt”
	“github.com/ethereum/go-ethereum/common”
	“github.com/ethereum/go-ethereum/ethclient”
	“github.com/qjpcpu/ethereum/events”
	“os”
)</p>

<p>func main() {
	conn, err := ethclient.Dial(“https://api.myetherapi.com/eth”)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	dataCh, errCh := make(chan events.Event, 1000), make(chan error, 1)
	b := events.NewScanBuilder()
	rep, err := b.SetClient(conn).
		SetContract(common.HexToAddress(<code>0x06012c8cf97BEaD5deAe237070F9587f8E7A266d</code>),abi_text,”Pregnant”).
		SetFrom(5547829).
		SetGracefullExit(true).
		BuildAndRun(dataCh, errCh)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	go func() {
		done := rep.WaitChan()
		for {
			select {
			case data := &lt;-dataCh:
				fmt.Printf(“%s\n”, data.String())
			case err1 := &lt;-errCh:
				fmt.Println(“error:”, err1)
			case &lt;-done:
				fmt.Println(“EXIT”)
				return
			}
		}
	}()</p>

<pre><code>rep.Wait() } ```
</code></pre>

<h1 id="section-4">登录</h1>

<p>以太坊登录其实就是签名和验签.</p>

<p>代码位于包<code>github.com/qjpcpu/ethereum/key</code></p>

<p>示例:</p>

<p>```go
package key</p>

<p>import (
    crand “crypto/rand”
    “github.com/ethereum/go-ethereum/common/hexutil”
    “github.com/ethereum/go-ethereum/crypto”
    “testing”
)</p>

<p>func TestSignature(t *testing.T) {
    pk, err := newKey(crand.Reader)
    if err != nil {
        t.Fatal(err)
    }
    msg := “JasonGeek”
    sign, err := Sign(pk, []byte(msg))
    if err != nil {
        t.Fatal(err)
    }
    from := crypto.PubkeyToAddress(pk.PublicKey).Hex()
    signHex := hexutil.Encode(sign)
    if err := VerifySign(from, signHex, []byte(msg)); err != nil {
        t.Fatal(err)
    }
}
```</p>

<h1 id="section-5">其他</h1>

<p>其他辅助小方法,可能痛点不是那么强烈,我简单列举,有需要的自行参看代码 <a href="https://github.com/qjpcpu/ethereum">qjpcpu/ethereum</a></p>

<ul>
  <li>获取合约From自段 <code>func (tx *TransactionWithExtra) From() common.Address</code></li>
  <li>合约是否执行成功 <code>func (tx *TransactionWithExtra) IsSuccess(conn *ethclient.Client) (bool, error)</code></li>
  <li>某个地址是否是个合约 <code>func IsContract(conn *ethclient.Client, hexAddr string) bool</code></li>
  <li>交易构造builder <code>func NewTxOptsBuilder(keyJson, keyPwd string) *TxOptsBuilder</code></li>
  <li>等待交易完成 <code>func WaitTxDone(conn *ethclient.Client, txhash common.Hash, timeout ...time.Duration) error</code></li>
  <li>根据keystore私钥生成签名方法 <code>func SignerFuncOf(keyJson, keyPasswd string) bind.SignerFn</code></li>
  <li>直接发送ETH <code>func TransferETH(conn *ethclient.Client, from, to common.Address, amount *big.Int, signerFunc bind.SignerFn, nonce uint64, gasPrice *big.Int, notes ...string) (*types.Transaction, error)</code></li>
  <li>私钥导入导出 <code>key</code>包</li>
</ul>

<h1 id="qjpcpuethereumhttpsgithubcomqjpcpuethereum"><a href="https://github.com/qjpcpu/ethereum">代码地址qjpcpu/ethereum</a></h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ethereum-solidity的坑]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/04/02/ethereum-solidityde-keng/"/>
    <updated>2018-04-02T10:54:43+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/04/02/ethereum-solidityde-keng</id>
    <content type="html"><![CDATA[<p>以太坊合约的坑.</p>

<!-- more -->

<h1 id="section">被意外更改的合约变量</h1>

<p>```javascript
pragma solidity ^0.4.11;</p>

<p>contract Test{
    address public a;
    address public b;
    function Test() public{
        a=msg.sender;
        b=msg.sender;
        uint256[2] g=[uint256(0),uint256(0)];
        g[0]=uint256(-1);</p>

<pre><code>} } ```
</code></pre>

<p>如果<code>msg.sender</code>是 <code>0xca35b7d915458ef540ade6068dfe2f44e8fa733c</code>,那么想象中的合约变量<code>a,b</code>都应该是这个值,但是结果却是:</p>

<p><code>
// a: address: 0xffffffffffffffffffffffffffffffffffffffff
// b: address: 0xca35b7d915458ef540ade6068dfe2f44e8fa733c
</code></p>

<p>可以看出<code>a</code>变成了 <code>g[0]</code>的值。 这是因为solidity对于这个未初始化的数组时,把它指向了合约变量地址,所以修改 <code>g[0]</code>就相当于修改了 <code>a</code>,读者可以试试修改 <code>g[1]</code>实际是修改了 <code>b</code>.</p>

<p>解决办法是将数组改成<code>memory</code>,防止他变成<code>storage</code></p>

<p><code>javascript
uint256[2] memory g = [uint256(-1),uint256(-1)];
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[以太坊合约开发中那些危险的坑]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/03/18/yi-tai-fang-he-yue-kai-fa-zhong-na-xie-wei-xian-de-keng/"/>
    <updated>2018-03-18T16:29:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/03/18/yi-tai-fang-he-yue-kai-fa-zhong-na-xie-wei-xian-de-keng</id>
    <content type="html"><![CDATA[<p>列举合约开发中那些危险的操作.</p>

<!-- more -->

<p><a href="https://github.com/ConsenSys/smart-contract-best-practices/blob/master/README-zh.md">以太坊智能合约 —— 最佳安全开发指南</a></p>

<p><a href="http://me.tryblockchain.org/blockchain-solidity-fallback.html">Solidity的fallback函数</a></p>

<p><a href="http://me.tryblockchain.org/Solidity-call-callcode-delegatecall.html">深入浅出Solidity call相关函数</a></p>

<p><a href="http://me.tryblockchain.org/blockchain-solidity-send-ether-bestpractice.html">Solidity发送ether最佳实践</a></p>

<p><a href="http://solidity.readthedocs.io/en/v0.4.21/contracts.html#fallback-function">Fallback Function</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[以太坊实战-交易爬虫]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/03/13/yi-tai-fang-shi-zhan-jiao-yi-pa-chong/"/>
    <updated>2018-03-13T19:46:40+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/03/13/yi-tai-fang-shi-zhan-jiao-yi-pa-chong</id>
    <content type="html"><![CDATA[<p>本文从一个区块链跑路项目说起,怎么通过大家可见的区块数据进行自己的业务分析,目的主要是讲述中间涉及到的技术,如果你能从中获益,并因此构建自己更加强大的分析工具,我深感荣幸.</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">防止区块链项目跑路</a></li>
  <li><a href="#section-1">服务端控制智能合约</a></li>
  <li><a href="#erc20">ERC20关键参数获取</a>    <ul>
      <li><a href="#section-2">某个地址是否合约</a></li>
      <li><a href="#from">From</a></li>
      <li><a href="#to">To</a>        <ul>
          <li><a href="#section-3">函数签名</a></li>
          <li><a href="#section-4">参数编码</a></li>
          <li><a href="#transfer">transfer</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#put-it-together">Put it together</a></li>
  <li><a href="#section-5">参考文献</a></li>
</ul>

<h1 id="section">防止区块链项目跑路</h1>

<p>首先要说说这个争议颇多的英雄链: 做为首个全球加密数字货币区块链博彩平台的建设者，HeroChain致力打造数字货币一站式博彩娱乐互动平台，是实现在区块链上加密数字货币的娱乐和产品集合服务平台。HeroChain团队目标是落地与合作全球85个博彩合法的国家和地区，或博彩业合法牌照或与当地博彩业紧密合作，未来使得HEC能与线下赌场打通，使得HEC拥有更大的交易场景。团队认为：HEC的应用覆盖和使用领域确实足以支撑这个巨量加密数字货币的流通市值。由于没有税收，使得HeroChain团队每年可以拿出收益的30%，在进行市场回购HEC， 让参与者获利。关键这个博彩业市场不像之前其它项目的预测的预期市场，是庞大而真实的网络娱乐刚需市场。</p>

<p>从这段描述来看，英雄链所针对的应用场景和未来目标都是非常有说服力的。然而目前出现有用户和项目团队因为破发矛盾激化,进而对该项目本身也产生各种质疑。媒体也对其核心人员的资金流向进行了分析:</p>

<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/JFoxiaVESXq0R8KvzDkcyicO28Yyo94Ngzl8JoqNXcPxFBgibetLQ74ENNDiaFY1S3gQokIAddFrxI9snaPooY4dWA/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="balance flow" /></p>

<p>从结果来看，项目募集的资金都最终流向了某一个地址，确实存在发行者卷款跑路的可能(详细分析可以查阅参考文献两篇文章)。</p>

<p>我这里只是以这件事件做一个引子，由于区块链的数据对大众完全透明公开,所有人的资金流向其实都摆在眼前，只是说现在链上基础工具不完善，普通人很难去分析这庞大而精细的交易记录。如果我们做一个交易爬虫，能够轻松分析任意账户的资金流动，那么不论是对普通小白验证项目的可信度还是金融从业者分析深度数据，都是很有价值的。</p>

<p>下面，我就介绍下，如果要产生ERC20某个代币的资金流向图(类似下图)，要注意哪些技术关键点。</p>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/JFoxiaVESXq0R8KvzDkcyicO28Yyo94NgzgqH5wW9TgI5o4zoBZB3owgvXNbykPhEkEep9zHS5rjqm0GD12BfgRg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="hec" /></p>

<h1 id="section-1">服务端控制智能合约</h1>

<p>要和智能合约进行交互,显然需要完成通用编程语言对合约的控制,这里我们以<code>golang</code>代码为例,展示怎么从<code>golang</code>中调用合约函数。<a href="https://github.com/ethereum/go-ethereum">官方go-ethereum</a>已经提供了这样的工具<code>abigen</code>,直接从合约<code>sol</code>代码生成go代码:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><code>abigen</code></td>
      <td>Source code generator to convert Ethereum contract definitions into easy to use, compile-time type-safe Go packages. It operates on plain <a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI">Ethereum contract ABIs</a> with expanded functionality if the contract bytecode is also available. However it also accepts Solidity source files, making development much more streamlined. Please see our <a href="https://github.com/ethereum/go-ethereum/wiki/Native-DApps:-Go-bindings-to-Ethereum-contracts">Native DApps</a> wiki page for details.</td>
    </tr>
  </tbody>
</table>

<p>那我们要分析erc20的代币，所以定义好一份接口合约即可:</p>

<p>```javascript
contract Token {
  function name() constant returns (string name);
    // 可选方法，返回代币符号，如EOS
    function symbol() constant returns (string symbol);
    // 可选方法,返回代币小数位数，如8
    function decimals() constant returns (uint8 decimals);</p>

<pre><code>// 货币总发行量
function totalSupply() constant returns (uint256 totalSupply);
// 获取某个账户的代币余额
function balanceOf(address _owner) constant returns (uint256 balance);
// (本人)向某人转账
function transfer(address _to, uint256 _value) returns (bool success);
// (本人)批准只能合约可以向某人转账
function approve(address _spender, uint256 _value) returns (bool success);
// 合约代理from向to转账(须先经过from账户approve)
function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
// 查询_owner允许合约代理向_spender转账的金额
function allowance(address _owner, address _spender) constant returns (uint256 remaining); } ```
</code></pre>

<p>然后使用<code>abigen</code>工具生成go代码</p>

<p><code>bash
abigen --sol ./erc20.sol --pkg erc20 --out token.go
</code></p>

<p>然后在<code>golang</code>中就可以像这样调用合约函数:</p>

<p>```go
package main</p>

<p>import (
	“fmt”
	“log”</p>

<pre><code>"github.com/ethereum/go-ethereum/common"
"github.com/ethereum/go-ethereum/ethclient" )
</code></pre>

<p>func main() {
	// Create an IPC based RPC connection to a remote node
	conn, err := ethclient.Dial(“/home/karalabe/.ethereum/testnet/geth.ipc”)
	if err != nil {
		log.Fatalf(“Failed to connect to the Ethereum client: %v”, err)
	}
	// Instantiate the contract and display its name
	token, err := NewToken(common.HexToAddress(“0x21e6fc92f93c8a1bb41e2be64b4e1f88a54d3576”), conn)
	if err != nil {
		log.Fatalf(“Failed to instantiate a Token contract: %v”, err)
	}
	name, err := token.Name(nil)
	if err != nil {
		log.Fatalf(“Failed to retrieve token name: %v”, err)
	}
	fmt.Println(“Token name:”, name)
}
```</p>

<h1 id="erc20">ERC20关键参数获取</h1>

<p>做交易爬虫,现在最关键的是分析交易参数,比如这是<code>etherscan.io</code>上一个<code>MCAP</code>转账交易:</p>

<p><img src="https://raw.githubusercontent.com/qjpcpu/qjpcpu.github.com/master/images/eth-tx.png" alt="tx" /></p>

<h2 id="section-2">某个地址是否合约</h2>

<p>在交易里，如果是合约的调用那么<code>To</code>字段必然是一个合约地址,那么当我们拿到一个交易时，怎么判断这个交易是否一次合约调用呢，或者怎么判断<code>To</code>是合约地址而不是用户钱包地址呢？</p>

<p><code>
很简单,地址对应存储位置上有代码则是合约地址,反之是用户钱包
</code></p>

<p>理解了这个原理,那么在go代码里就很容易判断了:</p>

<p><code>go
// 某个地址是否合约
func IsContract(conn *ethclient.Client, hexAddr string) bool {
	code, err := conn.CodeAt(context.Background(), common.HexToAddress(hexAddr), nil)
	return err == nil &amp;&amp; len(code) &gt; 0
}
</code></p>

<blockquote>
  <p>这里附上其他环境判断是否合约的方法</p>
</blockquote>

<p>在合约solidity代码里判断:</p>

<p><code>javascript
function isContract(address addr) returns (bool) {
  uint size;
  assembly { size := extcodesize(addr) }
  return size &gt; 0;
}
</code></p>

<p>在<code>geth</code>的console:</p>

<p><code>bash
eth.getCode("0xbfb2e296d9cf3e593e79981235aed29ab9984c0f")
</code></p>

<h2 id="from">From</h2>

<p><code>From</code>无法直接从交易函数里获取,因为来源地址可以从签名里反解出来,为了拿取到这个字段,用的方法是解析交易的<code>String()</code>输出来获取,虽然办法效率不高,但为了不改动源码这是最简单的。</p>

<p>[update]<code>from</code>获取已经更新,不再使用正则解析,详见代码<a href="https://github.com/qjpcpu/ethereum/blob/f3fa29e5d9ef3762d69dd838a465ee0e8b116e1f/contracts/helper.go#L35">get from field</a></p>

<h2 id="to">To</h2>

<p>收款地址的获取就比较麻烦一些了，它不像eth的直接转账,交易的<code>to</code>字段就是收款地址,合约调用的<code>To</code>是合约地址,真正的收款地址存放在<code>Data</code>字段里,那么我们来看看<code>Data</code>字段怎么编码的。</p>

<h3 id="section-3">函数签名</h3>

<p><code>Data</code>的起始4个字节是函数签名的sha3结果的前缀,举个例子,对于下面的合约</p>

<p><code>javascript
contract Foo {
  function bar(fixed[2] xy) {}
  function baz(uint32 x, bool y) returns (bool r) { r = x &gt; 32 || y; }
  function sam(bytes name, bool z, uint[] data) {}
}
</code><code>
如果要调用</code>baz<code>函数,则结果应该是</code>keccak256(“baz(uint32,bool)”)[0:4]<code>转换为16进制是</code>0xcdcd77c0`</p>

<h3 id="section-4">参数编码</h3>

<p>参数编码是依次对函数签名每个参数进行32字节左补齐编码,如<code>baz(69,true)</code>这次调用,参数<code>69</code>和<code>true</code>分别编码结果是:</p>

<ul>
  <li><code>69</code>,编码为<code>0x0000000000000000000000000000000000000000000000000000000000000045</code></li>
  <li><code>true</code>,编码为<code>0x0000000000000000000000000000000000000000000000000000000000000001</code></li>
</ul>

<p>那么整合起来,<code>baz(69,true)</code>调用时交易的<code>Data</code>应该为:</p>

<p><code>
0xcdcd77c000000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001
</code></p>

<h3 id="transfer">transfer</h3>

<p>回到我们的需求,我们要分析的20代币的转账，其实就是分析<code>transfer(address _to,unit256 _value)</code>的合约函数调用,该函数签名编码是<code>0xa9059cbb</code>,比如我们要对<code>0x54d28e24df3a2381d4c072118da0ef0a51a4fcd9</code>转账<code>493480000</code>个MCAP,编码过程为:</p>

<p>```
Function: transfer(address _to, uint256 _value)</p>

<p>MethodID: 0xa9059cbb
[0]:  00000000000000000000000054d28e24df3a2381d4c072118da0ef0a51a4fcd9
[1]:  000000000000000000000000000000000000000000000000000000001d69e840
```</p>

<p>最终结果<code>Data</code>是</p>

<p><code>0xa9059cbb00000000000000000000000054d28e24df3a2381d4c072118da0ef0a51a4fcd9000000000000000000000000000000000000000000000000000000001d69e840</code></p>

<h1 id="put-it-together">Put it together</h1>

<p>把这上面关键点整合起来,就可以构建一个简单爬虫,这个爬虫执行流程应该是:</p>

<ul>
  <li>遍历区块交易,取到我们关注的某个合约的所有转账交易</li>
  <li>解析交易关键字段,包含交易ID,from,to,金额,时间戳</li>
  <li>入库,提供webAPI给应用层</li>
</ul>

<h1 id="section-5">参考文献</h1>

<ul>
  <li><a href="https://mp.weixin.qq.com/s/2wG9-NyeHwan8pgmlaLSwQ">英雄链深度调查 永不说谎的地址</a></li>
  <li><a href="https://mp.weixin.qq.com/s/KPIDMwujSZI_MhpmMIG5Gg?scene=25#wechat_redirect">谁是英雄链背后的英雄</a></li>
  <li><a href="https://github.com/ethereum/go-ethereum/wiki/Native-DApps:-Go-bindings-to-Ethereum-contracts">Go bindings to Ethereum contracts</a></li>
  <li><a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#argument-encoding">Ethereum Contract ABI</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
