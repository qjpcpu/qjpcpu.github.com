<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blockchain | Jason's space]]></title>
  <link href="http://qjpcpu.github.io/blog/categories/blockchain/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2018-08-31T00:21:21+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hyperledger-fabric服务端开发]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/07/25/hyperledger-fabricfu-wu-duan-kai-fa/"/>
    <updated>2018-07-25T14:23:59+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/07/25/hyperledger-fabricfu-wu-duan-kai-fa</id>
    <content type="html"><![CDATA[<p>这篇文章并不是介绍fabric智能合约怎么编写的,因为这类的文章随便在google上一搜一大把. 但反而是fabric服务端开发应该怎么做需要有人稍稍点拨一下。本文就以golang服务端为例，介绍一下fabric服务端基本做法。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#fabric-sdk-go">fabric-sdk-go</a></li>
  <li><a href="#optional---populate-vendor-directory-if-needed-by-your-downstream-vendoring-solution">Optional - populate vendor directory (if needed by your downstream vendoring solution)</a></li>
  <li><a href="#section">准备基础配置文件</a></li>
  <li><a href="#sdk">初始化sdk</a></li>
  <li><a href="#section-1">初始化通道</a></li>
  <li><a href="#chaincode">操作ChainCode</a></li>
  <li><a href="#section-2">完整示例</a></li>
  <li><a href="#section-3">其他官方示例</a></li>
</ul>

<h1 id="fabric-sdk-go">fabric-sdk-go</h1>

<p>fabric目前主要提供了<code>node</code>和<code>go</code>的SDK，我们将以<a href="https://github.com/hyperledger/fabric-sdk-go">fabric-sdk-go</a>为例搭建一个简单服务端程序。</p>

<p>首先安装fabric开发基础库:</p>

<p>```bash
go get -u github.com/hyperledger/fabric/orderer
go get -u github.com/hyperledger/fabric/peer
go get -u github.com/hyperledger/fabric-sdk-go</p>

<h1 id="optional---populate-vendor-directory-if-needed-by-your-downstream-vendoring-solution">Optional - populate vendor directory (if needed by your downstream vendoring solution)</h1>
<p># cd $GOPATH/src/github.com/hyperledger/fabric-sdk-go/
# make populate
```</p>

<h1 id="section">准备基础配置文件</h1>

<p>首先准备一份客户端连接的配置文件，配置连接orderer、peer节点，证书路径等信息:</p>

<p>```yaml config_e2e.yaml
#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: 1.0.0</p>

<p>#
# The client section used by GO SDK.
#
client:</p>

<p># Which organization does this application instance belong to? The value must be the name of an org
  # defined under “organizations”
  organization: org1</p>

<p>logging:
    level: info</p>

<p># Root of the MSP directories with keys and certs.
  cryptoconfig:
    path: /home/ubuntu/.local/src/playfabric/first-network/crypto-config</p>

<p># Some SDKs support pluggable KV stores, the properties under “credentialStore”
  # are implementation specific
  credentialStore:
    # [Optional]. Used by user store. Not needed if all credentials are embedded in configuration
    # and enrollments are performed elswhere.
    path: “/tmp/state-store”</p>

<pre><code># [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
# requiring a key store. PKCS#11 based implementations does not.
cryptoStore:
  # Specific to the underlying KeyValueStore that backs the crypto key store.
  path: /tmp/msp
</code></pre>

<p># BCCSP config for the client. Used by GO SDK.
  BCCSP:
    security:
     enabled: true
     default:
      provider: “SW”
     hashAlgorithm: “SHA2”
     softVerify: true
     level: 256</p>

<p>tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    systemCertPool: false</p>

<p>channels:
  # name of the channel
  mychannel:
    # Required. list of peers from participating orgs
    peers:
      peer0.org1.example.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true</p>

<pre><code>    # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
    # installed. The app can also use this property to decide which peers to send the
    # chaincode install request. Default: true
    chaincodeQuery: true

    # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
    # queryBlock(), queryTransaction(), etc. Default: true
    ledgerQuery: true

    # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
    # produce events but the app typically only needs to connect to one to listen to events.
    # Default: true
    eventSource: true

# [Optional]. The application can use these options to perform channel operations like retrieving channel
# config etc.
policies:
  #[Optional] options for retrieving channel configuration blocks
  queryChannelConfig:
    #[Optional] min number of success responses (from targets/peers)
    minResponses: 1
    #[Optional] channel config will be retrieved for these number of random targets
    maxTargets: 1
    #[Optional] retry options for query config block
    retryOpts:
      #[Optional] number of retry attempts
      attempts: 5
      #[Optional] the back off interval for the first retry attempt
      initialBackoff: 500ms
      #[Optional] the maximum back off interval for any retry attempt
      maxBackoff: 5s
      #[Optional] he factor by which the initial back off period is exponentially incremented
      backoffFactor: 2.0
</code></pre>

<p>#
# list of participating organizations in this network
#
organizations:
  org1:
    mspid: Org1MSP</p>

<pre><code># This org's MSP store (absolute path or relative to client.cryptoconfig)
cryptoPath:  peerOrganizations/org1.example.com/users/{username}@org1.example.com/msp

peers:
  - peer0.org1.example.com
  - peer1.org1.example.com

# [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
# network. Typically certificates provisioning is done in a separate process outside of the
# runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
# dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
# Fabric-CA servers.
certificateAuthorities:
  - ca.org1.example.com
</code></pre>

<p># the profile will contain public information about organizations other than the one it belongs to.
  # These are necessary information to make transaction lifecycles work, including MSP IDs and
  # peers with a public URL to send transaction proposals. The file will not contain private
  # information reserved for members of the organization, such as admin key and certificate,
  # fabric-ca registrar enroll ID and secret, etc.
  org2:
    mspid: Org2MSP</p>

<pre><code># This org's MSP store (absolute path or relative to client.cryptoconfig)
cryptoPath:  peerOrganizations/org2.example.com/users/{username}@org2.example.com/msp

peers:
  - peer0.org2.example.com

certificateAuthorities:
  - ca.org2.example.com
</code></pre>

<p># Orderer Org name
  ordererorg:
      # Membership Service Provider ID for this organization
      mspID: OrdererMSP</p>

<pre><code>  # Needed to load users crypto keys and certs for this org (absolute path or relative to global crypto path, DEV mode)
  cryptoPath: ordererOrganizations/example.com/users/{username}@example.com/msp
</code></pre>

<p>#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK’s documentation for its handling of orderers.
#
orderers:
  orderer.example.com:
    url: orderer.example.com:7050</p>

<pre><code># these are standard properties defined by the gRPC library
# they will be passed in as-is to gRPC client constructor
grpcOptions:
  ssl-target-name-override: orderer.example.com
  # These parameters should be set in coordination with the keepalive policy on the server,
  # as incompatible settings can result in closing of connection.
  # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
  keep-alive-time: 0s
  keep-alive-timeout: 20s
  keep-alive-permit: false
  fail-fast: false
  # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
  allow-insecure: false

tlsCACerts:
  # Certificate location absolute path
  path: /home/ubuntu/repository/golang-repos/src/playfabric/first-network/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
</code></pre>

<p>#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: peer0.org1.example.com:7051
    # eventUrl is only needed when using eventhub (default is delivery service)
    eventUrl: peer0.org1.example.com:7053</p>

<pre><code>grpcOptions:
  ssl-target-name-override: peer0.org1.example.com
  # These parameters should be set in coordination with the keepalive policy on the server,
  # as incompatible settings can result in closing of connection.
  # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
  keep-alive-time: 0s
  keep-alive-timeout: 20s
  keep-alive-permit: false
  fail-fast: false
  # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
  allow-insecure: false

tlsCACerts:
  # Certificate location absolute path
  path: /home/ubuntu/repository/golang-repos/src/playfabric/first-network/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem
</code></pre>

<p>peer1.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: peer1.org1.example.com:7151
    # eventUrl is only needed when using eventhub (default is delivery service)
    eventUrl: peer1.org1.example.com:7153</p>

<pre><code>grpcOptions:
  ssl-target-name-override: peer1.org1.example.com
  # These parameters should be set in coordination with the keepalive policy on the server,
  # as incompatible settings can result in closing of connection.
  # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
  keep-alive-time: 0s
  keep-alive-timeout: 20s
  keep-alive-permit: false
  fail-fast: false
  # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
  allow-insecure: false

tlsCACerts:
  # Certificate location absolute path
  path: /home/ubuntu/repository/golang-repos/src/playfabric/first-network/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem
</code></pre>

<p>peer0.org2.example.com:
    url: peer0.org2.example.com:8051
    # eventUrl is only needed when using eventhub (default is delivery service)
    eventUrl: peer0.org2.example.com:8053
    grpcOptions:
      ssl-target-name-override: peer0.org2.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the ‘keep-alive-time’ is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false</p>

<pre><code>tlsCACerts:
  path: /home/ubuntu/repository/golang-repos/src/playfabric/first-network/crypto-config/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem ```
</code></pre>

<h1 id="sdk">初始化sdk</h1>

<p>使用<code>github.com/hyperledger/fabric-sdk-go/pkg/core/config</code>包读取并解析配置文件,加载完成后即可初始化sdk</p>

<p><code>go
configPath := os.Getenv("GOPATH") + "/src/playfabric/config_e2e.yaml"
configOpt := config.FromFile(configPath)
sdk, err := fabsdk.New(configOpt)
if err != nil {
	fmt.Println(err)
	os.Exit(1)
}
defer sdk.Close()
</code></p>

<h1 id="section-1">初始化通道</h1>

<p>初始化channelContext及channel,至此初始化工作完成，可以操作chain code或者查询账本。</p>

<p><code>go
//prepare channel client context using client context
clientChannelContext := sdk.ChannelContext("mychannel", fabsdk.WithUser("User1"), fabsdk.WithOrg(orgName))
// Channel client is used to query and execute transactions (Org1 is default org)
client, err := channel.New(clientChannelContext)
if err != nil {
	fmt.Printf("Failed to create new channel client: %s", err)
	os.Exit(1)
}
</code></p>

<h1 id="chaincode">操作ChainCode</h1>

<p>以官方example02的chain code（代币转移合约）为例:</p>

<p><code>go
// a =&gt; b转账2个代币
func executeCC(client *channel.Client) error {
	res, err := client.Execute(channel.Request{ChaincodeID: ccID, Fcn: "invoke", Args: makeArgs("a", "b", "2")},
		channel.WithRetry(retry.DefaultChannelOpts))
	fmt.Println("exe tx:", res.TransactionID)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	return err
}
// 查询某个账户代币余额
func queryCC(client *channel.Client, who string) []byte {
	response, err := client.Query(channel.Request{ChaincodeID: ccID, Fcn: "query", Args: makeArgs(who)},
		channel.WithRetry(retry.DefaultChannelOpts),
		channel.WithTargetEndpoints(),
	)
	fmt.Println("query tx:", response.TransactionID)
	if err != nil {
		fmt.Printf("Failed to query funds: %s", err)
		os.Exit(1)
	}
	return response.Payload
}
</code></p>

<h1 id="section-2">完整示例</h1>

<p>完整示例很简单，包含代币转让及查询、底层账本查询（对应fabric1.1，BYFN示例网络）</p>

<p>```go
package main</p>

<p>import (
	“encoding/hex”
	“fmt”
	“github.com/hyperledger/fabric-sdk-go/pkg/client/ledger”
	“github.com/hyperledger/fabric-sdk-go/third_party/github.com/hyperledger/fabric/protos/common”
	“github.com/hyperledger/fabric/common/util”
	“github.com/hyperledger/fabric-sdk-go/pkg/common/errors/retry”
	“github.com/hyperledger/fabric-sdk-go/pkg/client/channel”
	“github.com/hyperledger/fabric-sdk-go/pkg/core/config”
	“github.com/hyperledger/fabric-sdk-go/pkg/fabsdk”
	“os”
)</p>

<p>const (
	channelID      = “mychannel”
	orgName        = “Org1”
	orgAdmin       = “Admin”
	ordererOrgName = “OrdererOrg”
	ccID           = “mycc”
)</p>

<p>func queryLedgerExample() {
	configPath := os.Getenv(“GOPATH”) + “/src/playfabric/config_e2e.yaml”
	configOpt := config.FromFile(configPath)
	sdk, err := fabsdk.New(configOpt)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	defer sdk.Close()
	//prepare channel client context using client context
	clientChannelContext := sdk.ChannelContext(channelID, fabsdk.WithUser(“User1”), fabsdk.WithOrg(orgName))
	// Channel client is used to query and execute transactions (Org1 is default org)
	client, err := ledger.New(clientChannelContext)
	if err != nil {
		fmt.Printf(“Failed to create new channel client: %s”, err)
		os.Exit(1)
	}
	ledgerInfo, err := client.QueryInfo()
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	printBCI(ledgerInfo.BCI)
	block, err := client.QueryBlock(ledgerInfo.BCI.GetHeight() - 1)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	printBlock(block)
	// txid := “63abb9a2ae8e7f3f689498f4ccedef6001ab7902ba9dfe69e2c270a4f7ff1d4d”
	// tx, err := client.QueryTransaction(fab.TransactionID(txid))
	// if err != nil {
	// 	fmt.Println(err)
	// 	os.Exit(1)
	// }
	// fmt.Println(“Tx:”, txid, “payload:”, hex.EncodeToString(tx.GetTransactionEnvelope().GetPayload()))
}</p>

<p>func printBCI(blk *common.BlockchainInfo) {
	fmt.Println(“block height:”, blk.GetHeight())
	fmt.Println(“block hash:”, hex.EncodeToString(blk.GetCurrentBlockHash()))
	fmt.Println(“block prevhash:”, hex.EncodeToString(blk.GetPreviousBlockHash()))
	fmt.Println(“=====================================================”)
}</p>

<p>func printBlock(blk *common.Block) {
	fmt.Printf(“BlockNO:%v\n”, blk.GetHeader().GetNumber())
	fmt.Println(“prevhash:”, hex.EncodeToString(blk.GetHeader().GetPreviousHash()))
	fmt.Println(“hash:”, hex.EncodeToString(util.ComputeSHA256(util.ConcatenateBytes(blk.GetData().GetData()…))))
	fmt.Println(“=====================================================”)
}</p>

<p>func main() {
	configPath := os.Getenv(“GOPATH”) + “/src/playfabric/config_e2e.yaml”
	configOpt := config.FromFile(configPath)
	sdk, err := fabsdk.New(configOpt)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	defer sdk.Close()
	//prepare channel client context using client context
	clientChannelContext := sdk.ChannelContext(channelID, fabsdk.WithUser(“User1”), fabsdk.WithOrg(orgName))
	// Channel client is used to query and execute transactions (Org1 is default org)
	client, err := channel.New(clientChannelContext)
	if err != nil {
		fmt.Printf(“Failed to create new channel client: %s”, err)
		os.Exit(1)
	}
	fmt.Println(“a”, string(queryCC(client, “a”)))
	fmt.Println(“b”, string(queryCC(client, “b”)))</p>

<pre><code>executeCC(client)

fmt.Println("a", string(queryCC(client, "a")))
fmt.Println("b", string(queryCC(client, "b"))) }
</code></pre>

<p>func executeCC(client *channel.Client) error {
	res, err := client.Execute(channel.Request{ChaincodeID: ccID, Fcn: “invoke”, Args: makeArgs(“a”, “b”, “2”)},
		channel.WithRetry(retry.DefaultChannelOpts))
	fmt.Println(“exe tx:”, res.TransactionID)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	return err
}</p>

<p>func queryCC(client *channel.Client, who string) []byte {
	response, err := client.Query(channel.Request{ChaincodeID: ccID, Fcn: “query”, Args: makeArgs(who)},
		channel.WithRetry(retry.DefaultChannelOpts),
		channel.WithTargetEndpoints(),
	)
	fmt.Println(“query tx:”, response.TransactionID)
	if err != nil {
		fmt.Printf(“Failed to query funds: %s”, err)
		os.Exit(1)
	}
	return response.Payload
}</p>

<p>func makeArgs(args …string) [][]byte {
	var ccargs [][]byte
	for _, arg := range args {
		ccargs = append(ccargs, []byte(arg))
	}
	return ccargs
}
```</p>

<h1 id="section-3">其他官方示例</h1>

<ul>
  <li><a href="https://github.com/hyperledger/fabric-sdk-go/tree/master/test/integration/e2e/end_to_end.go">E2E Test</a>: Basic example that uses SDK to query and execute transaction</li>
  <li><a href="https://github.com/hyperledger/fabric-sdk-go/tree/master/test/integration/pkg/client/ledger/ledger_queries_test.go">Ledger Query Test</a>: Basic example that uses SDK to query a channel’s underlying ledger</li>
  <li><a href="https://github.com/hyperledger/fabric-sdk-go/tree/master/test/integration/e2e/orgs/multiple_orgs_test.go">Multi Org Test</a>: An example that has multiple organisations involved in transaction</li>
  <li><a href="https://github.com/hyperledger/fabric-sdk-go/tree/master/test/integration/pkg/fabsdk/provider/sdk_provider_test.go">Dynamic Endorser Selection</a>: An example that uses dynamic endorser selection (based on chaincode policy)</li>
  <li><a href="https://github.com/hyperledger/fabric-sdk-go/tree/master/test/integration/e2e/pkcs11/e2e_test.go">E2E PKCS11 Test</a>: E2E Test using a PKCS11 crypto suite and configuration</li>
  <li><a href="https://github.com/securekey/fabric-examples/tree/master/fabric-cli/">CLI</a>: An example CLI for Fabric built with the Go SDK.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hyperledger-fabric分布式部署]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/07/23/hyperledger-fabricfen-bu-shi-bu-shu/"/>
    <updated>2018-07-23T10:48:30+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/07/23/hyperledger-fabricfen-bu-shi-bu-shu</id>
    <content type="html"><![CDATA[<p>fabric官方文档给出了怎样搭建第一个联盟网络(<a href="https://hyperledger-fabric.readthedocs.io/en/latest/build_network.html">Build your first network</a>),然而这个文档实际只给出了单机部署多个docker实例的例子,如果要在真实分布式环境部署，还是得费不少力气.</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">基本思路</a></li>
  <li><a href="#section-1">搭建流程</a>    <ul>
      <li><a href="#section-2">创建必要配置文件</a></li>
      <li><a href="#swarm">创建swarm集群</a></li>
      <li><a href="#section-3">创建集群网络</a></li>
      <li><a href="#fabric">创建fabric控制脚本</a></li>
    </ul>
  </li>
  <li><a href="#startpeer-0-1-means-start-peer-0-of-org-1">startPeer 0 1 means start peer 0 of org 1</a></li>
  <li><a href="#scriptsscriptsh-channelname-clidelay-language-clitimeout">scripts/script.sh $CHANNEL_NAME $CLI_DELAY $LANGUAGE $CLI_TIMEOUT</a>    <ul>
      <li><a href="#section-4">启动网络</a>        <ul>
          <li><a href="#orderer">启动orderer</a></li>
          <li><a href="#peer">启动peer</a></li>
          <li><a href="#fabric-1">配置fabric网络</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#section-5">后记</a></li>
</ul>

<h1 id="section">基本思路</h1>

<blockquote>
  <p>题外话:老实说，fabric这个部署文档写得并不漂亮。因为他引入了过多的先决知识，譬如docker,docker-compose等多个docker组件，虽然使用docker大大提高了部署成功率，然而这样做对于fabric入门来说却走偏了，容易让初学者产生一种疑惑: 好似很容易就”得到”了一个完整的fabric网络，然而实际上，好像对于fabric是怎么运行起来的仍然一无所知。如果想要了解怎么样一步步将fabric搭建起来的话，可以仔细看看<code>fabric-samples/first-network</code>文件夹的脚本及compose配置文件，或者参考<code>[区块链原理、设计、与应用] 作者:杨保华,陈昌</code>这本书第9章,相信这样的搭建教程才能让人有直观的了解。所以，本文也不必一步步拆分搭建步骤，本文的目的是为了想读者展示如果利用现有的BYFN文档及脚本搭建真正分布式网络。</p>
</blockquote>

<p>所有的宿主机环境以及fabric二进制程序的安装还是按照Build Your First Network文档所说进行，在完成后，用docker swarm将各个宿主机上的docker实例连接起来。</p>

<h1 id="section-1">搭建流程</h1>

<p>假设我们有5台宿主机</p>

<ul>
  <li>orderer(cli) 我们将在orderer宿主机上启动客户端cli配置网络，实际上这个cli可以在任意机器上启动</li>
  <li>peer0.org1</li>
  <li>peer1.org1</li>
  <li>peer0.org2</li>
  <li>peer1.org2</li>
</ul>

<p>在5台宿主机上同构部署fabric环境，具体操作参考<a href="https://hyperledger-fabric.readthedocs.io/en/latest/build_network.html">Build your first network</a></p>

<h2 id="section-2">创建必要配置文件</h2>

<p>在任意一台机器上生成配置文件:</p>

<p><code>
cd ./fabric-samples/first-network
./byfn.sh generate
</code></p>

<p>然后将生成的配置同步到所有其他几台宿主机的相同目录,同步的文件包含</p>

<ul>
  <li>channel-artifacts</li>
  <li>crypto-config</li>
</ul>

<h2 id="swarm">创建swarm集群</h2>

<p>假设我们将cli作为集群manager，则在cli上创建swarm集群:</p>

<p><code>
docker swarm init
</code></p>

<p>查看集群join token:</p>

<p><code>
docker swarm join-token manager
</code></p>

<p>输出可能类似这样:</p>

<p><code>
docker swarm join — token SWMTKN-1–3as8cvf3yxk8e7zj98954jhjza3w75mngmxh543llgpo0c8k7z-61zyibtaqjjimkqj8p6t9lwgu 172.16.0.153:2377
</code></p>

<p>在其他所有机器上执行这条输出的命令，完成后说明所以机器处于同一集群.</p>

<h2 id="section-3">创建集群网络</h2>

<p>在cli宿主机执行</p>

<p><code>
docker network create --attachable --driver overlay byfn
</code></p>

<h2 id="fabric">创建fabric控制脚本</h2>

<p>现在，所有宿主均处于swarm集群，然而docker-compose并不直接使用swarm,所以我这里不再使用docker-compose，原因有两个: 1.docker-compose主要用于多个服务打包部署，然而我们在每个宿主机仅部署单个docker，不必非要使用compose 2.docker-compose还需要单独配置才能运行在swarm模式下。 所以，我将docker启动命令独立出来，写入一个shell脚本，将这个shell脚本放入所有宿主机<code>./fabric-samples/first-network/</code>下命令为<code>control</code>文件.</p>

<p>```bash
#!/bin/bash
NETWORK=byfn    # 网络名称必须和创建的集群网络名称一致
IMAGETAG=latest</p>

<p>function startOrderer()
{
    docker run –rm -d –network=${NETWORK} –name orderer.example.com -p 7050:7050 \
    -e ORDERER_GENERAL_LOGLEVEL=INFO \
    -e ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 \
    -e ORDERER_GENERAL_GENESISMETHOD=file \
    -e ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block \
    -e ORDERER_GENERAL_LOCALMSPID=OrdererMSP \
    -e ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp \
    -e ORDERER_GENERAL_TLS_ENABLED=true \
    -e ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key \
    -e ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt \
    -e ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt] \
    –mount type=bind,source=/root/fabric/fabric-samples/first-network/channel-artifacts/genesis.block,target=/var/hyperledger/orderer/orderer.genesis.block    \
    –mount type=bind,source=/root/fabric/fabric-samples/first-network/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp,target=/var/hyperledger/orderer/msp    \
    –mount type=bind,source=/root/fabric/fabric-samples/first-network/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/,target=/var/hyperledger/orderer/tls    \
    hyperledger/fabric-orderer:${IMAGETAG} orderer
}</p>

<h1 id="startpeer-0-1-means-start-peer-0-of-org-1">startPeer 0 1 means start peer 0 of org 1</h1>
<p>function startPeer()
{
	PEER=$1
	ORG=$2
	PEER2=1
	[ $PEER -eq 1 ] &amp;&amp; PEER2=0
	BOOT=peer${PEER2}.org${ORG}.example.com:7051
    docker run –rm -d  –network=${NETWORK} –name peer${PEER}.org${ORG}.example.com -p 7051:7051 -p 7053:7053 \
    -e CORE_PEER_ID=peer${PEER}.org${ORG}.example.com \
    -e CORE_PEER_ADDRESS=peer${PEER}.org${ORG}.example.com:7051 \
    -e CORE_PEER_GOSSIP_BOOTSTRAP=${BOOT} \
    -e CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer${PEER}.org${ORG}.example.com:7051 \
    -e CORE_PEER_LOCALMSPID=Org${ORG}MSP \
    -e CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock \
    -e CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${NETWORK} \
    -e CORE_LOGGING_LEVEL=INFO \
    -e CORE_PEER_TLS_ENABLED=true \
    -e CORE_PEER_GOSSIP_USELEADERELECTION=true \
    -e CORE_PEER_GOSSIP_ORGLEADER=false \
    -e CORE_PEER_PROFILE_ENABLED=true \
    -e CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt \
    -e CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key \
    -e CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt \
    –mount type=bind,source=/var/run/,target=/host/var/run/ \
    –mount type=bind,source=/root/fabric/fabric-samples/first-network/crypto-config/peerOrganizations/org${ORG}.example.com/peers/peer${PEER}.org${ORG}.example.com/msp,target=/etc/hyperledger/fabric/msp \
    –mount type=bind,source=/root/fabric/fabric-samples/first-network/crypto-config/peerOrganizations/org${ORG}.example.com/peers/peer${PEER}.org${ORG}.example.com/tls,target=/etc/hyperledger/fabric/tls \
    hyperledger/fabric-peer:${IMAGETAG}  peer node start
}</p>

<h1 id="scriptsscriptsh-channelname-clidelay-language-clitimeout">scripts/script.sh $CHANNEL_NAME $CLI_DELAY $LANGUAGE $CLI_TIMEOUT</h1>
<p>function startCli()
{
    docker run –rm -it –network=${NETWORK} –name cli \
    -e  CHANNEL_NAME=”mychannel” \
    -e  CLI_DELAY=3 \
    -e  LANGUAGE=golang \
    -e  CLI_TIMEOUT=10 \
    -e  GOPATH=/opt/gopath \
    -e  CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock \
    -e  CORE_LOGGING_LEVEL=INFO \
    -e  CORE_PEER_ID=cli \
    -e  CORE_PEER_ADDRESS=peer0.org1.example.com:7051 \
    -e  CORE_PEER_LOCALMSPID=Org1MSP \
    -e  CORE_PEER_TLS_ENABLED=true \
    -e  CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt \
    -e  CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key \
    -e  CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
    -e  CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp \
    –mount type=bind,source=/var/run/,target=/host/var/run/ \
    –mount type=bind,source=/root/fabric/fabric-samples/chaincode/,target=/opt/gopath/src/github.com/chaincode \
    –mount type=bind,source=/root/fabric/fabric-samples/first-network/crypto-config,target=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ \
    –mount type=bind,source=/root/fabric/fabric-samples/first-network/scripts,target=/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/ \
    –mount type=bind,source=/root/fabric/fabric-samples/first-network/channel-artifacts,target=/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts \
    –workdir /opt/gopath/src/github.com/hyperledger/fabric/peer \
    hyperledger/fabric-tools:${IMAGETAG} /bin/bash
}</p>

<p>case X$1 in
    Xorderer)
        startOrderer
        ;;
    Xpeer)
        startPeer $2 $3
        ;;
    Xcli)
        startCli
        ;;      <br />
    X*)
        echo “Usage: $0 orderer|peer|cli”
        exit -1
        ;;
esac
```</p>

<h2 id="section-4">启动网络</h2>

<h3 id="orderer">启动orderer</h3>

<p>在orderer宿主机执行</p>

<p><code>
cd ./fabric-samples/first-network
./contrl orderer
</code></p>

<h3 id="peer">启动peer</h3>

<p>在peer0.org1宿主机执行</p>

<p><code>
cd ./fabric-samples/first-network
./contrl peer 0 1
</code></p>

<p>在peer1.org1宿主机执行</p>

<p><code>
cd ./fabric-samples/first-network
./contrl peer 1 1
</code></p>

<p>同理启动org2的peer</p>

<h3 id="fabric-1">配置fabric网络</h3>

<p>在任意宿主机,这里我们就用orderer宿主机:</p>

<p><code>
cd ./fabric-samples/first-network
./control cli
</code></p>

<p>执行这个命令后进入客户端配置实例,直接运行配置脚本即可:</p>

<p><code>
scripts/script.sh $CHANNEL_NAME $CLI_DELAY $LANGUAGE $CLI_TIMEOUT
</code></p>

<p>出现的配置及测试输出应该和单机部署一样,至此部署完成。</p>

<h1 id="section-5">后记</h1>

<p>按这个步骤，应该是可以将这个分布式fabric搭建起来的，但是其他优化还需要自行完成，比如为了测试方便，我并没有将区块链数据挂载出来，所以docker重启后区块数据就没有了，生产环境得自己将数据卷挂载上去；还有，为了权限隔离，一般也不会将整个crypto-config文件夹分发给各个联盟节点，而是需要什么给什么，保持目录结构一致即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用call实现合约任意调用]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/07/02/li-yong-callshi-xian-he-yue-ren-yi-diao-yong/"/>
    <updated>2018-07-02T13:50:25+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/07/02/li-yong-callshi-xian-he-yue-ren-yi-diao-yong</id>
    <content type="html"><![CDATA[<p>call()是一个底层的接口，用来向一个合约发送消息，也就是说如果你想实现自己的消息传递，可以使用这个函数。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">需求场景</a>    <ul>
      <li><a href="#section-1">业务需求</a></li>
      <li><a href="#section-2">明确需求</a></li>
    </ul>
  </li>
  <li><a href="#section-3">实现关键点</a>    <ul>
      <li><a href="#section-4">调用任意合约</a></li>
      <li><a href="#section-5">权限控制</a></li>
    </ul>
  </li>
  <li><a href="#section-6">实现参考</a>    <ul>
      <li><a href="#section-7">热钱包工厂</a></li>
      <li><a href="#section-8">热钱包合约</a></li>
    </ul>
  </li>
  <li><a href="#section-9">后记</a></li>
</ul>

<h1 id="section">需求场景</h1>

<p>“合约动态调用”的需求场景是什么呢,答案是”热钱包”。为什么是热钱包呢,我们可以从最终需求出发一步步来推导:</p>

<h2 id="section-1">业务需求</h2>

<p>首先,假设一个业务需求，我们现在要做一个ERC721的热钱包，用户可以托管他全部的数字资产给项目方，项目方代表用户对其资产进行任意操作，这样我们可以向用户屏蔽以太坊的细节，大大提升用户体验，只有当用户想要提现资产的时候，才把资产归还到用户的冷钱包地址中去。</p>

<h2 id="section-2">明确需求</h2>

<p>初看这个需求很简单，我们可以为每个用户生成一个私钥从而建立对应地址。每次需要对资产进行操作的时候，读取这个私钥进行链上交互就行了。</p>

<p>好像很完美，但细想下来，在真正生产环境中实践却会有诸多问题: 首先带来的就是管理问题，众多的私钥不容许有一丝数据的丢失损坏，否则就需要承担用户资产的遗失风险; 其次是泄露的风险，私钥的众多更加大了泄露的风险系数，一旦有任何一个私钥泄露，项目方基本上是属于束手无策的，以太坊上可没有账户封禁这一说。</p>

<p>那么，怎么解决这个问题呢？我这里提供的一个解决方案就是利用合约。</p>

<p>我们为每个用户创建的热钱包并不是一个普通钱包地址，而是一个合约。所有的用户的热钱包都统一受控于项目方的管理账户地址,只有管理账户有权操作合约，如果有任何问题，我们只需要使用管理账户进行维护操作就行，不需要更改其他东西。 但利用合约来做热钱包又带来另一个问题，合约能调用的方法在上链之后就无法更改了或新增了，如果我们要对接的某个721藏品后续支持了某个新方法，那么我们的热钱包岂不是不能完成这个调用了？所以，如果使用合约做热钱包，还必须能够实现这个钱包合约能够动态调用其他合约。</p>

<p>归纳一下，这个721热钱包细化下来的技术需求有这样几点需要满足:</p>

<ol>
  <li>管理收敛，所有热钱包管理最好收敛到一个管理账户下</li>
  <li>管理账户能更改</li>
  <li>如果是合约热钱包,这个钱包必须能适配各类标准非标准藏品合约的调用</li>
</ol>

<p>这里对第3点补充说明一下，可能有的读者会疑惑，既然erc721都是标准化的协议，为什么还需要适配各种非标接口呢？原因之一是我们业务需求里已经说了，要能对用户资产进行任意操作，不仅仅限制于基本721的几个API。此外，ERC721的藏品通常都不会只包含721协议里几个基础接口，各个项目方会根据自己的业务研发出诸如繁殖、战斗等等资产操作，一个好的721钱包最好是能适配这些功能。还有，即便是ERC721协议本身，也可能出现变动，比如日前刚确认的721协议的最终版和以CryptoKitty所代表的beta版，协议本身就差别不小。</p>

<h1 id="section-3">实现关键点</h1>

<h2 id="section-4">调用任意合约</h2>

<p>这是本文要讲述的关键点。</p>

<p>其实要实现这个功能,使用<code>call</code>方法就可以了。call调用失败会返回一个调用成功与否的布尔值，需要检查一下</p>

<p><code>javascript
contract DynamicCaller{
    function dyn_call(address _constract, bytes _data) public payable{
        if (!_constract.call.value(msg.value)(_data)){
            revert();
        }
    }
}
</code></p>

<p>如果<code>DynamicCaller</code>就是我们的热钱包合约，那么这个<code>dyn_call</code>方法就可以实现任意调用，注意这个动态方法最终调用的合约和对应方法都是由参数传递进来；</p>

<p>在ropsten部署这个合约,合约地址是<code>0x5ec567cf2137da526945f4820d0c0621ddcd02ce</code>。现在我们有一份任意合约<code>AnyContract</code>(这里先不以ERC721合约举例，为了阐明任意调用这个点，使用了一个简单合约示例)</p>

<p>```javascript
contract AnyContract{
    mapping(address =&gt; uint256) public numbers;
    mapping(address =&gt; string) public texts;</p>

<pre><code>function add(uint256 _a,uint256 _b) public{
    numbers[msg.sender] =_a+_b;
}

function write(string _text) public{
    texts[msg.sender] = _text;
}

function batchWrite(uint256 _a,uint256 _b,string _text) public payable{
    numbers[msg.sender] =_a+_b;
    texts[msg.sender] = _text;
}
function getBalance() public view returns(uint256){
    return address(this).balance;
} } ```
</code></pre>

<p>现在我们怎么进行调用呢？我们可以使用<code>github.com/qjpcpu/ethereum/contracts</code>提供的参数打包方法<code>PackArguments</code>生成<code>dyn_call</code>要的数据，比如我们要从<code>DynamicCaller</code>调用<code>AnyContract</code>的add方法:</p>

<p><code>go
anyABI, _ = contracts.ParseABI("[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"texts\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"uint256\"},{\"name\":\"_b\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"uint256\"},{\"name\":\"_b\",\"type\":\"uint256\"},{\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"batchWrite\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"numbers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"write\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]")
data, err := contracts.PackArguments(anyABI, "add", big.NewInt(1), big.NewInt(2))
if err != nil {
	return err
}
builder := contracts.NewTxOptsBuilderFromPK(pk)
dc, _ := NewDynamicCaller(common.HexToAddress(DynamicCallerAddres), conn)
tx, err := dc.DynCall(builder.Get(), common.HexToAddress("0x2f44fc640F9708FD969620466F9eddD21859e8E9"), data)
</code></p>

<p>完整代码示例参考<a href="https://github.com/qjpcpu/dynamic-caller">dynamic-caller</a></p>

<h2 id="section-5">权限控制</h2>

<p>对于热钱包创建合约,需要能更改管理账户,并且<code>dyn_call</code>这个函数只有管理账户能够调用,这个继承<code>Ownable</code>合约就可能办到了。</p>

<p>对于热钱包合约本身,除了提现操作，所有方法调用必须来自管理合约的管理员。</p>

<h1 id="section-6">实现参考</h1>

<h2 id="section-7">热钱包工厂</h2>

<p>热钱包工厂唯一作用就是创建热并记录用户的热钱包，唯一需要注意的就是控制权的管理</p>

<p>```javascript
contract Ownable {
    address public owner;</p>

<pre><code>constructor() public {
    owner = msg.sender;
}

modifier onlyOwner() {
    require(msg.sender == owner);
    _;
}

function transferOwnership(address newOwner) public onlyOwner {
    if (newOwner != address(0)) {
        owner = newOwner;
    }
}

function getOwner() public view returns(address) {
    return owner;
}
</code></pre>

<p>}</p>

<p>contract WalletFactory is Ownable {
    // 记录用户热钱包地址
    mapping(address =&gt; address) public hotwallets;</p>

<pre><code>// 仅管理员owner可以创建热钱包
function createWallet(address _owner) public onlyOwner {
    // 每个用户仅有一个热钱包
    require(hotwallets[_owner] == address(0));
    HotWallet w = new HotWallet(address(this), _owner);
    hotwallets[_owner] = address(w);
}

function isWalletFactory() external pure returns(bool){
    return true;
} } ```
</code></pre>

<p>其实，在实际应用中,这里还潜藏了一个问题: 比如通常的产品逻辑会在用户注册完成时就生成热钱包备用,但这个以太坊交易被打包最快可能也要15秒左右，如果我们要在用户注册完成就显示用户热钱包地址好像是不可能的。实际上呢？交易打包确认确实要很长时间,但是我们却可以提前获知热钱包的地址:</p>

<p>以太坊中合约地址的生成规则是这样的:根据<code>(msg.sender + nonce)</code>二元组的hash来生成合约地址的,这个生成算法很简单,有兴趣可以查阅源码<code>crypto</code>包。</p>

<p>举个例子,加入<code>WalletFactory</code>这个合约地址是<code>0x5ec567cf2137da526945f4820d0c0621ddcd02ce</code>,那么第一次调用<code>createWallet</code>时nonce肯定是1，则对应生成的<code>HotWallet</code>地址可以这样算出: <code>addr := crypto.CreateAddress(common.HexToAddress("0x5ec567cf2137da526945f4820d0c0621ddcd02ce"), 1) // 热钱包地址是:0xE139cd3E5FcC127A54B0fF8687c703265E282842</code></p>

<h2 id="section-8">热钱包合约</h2>

<p>```javascript
contract HotWallet {
    address public owner;
    WalletFactory public factory;
    // 这里的owner是热钱包所属用户
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    // 保证动态方法的调用者一定是管理员
    modifier onlyAdmin() {
        require(msg.sender == factory.getOwner());
        _;
    }</p>

<pre><code>constructor(address _admin, address _owner) public {
    require(_admin != address(0) &amp;&amp; _owner != address(0));
    factory = WalletFactory(_admin);
    require(factory.isWalletFactory());
    owner = _owner;
}

function isHotWallet() external pure returns(bool){
    return true;
}

// the msg.sender must be factory.owner
function dyn_call(address _constract, bytes _data) public payable onlyAdmin {
    if (!_constract.call.value(msg.value)(_data)){
        revert();
    }
}

// 能提现eth
function withdraw() external onlyOwner{
    require(owner != address(0));
    owner.transfer(address(this).balance);
}

// 很多场景下都需要能接受eth转账
function() public payable{}

// other functions } ```
</code></pre>

<p><a href="https://github.com/qjpcpu/dynamic-caller/blob/master/wallets.sol">完整合约代码</a></p>

<h1 id="section-9">后记</h1>

<p>要完成个业务特定热钱包,可以在这个基础上修改HotWallet代码即可,比如数字资产的提现等等,但要特别注意: <code>call</code>方法是一个非常底层方法，为了合约安全，该方法不应该接受直接来自用户的数据。</p>

<p>此外,我观察到一些交易所给用户分配的以太热钱包地址也是一份用户独立的合约而不是普通地址,所以我猜想他们可能也是为了业务灵活性和管理性才这样做的，不过是不是使用call来实现，就不得而知了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样实现以太坊交易可靠提交]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/06/14/zen-yang-shi-xian-yi-tai-fang-jiao-yi-ke-kao-ti-jiao/"/>
    <updated>2018-06-14T14:54:01+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/06/14/zen-yang-shi-xian-yi-tai-fang-jiao-yi-ke-kao-ti-jiao</id>
    <content type="html"><![CDATA[<p>在真实环境下的以太坊Dapp开发,是一定涉及到链上链下逻辑的交互的。那么开发者可能会遇到这样一种场景,当用户使用metamask签名交易并提交后,Dapp的中心服务端需要拿到这个交易ID,并跟踪这个交易的执行,甚至会根据这笔交易去触发后端逻辑(当然使用event可以一定程度避开这个问题,但这种回避式的解决方案不在此讨论)，但现实情况往往是令人痛苦的，因为很可能会因为种种原因，我们无法取到metamask的回调，导致开发者因此”丢失”掉这笔交易。</p>

<p>那么，如果我们要直面这个问题，要怎么样实现交易可靠提交呢？</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">提炼问题</a>    <ul>
      <li><a href="#metamask">1. 最显而易见,metamask能够提供可靠回调</a></li>
      <li><a href="#metamask-1">2. metamask将交易签名和发送拆分开来</a></li>
      <li><a href="#section-1">3. 弄脏手自己做</a></li>
    </ul>
  </li>
  <li><a href="#section-2">关键实现</a>    <ul>
      <li><a href="#section-3">1.前端获取裸交易数据</a></li>
      <li><a href="#hash">2.后端计算裸交易hash</a></li>
      <li><a href="#metamask-2">3.前端唤起metamask签名</a></li>
      <li><a href="#section-4">4.后端发送交易</a></li>
    </ul>
  </li>
  <li><a href="#section-5">反思</a>    <ul>
      <li><a href="#section-6">1.安全性</a></li>
      <li><a href="#section-7">2.用户体验</a></li>
      <li><a href="#section-8">3.时效性</a></li>
    </ul>
  </li>
</ul>

<h1 id="section">提炼问题</h1>

<p>首先，我再次描述下问题的发生场景: 在metamask环境下，我们需要拿到用户提交的交易来触发后续中心化逻辑，但是在现实情况下很可能拿不到这个回调交易ID.</p>

<p>看起来，问题的核心并不是交易可靠提交，而是可靠地拿到交易提交的回调。那么解决问题，就有两种思路:</p>

<h5 id="metamask">1. 最显而易见,metamask能够提供可靠回调</h5>

<p>这个解决方案最无痛，然而完全依赖于metamask团队的开发意愿。所幸的是metamask团队在接收开发者的反馈后，有意愿往这方面努力。但开发时间不确定，甚至于我认为，在浏览器环境下，可能无法完美解决。所以短期内，这个方向是无法在生产环境实施的。</p>

<h5 id="metamask-1">2. metamask将交易签名和发送拆分开来</h5>

<p>如果没做过以太坊Dapp开发，可能不清楚metamask提交交易其实是串行执行了两步操作： 一.先对交易裸数据签名，得到签名后的交易,二.将签名后的交易提交到以太坊。</p>

<p>实际上，在metamask完成第一步签名后，这个交易就已经是一笔以太坊合法交易了，任何一个以太坊节点都可以拿着这笔交易进行全网广播，要求矿工打包。试想，如果metamsk将这两个操作拆分开来，那么开发者就可以要求metamask先对裸交易签名，然后客户端将这笔交易发送给服务端，让服务端向以太坊节点提交交易，这样应用开发者就能够使用各种传统手段保证交易提交，并且能够实施后续各种中心化逻辑了。</p>

<p>看似很美好，然而metamask目前不提供这样的接口。虽然web3js已经有这样的接口，但metamask并没有对接。不过前景还是可以期望的,metamask团队表示已经会进行操作拆分，将来可以这样做。详细可以参考<a href="https://github.com/MetaMask/metamask-extension/issues/3475">Issue#3475</a>.</p>

<h5 id="section-1">3. 弄脏手自己做</h5>

<p>既然靠不了别人，就自己来解决。这第3种解决方案，其实和第二种思路是一样的，只是达到这个目的有些纠结。</p>

<p>首先，metamsk支持web3js一个比较原始的签名方法<code>web3.eth.sign</code>,他是对一段数据进行以太坊签名，看起来可以满足我们的需求，不过为了使用这个方法我们还需要做很多工作。</p>

<p>该方法输入是交易的hash，但web3并没有提供从裸交易数据计算hash的方法，所以我选择让前端提交裸交易数据到服务端，服务端计算出hash值返还给前端;</p>

<p>前端拿到这个交易hash后，就可以调用<code>web3.eth.sign</code>唤起metamask签名，然后将签名字段和裸交易数据再次发送给服务端，服务端负责验证签名并且将交易和签名拼装好后发送到以太坊。</p>

<h1 id="section-2">关键实现</h1>

<h2 id="section-3">1.前端获取裸交易数据</h2>

<p>前端直面用户，可以拿到裸交易全部数据</p>

<p><code>
{
    from: "0x...",
    to: "0x....",
    value: "0x...",
    gas: 10000,
    gasPrice: 21000,
    data: "0x...",
    nonce: "0x..."
}
</code></p>

<h2 id="hash">2.后端计算裸交易hash</h2>

<p>后端拿到前端的裸交易json，可以很容易计算出交易hash，下面给出计算的golang代码</p>

<p><code>go
tx := types.NewTransaction(....)
hash := types.HomesteadSigner{}.Hash(tx).Hex()
</code></p>

<p>然后将计算出的hash返回给前端</p>

<h2 id="metamask-2">3.前端唤起metamask签名</h2>

<p><code>javascript
// 第一个参数是返回的交易hash
// 第二个参数是用户地址
web3.eth.sign("0x...", "0x...", "").then(console.log);
</code></p>

<p>这里将唤起metamask.</p>

<h2 id="section-4">4.后端发送交易</h2>

<p>前端将裸交易数据和第3步得到的签名发送给后端，后端验证签名并发送到以太坊,关键go代码如下:</p>

<p><code>go
sign := common.Hex2Bytes(txSign)
if len(sign) != 65 {
	return nil, errors.New("bad sign")
}
if sign[64] != 27 &amp;&amp; sign[64] != 28 {
	return nil, errors.New("invalid Ethereum signature (V is not 27 or 28)")
}
sign[64] -= 27
signer := types.HomesteadSigner{}
signedTx, err := tx.WithSignature(signer, sign)
if err != nil {
	return nil, err
}
ethConn.SendTransaction(context.Background(), signedTx)
</code></p>

<h1 id="section-5">反思</h1>

<p>看起来，上面的技术方案好像完美解决了问题，实则不然，这只是当前环境下的较优方案罢了，并且这个方案还是存在诸多问题:</p>

<h2 id="section-6">1.安全性</h2>

<p>这是最大的问题,因为调用<code>web3.eth.sign</code>进行数据签名时，metamask无法展示签名的数据，所以用户根本不了解他到底是在对什么授权签名。这是非常可怕的，这可能被骇客利用，让用户对一笔转出自己账户所有余额的交易进行签名，导致资金盗窃。</p>

<h2 id="section-7">2.用户体验</h2>

<p>还是因为签名的方法，metamask在签名时会展示一段红色警告，导致用户体验下降。</p>

<h2 id="section-8">3.时效性</h2>

<p>因为这个安全原因，metamask团队将来也许会放弃对这个方法的支持，不过我倒是觉得，保留对这个方法的支持，将签名数据做详细展示，让开发者自己做安全性的权衡。</p>

<p>最后聊一点感想吧，目前区块链上簇拥了太多投机者，真正致力于深耕技术的人不多，metamask团队算一个，区块链是个有意思的技术，因为它的技术背后，隐含了人类社会化的意识，它目前的基础组件都还不够完善，需要我们热爱技术的所有人，去投入，去发展。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那些以太坊DApp服务端开发期望已久的轮子]]></title>
    <link href="http://qjpcpu.github.io/blog/2018/05/16/na-xie-yi-tai-fang-dappfu-wu-duan-kai-fa-qi-wang-yi-jiu-de-lun-zi/"/>
    <updated>2018-05-16T17:20:33+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2018/05/16/na-xie-yi-tai-fang-dappfu-wu-duan-kai-fa-qi-wang-yi-jiu-de-lun-zi</id>
    <content type="html"><![CDATA[<p>以太坊虽说是一个去中心化的东西,但DApp却并非是完全去中心化的应用,其主要原因不外乎是以太坊的处理能力和资源有限,无法承载一个完整应用全部的逻辑。所以，目前市面上所有的DApp应用都是需要中心化服务解释的。那么，本文就是列举一些可能会用到的轮子,帮助快速构建应用。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#nonce">nonce管理</a></li>
  <li><a href="#section">交易重发</a></li>
  <li><a href="#section-1">交易备注</a>    <ul>
      <li><a href="#eth">裸交易(仅发送eth的交易)</a></li>
      <li><a href="#section-2">合约调用交易</a></li>
    </ul>
  </li>
  <li><a href="#section-3">事件扫描器</a></li>
  <li><a href="#section-4">登录</a></li>
  <li><a href="#section-5">其他</a></li>
  <li><a href="#qjpcpuethereumhttpsgithubcomqjpcpuethereum"><a href="https://github.com/qjpcpu/ethereum">代码地址qjpcpu/ethereum</a></a></li>
</ul>

<h1 id="nonce">nonce管理</h1>

<p>重要的放在前面,nonce管理应该是所有以太坊开发者遇到的第一个问题。nonce类似于账户的自增主键,必须连续提交,如果每次都使用<code>pending nonce</code>自动提交交易,就会造成之前交易被丢弃,除非你想要替换原交易，否则这可能不是我们期望的结果。</p>

<p><code>github.com/qjpcpu/ethereum/ethnonce</code>包将nonce存储在redis中,使用类似事务的方式申请、使用nonce。</p>

<p><code>go
func TestWrap(t *testing.T) {
	mgr := _testinit()
	addr := common.HexToAddress(`0xe35f3e2a93322b61e5d8931f806ff38f4a4f4d88`)
    mgr.SyncNonce(addr)  // 注意,该方法仅在程序第一次运行做初始化时需要调用,或者nonce发生不一致时调用
	tx,err:=mgr.GiveNonceForTx(addr, func(nonce uint64) (*types.Transaction, error) {
        // 向以太坊提交交易
        // 使用nonce manager注入的nonce进行交易提交
		return new(types.Transaction), nil
	})
	if err!=nil {
		t.Fatal(err)
	}
    t.Log(tx)
}
</code></p>

<p>P.S. 该包基于redis lua脚本,实现nonce的原子读写,可适用于多协程并行操作。</p>

<h1 id="section">交易重发</h1>

<p>对于要做以太坊交易的可靠提交,我相信交易重发绝对是DApp后端程序员的痛点需求。通常,在以太坊拥堵的时候,常常提交的交易会发生”丢失”,以太坊浏览器上搜索这笔交易会被提示: <code>Sorry, we are unable to locate this Transaction Hash</code>。发生这种情况主要有两个可能: 1.用户给的gas太低,导致交易长时间挂在pending队列不能打包进区块 2. 网络环境恶劣,导致投放的节点丢弃交易(网络环境恶劣只是诱因,其真实的丢包原因是及其复杂的)</p>

<p><code>github.com/qjpcpu/ethereum/contracts</code>提交交易重发的函数</p>

<p><code>go
func ResendTransaction(conn *ethclient.Client, tx *types.Transaction, signerFunc bind.SignerFn, nonce uint64, gasPrice *big.Int) (*types.Transaction, error)
</code></p>

<ul>
  <li>conn, eth client</li>
  <li>tx, 需要重发的交易</li>
  <li>signerFunc, 交易签名函数</li>
  <li>nonce, 可选参数,为0表示将交易重发为全新的交易,非0表示替换之前未被打包的交易</li>
  <li>gasPrice,可选参数,为nil表示自动选择合适的price</li>
</ul>

<p>返回值为重发的新交易数据结构。</p>

<p>通常的使用场景是:</p>

<ol>
  <li>发送交易,并将返回的交易tx marshal为json存储到数据库</li>
  <li>定时检查交易是否成功打包</li>
  <li>超过超时时间后,调用ResendTransaction重发交易，再进入第1步循环</li>
</ol>

<p>结合第一步<code>ethnonce</code>包管理nonce,可以比较完美实现以太坊可靠交易提交。</p>

<p>简单的代码示例:</p>

<p><code>go
signerFunc := contracts.SignerFuncOf(keyJson, keyPwd)
var oldTx *types.Transaction = getLastTxFromDB()
contracts.ResendTransaction(conn, oldTx, signerFunc, oldTx.Nonce(), nil)
</code></p>

<h1 id="section-1">交易备注</h1>

<p>交易备注其实就是在交易<code>data</code>字段附加一些额外的数据,前端时间有人收费在以太坊永久”刻字”其实就是干的这个事情。那么，抛开这个噱头不说,正常开发中怎么会有这个需求呢?</p>

<p>比如,我们要基于以太坊做一个区块链商品抢购,前端在提交了交易后拿到<code>metafox</code>回调后,才能通知到后端是抢购的哪个商品,但是很多时候<code>metafox</code>的回调并不可靠,那其实就可以使用交易备注,等后端收到这个交易的event log后,再去查询交易的备注信息就知道了是哪个商品。</p>

<p>相关辅助方法还是在<code>github.com/qjpcpu/ethereum/contracts</code>包中,目前交易备注有两种场景</p>

<h2 id="eth">裸交易(仅发送eth的交易)</h2>

<p>有两个生成交易数据的辅助方法:</p>

<p><code>go
// 备注字符串
func PackString(str string) []byte
// 备注一个数字
func PackNum(num *big.Int) []byte
</code></p>

<h2 id="section-2">合约调用交易</h2>

<p>也有两个辅助方法,他们均是将备注信息放置在合约方法参数最后:</p>

<p><code>go
func PackArgumentsWithNumber(_abi abi.ABI, method string, params ...interface{}) ([]byte, error)
func PackArgumentsWithString(_abi abi.ABI, method string, params ...interface{}) ([]byte, error)
</code></p>

<p>最后调用发送<code>raw</code>交易的方法提交:</p>

<p><code>go
func SendRawTransaction(conn *ethclient.Client, from, to common.Address, value *big.Int, data []byte, signerFunc bind.SignerFn, nonce uint64, gasPrice *big.Int, gasLimit uint64) (*types.Transaction, error)
</code></p>

<p>简单的代码示例(不可直接运行):</p>

<p><code>go
mgr := GetNonceManager()
_abi, _ := contracts.ParseABI(myABI)
signer := contracts.SignerFuncOf(keyjson, keypwd)
tx, err := mgr.GiveNonceForTx(from_addr, func(nonce uint64) (*types.Transaction, error) {
    // 该合约方法function_name只有一个number参数,后面额外的参数2是备注
	data, err := contracts.PackArgumentsWithNumber(_abi, "function_name", big.Int(1), big.Int(2))
	if err != nil {
		return nil, err
	}
	return contracts.SendRawTransaction(conf.EthConn(), from_addr, getContractAddress(), nil, data, signer, nonce, nil, 0)
})
</code></p>

<h1 id="section-3">事件扫描器</h1>

<p>扫描某个/某些事件并更改中心化服务器数据状态,这个需求很常见,直接上代码.</p>

<p>举个例子,扫描 <code>CryptoKitties</code> 的怀孕事件:</p>

<p>```go
package main</p>

<p>import (
	“fmt”
	“github.com/ethereum/go-ethereum/common”
	“github.com/ethereum/go-ethereum/ethclient”
	“github.com/qjpcpu/ethereum/events”
	“os”
)</p>

<p>func main() {
	conn, err := ethclient.Dial(“https://api.myetherapi.com/eth”)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	dataCh, errCh := make(chan events.Event, 1000), make(chan error, 1)
	b := events.NewScanBuilder()
	rep, err := b.SetClient(conn).
		SetContract(common.HexToAddress(<code>0x06012c8cf97BEaD5deAe237070F9587f8E7A266d</code>),abi_text,”Pregnant”).
		SetFrom(5547829).
		SetGracefullExit(true).
		BuildAndRun(dataCh, errCh)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	go func() {
		done := rep.WaitChan()
		for {
			select {
			case data := &lt;-dataCh:
				fmt.Printf(“%s\n”, data.String())
			case err1 := &lt;-errCh:
				fmt.Println(“error:”, err1)
			case &lt;-done:
				fmt.Println(“EXIT”)
				return
			}
		}
	}()</p>

<pre><code>rep.Wait() } ```
</code></pre>

<h1 id="section-4">登录</h1>

<p>以太坊登录其实就是签名和验签.</p>

<p>代码位于包<code>github.com/qjpcpu/ethereum/key</code></p>

<p>示例:</p>

<p>```go
package key</p>

<p>import (
    crand “crypto/rand”
    “github.com/ethereum/go-ethereum/common/hexutil”
    “github.com/ethereum/go-ethereum/crypto”
    “testing”
)</p>

<p>func TestSignature(t *testing.T) {
    pk, err := newKey(crand.Reader)
    if err != nil {
        t.Fatal(err)
    }
    msg := “JasonGeek”
    sign, err := Sign(pk, []byte(msg))
    if err != nil {
        t.Fatal(err)
    }
    from := crypto.PubkeyToAddress(pk.PublicKey).Hex()
    signHex := hexutil.Encode(sign)
    if err := VerifySign(from, signHex, []byte(msg)); err != nil {
        t.Fatal(err)
    }
}
```</p>

<h1 id="section-5">其他</h1>

<p>其他辅助小方法,可能痛点不是那么强烈,我简单列举,有需要的自行参看代码 <a href="https://github.com/qjpcpu/ethereum">qjpcpu/ethereum</a></p>

<ul>
  <li>获取合约From自段 <code>func (tx *TransactionWithExtra) From() common.Address</code></li>
  <li>合约是否执行成功 <code>func (tx *TransactionWithExtra) IsSuccess(conn *ethclient.Client) (bool, error)</code></li>
  <li>某个地址是否是个合约 <code>func IsContract(conn *ethclient.Client, hexAddr string) bool</code></li>
  <li>交易构造builder <code>func NewTxOptsBuilder(keyJson, keyPwd string) *TxOptsBuilder</code></li>
  <li>等待交易完成 <code>func WaitTxDone(conn *ethclient.Client, txhash common.Hash, timeout ...time.Duration) error</code></li>
  <li>根据keystore私钥生成签名方法 <code>func SignerFuncOf(keyJson, keyPasswd string) bind.SignerFn</code></li>
  <li>直接发送ETH <code>func TransferETH(conn *ethclient.Client, from, to common.Address, amount *big.Int, signerFunc bind.SignerFn, nonce uint64, gasPrice *big.Int, notes ...string) (*types.Transaction, error)</code></li>
  <li>私钥导入导出 <code>key</code>包</li>
</ul>

<h1 id="qjpcpuethereumhttpsgithubcomqjpcpuethereum"><a href="https://github.com/qjpcpu/ethereum">代码地址qjpcpu/ethereum</a></h1>
]]></content>
  </entry>
  
</feed>
