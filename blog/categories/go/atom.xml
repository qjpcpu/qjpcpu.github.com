<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: go | Jason's space]]></title>
  <link href="http://qjpcpu.github.io/blog/categories/go/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2018-05-28T10:10:35+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[http原理]]></title>
    <link href="http://qjpcpu.github.io/blog/2016/03/15/httpyuan-li/"/>
    <updated>2016-03-15T14:10:51+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2016/03/15/httpyuan-li</id>
    <content type="html"><![CDATA[<p>Go语言中处理http请求主要涉及两个对象: <a href="https://golang.org/pkg/net/http/#ServeMux">ServeMux</a>和<a href="https://golang.org/pkg/net/http/#Handler">http.Handler接口</a>。</p>

<p>ServeMux即http请求路由，将http请求分发到注册的对应路由处理方法中。http.Handler及http的路由处理接口，该接口实际上仅包含一个方法<strong>ServeHTTP</strong>:</p>

<p><code>go src/net/http/server.go
type Handler interface {
	ServeHTTP(ResponseWriter, *Request)
}
</code>
<!-- more --></p>

<h3 id="section">基本原理</h3>

<p>下面我们创建一个简单的HTTP服务，该服务仅返回一个文本页面:</p>

<p>```go main.go
package main</p>

<p>import (
	“fmt”
	“net/http”
)</p>

<p>type TextHandler struct {
	word string
}</p>

<p>func (th *TextHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte(“I wanna say: “ + th.word))
}</p>

<p>func main() {
	mux := http.NewServeMux()
	th := &amp;TextHandler{word: “cool”}
	mux.Handle(“/”, th)</p>

<pre><code>fmt.Println("Server started...")

http.ListenAndServe(":3000", mux) } ```
</code></pre>

<p>访问<a href="http://localhost:3000">http://localhost:3000</a>，页面返回<code>I wanna say: cool</code>。</p>

<p><code>http.NewServeMux</code>创建出新的路由容器，<code>http.NewServeMux#Handle</code>方法将路由及其处理函数注册到路由容器，ServeMux内部包含一个map结构，用来存取http URL对应的处理器。</p>

<p>而<code>http.ListenAndServe</code>需要指定服务监听地址和一个Handler对象，及方法签名如下:</p>

<p><code>go src/net/http/server.go
func ListenAndServe(addr string, handler Handler) error
</code></p>

<p>而ServeMux对象其实也定义了一个ServeHTTP的对象方法，所以ServeMux is a Handler，能够传入ListenAndServe方法启动服务。</p>

<p><strong>综上，使用ServeMux组装路由,再将它作为一个Handler交给http启动服务。当服务接收到一个http请求后，就根据路由中配置的规则选择对应的handler进行处理，实际的处理逻辑则由该handler的ServeHTTP方法实现。</strong></p>

<blockquote>
  <p>路由分发的逻辑具体实现可以查看<a href="https://golang.org/src/net/http/server.go">http包源码</a></p>
</blockquote>

<h3 id="section-1">标准用法</h3>

<h4 id="section-2">1.简化代码</h4>

<p>基本原理中的例子足以展示出golang的http处理原理，由于自定义的handler均必须实现http.Handler接口,这样会导致多余声明代码的产生。所以http包提供了一个帮助方法<code>http.HandlerFunc</code>将方法参数和<code>ServeHTTP</code>相同的方法转换为<code>http.Handler</code>。 </p>

<p>```go main.go
package main</p>

<p>import (
	“fmt”
	“net/http”
)</p>

<p>func saySomething(w http.ResponseWriter, r *http.Request) {
	word := “cool”
	w.Write([]byte(“I wanna say: “ + word))
}</p>

<p>func main() {
	mux := http.NewServeMux()
	th := http.HandlerFunc(saySomething)
	mux.Handle(“/”, th)
	fmt.Println(“Server started…”)
	http.ListenAndServe(“:3000”, mux)
}</p>

<p>```</p>

<p>实际上，<code>http.HandlerFunc</code>不是一个方法调用，仅仅是一个类型转换。</p>

<p><code>go 源码src/net/http/server.go
type HandlerFunc func(ResponseWriter, *Request)
// ServeHTTP calls f(w, r).
func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {
	f(w, r)
}
</code></p>

<p>所以，自定义的请求处理函数(<code>saySomething</code>)仅需要保持参数定义和<code>http.Handler</code>接口相同即可，将该自定义函数做类型转换为<code>HandlerFunc</code>即可。另外，由源码可以看出，函数类型<code>HandlerFunc</code>同时也实现了<code>http.Handler</code>，所以能够注册到<code>ServeMux</code>中。</p>

<h4 id="section-3">2.保持封装</h4>

<p>代码看起来缺失简单了一些，然而这样却破坏了逻辑的封装性：<code>saySomething</code>中包含了硬编码的参数<code>word</code>。这可以使用闭包来解决:</p>

<p>```go main.go
package main</p>

<p>import (
	“fmt”
	“net/http”
)</p>

<p>func saySomething(word string) http.Handler {
    // 闭包装入变量word
	f := func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte(“I wanna say: “ + word))
	}
	return http.HandlerFunc(f)
}</p>

<p>func main() {
	mux := http.NewServeMux()
	th := saySomething(“cool”)
	mux.Handle(“/”, th)
	fmt.Println(“Server started…”)
	http.ListenAndServe(“:3000”, mux)
}
```</p>

<p><strong>http服务中出现了很多名称，命名比较相近，这里汇总解释下:</strong></p>

<ul>
  <li><strong>ServeMux</strong>，路由容器，http服务中的路由规则统一在这里定义，启动服务后路由的分发自然也由其处理</li>
  <li><strong>http.Handler</strong>,请求处理器，每个处理http请求的处理器均需要实现该接口<code>ServeHTTP</code></li>
  <li><strong>http.HandlerFunc</strong>,帮助”方法”(实际是一个函数类型声明),将参数和<code>ServeHTTP</code>相同的普通函数转换为一个<code>http.Handler</code></li>
</ul>

<h3 id="http">http中间件</h3>

<p>golang中http处理流程是这样的:</p>

<pre><code>ServeMux ==&gt;  Middleware Handler ==&gt; Application Handler
</code></pre>

<p><strong>中间件</strong>:</p>

<ul>
  <li>中间件也是一个http.Handler，所以必须实现<code>ServeHTTP</code></li>
  <li>构建完整的中间件调用链，保证覆盖上图的中间件调用关系，并作为handler注册到<code>http.ServeMux</code></li>
</ul>

<p>一个中间件示例:</p>

<p><code>go
func exampleMiddleware(next http.Handler) http.Handler {
  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
    // 中间件逻辑在这里实现
    next.ServeHTTP(w, r)
  })
}
</code></p>

<p>由这个中间件定义可以看出中间件链的构建方式: 函数嵌套。</p>

<p><code>go
http.Handle("/", middlewareOne(middlewareTwo(finalHandler)))
</code></p>

<p>看一个实际的例子:</p>

<p>```go main.go
package main</p>

<p>import (
  “log”
  “net/http”
)</p>

<p>func middlewareOne(next http.Handler) http.Handler {
  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
    log.Println(“Executing middlewareOne”)
    next.ServeHTTP(w, r)
    log.Println(“Executing middlewareOne again”)
  })
}</p>

<p>func middlewareTwo(next http.Handler) http.Handler {
  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
    log.Println(“Executing middlewareTwo”)
    if r.URL.Path != “/” {
      return
    }
    next.ServeHTTP(w, r)
    log.Println(“Executing middlewareTwo again”)
  })
}</p>

<p>func final(w http.ResponseWriter, r *http.Request) {
  log.Println(“Executing finalHandler”)
  w.Write([]byte(“OK”))
}</p>

<p>func main() {
  finalHandler := http.HandlerFunc(final)</p>

<p>http.Handle(“/”, middlewareOne(middlewareTwo(finalHandler)))
  http.ListenAndServe(“:3000”, nil)
}
```</p>

<p>访问<a href="http://localhost:3000">http://localhost:3000</a>可以从日志看出中间件调用顺序:</p>

<pre><code>$ go run main.go
2014/10/13 20:27:36 Executing middlewareOne
2014/10/13 20:27:36 Executing middlewareTwo
2014/10/13 20:27:36 Executing finalHandler
2014/10/13 20:27:36 Executing middlewareTwo again
2014/10/13 20:27:36 Executing middlewareOne again
</code></pre>

<h4 id="section-4">中间件链构造方式</h4>

<p>上面例子的中间件链是比较常见的构造方式，然而多少有些可怕。而<a href="https://github.com/justinas/alice">Alice</a>将中间件链的构造简化了许多:</p>

<pre><code>Middleware1(Middleware2(Middleware3(App)))
</code></pre>

<p>转化为</p>

<pre><code>alice.New(Middleware1, Middleware2, Middleware3).Then(AppHandler)
// or 
alice.New(Middleware1, Middleware2, Middleware3).ThenFunc(AppFunc)
</code></pre>

<h3 id="section-5">参考文献</h3>

<p>文中主要内容来自参考文献第一、二条</p>

<ul>
  <li><a href="http://www.alexedwards.net/blog/a-recap-of-request-handling">A Recap of Request Handling in Go</a></li>
  <li><a href="http://www.alexedwards.net/blog/making-and-using-middleware">Making and Using HTTP Middleware</a></li>
  <li><a href="https://golang.org/src/net/http/server.go">net/http</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golang远程调用]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/08/15/golangyuan-cheng-diao-yong/"/>
    <updated>2014-08-15T20:22:34+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/08/15/golangyuan-cheng-diao-yong</id>
    <content type="html"><![CDATA[<p>go语言的远程调用包<code>net/rpc</code>非常简单，而且由于go不支持动态链接，如果想要获得程序的动态性，那么就只好依赖于远程调用。</p>

<!-- more -->

<h3 id="section">服务端</h3>

<p>首先定义服务契约：</p>

<p>```go contract.go  服务契约定义
package contract</p>

<p>import (
    “fmt”
)</p>

<p>type Args struct {
    Name string
    Age  int
}</p>

<p>type Sign int</p>

<p>func (t *Sign) Content(args *Args, reply *string) error {
    *reply = fmt.Sprintf(“%s is %v years old.”, args.Name, args.Age)
    return nil
}
```</p>

<p>契约的定义规则很简单：服务函数必须满足 <code>func (t *T) MethodName(argType T1, replyType *T2) error</code>的形式，方法的第一个参数是服务接收的传入参数，第二个引用参数是返回值。契约服务的接收者可以随意定义，如此处的<code>Sign</code>，没有特别的用处。</p>

<p>然后看看服务端怎么注册服务：</p>

<p>```go main.go 服务端
package main</p>

<p>import (
    “contract”
    “log”
    “net”
    “net/http”
    “net/rpc”
)</p>

<p>func main() {
    ct := new(contract.Sign)
    rpc.Register(ct)
    rpc.HandleHTTP()
    l, e := net.Listen(“tcp”, “:8843”)
    if e != nil {
        log.Fatal(“listen error:”, e)
    }
    http.Serve(l, nil)
}
```</p>

<h3 id="section-1">客户端</h3>

<p>在很多其他语言中，实现远程调用的契约，必须共享一套契约代码，比如android的远程调用，必须将服务端定义的契约编译成<code>.class</code>文件然后提供给客户端使用，否则同一个服务类是无法在客户端和服务端对应起来的。</p>

<p>但是，go是不需要的，至于为什么后面再讲。</p>

<p>回头想想也是，既然不支持动态链接，客户端怎么使用契约文件编译结果呢？</p>

<p>```go main.go 客户端
package main</p>

<p>import (
    “fmt”
    “log”
    “net/rpc”
)
func sync_invoke() string {
    client, err := rpc.DialHTTP(“tcp”, “127.0.0.1:8843”)
    if err != nil {
        log.Fatal(“dialing:”, err)
    }
    args := &amp;struct {
        Name string
        Age  int
    }{“jack”, 23}
    var reply string
    err = client.Call(“Sign.Content”, args, &amp;reply)
    if err != nil {
        log.Fatal(“error:”, err)
    }
    return reply
}
func async_invoke() string {
    client, err := rpc.DialHTTP(“tcp”, “127.0.0.1:8843”)
    if err != nil {
        log.Fatal(“dialing:”, err)
    }
    args := &amp;struct {
        Name string
        Age  int
        Sex string
    }{“jack”, 23,”male”}
    var reply string
    future := client.Go(“Sign.Content”, args, &amp;reply, nil)
    // wait for call end
    futureResult := &lt;-future.Done
    if futureResult.Error != nil {
        log.Fatal(“error:”, err)
    }
    c := futureResult.Reply.(*string)
    return *c
}</p>

<p>func main() {
    c := sync_invoke() 
    fmt.Println(“get sync result:”, c)
    c = async_invoke()
    fmt.Println(“get async result:”, c)
}
```</p>

<p>输出结果：</p>

<p><code>
get sync result: jack is 23 years old.
get async result: jack is 23 years old.
</code></p>

<p>go同时提供了同步和异步调用远程服务两种选择。代码自解释性很强，故无须赘述了。</p>

<p><strong>注意</strong>细节的同学可能发现了，上面异步调用部分的代码传递的参数结构体args和服务端定义的参数Args并不一致，那是因为go的远程调用默认采用encoding/gob编码和解码，它是一种类似与json的数据分享方式，但更加结构化，关于gob的详情可以google，这里不细说。由于使用gob，使得go的rpc可以接受<code>相似</code>结构，而不强求服务端和客户端服务参数完全一致。</p>

<p>简单来说，两个结构的<strong>导出成员</strong>完全一致，或者其中一个缺失一部分，或者其中一个多出一部分都算是相似结构。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[struct tags]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/07/12/struct-tags/"/>
    <updated>2014-07-12T00:07:11+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/07/12/struct-tags</id>
    <content type="html"><![CDATA[<h3 id="section">结构体标签</h3>

<p>在定义结构时，可以为struct定义一个标签，这个标签是作为结构体字段的一个附加属性，主要是反射包会使用到这个属性。</p>

<p>```go
package main</p>

<p>import (
	“fmt”
	“reflect”
)</p>

<p>func main() {
	type S struct {
		F string <code>species:"gopher" color:"blue"</code>
	}</p>

<pre><code>s := S{}
st := reflect.TypeOf(s)
field := st.Field(0)
fmt.Println(field.Tag.Get("color"), field.Tag.Get("species"))
</code></pre>

<p>}
```</p>

<p>输出结果</p>

<p><code>bash
blue gopher
</code></p>

<p>结构体<code>S</code>的<code>F</code>成员具有两个属性<code>species</code>和<code>color</code>，其属性的值分别为<code>blue</code>和<code>gopher</code>。如果不使用反射去取这个属性，在定义时写不写属性都是无所谓的。</p>

<!--more-->

<p>在go中，tag的定义是有规定的：</p>

<blockquote>
  <p>By convention, tag strings are a concatenation of optionally space-separated key:”value” pairs. Each key is a non-empty string consisting of non-control characters other than space (U+0020 ‘ ‘), quote (U+0022 ‘”’), and colon (U+003A ‘:’). Each value is quoted using U+0022 ‘”’ characters and Go string literal syntax.</p>
</blockquote>

<p>即：按照go的默认约定，tag以<code>key:value</code>的形式定义，多个<code>key:value</code>以空格分割，<code>key</code>不能是控制字符单引号、双引号和冒号，<code>value</code>需要用引号引起来。 </p>

<p>当然，也可以不遵守这个约定，因为具体怎么使用tag还是按照开发者自己的意愿来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你不知道的Go]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/06/23/ni-bu-zhi-dao-de-go/"/>
    <updated>2014-06-23T14:37:47+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/06/23/ni-bu-zhi-dao-de-go</id>
    <content type="html"><![CDATA[<h3 id="section">1.匿名结构</h3>

<p><code>go
var person struct {
    name      string
    age int
}
person.name="jack"
</code></p>

<p>声明时初始化：</p>

<p><code>go
st := struct {
	name string
	age  int
}{
	"Jack",
	12,
}
fmt.Println(st.name)
</code></p>

<!-- more -->

<h3 id="section-1">2.抢占式调度器</h3>

<blockquote>
  <p>In prior releases, a goroutine that was looping forever could starve out other goroutines on the same thread, a serious problem when GOMAXPROCS provided only one user thread. In Go 1.2, this is partially addressed: The scheduler is invoked occasionally upon entry to a function. This means that any loop that includes a (non-inlined) function call can be pre-empted, allowing other goroutines to run on the same thread.</p>
</blockquote>

<p>从golang1.2起，携程调度器为抢占式的，但抢占发生在每次进入函数前，所以，如果循环内的函数被编译器优化成了inline function，那么自然不会发生调度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go学习笔记-类型与接口]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/goxue-xi-bi-ji-lei-xing-yu-jie-kou/"/>
    <updated>2014-02-14T18:27:36+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/goxue-xi-bi-ji-lei-xing-yu-jie-kou</id>
    <content type="html"><![CDATA[<p>如果说go语言的其他内容看起来和c/c++语言没什么太大的区别，那么它的接口设计一定会让人大吃一惊，是的，有时它真的让我产生我使用的是一种动态语言的幻觉。</p>

<!-- more -->

<h3 id="section">结构类型</h3>

<p>这里，还是和C语言很像的，定义结构：</p>

<pre><code>type Man struct {
     name string
     age int
}
</code></pre>

<p>声明结构变量及初始化：</p>

<pre><code>var m Man   //声明Man变量
m := new(Man)  //声明一个Man指针
m := Man{name:"jack",age:12} //声明并初始化 
m := Man{"jack",12}  //声明并初始化
</code></pre>

<h3 id="section-1">方法</h3>

<p>go语言为结构定义的函数称为方法，和面向对象的叫法是一样的。go语言的方法定义看起来非常前卫，方法即消息，所以方法定义先是说明方法(消息)接收者，然后是方法名及其参数。</p>

<pre><code>func (m *Man) Introduce() bool {
    fmt.Println("name: ",m.name)
    return true
}
</code></pre>

<p>调用方法使用了”.”符号：</p>

<pre><code>m := Man{"Jack",12}
ok := m.Introduce()
</code></pre>

<p>利用结构的方法，我们甚至还能像ruby一样，为系统中预定类型打个猴子补丁，添加新的方法，只不过手段稍微曲线了一点，比如，下面代码为字符串(不是string类型)添加一个chomp方法来去掉字符串最后一个换行符：</p>

<pre><code>package main
import (
	"fmt"
	"strings"
)

type MyString string
func (str MyString) chomp() string {
	return strings.TrimRight(string(str),"\n")
}
func main() {
	str := "Hello world!\n"
	ms := MyString(str)
	fmt.Println(ms.chomp())   //输出 Hello world!
}
</code></pre>

<h3 id="section-2">方法代理</h3>

<p>其实google把这个特性叫做嵌入类型(Embedded type)，如果类型A包含一个类型B，通常在其他语言里我们称之为 A  has-a B，但在go里我们称之为A是一个B，这是因为B成为了A的成员，那么我们可以视为A也就拥有了B的功能，那么它也就是一个B了。那么方法代理的作用是什么呢？顾名思义，我们可以在A上直接调用B的方法，就好像A.B.b_method一样，举个例子：在 matrix里，neo是救世主，所以他具有（包含）了救世主的能力，所以我们直接发送fly的消息给neo，neo肯定是可以飞的，同样neo的前几代救世主可能不叫neo但我们直接告诉他fly，他们都是可以飞的，所以利用方法代理的确简捷直当：</p>

<pre><code>package main
import "fmt"
func main() {
	n := new(Neo)
	n.Fly()  //输出：The One can fly!
}

type Neo struct{
	TheOne
}
type TheOne struct{}

func (o *TheOne) Fly(){
	fmt.Println("The One can fly!")
}
</code></pre>

<p>在ruby语言中，有许多做这种方法代理的代码，而go语言的嵌入类型的表征和该特性竟是如此神似，嘿嘿</p>

<p>另外，大家觉得这个嵌入类型和OOP的继承很像，为什么不叫继承而叫方法代理呢？实际情况就是， Neo做的仅仅是将消息转发给TheOne，就算二者有相同的成员，但fly方法也只能看到TheOne的成员变量，所以叫方法代理更合适，大家可以写代码验证下。</p>

<h3 id="go-style-duck-type">go style duck-type</h3>

<p>go风格的鸭子类型。个人觉得这是go语言里最cool的地方了，在静态语言里将动态语言的鸭子类型实现得如此风骚。go语言的接口就是为此而生的。</p>

<p>接口定义：</p>

<pre><code>type Duck interface {
     run()
     height() int
     gaga(word string)
}
</code></pre>

<p>Duck接口中仅包含了一系列的方法声明。</p>

<p>然后在方法参数中我们可以这样使用：</p>

<pre><code>func DuckRun(d Duck){
    d.run()
}
</code></pre>

<p>那么是不是我们需要去完成多个Duck接口的实现呢？NO。那样岂不是和java一样了。go语言的interface的唯一用处其实是为了满足编译器（唉，多少有点无奈），这样编译器在DuckRun函数入口会检查传递进来的对象是否含有Duck接口所包含的三个方法，如果符合定义，则通过编译。这样不就是鸭子类型吗？仅检查是否包含这些方法，而不管是否是某种类型，所以说go style的鸭子类型是很了不起的。</p>

<p>举个例子，人是有say说话的方法的，但其实对于某个需要say方法的函数中，我们可以给它传递一个地球对象，尽管地球什么话也不会说：</p>

<pre><code>package main
import "fmt"
func main() {
     m := Man{name:"Jack"}
	 m.say()
	 e := new(Earch)
	 SaySth(e)
	 SaySth(&amp;m)  //say()方法的接收者是一个指针变量，所以这里要用&amp;取地址
}
func SaySth(obj Object){
	obj.say()
}
type Object interface{
	say()
}
type Man struct{
	name string
}
type Earch struct{}

func (m *Man) say(){
	fmt.Println("Man says: I'm ",m.name)
}

func (e *Earch) say(){
	//do nothing
}
</code></pre>

<h3 id="section-3">空接口及类型</h3>

<p>空interface(interface{})不包含任何的method,正因为如此,所有的类型都实现了空interface。空interface对于描述起不到任何的作用(因为它不包含任何的method),但是空interface在我们需要存储任意
类型的数值的时候相当 有用,因为它可以存储任意类型的数值。它有点类似于C语言的void*类型。</p>

<pre><code>// 定义a为空接口
var a interface{}
var i int = 5
s := "Hello world"
// a可以存储任意类型的数值 a=i,a=s
</code></pre>

<p>一个函数把interface{}作为参数,那么他可以接受任意类型的值作为参数,如果一个函数返回interface{},那么也 就可以返回任意类型的值。</p>

<p>我们知道interface的变量里面可以存储任意类型的数值(该类型实现了interface)。那么我们怎么反向知道这个变量 里面实际保存了的是哪个类型的对象呢?可以使用Comma-ok断言</p>

<pre><code>value, ok = element.(T)
</code></pre>

<p>这里value就是变 量的值,ok是一个bool类型,element是interface变量,T是断言的类型。</p>

<p>如果element里面确实存储了T类型的数值,那么ok返回true,否则返回false。</p>

<p>此外，关于go语言中类型处理的要求更多时，就需要使用反射。Go语言实现了反射,所谓反射就是动态运行时的状态。我们一般用到的包是reflect包。使用reflect一般分成三步,下面简要的讲解一下:要去反射是一个类型的值(这些值都实现了空interface),首先需 要把它转化成reflect对象(reflect.Type或者reflect.Value,根据不同的情况调用不同的函数)。这两种获取方式如 下:</p>

<pre><code>t := reflect.TypeOf(i) //得到类型的元数据,通过t我们能获取类型定义里面的所有元素
v := reflect.ValueOf(i) //得到实际的值,通过v我们获取存储在里面的值,还可以去改变值
</code></pre>
]]></content>
  </entry>
  
</feed>
