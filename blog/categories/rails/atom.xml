<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Jason's space]]></title>
  <link href="http://qjpcpu.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2018-05-16T18:37:16+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails 在javascript中使用ruby对象]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rails-zai-javascriptzhong-shi-yong-rubydui-xiang/"/>
    <updated>2014-02-14T23:40:15+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rails-zai-javascriptzhong-shi-yong-rubydui-xiang</id>
    <content type="html"><![CDATA[<h3 id="javascriptruby">1.在javascript中使用ruby简单对象</h3>

<p>如，需要将ruby对象转换成javascript的简单变量：</p>

<pre><code>&lt;%= javascript_tag do %&gt;
  url = '&lt;%= j products_url %&gt;';
&lt;% end %&gt;
</code></pre>

<p>此时的&lt;%=  %&gt;是由引号包裹的。rails的j方法是为了正确地转义ruby对象从而嵌入javascript中。</p>

<!-- more -->

<h3 id="javascriptruby-1">2.在javascript中使用ruby复杂对象</h3>

<p>公共桥梁显然是json，但要正确地转义json就需要raw方法：</p>

<pre><code>&lt;%= javascript_tag do %&gt;
  products = &lt;%= raw Product.limit(10).to_json %&gt;
&lt;% end %&gt;
</code></pre>

<p>此时&lt;%= %&gt;无引号包裹。</p>

<h3 id="gon-gem">3.Gon gem</h3>

<p>如果有大量的ruby对象需要在javascript中使用，这种方法就不好了。Gon就是为了解决这个问题。</p>

<p>首先在gemfile中添加gon：</p>

<pre><code>gem 'gon'
</code></pre>

<p>然后在/app/views/layouts/application.html.erb文件中包含gon：</p>

<pre><code>&lt;head&gt;
  &lt;title&gt;Store&lt;/title&gt;
  &lt;%= include_gon %&gt;
  &lt;%= stylesheet_link_tag    "application", media: "all" %&gt;
  &lt;%= javascript_include_tag "application" %&gt;
  &lt;%= csrf_meta_tag %&gt;
&lt;/head&gt;
</code></pre>

<p>然后在controller中就可以以这种形式为javascript对象赋值：</p>

<pre><code>gon.variable_name = variable_value
# or new syntax
gon.push({
  :user_id =&gt; 1,
  :user_role =&gt; "admin"
})
gon.push(any_object) # any_object with respond_to? :each_pair
</code></pre>

<p>例如：</p>

<pre><code>class ProductsController &lt; ApplicationController
	def index
		gon.products = Product.limit(10)
	end
end
</code></pre>

<p>在js中获取变量的方法：</p>

<pre><code>gon.variable_name
</code></pre>

<p>即：</p>

<pre><code>go.products
</code></pre>

<h3 id="section">参考文献</h3>

<ul>
  <li><a href="https://github.com/gazay/gon">gon</a></li>
  <li><a href="http://railscasts.com/episodes/324-passing-data-to-javascript?view=asciicast">Passing data to javascript</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails URL路由]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rails-urllu-you/"/>
    <updated>2014-02-14T23:26:35+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rails-urllu-you</id>
    <content type="html"><![CDATA[<p>rails URL路由的最权威文档当然是其官方站点Rails routing from the outside in，我这里只提几个文档中常用的要点。</p>

<h3 id="crub">1.CRUB</h3>

<p>由resources建立的资源，是rails中最常见的路由方式，不用多说。</p>

<pre><code>resources :photos
</code></pre>

<!-- more -->

<h3 id="section">2.单例资源</h3>

<p>单例资源也比较常用，官方文档上举的例子很形象也很常见，用户user需要拥有一个profile资源，而每个用户必然只有一个profile，所以如果生成类似/profiles/:id的URL显然是不美观的，此时就需要单例资源，单例资源的生成使用的是单数形式方法resource：</p>

<pre><code>resource :profile
</code></pre>

<p>该语句生成的路由如下：</p>

<pre><code>     profile POST   /profile(.:format)      profiles#create
 new_profile GET    /profile/new(.:format)  profiles#new
edit_profile GET    /profile/edit(.:format) profiles#edit
             GET    /profile(.:format)      profiles#show
             PATCH  /profile(.:format)      profiles#update
             PUT    /profile(.:format)      profiles#update
             DELETE /profile(.:format)      profiles#destroy
</code></pre>

<h3 id="section-1">3.嵌入的路由</h3>

<p>适用于某种资源必须依赖于另一种资源才有意义，比如某些comment必然在针对的event下存在，所以comment就必须依赖于event。</p>

<pre><code>resources :events do
    resources :comments
end ```
events_comments GET    /events/comments(.:format)          comments#index
                POST   /events/comments(.:format)          comments#create  new_events_comment GET    /events/comments/new(.:format)      comments#new edit_events_comment GET    /events/comments/:id/edit(.:format) comments#edit
 events_comment GET    /events/comments/:id(.:format)      comments#show
                PATCH  /events/comments/:id(.:format)      comments#update
                PUT    /events/comments/:id(.:format)      comments#update
                DELETE /events/comments/:id(.:format)      comments#destroy
         events POST   /events(.:format)                   events#create
     new_events GET    /events/new(.:format)               events#new
    edit_events GET    /events/edit(.:format)              events#edit
                GET    /events(.:format)                   events#show
                PATCH  /events(.:format)                   events#update
                PUT    /events(.:format)                   events#update
                DELETE /events(.:format)                   events#destroy ```
</code></pre>

<p>对应的也自动生成了诸如event_comment_path之类的url 帮助方法。对于嵌入式资源，官方建议不要超过两层。最简单的理由，路由层次过深，除了增加逻辑的复杂度外，也得不到任何好处。</p>

<h3 id="namespacescope">4.namespace和scope路由</h3>

<p>以下规则同时适用于resources和controller。</p>

<p>比如，如果想要在特定的命名空间(admin)下访问某个资源(post)，这时就可以利用namespace。</p>

<pre><code>namespace :admin do
  resources :posts
end
</code></pre>

<p>此时，处理该路由的controller是Admin::PostsController，体现在rails工程中是在controller文件夹下的admin文件夹下的posts_controller.rb文件。而产生的路由全部以/admin开头：</p>

<p><code>
    admin_posts GET    /admin/posts(.:format)          admin/posts#index
                POST   /admin/posts(.:format)          admin/posts#create
 new_admin_post GET    /admin/posts/new(.:format)      admin/posts#new
edit_admin_post GET    /admin/posts/:id/edit(.:format) admin/posts#edit
     admin_post GET    /admin/posts/:id(.:format)      admin/posts#show
                PATCH  /admin/posts/:id(.:format)      admin/posts#update
                PUT    /admin/posts/:id(.:format)      admin/posts#update
                DELETE /admin/posts/:id(.:format)      admin/posts#destroy
</code></p>

<p>一言以蔽之，由namespace产生的资源路由，controller和url都由该namespace作“前缀”。</p>

<p>如果需要让资源路由没有前缀，而又希望该路由url被某个模块下的controller受理，那么就需要使用
scope。</p>

<pre><code>scope module: 'admin' do
  resources :posts
end
</code></pre>

<p><code>
    posts GET    /posts(.:format)          admin/posts#index
          POST   /posts(.:format)          admin/posts#create
 new_post GET    /posts/new(.:format)      admin/posts#new
edit_post GET    /posts/:id/edit(.:format) admin/posts#edit
     post GET    /posts/:id(.:format)      admin/posts#show
          PATCH  /posts/:id(.:format)      admin/posts#update
          PUT    /posts/:id(.:format)      admin/posts#update
          DELETE /posts/:id(.:format)      admin/posts#destroy
</code></p>

<p>由rake routes输出可以看出，路由url没有了admin前缀，而posts资源都由admin模块下的Admin::PostsController受理。</p>

<p>一言以蔽之，带module的scope产生的资源路由，路由url无“前缀”，controller以module指定模块为“前缀”。</p>

<p>反过来，如果希望给资源附加一个前缀，而由普通controller受理该url，则需要另一种形式的scope：</p>

<pre><code>scope '/admin' do
  resources :posts
end
</code></pre>

<p><code>
   posts GET    /admin/posts(.:format)          posts#index
          POST   /admin/posts(.:format)          posts#create
 new_post GET    /admin/posts/new(.:format)      posts#new
edit_post GET    /admin/posts/:id/edit(.:format) posts#edit
     post GET    /admin/posts/:id(.:format)      posts#show
          PATCH  /admin/posts/:id(.:format)      posts#update
          PUT    /admin/posts/:id(.:format)      posts#update
          DELETE /admin/posts/:id(.:format)      posts#destroy
</code></p>

<p>此时，资源posts每个url都附加了/admin为前缀，而受理这些url的是PostsController。</p>

<p>一言以蔽之，这种形式的scope产生的资源路由，路由url有“前缀”，controller无“前缀”。</p>

<p>另外，这种形式的路由还有一种简写：</p>

<pre><code>resources :posts, path: '/admin/posts'
</code></pre>

<p>该简写和使用scope产生的结果完全一样。不过，path还有另外的用途，如果保持controller及url helper不变，仅仅希望为url路由中的资源改个名称，这时path就派上用场了：</p>

<pre><code>resources :posts, path: '/articles'
</code></pre>

<p><code>
    posts GET    /articles(.:format)          posts#index
          POST   /articles(.:format)          posts#create
 new_post GET    /articles/new(.:format)      posts#new
edit_post GET    /articles/:id/edit(.:format) posts#edit
     post GET    /articles/:id(.:format)      posts#show
          PATCH  /articles/:id(.:format)      posts#update
          PUT    /articles/:id(.:format)      posts#update
          DELETE /articles/:id(.:format)      posts#destroy
</code></p>

<h3 id="restful">5.新增RESTful动词</h3>

<p>以下规则同样适用于resources和controller。</p>

<pre><code>resources :photos do
  get 'preview', on: :member
end
</code></pre>

<p>该语句为某个特定photo新增了一个preview动作，该动作是一个get请求，默认photos_controller中存在一个preview方法处理该动作。</p>

<p>类似的，如果需要为photos集合新增一个动词，只需要将语句中member改成collection即可。</p>

<p>如果，需要为特定photo增加多个动词preview1和preview2，改成下面的形式即可，甚至可以指定
controller中处理该请求的方法，以及自定义url helper：</p>

<pre><code>resources :photos do
  member do
    get 'preview1'=&gt;:pre1, as:"p1"
    get 'preview2'=&gt;:pre2, as:"p2"
  end
end
</code></pre>

<p><code>
  p1_photo GET    /photos/:id/preview1(.:format) photos#pre1
  p2_photo GET    /photos/:id/preview2(.:format) photos#pre2
</code></p>

<h3 id="resourceful">6.非resourceful路由</h3>

<h4 id="section-2">使用参数：</h4>

<pre><code>controller :photos do
  get 'check/:id',:to=&gt;:check
end
</code></pre>

<p>产生的路由输出如下：</p>

<pre><code>GET /check/:id(.:format) photos#check
</code></pre>

<p>在执行该get请求如/check/23，后photos_controller的check方法受理该请求，并在params中将参数设置为23。</p>

<h4 id="section-3">限制参数格式：</h4>

<pre><code>get 'photos/:id', to: 'photos#show', constraints: { id: /[A-Z]\d{5}/ }
</code></pre>

<p>该路由规则能接受/photos/A12345却不能接受/photos/893。</p>

<h4 id="section-4">指定请求的默认类型：</h4>

<pre><code>get 'articles/:id', to: 'articles#show', defaults: { format: 'xml' } 若get请求/articles/2，该路由规则会自动将params的params[:format]置为"xml"。
</code></pre>

<p>该方法仅仅是在请求未指定format时指定默认类型，如果需要某个controller仅接受某些格式的请求如xml和json，则可以在该controller类定义中添加如下代码，这在书写api时常常用到：</p>

<pre><code>respond_to :json, :xml
</code></pre>

<h4 id="controller">更换资源的controller：</h4>

<p>如果不希望为某个资源使用默认的controller，则：</p>

<pre><code>resources :photos, controller: 'images'
</code></pre>

<p>此时photos资源的所有请求都由images_controller受理，而photos的路由url和url helper都不变。</p>

<h4 id="section-5">限制资源的默认动作：</h4>

<p>如果仅希望使用资源的部分动作，如仅使用资源photos的index和show动作：</p>

<pre><code>resources :photos, only: [:index, :show]
</code></pre>

<p>或者使用除了destroy动作外的所有默认动作：</p>

<pre><code>resources :photos, except: :destroy 还可以使用:all（所有默认动作），:none（没有默认动作）：

resources :photos, :only=&gt;:none
</code></pre>

<h4 id="newediturl">为new和edit的url路由改名：</h4>

<pre><code>resources :photos, path_names: { new: 'make', edit: 'change' }
</code></pre>

<p>产生的新路由为：</p>

<pre><code>/photos/make
/photos/1/change
</code></pre>

<p>而此时受理该路由的方法仍为new和edit，即controller中的方法并未改名。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails 填充数据库初始数据]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rails-tian-chong-shu-ju-ku-chu-shi-shu-ju/"/>
    <updated>2014-02-14T23:21:46+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rails-tian-chong-shu-ju-ku-chu-shi-shu-ju</id>
    <content type="html"><![CDATA[<!-- more -->

<p>利用db/seeds.rb文件将数据库的initial data填入即可，该文件位于rails环境中，可以访问railsApp中任何类和方法。如，填充product表的初始数据：</p>

<p><code>ruby seeds.rb
	5.times do |i|
		Product.create(name:"Product ##{i}",description:"A product")
	end
</code></p>

<p>使用rake命令填充数据：</p>

<pre><code>rake db:seed
</code></pre>

<p>或者从头调用所有migration创建空的数据库并自动seed填充数据库：</p>

<pre><code>rake db:setup
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails 配置使用jquery-file-upload  step by step]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rails-pei-zhi-shi-yong-jquery-file-upload-step-by-step/"/>
    <updated>2014-02-14T23:11:06+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rails-pei-zhi-shi-yong-jquery-file-upload-step-by-step</id>
    <content type="html"><![CDATA[<p>一步步安装使用jquery-file-upload</p>

<!-- more -->

<h3 id="gem">1.安装Gem</h3>

<p>在gemfile中添加jquery-fileupload-rails和paperclip的gem：</p>

<pre><code>gem "jquery-fileupload-rails"
gem 'paperclip'
</code></pre>

<h3 id="appassetsapplicationjs">2.在app/assets/application.js添加</h3>

<pre><code>//= require jquery-fileupload
</code></pre>

<h3 id="appassetsstylesheetsapplicationcss">3.在app/assets/stylesheets/application.css添加</h3>

<pre><code>*= require jquery.fileupload-ui
</code></pre>

<h3 id="picture">4.创建Picture数据表</h3>

<pre><code>rails g model Picture avatar:attachment
rake db:migrate
</code></pre>

<p>pictures表的avatar属性代表上传的文件对象。</p>

<p>修改picture.rb的内容：</p>

<pre><code>class Picture &lt; ActiveRecord::Base
	has_attached_file :avatar
	
	include Rails.application.routes.url_helpers
	
	def to_json_picture
		{
			'name'=&gt;read_attribute(:avatar_file_name),
			'size'=&gt;read_attribute(:avatar_file_size),
			'url'=&gt;avatar.url(:original),
			'delete_url'=&gt;picture_path(self),
			'delete_type'=&gt;'DELETE'
		}
	end
end
</code></pre>

<p>在model中，使用类方法has_attached_file指明文件对象是avatar，并且定义了to_json_picture方法，该方法将picture对象转换成一个hash，在jquery-fileupload和server的交互中被转变为json数据。</p>

<h3 id="view">5.创建view</h3>

<p>只需要创建一个上传界面index.html.erb，自定义你自己的view时，仅需要将form_for Picture.new和f.file_field :avatar修改为自己model即可，其他内容都可以直接copy-paste。</p>

<p><a href="https://gist.github.com/qjpcpu/9017226">源码地址</a></p>

<h3 id="controller">6.创建controller</h3>

<pre><code>rails g controller pictures index create destroy
</code></pre>

<p>-</p>

<pre><code>class PicturesController &lt; ApplicationController
  def index
    @pictures = Picture.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @pictures.map{|picuture| picuture.to_json_picture } }
    end
  end

  # POST /picture
  # POST /picture.json
  def create
    @picture = Picture.new(params[:picture])

    respond_to do |format|
      if @picture.save
        format.html {
          render :json =&gt; [@picture.to_json_picture].to_json,
          :content_type =&gt; 'text/html',
          :layout =&gt; false
        }
        format.json { render json: {files: [@picture.to_json_picture]}, status: :created, location: @picture }
      else
        format.html { render action: "new" }
        format.json { render json: @picture.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /picture/1
  # DELETE /picture/1.json
  def destroy
    @picture = Picture.find(params[:id])
    @picture.destroy

    respond_to do |format|
      format.html { redirect_to picture_url }
      format.json { head :no_content }
    end
  end
end
</code></pre>

<h3 id="section">7.效果图</h3>

<p><img src="http://a.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=794ee559c45c1038207ecec7822ae22e/342ac65c103853436bec62629113b07eca808856.jpg?referer=457c5546e7dde711bec576c6e84c&amp;x=.jpg" alt="image" /></p>

<p>这就是最终结果了，如果想要达到jqeury-fileupload Demo中漂亮的结果，如下图，就需要使用Twitter-bootstrap或者自己写写CSS了。</p>

<p><img src="http://c.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=ff26dca4932397ddd279980169b9c38a/0dd7912397dda144372a89f1b0b7d0a20cf48656.jpg?referer=354f23adb68f8c54bac4f01fe24c&amp;x=.jpg" alt="image" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails Eagerloading]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/rails-eagerloading/"/>
    <updated>2014-02-14T23:05:33+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/rails-eagerloading</id>
    <content type="html"><![CDATA[<p>若存在如下Post model：</p>

<pre><code>class Post &lt; ActiveRecord::Base
	belongs_to :author
	has_many :comments
end
</code></pre>

<p>使用下面的循环加载数据时产生了N+1查询问题：</p>

<pre><code>Post.all.each do |post|
  puts "Post:            " + post.title
  puts "Written by:      " + post.author.name
  puts "Last comment on: " + post.comments.first.created_on
end
</code></pre>

<!-- more -->

<p>首先，解决author获取问题：</p>

<pre><code>Post.includes(:author).each do |post|
</code></pre>

<p>然后解决comments加载：</p>

<pre><code>Post.includes(:author, :comments).each do |post|
</code></pre>

<p>带条件的eager loading：</p>

<pre><code>Post.includes([:author, :comments]).where(['comments.approved = ?', true]).all
</code></pre>

<p>多态关系的eager laoding</p>

<pre><code>class Address &lt; ActiveRecord::Base
	belongs_to :addressable, :polymorphic=&gt;true
end
Address.includes(:addressable)
</code></pre>
]]></content>
  </entry>
  
</feed>
