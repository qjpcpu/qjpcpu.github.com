<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Jason's space]]></title>
  <link href="http://qjpcpu.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2018-08-31T00:18:32+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈元编程]]></title>
    <link href="http://qjpcpu.github.io/blog/2017/08/02/qian-tan-yuan-bian-cheng/"/>
    <updated>2017-08-02T17:54:41+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2017/08/02/qian-tan-yuan-bian-cheng</id>
    <content type="html"><![CDATA[<p>为什么会突然想到写这篇文章呢？其实是因为我曾经向一位朋友推荐学习一下ruby/lisp这类支持元编程的语言,尽管可能永远不会在生产环境中用到,但是可以让人学习用另一种思路思考问题,然后友人就要求我解释我学了之后思考问题的角度有何不同,当时确实把我难住了,因为这个问题的确不好描述。</p>

<p>对于这个问题,我思前想后好几周后,我还是决定从理性和感性两个方面,稍微描述一下,什么是元编程?学习了元编程之后你的思考到底可能在什么地方和别人产生差异?</p>

<p>P.S. 鉴于ruby在元编程领域的强大能力,本文将用ruby来辅助我的描述,即便是没有ruby基础,我也会尽量描述清楚不影响理解;至于为什么不用lisp,那是因为它在这行当走得太彻底了,彻底到我觉得自己现阶段没有能力描述清楚
<!-- more --></p>

<h2 id="section">结论放在前面</h2>
<p>虽然我将要尝试向你描述下元编程,但还是有几条规则要写在前面,如果你觉得无法接受这几条规则,那么提早关闭页面比较明智。</p>

<h5 id="section-1">1. 心态放谦卑,无论何时,先尝试去理解而不是拒绝</h5>
<p>##### 2. 元编程并不是黑魔法, 元编程也是编程
##### 3. 和学习游泳一样,如果不亲身去尝试,永远也无法真正理解
##### 4. 即便你花时间精力取弄懂了一两门元编程语言,但你的工作环境可能永远都用不到,冷静两秒钟,确认自己并不是那么功利主义
##### 5. 再次深呼吸,确认自己还是有兴趣了解下去</p>

<h2 id="section-2">元编程的魔力</h2>
<p>元编程的学院解释是:运行时操作程序构件的能力。这个类似于物理公理定义的说法比较令人费解,其实他的意思是这样的,通常,我们的程序写完进行编译链接后,它的运行规则就固定了,很难在运行时再去做任何修改。比如对于C语言来说,一个方法或者函数要执行的逻辑已经固定下来了,无法在不改动代码的情况下修改这个方法的逻辑;或者对于java这种语言也是一样的,一个类拥有的方法和属性是固定的,虽然java拥有了反射的能力(这可以看做已经具备了初步元编程能力),可以在运行时进行自省,但是也无法进一步拓展自身的逻辑和功能。可以看出,这些编程语言里,”程序逻辑”和”数据”是完全分割开来的,数据可以修改变动,而逻辑是冰冷凝固的,它们之间泾渭分明,区分十分明显。 而所谓元编程,就是抹除这种界限的能力。</p>

<h3 id="section-3">改变宇宙公理</h3>
<p>假设我们所处的世界真的是被AI控制,整个人类文明作为一枚电池被<code>Matrix</code>控制(电影《黑客帝国》),而AI构建的<code>Matrix</code>系统也的确是基于人类的数学公理构建起来的,而我们最基础的数学公理不外乎就是<code>1 + 1 = 2</code>:</p>

<p><code>ruby
puts 1 + 1  # =&gt; 显而易见输出2
</code></p>

<p>假如AI的上帝<code>建筑师</code>某一天想更改这个系统升级为<code>Matruix2</code>,这次升级仅仅是想看看更改最简单的宇宙公理让<code>1 + 1 = 3</code>,他想看看这会对人类社会造成什么影响;试想如果<code>建筑师</code>不懂得元编程的能力,那么意味着<code>Matrix2</code>是一次彻底的重构:他必须重建所有数学公理,并且基于这些公理重新构建<code>Matrix</code>,这个工作量想想都觉得可怕。</p>

<p>那如果<code>建筑师</code>懂得元编程,他要做的事情就是给<code>Matrix</code>打个系统补丁,补丁文件内容只有简单几行代码:</p>

<p><code>ruby
module Patch
  def +(num)
    super.succ
  end
end
Fixnum.prepend Patch
</code>
这段代码的含义是对所有整数加法添加了一个补丁,每个加法运算都多加1,所以基于加法的公理均自动采纳这项变更。</p>

<p>当<code>Matrix</code>应用这个补丁后,所有系统中加法都会多加1</p>

<p><code>ruby
puts 1 + 4 # =&gt; 输出为6
</code></p>

<p>这就是元编程,你可以运用他修改程序逻辑,漆黑的运行时在你面前变得明朗起来了。</p>

<h3 id="section-4">调用链</h3>
<p>如果你觉得改变宇宙公理这个场景太过虚幻,并且你碰巧也没看过黑客帝国(oops,真是不幸,在学习各种编程技巧前我建议您真应该去看下这部电影),那么你肯定会质疑:好像我永远遇不到元编程的应用场景。那么好吧,我来举一个真实世界可能真会遇到的场景:</p>

<p>在当前分布式系统大行其道的今天,可能我们需要将系统每个函数调用时间记录下来,即<code>函数A--&gt;函数B--&gt;函数C--&gt;函数n</code>我们想在每个函数入口和出口打点,这样我们就能够将这个调用栈串联起来</p>

<p>假设说我们的原系统是这样的:</p>

<p>```ruby
class MyClass
  def hello(to)
    puts “Hello #{to}”
    self.talk to
  end
  def talk(to)
    puts “Talk to #{to}”
  end
end</p>

<p>MyClass.new.hello “jason”
# 输出为:
# Hello jason
# Talk to jason
```</p>

<p>很简单,我们也可以利用元编程的技术,用打点进出逻辑将所有函数包裹起来即可,也打这么一个补丁:</p>

<p><code>ruby
MyClass.class_eval do
  self.instance_methods(false).each do |mtd|
   alias_method "old_#{mtd}",mtd
   define_method mtd do |*args|
     puts "==========Enter #{mtd}@#{Time.now}=========="
     send "old_#{mtd}",*args
     puts "==========Leave #{mtd}@#{Time.now}=========="
   end
  end
end
</code></p>

<p>再次运行原程序,输出则变成:</p>

<p><code>
==========Enter hello@2017-08-02 23:23:25 +0800==========
Hello jason
==========Enter talk@2017-08-02 23:23:25 +0800==========
Talk to jason
==========Leave talk@2017-08-02 23:23:25 +0800==========
==========Leave hello@2017-08-02 23:23:25 +0800==========
</code></p>

<p>毫无疑问,不借助元编程的能力,也有各种解决这个问题的办法,但是如果你懂得这项技术,那么你会发现问题可以被解决得如此优雅,不用侵入到原代码的任何逻辑,就可以修改代码逻辑。试想下如果你想修改的逻辑是第三方库的代码, 而你甚至没有他们的源码,此时如果没有元编程的能力,是很难做出逻辑调整的。</p>

<h2 id="section-5">元编程改变了什么</h2>
<p>回到感性的部分,为什么向没有接触过元编程的人那么难以解释这个概念呢?其实正是因为这个概念本身就处于受众知识网络之外,所以当试图使用类比推导来描述时很容易使得这个概念越发让人迷惑。</p>

<p>那么了解这个概念之后,它到底改变了我什么思考角度呢?其实是看问题不再那么理所当然,面临一个问题时亦或者是已经拿到解决方案了,还会反向质疑自己,是否存在一种可能性,这种可能性甚至是超越自身知识范畴的,或者是和自己思维习惯相悖离的,而这种可能性很可能就是更优雅的解决方案。</p>

<p>除了思考的角度,对编码工作本身有什么实质性的作用吗?很遗憾,可能并没有。生产环境中的C,java,golang等等开发,很难用到这项技术,甚至于即便你处在某个非常极客的公司,使用了ruby/lisp作为生产语言,泛滥使用元编程也会直接导致项目的不可维护,导致最终项目leader将元编程作为禁术封印起来。但这些都不应该成为阻碍你了解它的理由,拓宽自身的视野,这更重要。</p>

<h2 id="section-6">写在最后</h2>
<p>最后,我还是以元编程界一个禅语论道结束吧:</p>

<p>编程弟子在跟随元编程大师一年后,终于掌握了所有的元编程能力。秋意微凉,师徒二人于树下盘坐,弟子回想所学,愈发迷惑,问道: 师傅, 我还是不明白,到底什么是元编程?</p>

<p>树上飘落最后一片秋叶,老禅师睁开眼,轻声一叹:孩子,这世上哪有什么元编程,就是编程啊。</p>

<p>弟子顿悟,乃成…</p>

<p>P.S. 你真的不觉得人工智能的基础之一就是元编程吗? 机器学习总结规律,元编程再将这些规律内化,自身改变自身逻辑,这不就是AI进化的基础吗。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于后台任务]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/05/27/guan-yu-hou-tai-ren-wu/"/>
    <updated>2015-05-27T17:16:34+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/05/27/guan-yu-hou-tai-ren-wu</id>
    <content type="html"><![CDATA[<h3 id="sidekiq">关于sidekiq</h3>
<p>在做ruby开发时，通常会遇到耗时操作的处理，sidekiq由于其使用简单，性能强劲，所以常被用来作为Ruby应用的后台任务的执行引擎。不过sidekiq有个令人头疼的问题，就是任务提交到后台异步执行后，对于其状态的监测和管理就成为很大的问题。</p>

<!--more-->

<p>sidekiq的wiki上也贴出了很多相关执行管理工具，sidekiq-promise是个人最喜欢的一个，其异步回调的风格和js的风格非常像，使用起来非常友好。</p>

<h3 id="sidekiq-promise">sidekiq-promise</h3>
<p>这里的例子直接来源于其github的readme:</p>

<p>```ruby demo.rb
class ProcessWorker
  include Sidekiq::Promise</p>

<p>def perform file_to_process
    UnzipWorker.as_promise(file_to_process).then do |dir|
      MrDarcy.all_promises do
        dir.entries.map do |file|
          ImageThumbnailWorker.as_promise(file)
        end
      end
    end.then do
      UserNotificationMailer.all_images_processed
    end
  end
end
```</p>

<p>简述: UnzipWorker会解压文件，然后将解压得到的每个文件分发给ImageThumbnailWorker去创建压缩图，等待所有压缩完成后再发送通知邮件，非常简洁漂亮。</p>

<ul>
  <li>将worker里的<code>include Sidekiq::Worker</code>替换成<code>include Sidekiq::Promise</code>即可。</li>
  <li>
    <p>如果要获取worker的输出，则调用<code>ProcessWorker.as_promise(arguments)</code>即可，在then block中获取执行结果，这个结果即<code>perform</code>方法的返回值。</p>
  </li>
  <li><code>sidekiq-promise</code>使用了<code>MrDarcy</code>，所以提供了一个很有意思的方法</li>
</ul>

<p><code>ruby
MrDarcy.all_promises do
  [promise1,promise2]
end
</code></p>

<p><code>MrDarcy.all_promises</code>的块会等待其中列表的每一个promise完成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效读取excel]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/05/25/gao-xiao-du-qu-excel/"/>
    <updated>2015-05-25T11:11:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/05/25/gao-xiao-du-qu-excel</id>
    <content type="html"><![CDATA[<p>前面介绍ruby写excel文件的一个很cool的gem包<code>axlsx</code>,这里介绍另一个高效读取excel的包<code>creek</code>。</p>

<p>一个读一个写，ruby轻松搞定execel处理。
<!-- more --></p>

<h4 id="section">安装</h4>
<p><code>bash
gem install creek
</code></p>

<h4 id="section-1">使用</h4>
<p><code>creek</code>本身的使用非常简单:</p>

<p>```ruby creek_demo.rb
require ‘creek’
creek = Creek::Book.new “specs/fixtures/sample.xlsx”
sheet= creek.sheets[0]</p>

<h1 id="size">注:获取行数不能用size方法</h1>
<p>puts sheet.rows.count # =&gt; 100</p>

<p>sheet.rows.each do |row|
  puts row # =&gt; {“A1”=&gt;”Content 1”, “B1”=&gt;nil, C1”=&gt;nil, “D1”=&gt;”Content 3”}
end</p>

<p>sheet.rows_with_meta_data.each do |row|
  puts row # =&gt; {“collapsed”=&gt;”false”, “customFormat”=&gt;”false”, “customHeight”=&gt;”true”, “hidden”=&gt;”false”, “ht”=&gt;”12.1”, “outlineLevel”=&gt;”0”, “r”=&gt;”1”, “cells”=&gt;{“A1”=&gt;”Content 1”, “B1”=&gt;nil, C1”=&gt;nil, “D1”=&gt;”Content 3”}}
end</p>

<p>sheet.state   # =&gt; ‘visible’
sheet.name    # =&gt; ‘Sheet1’
sheet.rid     # =&gt; ‘rId2’
```
#### 性能
读取并遍历一个16M左右17608行的xlsx文件，benchmark:</p>

<p><code>bash
--------------- total: 84.040000sec   ----------------
  user     system      total        real
 84.920000   0.680000  85.600000 ( 86.084133)
</code></p>

<p>P.S. 无法和其他读取excel的gem做对比，因为试着做对比测试时发现其他gem根本卡在读取操作那不动了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rvm和rbenv环境变量冲突导致无法安装gem包]]></title>
    <link href="http://qjpcpu.github.io/blog/2015/01/05/rvmhe-rbenvhuan-jing-bian-liang-chong-tu-dao-zhi-wu-fa-an-zhuang-gembao/"/>
    <updated>2015-01-05T18:11:47+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2015/01/05/rvmhe-rbenvhuan-jing-bian-liang-chong-tu-dao-zhi-wu-fa-an-zhuang-gembao</id>
    <content type="html"><![CDATA[<h2 id="section">背景</h2>
<p>root环境用rvm安装了ruby，但我需要在用户环境重装ruby，而且个人喜欢用rbenv，这就导致了我安装了rbenv的gem后，没有权限安装gem包。</p>

<!-- more -->

<h2 id="resolve">resolve</h2>
<p>这种情况是rvm强制设置了<code>GEM_HOME</code>导致的，可以<code>gem env</code>查看：</p>

<pre><code>jason@mac:~$ gem env
RubyGems Environment:
  - RUBYGEMS VERSION: 2.0.14
  - RUBY VERSION: 2.0.0 (2014-11-13 patchlevel 598) [x86_64-linux]
  - INSTALLATION DIRECTORY: /usr/local/rvm/gems/ruby-2.0.0-p353
  - RUBY EXECUTABLE: /home/jason/.rbenv/versions/2.0.0-p598/bin/ruby
  - EXECUTABLE DIRECTORY: /usr/local/rvm/gems/ruby-2.0.0-p353/bin
  - RUBYGEMS PLATFORMS:
    - ruby
    - x86_64-linux
  - GEM PATHS:
     - /usr/local/rvm/gems/ruby-2.0.0-p353
     - /home/jason/.rbenv/versions/2.0.0-p598/lib/ruby/gems/2.0.0/
  - GEM CONFIGURATION:
     - :update_sources =&gt; true
     - :verbose =&gt; true
     - :backtrace =&gt; false
     - :bulk_threshold =&gt; 1000
  - REMOTE SOURCES:
     - https://rubygems.org/
</code></pre>

<p>可见GEM PATHS里优先选择了rvm的gem路径，所以需要重设GEM_HOME</p>

<pre><code>export GEM_HOME=$HOME/.rbenv/versions/2.0.0-p598/lib/ruby/gems/2.0.0/
</code></pre>

<p>但是，最好的办法是在~/.bash_profile(centos,ubuntu中是.bashrc)中<code>eval "$(rbenv init -)"</code>前加上：</p>

<pre><code>unset GEM_PATH
unset GEM_HOME
</code></pre>

<p>这样也可以清除rvm的设置，使rbenv的变量被正确设置.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[compile ruby from source]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/07/compile-ruby-from-source/"/>
    <updated>2014-03-07T15:35:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/07/compile-ruby-from-source</id>
    <content type="html"><![CDATA[<h3 id="section">下载需要的软件包</h3>

<ul>
  <li><a href="http://www.openssl.org/source/">openssl</a></li>
  <li><a href="http://pyyaml.org/wiki/PyYAML">yaml</a></li>
  <li><a href="https://www.ruby-lang.org">ruby</a></li>
  <li><a href="http://sqlite.org/2014/sqlite-autoconf-3080301.tar.gz">sqlite3</a>(可选)</li>
  <li><a href="http://pkgconfig.freedesktop.org/releases/pkg-config-0.28.tar.gz">pkg-config</a>(可选)</li>
</ul>

<!--more-->

<p>假设需要安装的ruby目录为<code>/path/to/ruby_dir</code></p>

<pre><code>export RUBY_DEST=/path/to/ruby_dir
</code></pre>

<h3 id="openssl">编译openssl</h3>

<pre><code>./config --prefix=$RUBY_DEST  shared
make 
make install
</code></pre>

<h3 id="libyaml">编译libyaml</h3>

<pre><code>./configure --prefix=$RUBY_DEST
make
make install
</code></pre>

<h3 id="pkg-configrubyunknown-keyword-url-in-rubydesttmppc">编译pkg-config(如果版本过低需要安装，否则编译ruby会报错<code>Unknown keyword 'URL' in '.$RUBY_DEST.tmp.pc'</code>)</h3>

<pre><code>./configure --prefix=$RUBY_DEST         \
            --with-internal-glib  \
            --disable-host-tool
</code></pre>

<p>如果报错：</p>

<pre><code>gthread-posix.c: In function `g_system_thread_set_name':
gthread-posix.c:1175: error: `PR_SET_NAME' undeclared (first use in this function)
gthread-posix.c:1175: error: (Each undeclared identifier is reported only once
gthread-posix.c:1175: error: for each function it appears in.)
</code></pre>

<p>就需要在pkg源码目录下glib/glib/gthread.c添加：</p>

<pre><code>#define PR_SET_NAME    15               /* Set process name */
#define PR_GET_NAME    16               /* Get process name */
</code></pre>

<p>然后再继续编译</p>

<pre><code>make &amp;&amp; make install
</code></pre>

<h3 id="ruby">编译ruby</h3>

<p>先导入环境变量,否则ruby找不到ssl的链接目录</p>

<pre><code>export LD_LIBRARY_PATH=$RUBY_DEST/lib
export C_INCLUDE_PATH=$RUBY_DEST/include
</code></pre>

<p>开始编译ruby</p>

<pre><code>./configure --prefix=$RUBY_DEST --with-opt-dir=$RUBY_DEST
make
make install
</code></pre>

<h3 id="sqlite3">编译sqlite3(可选)</h3>

<h3 id="section-1">测试</h3>

<pre><code>$RUBY_DEST/bin/ruby -v #打印版本号，说明安装成功
export PATH=$PATH:$RUBY_DEST/bin
</code></pre>

]]></content>
  </entry>
  
</feed>
