<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Jason's space]]></title>
  <link href="http://qjpcpu.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2014-07-30T23:24:01+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[compile ruby from source]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/03/07/compile-ruby-from-source/"/>
    <updated>2014-03-07T15:35:02+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/03/07/compile-ruby-from-source</id>
    <content type="html"><![CDATA[<h3>下载需要的软件包</h3>

<ul>
<li><a href="http://www.openssl.org/source/">openssl</a></li>
<li><a href="http://pyyaml.org/wiki/PyYAML">yaml</a></li>
<li><a href="https://www.ruby-lang.org">ruby</a></li>
<li><a href="http://sqlite.org/2014/sqlite-autoconf-3080301.tar.gz">sqlite3</a>(可选)</li>
</ul>


<!--more-->


<p>假设需要安装的ruby目录为<code>/ruby</code></p>

<h3>编译openssl</h3>

<pre><code>./config --prefix=/ruby  shared
make 
make install
</code></pre>

<h3>编译libyaml</h3>

<pre><code>./configure --prefix=/ruby
make
make install
</code></pre>

<h3>编译ruby</h3>

<p>先导入环境变量,否则ruby找不到ssl的链接目录</p>

<pre><code>export LD_LIBRARY_PATH=/ruby/lib
export C_INCLUDE_PATH=/ruby/include
</code></pre>

<p>开始编译ruby</p>

<pre><code>./configure --prefix=/ruby --with-opt-dir=/ruby
make
make install
</code></pre>

<h3>编译sqlite3(可选)</h3>

<h3>测试</h3>

<pre><code>/ruby/bin/ruby -v #打印版本号，说明安装成功
export PATH=$PATH:/ruby/bin
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[axlsx报表工具(四)——条件格式化]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-si-tiao-jian-ge-shi-hua/"/>
    <updated>2014-02-15T00:47:04+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-si-tiao-jian-ge-shi-hua</id>
    <content type="html"><![CDATA[<h3>定义格式化操作</h3>

<p>条件格式化风格定义也是使用格式化定义语句add_style，不同的是必须将type指定为:dxf。</p>

<p>``` ruby</p>

<h1>define the style for conditional formatting</h1>

<p>profitable = book.styles.add_style( :fg_color => &ldquo;FF428751&rdquo;, :type => :dxf )
unprofitable = book.styles.add_style( :fg_color => &ldquo;FF0000&rdquo;, :type => :dxf )
```</p>

<p>条件格式化有四种类型cellIs，colorScale，dataBar，iconSet。</p>

<!-- more -->


<h3>cellIs</h3>

<p>cellIs条件格式化使用得较为普遍，即对满足条件的单元格更改字体颜色，字体大小，背景色等等。</p>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=0cc20173b8a1cd1101b672258929b9c1/d000baa1cd11728bb30e6961cafcc3cec3fd2c56.jpg?referer=3c8b0130af4bd1135dda82028c4c&amp;x=.jpg" alt="image" /></p>

<p>对于B列，如果数值大于100000表示盈利，则更改字体颜色；对于亏损的，则在C列中将百分比小于100%的赤字显示。</p>

<p>``` ruby
book.add_worksheet(:name => &ldquo;Cell Is&rdquo;) do |ws|</p>

<h1>产生20行数据</h1>

<p>ws.add_row [&ldquo;Previous Year Quarterly Profits (JPY)&rdquo;]
ws.add_row [&ldquo;Quarter&rdquo;, &ldquo;Profit&rdquo;, &ldquo;% of Total&rdquo;]
offset = 3
rows = 20
offset.upto(rows + offset) do |i|
 ws.add_row [&ldquo;Q#{i}&rdquo;, 10000<em>((rows/2-i) * (rows/2-i)), &ldquo;=100</em>B#{i}/SUM(B3:B#{rows+offset})&rdquo;], :style=>[nil, money, percent]
end</p>

<h1>格式化条件>100000</h1>

<p>ws.add_conditional_formatting(&ldquo;B3:B100&rdquo;, { :type => :cellIs, :operator => :greaterThan, :formula => &ldquo;100000&rdquo;, :dxfId => profitable, :priority => 1 })</p>

<h1>格式化条件0.00%&lt;x&lt;100%</h1>

<p>ws.add_conditional_formatting(&ldquo;C3:C100&rdquo;, { :type => :cellIs, :operator => :between, :formula => [&ldquo;0.00%&rdquo;,&ldquo;100.00%&rdquo;], :dxfId => unprofitable, :priority => 1 })
end
```</p>

<p>add_conditional_formatting方法指定条件格式化，类型type是cellIs，条件由operator和formula共同指定，dxfId就是我们上面定义的格式化操作，priority优先级数值越小，优先级越高。</p>

<h3>colorScale</h3>

<p><img src="http://h.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=3d1d3870938fa0ec7bc7640816ac28d3/f603918fa0ec08fa0ef0e9e45bee3d6d54fbda85.jpg?referer=6b56cc4859b5c9ea3be437d3269b&amp;x=.jpg" alt="image" /></p>

<p>colorScale是以颜色渐变的方式来格式化表格。</p>

<p>```ruby
book.add_worksheet(:name => &ldquo;Color Scale&rdquo;) do |ws|
  ws.add_row [&ldquo;Previous Year Quarterly Profits (JPY)&rdquo;]
  ws.add_row [&ldquo;Quarter&rdquo;, &ldquo;Profit&rdquo;, &ldquo;% of Total&rdquo;]
  offset = 3
  rows = 20
  offset.upto(rows + offset) do |i|</p>

<pre><code>ws.add_row ["Q#{i}", 10000*((rows/2-i) * (rows/2-i)), "=100*B#{i}/SUM(B3:B#{rows+offset})"], :style=&gt;[nil, money, percent]
</code></pre>

<p>  end</p>

<p>  color_scale = Axlsx::ColorScale.new
  ws.add_conditional_formatting(&ldquo;B3:B100&rdquo;, { :type => :colorScale, :operator => :greaterThan, :formula => &ldquo;100000&rdquo;, :dxfId => profitable, :priority => 1, :color_scale => color_scale })
end
```</p>

<p>大于100000的单元格颜色越来越深，而小于的单元格越来越浅。</p>

<h3>dataBar</h3>

<p>dataBar格式化能够在单元格中同时显示数值和一个柱形图，非常直观漂亮。</p>

<p><img src="http://f.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=435a969d3f6d55fbc1c676235d193e77/58ee3d6d55fbb2fb26dba2514d4a20a44723dc85.jpg?referer=b0f4797338f33a87c77a342a1c9b&amp;x=.jpg" alt="image" /></p>

<p>```ruby
book.add_worksheet(:name => &ldquo;Data Bar&rdquo;) do |ws|
  ws.add_row [&ldquo;Previous Year Quarterly Profits (JPY)&rdquo;]
  ws.add_row [&ldquo;Quarter&rdquo;, &ldquo;Profit&rdquo;, &ldquo;% of Total&rdquo;]
  offset = 3
  rows = 20
  offset.upto(rows + offset) do |i|</p>

<pre><code>ws.add_row ["Q#{i}", 10000*((rows/2-i) * (rows/2-i)), "=100*B#{i}/SUM(B3:B#{rows+offset})"], :style=&gt;[nil, money, percent]
</code></pre>

<p>  end</p>

<p>  data_bar = Axlsx::DataBar.new
  ws.add_conditional_formatting(&ldquo;B3:B100&rdquo;, { :type => :dataBar, :dxfId => profitable, :priority => 1, :data_bar => data_bar })
end
```</p>

<h3>iconSet</h3>

<p>iconSet方式是对于满足条件和不满足条件的单元格分别使用不同的图标。</p>

<p><img src="http://d.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=c718e589e4cd7b89ed6c3a863f1f339a/34fae6cd7b899e511cacdf5740a7d933c8950d56.jpg?referer=a0046022fa1986181850dab46b4d&amp;x=.jpg" alt="image" /></p>

<p>```ruby
book.add_worksheet(:name => &ldquo;Icon Set&rdquo;) do |ws|
  ws.add_row [&ldquo;Previous Year Quarterly Profits (JPY)&rdquo;]
  ws.add_row [&ldquo;Quarter&rdquo;, &ldquo;Profit&rdquo;, &ldquo;% of Total&rdquo;]
  offset = 3
  rows = 20
  offset.upto(rows + offset) do |i|</p>

<pre><code>ws.add_row ["Q#{i}", 10000*((rows/2-i) * (rows/2-i)), "=100*B#{i}/SUM(B3:B#{rows+offset})"], :style=&gt;[nil, money, percent]
</code></pre>

<p>  end</p>

<p>  icon_set = Axlsx::IconSet.new
  ws.add_conditional_formatting(&ldquo;B3:B100&rdquo;, { :type => :iconSet, :dxfId => profitable, :priority => 1, :icon_set => icon_set })
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[axlsx报表工具(三)创建图表]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-san-chuang-jian-tu-biao/"/>
    <updated>2014-02-15T00:42:48+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-san-chuang-jian-tu-biao</id>
    <content type="html"><![CDATA[<h3>饼图</h3>

<p>axlsx创建饼状图非常简单，上图：</p>

<p><img src="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=4ccd2d6c4334970a4373102aa5f1a0f5/fc1f4134970a304ec10145b9d3c8a786c9175c56.jpg?referer=ddc5668e5066d016270eab189c4c&amp;x=.jpg" alt="image" /></p>

<!-- more -->


<p>```ruby
wb.add_worksheet(:name => &ldquo;Pie Chart&rdquo;) do |sheet|
  sheet.add_row [&ldquo;First&rdquo;, &ldquo;Second&rdquo;, &ldquo;Third&rdquo;, &ldquo;Fourth&rdquo;]
  sheet.add_row [1, 2, 3, 4]
  sheet.add_chart(Axlsx::Pie3DChart, :start_at => [0,2], :end_at => [5, 15], :title=> &lsquo;dark corner here&rsquo;) do |chart|</p>

<pre><code>chart.add_series :data =&gt; sheet["A2:D2"], :labels =&gt; sheet["A1:D1"]    #数据点序列及其名称
chart.d_lbls.show_val = true       #是否在饼状图中显示数值
chart.d_lbls.show_percent = true    #是否在饼状图中显示所占百分比
chart.d_lbls.d_lbl_pos = :outEnd    #图例位于图标外部
chart.d_lbls.show_leader_lines = true  #是否显示数据和数值间的指示线
</code></pre>

<p>  end
end
```</p>

<p>在add_chart方法中，第一个参数指定图标的类型Aslsx::Pie3DChart，而start_at和end_at分别指定图表的左上角单元格和右下角+1单元格，注意图中饼图的右下角单元格是E15即[4,14]，而end_at是[5,15]，所以称为右下角+1单元格，此外注意和excel编号不同，这里单元格序号是从0开始的。</p>

<ul>
<li>chart.add_series方法是创建图表的主要方法，用来添加点序列的值及其名称。</li>
<li>chart.d_lbls是Data Lables的缩写，顾名思义就是数据标签。</li>
</ul>


<p>饼图中每块扇形的颜色是自动生成的，如果想要手动指定也是可以的：</p>

<p><code>ruby
chart.add_series :data =&gt; sheet["A2:D2"], :labels =&gt; ["A1:D1"], :colors =&gt; ['FF0000', '00FF00', '0000FF']
</code></p>

<h3>折线图</h3>

<p><img src="http://c.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=7fd401bba586c9170c03523cf90601f2/d0c8a786c9177f3e8d17194e72cf3bc79f3d5656.jpg?referer=7d35047437fae6cd55a39e51924c&amp;x=.jpg" alt="image" /></p>

<p><code>ruby
wb.add_worksheet(:name =&gt; "Line Chart") do |sheet|
 sheet.add_row ['l1','l2','l3','l4']
 sheet.add_row [1, 2, 100, '=sum(A2:C2)']
 sheet.add_chart(Axlsx::Line3DChart, :start_at =&gt; [0,2], :end_at =&gt; [8, 17], :title =&gt; "Chart") do |chart|
   chart.add_series :data =&gt; sheet["A2:D2"], :labels =&gt; sheet["A1:D1"], :title =&gt; 'bob'
   chart.d_lbls.show_val = true
   chart.d_lbls.show_cat_name = true
   chart.catAxis.tick_lbl_pos = :none   #不在横轴上显示坐标
 end
end
</code></p>

<p>chart.d_lbls.show_val表示显示数值，而chart.d_lbls.show_cat_name表示显示每个数值的名称。</p>

<h3>柱形图</h3>

<p><img src="http://d.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=4cc5e74b1d30e924cba49c347c331f3b/29381f30e924b899e2cc837b6c061d950b7bf685.jpg?referer=473e18b979cb0a46dc35bf09329b&amp;x=.jpg" alt="image" /></p>

<p>``` ruby
wb.add_worksheet(:name => &ldquo;Bar Chart&rdquo;) do |sheet|
  sheet.add_row [&ldquo;A Simple Bar Chart&rdquo;]
  sheet.add_row [&ldquo;First&rdquo;, &ldquo;Second&rdquo;, &ldquo;Third&rdquo;]
  sheet.add_row [1, 2, 3]
  sheet.add_chart(Axlsx::Bar3DChart, :start_at => &ldquo;A4&rdquo;, :end_at => &ldquo;F17&rdquo;) do |chart|</p>

<pre><code>chart.add_series :data =&gt; sheet["A3:C3"], :labels =&gt; sheet["A2:C2"], :title =&gt; sheet["A1"]
chart.valAxis.label_rotation = -45
chart.catAxis.label_rotation = 45
chart.d_lbls.d_lbl_pos = :outEnd
chart.d_lbls.show_val = true

chart.catAxis.tick_lbl_pos = :none
</code></pre>

<p>  end
  sheet.add_chart(Axlsx::Bar3DChart, :barDir => :col,:start_at => &ldquo;A17&rdquo;, :end_at => &ldquo;F30&rdquo;) do |chart| #barDir指定方向:bar或:col</p>

<pre><code>chart.add_series :data =&gt; sheet["A3:C3"], :labels =&gt; sheet["A2:C2"], :title =&gt; sheet["A1"]
chart.valAxis.label_rotation = -45
chart.catAxis.label_rotation = 45
chart.d_lbls.d_lbl_pos = :outEnd
chart.d_lbls.show_val = true

chart.catAxis.tick_lbl_pos = :none
</code></pre>

<p>  end
 end
```</p>

<p>这里的图表位置start_at和end_at使用了和上面不同的方式，直接使用单元格名称如A4，F17，但end_at仍然是右下角单元格+1。其他代码的自解释性很强，无须赘述了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[axlsx报表工具(二)格式化为美观的表格]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-er-ge-shi-hua-wei-mei-guan-de-biao-ge/"/>
    <updated>2014-02-15T00:38:10+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-er-ge-shi-hua-wei-mei-guan-de-biao-ge</id>
    <content type="html"><![CDATA[<h3>基础知识</h3>

<p>axlsx的格式化使用Aslsx::Styles类来处理，通常使用Axlsx::Styles#add_style 帮助方法来添加格式，该方法定义：</p>

<pre><code>(Integer) add_style(options = {})
</code></pre>

<!-- more -->


<p>所有的格式设置操作都在options这个hash中指定，该hash的键名非常好记，下面是常见的键值列表：</p>

<pre><code>Options Hash (options):
fg_color (String) — 字体颜色，如：FFFF0000
sz (Integer) — 字体大小
b (Boolean) — 是否粗体
i (Boolean) — 是否斜体
u (Boolean) — 是否加下划线
strike (Boolean) — 是否加删除线
shadow (Boolean) — 是否加阴影
charset (Integer) — 字符集，可选的字符集列表：
0   ANSI_CHARSET
1   DEFAULT_CHARSET
2   SYMBOL_CHARSET
77  MAC_CHARSET
128 SHIFTJIS_CHARSET
129 HANGUL_CHARSET
130 JOHAB_CHARSET
134 GB2312_CHARSET
136 CHINESEBIG5_CHARSET
161 GREEK_CHARSET
162 TURKISH_CHARSET
163 VIETNAMESE_CHARSET
177 HEBREW_CHARSET
178 ARABIC_CHARSET
186 BALTIC_CHARSET
204 RUSSIAN_CHARSET
222 THAI_CHARSET
238 EASTEUROPE_CHARSET
255 OEM_CHARSET


family (Integer) — 字体，可选字体：
0 Not applicable.
1 Roman
2 Swiss
3 Modern
4 Script
5 Decorative
6..14 Reserved for future use


font_name (String) — 字体名称
num_fmt (Integer) — 数字格式：可选格式：
1 0
2 0.00
3 #,##0
4 #,##0.00
5 $#,##0_);($#,##0)
6 $#,##0_);[Red]($#,##0)
7 $#,##0.00_);($#,##0.00)
8 $#,##0.00_);[Red]($#,##0.00)
9 0%
10 0.00%
11 0.00E+00
12 # ?/?
13 # ??/??
14 m/d/yyyy
15 d-mmm-yy
16 d-mmm
17 mmm-yy
18 h:mm AM/PM
19 h:mm:ss AM/PM
20 h:mm
21 h:mm:ss
22 m/d/yyyy h:mm
37 #,##0_);(#,##0)
38 #,##0_);[Red](#,##0)
39 #,##0.00_);(#,##0.00)
40 #,##0.00_);[Red](#,##0.00)
45 mm:ss
46 [h]:mm:ss
47 mm:ss.0
48 ##0.0E+0
49 @


format_code (String) — 自定义格式如'yyyy-mm-dd'，如果设置了该值，则num_fmt将被忽略.
border (Integer|Hash) — 边框样式.
bg_color (String) — 单元格背景色
hidden (Boolean) — 是否隐藏单元格
locked (Boolean) — 是否锁定单元格
type (Symbol) — 风格类型，可选的类型有[:dxf, :xf]. :xf事默认类型
alignment (Hash) — 对齐.该hash的包括：
horizontal (Symbol)，该键对应的值包括有：
:general
:left
:center
:right
:fill
:justify
:centerContinuous
:distributed
vertical (Symbol)，该键对应的值有：
:top
:center
:bottom
:justify
:distributed
textRotation (Integer)
wrapText (Boolean)
indent (Integer)
relativeIndent (Integer)
justifyLastLine (Boolean)
shrinkToFit (Boolean)
readingOrder (Integer)
</code></pre>

<h3>格式化报表示例</h3>

<p>格式化报表是以单元格为单位执行的，通常在添加行的时候，在add_row第二个hash参数里指定：</p>

<pre><code>sheet.add_row ['a', "b"], :style =&gt; [nil, header] #header是创建好的style
#or
sheet.add_row ["a', "b"], :style =&gt; header
</code></pre>

<p>如果style是一个列表，那么列表里每一个格式对应于行内每个单元格，也可以像第二行代码那样为整行指定同一种格式。</p>

<p><img src="http://b.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=9b79859e2c738bd4c021b23491b0f6eb/4bed2e738bd4b31cc6cc6ef885d6277f9f2ff885.jpg?referer=f3368c656f224f4a0e8e4723389b&amp;x=.jpg" alt="image" /></p>

<p>下面是创建如图报表的部分代码：</p>

<p>``` ruby
require &lsquo;axlsx&rsquo;</p>

<p>Axlsx::Package.new do |p|
  p.workbook do |wb|</p>

<pre><code>styles = wb.styles
header     = styles.add_style :bg_color =&gt; "FFFF33",:fg_color=&gt;"0033CC", :sz =&gt; 16, :b =&gt; true, :alignment =&gt; {:horizontal =&gt; :center}
tbl_header = styles.add_style :bg_color=&gt;"99FF33",:b =&gt; true, :alignment =&gt; { :horizontal =&gt; :center }
ind_header = styles.add_style :bg_color =&gt; "FFDFDEDF", :b =&gt; true, :alignment =&gt; {:indent =&gt; 1}
col_header = styles.add_style :bg_color =&gt; "FFDFDEDF", :b =&gt; true, :alignment =&gt; { :horizontal =&gt; :center }
label      = styles.add_style :alignment =&gt; { :indent =&gt; 1 }
money      = styles.add_style :num_fmt =&gt; 5
t_label    = styles.add_style :b =&gt; true, :bg_color =&gt; "FFDFDEDF"
t_money    = styles.add_style :b =&gt; true, :num_fmt =&gt; 5, :bg_color =&gt; "FFDFDEDF"

wb.add_worksheet do |sheet|
  sheet.add_row               #添加空行
  sheet.add_row [nil, "College Budget"], :style =&gt; [nil, header]        #标题，大字体居中
  sheet.add_row
  sheet.add_row [nil, "What's coming in this month.", nil, nil, "How am I doing"], :style =&gt; tbl_header
  sheet.add_row [nil, "Item", "Amount", nil, "Item", "Amount"], :style =&gt; [nil, ind_header, col_header, nil, ind_header, col_header]
  sheet.add_row [nil, "Estimated monthly net income", 500, nil, "Monthly income", "=C9"], :style =&gt; [nil, label, money, nil, label, money]
  #省略部分代码
  %w(B4:C4 E4:F4 B11:C11 E11:F11 B2:F2).each { |range| sheet.merge_cells(range) }
  sheet.column_widths 2, nil, nil, 2, nil, nil, 2
end
</code></pre>

<p>  end
  p.use_shared_strings = true
  p.serialize &lsquo;styles.xlsx&rsquo;
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[axlsx报表工具(一)安装及入门]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-yi-an-zhuang-ji-ru-men/"/>
    <updated>2014-02-15T00:34:19+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/15/axlsxbao-biao-gong-ju-yi-an-zhuang-ji-ru-men</id>
    <content type="html"><![CDATA[<h3>安装</h3>

<p>axlsx是一个基于ruby的Office Open XML Spreadsheet报表生成工具，下图是它生成的一个报表截图</p>

<p><img src="https://raw.github.com/randym/axlsx/master/examples/sample.png" alt="axlsx" /></p>

<!-- more -->


<p>安装axlsx和安装其他gem一样：</p>

<pre><code>$ gem install axlsx
</code></pre>

<h3>创建第一个报表</h3>

<p>axlsx使用的对象和office文档使用的对象完全一样，workbook代表一个文档，worksheet代表一张表，row和cell代表行和单元格，基本上所有的对象顾名思义即可，而不需要了解文档ECMA规范。</p>

<p>比如要创建一张如图所示的报表：</p>

<p><img src="http://c.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=0b461ccc6e81800a6ae5890b810e42c7/cdbf6c81800a19d86620614631fa828ba61e4656.jpg?referer=5d8a74b17f1ed21b20de1bd5a24c&amp;x=.jpg" alt="image" /></p>

<p>``` ruby
require &lsquo;axlsx&rsquo;</p>

<p>p = Axlsx::Package.new
wb = p.workbook</p>

<p>wb.add_worksheet(:name => &ldquo;Basic Worksheet&rdquo;) do |sheet|
  sheet.add_row [&ldquo;First Column&rdquo;, &ldquo;Second&rdquo;, &ldquo;Third&rdquo;,&ldquo;Total&rdquo;]
  sheet.add_row [1, 2, 3,&ldquo;=SUM(A2:C2)&rdquo;]
  sheet.add_row [&lsquo;This is a very very long sentence.&rsquo;]
  sheet.merge_cells &ldquo;A3:D3&rdquo;
end</p>

<p>p.serialize &lsquo;basic.xlsx&rsquo;
```</p>

<p>代码非常简单明了，创建worksheet，再一行行添加数据，在添加第二行数据时甚至使用了一个求和函数，所以我们使用过的Excel的知识完全可以直接拿过来使用，甚至对于较长的内容可以合并单元格，但这里没有居中显示所以还不够美观，美观的事情可以格式化来解决，不过这是下一篇的内容了。</p>

<p>最后一行是将报表序列化到xlsx格式的文件，该文件可以用MSOffice直接打开查看。</p>
]]></content>
  </entry>
  
</feed>
