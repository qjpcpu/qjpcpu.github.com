<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c-sharp | Jason's space]]></title>
  <link href="http://qjpcpu.github.io/blog/categories/c-sharp/atom.xml" rel="self"/>
  <link href="http://qjpcpu.github.io/"/>
  <updated>2018-09-02T16:28:49+08:00</updated>
  <id>http://qjpcpu.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    <email><![CDATA[qjpcpu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在Linq中使用委托作为相等比较]]></title>
    <link href="http://qjpcpu.github.io/blog/2014/02/14/zai-linqzhong-shi-yong-wei-tuo-zuo-wei-xiang-deng-bi-jiao/"/>
    <updated>2014-02-14T14:13:30+08:00</updated>
    <id>http://qjpcpu.github.io/blog/2014/02/14/zai-linqzhong-shi-yong-wei-tuo-zuo-wei-xiang-deng-bi-jiao</id>
    <content type="html"><![CDATA[<p>Linq中的操作符的相等比较都使用IEqualityComparer<t>作为判断依据，常见的使用该接口的操作符有：</t></p>

<p><code>csharp
Distinct&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)
Contains&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, TSource, IEqualityComparer&lt;TSource&gt;)
</code></p>

<p>使用该接口固然可以进行自定义的相等比较，但若对同一类型要做多种相等比较则需要继承实现IEqualityComparer<t>接口的多个子类型，这对于像我这样懒惰的程序员是很难接受的。
<!-- more -->
如果有一个Person类定义如下：</t></p>

<p><code>csharp
class Person
{
  public string Name { get; set; }
  public int Age { get; set; }
}
</code></p>

<p>而有一个Person[]数组名为people，在代码中我希望这样使用Linq查询：</p>

<p><code>csharp
var age = people.Distinct((x, y) =&gt; x.Age == y.Age);
var nameandage = people.Distinct((x, y) =&gt; (x.Age == y.Age) &amp;&amp; (x.Name==y.Name))
</code></p>

<p>利用委托实现自定义的相等操作，不论是灵活性还是可读性都要好得多，下面我就要为了写成这样的代码而做做工作了。
首先，要定义一个泛型类去实现IEqualityComparer<t>接口，此外，对该类的要求是要能接受委托比较器，下面即是实现的代码：</t></p>

<p><code>csharp
public static class MyLinqOperandExtensions
{
    private class DelegateComparer&lt;T&gt; : IEqualityComparer&lt;T&gt;
    {
        private readonly Func&lt;T, T, bool&gt; comparator;
        public DelegateComparer(Func&lt;T, T, bool&gt; comparator)
        {
            this.comparator = comparator;
        }
        public bool Equals(T x, T y)
        {
            return comparator(x, y);
        }
        public int GetHashCode(T obj)
        {
            return 1;
        }
    }
}
</code></p>

<p>然后，就是需要一个自定义的Distinct操作符，为了和.NET的操作符区分开来，我是用MyDistinct作为新名称：</p>

<p><code>csharp
public static class MyLinqOperandExtensions
{
    public static IEnumerable&lt;T&gt; MyDistinct&lt;T&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, T, bool&gt; comparator)
    {
        if (source == null)
            throw new ArgumentNullException("source");
        if (comparator == null)
            throw new ArgumentNullException("comparator");
        return source.Distinct(new DelegateComparer&lt;T&gt;(comparator));
    }
}
</code></p>

<p>现在，我们就可以使用委托来使用Distinct操作了，如下示例：</p>

<p><code>csharp
Person[] people = new Person[] {
     new Person{Name="Jack",Age=12 },
     new Person{Name="Linq",Age=22 },
     new Person{Name="Tom",Age=22 },
     new Person{Name="Tom",Age=12 },
     new Person{Name="Jack",Age=22 }
 };
 var name = people.MyDistinct((x, y) =&gt; x.Name == y.Name);
 foreach (var n in name)
     Console.WriteLine("{0} {1}", n.Name, n.Age);
 Console.WriteLine("----------------------");
 var age = people.MyDistinct((x, y) =&gt; x.Age == y.Age);
 foreach (var n in age)
     Console.WriteLine("{0} {1}", n.Name, n.Age);
 Console.WriteLine("----------------------");
 var nameandage = people.MyDistinct((x, y) =&gt; (x.Age == y.Age) &amp;&amp; (x.Name==y.Name));
 foreach (var n in nameandage)
  Console.WriteLine("{0} {1}", n.Name, n.Age);
</code></p>
]]></content>
  </entry>
  
</feed>
